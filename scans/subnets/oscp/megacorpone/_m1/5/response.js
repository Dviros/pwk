var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Fri, 19 Jun 2020 12:50:21 GMT\x0aServer: Apache/2.2.22 (Ubuntu)\x0aLast-Modified: Sun, 21 Aug 2016 15:21:43 GMT\x0aETag: \x22248-f9b-53a967d3298ce\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1421/1422\x0aContent-Length: 1422\x0aKeep-Alive: timeout=5, max=73\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/*!\x0a * Retina.js v1.1.0\x0a *\x0a * Copyright 2013 Imulus, LLC\x0a * Released under the MIT license\x0a *\x0a * Retina.js is an open source script that makes it easy to serve\x0a * high-resolution images to devices with retina displays.\x0a */\x0a(function() {\x0a\x0a  var root = (typeof exports == \x27undefined\x27 ? window : exports);\x0a\x0a  var config = {\x0a    // Ensure Content-Type is an image before trying to load @2x image\x0a    // https://github.com/imulus/retinajs/pull/45)\x0a    check_mime_type: true\x0a  };\x0a\x0a\x0a\x0a  root.Retina = Retina;\x0a\x0a  function Retina() {}\x0a\x0a  Retina.configure = function(options) {\x0a    if (options == null) options = {};\x0a    for (var prop in options) config[prop] = options[prop];\x0a  };\x0a\x0a  Retina.init = function(context) {\x0a    if (context == null) context = root;\x0a\x0a    var existing_onload = context.onload || new Function;\x0a\x0a    context.onload = function() {\x0a      var images = document.getElementsByTagName(\x22img\x22), retinaImages = [], i, image;\x0a      for (i = 0; i \x3c images.length; i++) {\x0a        image = images[i];\x0a        retinaImages.push(new RetinaImage(image));\x0a      }\x0a      existing_onload();\x0a    }\x0a  };\x0a\x0a  Retina.isRetina = function(){\x0a    var mediaQuery = \x22(-webkit-min-device-pixel-ratio: 1.5),\x5c\x0a                      (min--moz-device-pixel-ratio: 1.5),\x5c\x0a                      (-o-min-device-pixel-ratio: 3/2),\x5c\x0a                      (min-resolution: 1.5dppx)\x22;\x0a\x0a    if (root.devicePixelRatio \x3e 1)\x0a      return true;\x0a\x0a    if (root.matchMedia && root.matchMedia(mediaQuery).matches)\x0a      return true;\x0a\x0a    return false;\x0a  };\x0a\x0a\x0a  root.RetinaImagePath = RetinaImagePath;\x0a\x0a  function RetinaImagePath(path, at_2x_path) {\x0a    this.path = path;\x0a    if (typeof at_2x_path !== \x22undefined\x22 && at_2x_path !== null) {\x0a      this.at_2x_path = at_2x_path;\x0a      this.perform_check = false;\x0a    } else {\x0a      this.at_2x_path = path.replace(/\x5c.\x5cw+$/, function(match) { return \x22@2x\x22 + match; });\x0a      this.perform_check = true;\x0a    }\x0a  }\x0a\x0a  RetinaImagePath.confirmed_paths = [];\x0a\x0a  RetinaImagePath.prototype.is_external = function() {\x0a    return !!(this.path.match(/^https?\x5c:/i) && !this.path.match(\x27//\x27 + document.domain) )\x0a  }\x0a\x0a  RetinaImagePath.prototype.check_2x_variant = function(callback) {\x0a    var http, that = this;\x0a    if (this.is_external()) {\x0a      return callback(false);\x0a    } else if (!this.perform_check && typeof this.at_2x_path !== \x22undefined\x22 && this.at_2x_path !== null) {\x0a      return callback(true);\x0a    } else if (this.at_2x_path in RetinaImagePath.confirmed_paths) {\x0a      return callback(true);\x0a    } else {\x0a      http = new XMLHttpRequest;\x0a      http.open(\x27HEAD\x27, this.at_2x_path);\x0a      http.onreadystatechange = function() {\x0a        if (http.readyState != 4) {\x0a          return callback(false);\x0a        }\x0a\x0a        if (http.status \x3e= 200 && http.status \x3c= 399) {\x0a          if (config.check_mime_type) {\x0a            var type = http.getResponseHeader(\x27Content-Type\x27);\x0a            if (type == null || !type.match(/^image/i)) {\x0a              return callback(false);\x0a            }\x0a          }\x0a\x0a          RetinaImagePath.confirmed_paths.push(that.at_2x_path);\x0a          return callback(true);\x0a        } else {\x0a          return callback(false);\x0a        }\x0a      }\x0a      http.send();\x0a    }\x0a  }\x0a\x0a\x0a\x0a  function RetinaImage(el) {\x0a    this.el = el;\x0a    this.path = new RetinaImagePath(this.el.getAttribute(\x27src\x27), this.el.getAttribute(\x27data-at2x\x27));\x0a    var that = this;\x0a    this.path.check_2x_variant(function(hasVariant) {\x0a      if (hasVariant) that.swap();\x0a    });\x0a  }\x0a\x0a  root.RetinaImage = RetinaImage;\x0a\x0a  RetinaImage.prototype.swap = function(path) {\x0a    if (typeof path == \x27undefined\x27) path = this.path.at_2x_path;\x0a\x0a    var that = this;\x0a    function load() {\x0a      if (! that.el.complete) {\x0a        setTimeout(load, 5);\x0a      } else {\x0a        that.el.setAttribute(\x27width\x27, that.el.offsetWidth);\x0a        that.el.setAttribute(\x27height\x27, that.el.offsetHeight);\x0a        that.el.setAttribute(\x27src\x27, path);\x0a      }\x0a    }\x0a    load();\x0a  }\x0a\x0a\x0a\x0a\x0a  if (Retina.isRetina()) {\x0a    Retina.init(root);\x0a  }\x0a\x0a})();\x0a\x0a'}