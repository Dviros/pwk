var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:04:07 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:30:15 GMT\x0aETag: \x2264a8-56faa82e93bc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-6986/6987\x0aContent-Length: 6987\x0aKeep-Alive: timeout=5, max=39\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/mce-view.js\x0a */\x0a\x0a/* global tinymce */\x0a\x0a/*\x0a * The TinyMCE view API.\x0a *\x0a * Note: this API is \x22experimental\x22 meaning that it will probably change\x0a * in the next few releases based on feedback from 3.9.0.\x0a * If you decide to use it, please follow the development closely.\x0a *\x0a * Diagram\x0a *\x0a * |- registered view constructor (type)\x0a * |  |- view instance (unique text)\x0a * |  |  |- editor 1\x0a * |  |  |  |- view node\x0a * |  |  |  |- view node\x0a * |  |  |  |- ...\x0a * |  |  |- editor 2\x0a * |  |  |  |- ...\x0a * |  |- view instance\x0a * |  |  |- ...\x0a * |- registered view\x0a * |  |- ...\x0a */\x0a( function( window, wp, shortcode, $ ) {\x0a\x09\x27use strict\x27;\x0a\x0a\x09var views = {},\x0a\x09\x09instances = {};\x0a\x0a\x09wp.mce = wp.mce || {};\x0a\x0a\x09/**\x0a\x09 * wp.mce.views\x0a\x09 *\x0a\x09 * A set of utilities that simplifies adding custom UI within a TinyMCE editor.\x0a\x09 * At its core, it serves as a series of converters, transforming text to a\x0a\x09 * custom UI, and back again.\x0a\x09 */\x0a\x09wp.mce.views = {\x0a\x0a\x09\x09/**\x0a\x09\x09 * Registers a new view type.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} type   The view type.\x0a\x09\x09 * @param {Object} extend An object to extend wp.mce.View.prototype with.\x0a\x09\x09 */\x0a\x09\x09register: function( type, extend ) {\x0a\x09\x09\x09views[ type ] = wp.mce.View.extend( _.extend( extend, { type: type } ) );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Unregisters a view type.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} type The view type.\x0a\x09\x09 */\x0a\x09\x09unregister: function( type ) {\x0a\x09\x09\x09delete views[ type ];\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Returns the settings of a view type.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} type The view type.\x0a\x09\x09 *\x0a\x09\x09 * @return {Function} The view constructor.\x0a\x09\x09 */\x0a\x09\x09get: function( type ) {\x0a\x09\x09\x09return views[ type ];\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Unbinds all view nodes.\x0a\x09\x09 * Runs before removing all view nodes from the DOM.\x0a\x09\x09 */\x0a\x09\x09unbind: function() {\x0a\x09\x09\x09_.each( instances, function( instance ) {\x0a\x09\x09\x09\x09instance.unbind();\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Scans a given string for each view\x27s pattern,\x0a\x09\x09 * replacing any matches with markers,\x0a\x09\x09 * and creates a new instance for every match.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} content The string to scan.\x0a\x09\x09 * @param {tinymce.Editor} editor The editor.\x0a\x09\x09 *\x0a\x09\x09 * @return {String} The string with markers.\x0a\x09\x09 */\x0a\x09\x09setMarkers: function( content, editor ) {\x0a\x09\x09\x09var pieces = [ { content: content } ],\x0a\x09\x09\x09\x09self = this,\x0a\x09\x09\x09\x09instance, current;\x0a\x0a\x09\x09\x09_.each( views, function( view, type ) {\x0a\x09\x09\x09\x09current = pieces.slice();\x0a\x09\x09\x09\x09pieces  = [];\x0a\x0a\x09\x09\x09\x09_.each( current, function( piece ) {\x0a\x09\x09\x09\x09\x09var remaining = piece.content,\x0a\x09\x09\x09\x09\x09\x09result, text;\x0a\x0a\x09\x09\x09\x09\x09// Ignore processed pieces, but retain their location.\x0a\x09\x09\x09\x09\x09if ( piece.processed ) {\x0a\x09\x09\x09\x09\x09\x09pieces.push( piece );\x0a\x09\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09// Iterate through the string progressively matching views\x0a\x09\x09\x09\x09\x09// and slicing the string as we go.\x0a\x09\x09\x09\x09\x09while ( remaining && ( result = view.prototype.match( remaining ) ) ) {\x0a\x09\x09\x09\x09\x09\x09// Any text before the match becomes an unprocessed piece.\x0a\x09\x09\x09\x09\x09\x09if ( result.index ) {\x0a\x09\x09\x09\x09\x09\x09\x09pieces.push( { content: remaining.substring( 0, result.index ) } );\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09result.options.editor = editor;\x0a\x09\x09\x09\x09\x09\x09instance = self.createInstance( type, result.content, result.options );\x0a\x09\x09\x09\x09\x09\x09text = instance.loader ? \x27.\x27 : instance.text;\x0a\x0a\x09\x09\x09\x09\x09\x09// Add the processed piece for the match.\x0a\x09\x09\x09\x09\x09\x09pieces.push( {\x0a\x09\x09\x09\x09\x09\x09\x09content: instance.ignore ? text : \x27\x3cp data-wpview-marker=\x22\x27 + instance.encodedText + \x27\x22\x3e\x27 + text + \x27\x3c/p\x3e\x27,\x0a\x09\x09\x09\x09\x09\x09\x09processed: true\x0a\x09\x09\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09\x09\x09// Update the remaining content.\x0a\x09\x09\x09\x09\x09\x09remaining = remaining.slice( result.index + result.content.length );\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09// There are no additional matches.\x0a\x09\x09\x09\x09\x09// If any content remains, add it as an unprocessed piece.\x0a\x09\x09\x09\x09\x09if ( remaining ) {\x0a\x09\x09\x09\x09\x09\x09pieces.push( { content: remaining } );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09content = _.pluck( pieces, \x27content\x27 ).join( \x27\x27 );\x0a\x09\x09\x09return content.replace( /\x3cp\x3e\x5cs*\x3cp data-wpview-marker=/g, \x27\x3cp data-wpview-marker=\x27 ).replace( /\x3c\x5c/p\x3e\x5cs*\x3c\x5c/p\x3e/g, \x27\x3c/p\x3e\x27 );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Create a view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {String}  type    The view type.\x0a\x09\x09 * @param {String}  text    The textual representation of the view.\x0a\x09\x09 * @param {Object}  options Options.\x0a\x09\x09 * @param {Boolean} force   Recreate the instance. Optional.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.mce.View} The view instance.\x0a\x09\x09 */\x0a\x09\x09createInstance: function( type, text, options, force ) {\x0a\x09\x09\x09var View = this.get( type ),\x0a\x09\x09\x09\x09encodedText,\x0a\x09\x09\x09\x09instance;\x0a\x0a\x09\x09\x09if ( text.indexOf( \x27[\x27 ) !== -1 && text.indexOf( \x27]\x27 ) !== -1 ) {\x0a\x09\x09\x09\x09// Looks like a shortcode? Remove any line breaks from inside of shortcodes\x0a\x09\x09\x09\x09// or autop will replace them with \x3cp\x3e and \x3cbr\x3e later and the string won\x27t match.\x0a\x09\x09\x09\x09text = text.replace( /\x5c[[^\x5c]]+\x5c]/g, function( match ) {\x0a\x09\x09\x09\x09\x09return match.replace( /[\x5cr\x5cn]/g, \x27\x27 );\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( ! force ) {\x0a\x09\x09\x09\x09instance = this.getInstance( text );\x0a\x0a\x09\x09\x09\x09if ( instance ) {\x0a\x09\x09\x09\x09\x09return instance;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09encodedText = encodeURIComponent( text );\x0a\x0a\x09\x09\x09options = _.extend( options || {}, {\x0a\x09\x09\x09\x09text: text,\x0a\x09\x09\x09\x09encodedText: encodedText\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09return instances[ encodedText ] = new View( options );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Get a view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {(String|HTMLElement)} object The textual representation of the view or the view node.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.mce.View} The view instance or undefined.\x0a\x09\x09 */\x0a\x09\x09getInstance: function( object ) {\x0a\x09\x09\x09if ( typeof object === \x27string\x27 ) {\x0a\x09\x09\x09\x09return instances[ encodeURIComponent( object ) ];\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return instances[ $( object ).attr( \x27data-wpview-text\x27 ) ];\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Given a view node, get the view\x27s text.\x0a\x09\x09 *\x0a\x09\x09 * @param {HTMLElement} node The view node.\x0a\x09\x09 *\x0a\x09\x09 * @return {String} The textual representation of the view.\x0a\x09\x09 */\x0a\x09\x09getText: function( node ) {\x0a\x09\x09\x09return decodeURIComponent( $( node ).attr( \x27data-wpview-text\x27 ) || \x27\x27 );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Renders all view nodes that are not yet rendered.\x0a\x09\x09 *\x0a\x09\x09 * @param {Boolean} force Rerender all view nodes.\x0a\x09\x09 */\x0a\x09\x09render: function( force ) {\x0a\x09\x09\x09_.each( instances, function( instance ) {\x0a\x09\x09\x09\x09instance.render( null, force );\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Update the text of a given view node.\x0a\x09\x09 *\x0a\x09\x09 * @param {String}         text   The new text.\x0a\x09\x09 * @param {tinymce.Editor} editor The TinyMCE editor instance the view node is in.\x0a\x09\x09 * @param {HTMLElement}    node   The view node to update.\x0a\x09\x09 * @param {Boolean}        force  Recreate the instance. Optional.\x0a\x09\x09 */\x0a\x09\x09update: function( text, editor, node, force ) {\x0a\x09\x09\x09var instance = this.getInstance( node );\x0a\x0a\x09\x09\x09if ( instance ) {\x0a\x09\x09\x09\x09instance.update( text, editor, node, force );\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Renders any editing interface based on the view type.\x0a\x09\x09 *\x0a\x09\x09 * @param {tinymce.Editor} editor The TinyMCE editor instance the view node is in.\x0a\x09\x09 * @param {HTMLElement}    node   The view node to edit.\x0a\x09\x09 */\x0a\x09\x09edit: function( editor, node ) {\x0a\x09\x09\x09var instance = this.getInstance( node );\x0a\x0a\x09\x09\x09if ( instance && instance.edit ) {\x0a\x09\x09\x09\x09instance.edit( instance.text, function( text, force ) {\x0a\x09\x09\x09\x09\x09instance.update( text, editor, node, force );\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Remove a given view node from the DOM.\x0a\x09\x09 *\x0a\x09\x09 * @param {tinymce.Editor} editor The TinyMCE editor instance the view node is in.\x0a\x09\x09 * @param {HTMLElement}    node   The view node to remove.\x0a\x09\x09 */\x0a\x09\x09remove: function( editor, node ) {\x0a\x09\x09\x09var instance = this.getInstance( node );\x0a\x0a\x09\x09\x09if ( instance ) {\x0a\x09\x09\x09\x09instance.remove( editor, node );\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * A Backbone-like View constructor intended for use when rendering a TinyMCE View.\x0a\x09 * The main difference is that the TinyMCE View is not tied to a particular DOM node.\x0a\x09 *\x0a\x09 * @param {Object} options Options.\x0a\x09 */\x0a\x09wp.mce.View = function( options ) {\x0a\x09\x09_.extend( this, options );\x0a\x09\x09this.initialize();\x0a\x09};\x0a\x0a\x09wp.mce.View.extend = Backbone.View.extend;\x0a\x0a\x09_.extend( wp.mce.View.prototype, /** @lends wp.mce.View.prototype */{\x0a\x0a\x09\x09/**\x0a\x09\x09 * The content.\x0a\x09\x09 *\x0a\x09\x09 * @type {*}\x0a\x09\x09 */\x0a\x09\x09content: null,\x0a\x0a\x09\x09/**\x0a\x09\x09 * Whether or not to display a loader.\x0a\x09\x09 *\x0a\x09\x09 * @type {Boolean}\x0a\x09\x09 */\x0a\x09\x09loader: true,\x0a\x0a\x09\x09/**\x0a\x09\x09 * Runs after the view instance is created.\x0a\x09\x09 */\x0a\x09\x09initialize: function() {},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Returns the content to render in the view node.\x0a\x09\x09 *\x0a\x09\x09 * @return {*}\x0a\x09\x09 */\x0a\x09\x09getContent: function() {\x0a\x09\x09\x09return this.content;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Renders all view nodes tied to this view instance that are not yet rendered.\x0a\x09\x09 *\x0a\x09\x09 * @param {String}  content The content to render. Optional.\x0a\x09\x09 * @param {Boolean} force   Rerender all view nodes tied to this view instance. Optional.\x0a\x09\x09 */\x0a\x09\x09render: function( content, force ) {\x0a\x09\x09\x09if ( content != null ) {\x0a\x09\x09\x09\x09this.content = content;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09content = this.getContent();\x0a\x0a\x09\x09\x09// If there\x27s nothing to render an no loader needs to be shown, stop.\x0a\x09\x09\x09if ( ! this.loader && ! content ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// We\x27re about to rerender all views of this instance, so unbind rendered views.\x0a\x09\x09\x09force && this.unbind();\x0a\x0a\x09\x09\x09// Replace any left over markers.\x0a\x09\x09\x09this.replaceMarkers();\x0a\x0a\x09\x09\x09if ( content ) {\x0a\x09\x09\x09\x09this.setContent( content, function( editor, node ) {\x0a\x09\x09\x09\x09\x09$( node ).data( \x27rendered\x27, true );\x0a\x09\x09\x09\x09\x09this.bindNode.call( this, editor, node );\x0a\x09\x09\x09\x09}, force ? null : false );\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09this.setLoader();\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Binds a given node after its content is added to the DOM.\x0a\x09\x09 */\x0a\x09\x09bindNode: function() {},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Unbinds a given node before its content is removed from the DOM.\x0a\x09\x09 */\x0a\x09\x09unbindNode: function() {},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Unbinds all view nodes tied to this view instance.\x0a\x09\x09 * Runs before their content is removed from the DOM.\x0a\x09\x09 */\x0a\x09\x09unbind: function() {\x0a\x09\x09\x09this.getNodes( function( editor, node ) {\x0a\x09\x09\x09\x09this.unbindNode.call( this, editor, node );\x0a\x09\x09\x09}, true );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets all the TinyMCE editor instances that support views.\x0a\x09\x09 *\x0a\x09\x09 * @param {Function} callback A callback.\x0a\x09\x09 */\x0a\x09\x09getEditors: function( callback ) {\x0a\x09\x09\x09_.each( tinymce.editors, function( editor ) {\x0a\x09\x09\x09\x09if ( editor.plugins.wpview ) {\x0a\x09\x09\x09\x09\x09callback.call( this, editor );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}, this );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets all view nodes tied to this view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {Function} callback A callback.\x0a\x09\x09 * @param {Boolean}  rendered Get (un)rendered view nodes. Optional.\x0a\x09\x09 */\x0a\x09\x09getNodes: function( callback, rendered ) {\x0a\x09\x09\x09this.getEditors( function( editor ) {\x0a\x09\x09\x09\x09var self = this;\x0a\x0a\x09\x09\x09\x09$( editor.getBody() )\x0a\x09\x09\x09\x09\x09.find( \x27[data-wpview-text=\x22\x27 + self.encodedText + \x27\x22]\x27 )\x0a\x09\x09\x09\x09\x09.filter( function() {\x0a\x09\x09\x09\x09\x09\x09var data;\x0a\x0a\x09\x09\x09\x09\x09\x09if ( rendered == null ) {\x0a\x09\x09\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09data = $( this ).data( \x27rendered\x27 ) === true;\x0a\x0a\x09\x09\x09\x09\x09\x09return rendered ? data : ! data;\x0a\x09\x09\x09\x09\x09} )\x0a\x09\x09\x09\x09\x09.each( function() {\x0a\x09\x09\x09\x09\x09\x09callback.call( self, editor, this, this /* back compat */ );\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets all marker nodes tied to this view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {Function} callback A callback.\x0a\x09\x09 */\x0a\x09\x09getMarkers: function( callback ) {\x0a\x09\x09\x09this.getEditors( function( editor ) {\x0a\x09\x09\x09\x09var self = this;\x0a\x0a\x09\x09\x09\x09$( editor.getBody() )\x0a\x09\x09\x09\x09\x09.find( \x27[data-wpview-marker=\x22\x27 + this.encodedText + \x27\x22]\x27 )\x0a\x09\x09\x09\x09\x09.each( function() {\x0a\x09\x09\x09\x09\x09\x09callback.call( self, editor, this );\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Replaces all marker nodes tied to this view instance.\x0a\x09\x09 */\x0a\x09\x09replaceMarkers: function() {\x0a\x09\x09\x09this.getMarkers( function( editor, node ) {\x0a\x09\x09\x09\x09var selected = node === editor.selection.getNode();\x0a\x09\x09\x09\x09var $viewNode;\x0a\x0a\x09\x09\x09\x09if ( ! this.loader && $( node ).text() !== tinymce.DOM.decode( this.text ) ) {\x0a\x09\x09\x09\x09\x09editor.dom.setAttrib( node, \x27data-wpview-marker\x27, null );\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$viewNode = editor.$(\x0a\x09\x09\x09\x09\x09\x27\x3cdiv class=\x22wpview wpview-wrap\x22 data-wpview-text=\x22\x27 + this.encodedText + \x27\x22 data-wpview-type=\x22\x27 + this.type + \x27\x22 contenteditable=\x22false\x22\x3e\x3c/div\x3e\x27\x0a\x09\x09\x09\x09);\x0a\x0a\x09\x09\x09\x09editor.$( node ).replaceWith( $viewNode );\x0a\x0a\x09\x09\x09\x09if ( selected ) {\x0a\x09\x09\x09\x09\x09setTimeout( function() {\x0a\x09\x09\x09\x09\x09\x09editor.selection.select( $viewNode[0] );\x0a\x09\x09\x09\x09\x09\x09editor.selection.collapse();\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Removes all marker nodes tied to this view instance.\x0a\x09\x09 */\x0a\x09\x09removeMarkers: function() {\x0a\x09\x09\x09this.getMarkers( function( editor, node ) {\x0a\x09\x09\x09\x09editor.dom.setAttrib( node, \x27data-wpview-marker\x27, null );\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets the content for all view nodes tied to this view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {*}        content  The content to set.\x0a\x09\x09 * @param {Function} callback A callback. Optional.\x0a\x09\x09 * @param {Boolean}  rendered Only set for (un)rendered nodes. Optional.\x0a\x09\x09 */\x0a\x09\x09setContent: function( content, callback, rendered ) {\x0a\x09\x09\x09if ( _.isObject( content ) && ( content.sandbox || content.head || content.body.indexOf( \x27\x3cscript\x27 ) !== -1 ) ) {\x0a\x09\x09\x09\x09this.setIframes( content.head || \x27\x27, content.body, callback, rendered );\x0a\x09\x09\x09} else if ( _.isString( content ) && content.indexOf( \x27\x3cscript\x27 ) !== -1 ) {\x0a\x09\x09\x09\x09this.setIframes( \x27\x27, content, callback, rendered );\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09this.getNodes( function( editor, node ) {\x0a\x09\x09\x09\x09\x09content = content.body || content;\x0a\x0a\x09\x09\x09\x09\x09if ( content.indexOf( \x27\x3ciframe\x27 ) !== -1 ) {\x0a\x09\x09\x09\x09\x09\x09content += \x27\x3cspan class=\x22mce-shim\x22\x3e\x3c/span\x3e\x27;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09editor.undoManager.transact( function() {\x0a\x09\x09\x09\x09\x09\x09node.innerHTML = \x27\x27;\x0a\x09\x09\x09\x09\x09\x09node.appendChild( _.isString( content ) ? editor.dom.createFragment( content ) : content );\x0a\x09\x09\x09\x09\x09\x09editor.dom.add( node, \x27span\x27, { \x27class\x27: \x27wpview-end\x27 } );\x0a\x09\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09\x09callback && callback.call( this, editor, node );\x0a\x09\x09\x09\x09}, rendered );\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets the content in an iframe for all view nodes tied to this view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {String}   head     HTML string to be added to the head of the document.\x0a\x09\x09 * @param {String}   body     HTML string to be added to the body of the document.\x0a\x09\x09 * @param {Function} callback A callback. Optional.\x0a\x09\x09 * @param {Boolean}  rendered Only set for (un)rendered nodes. Optional.\x0a\x09\x09 */\x0a\x09\x09setIframes: function( head, body, callback, rendered ) {\x0a\x09\x09\x09var self = this;\x0a\x0a\x09\x09\x09if ( body.indexOf( \x27[\x27 ) !== -1 && body.indexOf( \x27]\x27 ) !== -1 ) {\x0a\x09\x09\x09\x09var shortcodesRegExp = new RegExp( \x27\x5c\x5c[\x5c\x5c/?(?:\x27 + window.mceViewL10n.shortcodes.join( \x27|\x27 ) + \x27)[^\x5c\x5c]]*?\x5c\x5c]\x27, \x27g\x27 );\x0a\x09\x09\x09\x09// Escape tags inside shortcode previews.\x0a\x09\x09\x09\x09body = body.replace( shortcodesRegExp, function( match ) {\x0a\x09\x09\x09\x09\x09return match.replace( /\x3c/g, \x27&lt;\x27 ).replace( /\x3e/g, \x27&gt;\x27 );\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09this.getNodes( function( editor, node ) {\x0a\x09\x09\x09\x09var dom = editor.dom,\x0a\x09\x09\x09\x09\x09styles = \x27\x27,\x0a\x09\x09\x09\x09\x09bodyClasses = editor.getBody().className || \x27\x27,\x0a\x09\x09\x09\x09\x09editorHead = editor.getDoc().getElementsByTagName( \x27head\x27 )[0],\x0a\x09\x09\x09\x09\x09iframe, iframeWin, iframeDoc, MutationObserver, observer, i, block;\x0a\x0a\x09\x09\x09\x09tinymce.each( dom.$( \x27link[rel=\x22stylesheet\x22]\x27, editorHead ), function( link ) {\x0a\x09\x09\x09\x09\x09if ( link.href && link.href.indexOf( \x27skins/lightgray/content.min.css\x27 ) === -1 &&\x0a\x09\x09\x09\x09\x09\x09link.href.indexOf( \x27skins/wordpress/wp-content.css\x27 ) === -1 ) {\x0a\x0a\x09\x09\x09\x09\x09\x09styles += dom.getOuterHTML( link );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09if ( self.iframeHeight ) {\x0a\x09\x09\x09\x09\x09dom.add( node, \x27span\x27, {\x0a\x09\x09\x09\x09\x09\x09\x27data-mce-bogus\x27: 1,\x0a\x09\x09\x09\x09\x09\x09style: {\x0a\x09\x09\x09\x09\x09\x09\x09display: \x27block\x27,\x0a\x09\x09\x09\x09\x09\x09\x09width: \x27100%\x27,\x0a\x09\x09\x09\x09\x09\x09\x09height: self.iframeHeight\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}, \x27\x5cu200B\x27 );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09editor.undoManager.transact( function() {\x0a\x09\x09\x09\x09\x09node.innerHTML = \x27\x27;\x0a\x0a\x09\x09\x09\x09\x09iframe = dom.add( node, \x27iframe\x27, {\x0a\x09\x09\x09\x09\x09\x09/* jshint scripturl: true */\x0a\x09\x09\x09\x09\x09\x09src: tinymce.Env.ie ? \x27javascript:\x22\x22\x27 : \x27\x27,\x0a\x09\x09\x09\x09\x09\x09frameBorder: \x270\x27,\x0a\x09\x09\x09\x09\x09\x09allowTransparency: \x27true\x27,\x0a\x09\x09\x09\x09\x09\x09scrolling: \x27no\x27,\x0a\x09\x09\x09\x09\x09\x09\x27class\x27: \x27wpview-sandbox\x27,\x0a\x09\x09\x09\x09\x09\x09style: {\x0a\x09\x09\x09\x09\x09\x09\x09width: \x27100%\x27,\x0a\x09\x09\x09\x09\x09\x09\x09display: \x27block\x27\x0a\x09\x09\x09\x09\x09\x09},\x0a\x09\x09\x09\x09\x09\x09height: self.iframeHeight\x0a\x09\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09\x09dom.add( node, \x27span\x27, { \x27class\x27: \x27mce-shim\x27 } );\x0a\x09\x09\x09\x09\x09dom.add( node, \x27span\x27, { \x27class\x27: \x27wpview-end\x27 } );\x0a\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09// Bail if the iframe node is not attached to the DOM.\x0a\x09\x09\x09\x09// Happens when the view is dragged in the editor.\x0a\x09\x09\x09\x09// There is a browser restriction when iframes are moved in the DOM. They get emptied.\x0a\x09\x09\x09\x09// The iframe will be rerendered after dropping the view node at the new location.\x0a\x09\x09\x09\x09if ( ! iframe.contentWindow ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09iframeWin = iframe.contentWindow;\x0a\x09\x09\x09\x09iframeDoc = iframeWin.document;\x0a\x09\x09\x09\x09iframeDoc.open();\x0a\x0a\x09\x09\x09\x09iframeDoc.write(\x0a\x09\x09\x09\x09\x09\x27\x3c!DOCTYPE html\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3chtml\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x27\x3chead\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x27\x3cmeta http-equiv=\x22Content-Type\x22 content=\x22text/html; charset=UTF-8\x22 /\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09head +\x0a\x09\x09\x09\x09\x09\x09\x09styles +\x0a\x09\x09\x09\x09\x09\x09\x09\x27\x3cstyle\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27html {\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27background: transparent;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27padding: 0;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27margin: 0;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27}\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27body#wpview-iframe-sandbox {\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27background: transparent;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27padding: 1px 0 !important;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27margin: -1px 0 0 !important;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27}\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27body#wpview-iframe-sandbox:before,\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27body#wpview-iframe-sandbox:after {\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27display: none;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27content: \x22\x22;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27}\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27iframe {\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x27max-width: 100%;\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x27}\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09\x27\x3c/style\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x27\x3c/head\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x27\x3cbody id=\x22wpview-iframe-sandbox\x22 class=\x22\x27 + bodyClasses + \x27\x22\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x09\x09body +\x0a\x09\x09\x09\x09\x09\x09\x27\x3c/body\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3c/html\x3e\x27\x0a\x09\x09\x09\x09);\x0a\x0a\x09\x09\x09\x09iframeDoc.close();\x0a\x0a\x09\x09\x09\x09function resize() {\x0a\x09\x09\x09\x09\x09var $iframe;\x0a\x0a\x09\x09\x09\x09\x09if ( block ) {\x0a\x09\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09// Make sure the iframe still exists.\x0a\x09\x09\x09\x09\x09if ( iframe.contentWindow ) {\x0a\x09\x09\x09\x09\x09\x09$iframe = $( iframe );\x0a\x09\x09\x09\x09\x09\x09self.iframeHeight = $( iframeDoc.body ).height();\x0a\x0a\x09\x09\x09\x09\x09\x09if ( $iframe.height() !== self.iframeHeight ) {\x0a\x09\x09\x09\x09\x09\x09\x09$iframe.height( self.iframeHeight );\x0a\x09\x09\x09\x09\x09\x09\x09editor.nodeChanged();\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( self.iframeHeight ) {\x0a\x09\x09\x09\x09\x09block = true;\x0a\x0a\x09\x09\x09\x09\x09setTimeout( function() {\x0a\x09\x09\x09\x09\x09\x09block = false;\x0a\x09\x09\x09\x09\x09\x09resize();\x0a\x09\x09\x09\x09\x09}, 3000 );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09function reload() {\x0a\x09\x09\x09\x09\x09if ( ! editor.isHidden() ) {\x0a\x09\x09\x09\x09\x09\x09$( node ).data( \x27rendered\x27, null );\x0a\x0a\x09\x09\x09\x09\x09\x09setTimeout( function() {\x0a\x09\x09\x09\x09\x09\x09\x09wp.mce.views.render();\x0a\x09\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09function addObserver() {\x0a\x09\x09\x09\x09\x09observer = new MutationObserver( _.debounce( resize, 100 ) );\x0a\x0a\x09\x09\x09\x09\x09observer.observe( iframeDoc.body, {\x0a\x09\x09\x09\x09\x09\x09attributes: true,\x0a\x09\x09\x09\x09\x09\x09childList: true,\x0a\x09\x09\x09\x09\x09\x09subtree: true\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$( iframeWin ).on( \x27load\x27, resize ).on( \x27unload\x27, reload );\x0a\x0a\x09\x09\x09\x09MutationObserver = iframeWin.MutationObserver || iframeWin.WebKitMutationObserver || iframeWin.MozMutationObserver;\x0a\x0a\x09\x09\x09\x09if ( MutationObserver ) {\x0a\x09\x09\x09\x09\x09if ( ! iframeDoc.body ) {\x0a\x09\x09\x09\x09\x09\x09iframeDoc.addEventListener( \x27DOMContentLoaded\x27, addObserver, false );\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09addObserver();\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09for ( i = 1; i \x3c 6; i++ ) {\x0a\x09\x09\x09\x09\x09\x09setTimeout( resize, i * 700 );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09callback && callback.call( self, editor, node );\x0a\x09\x09\x09}, rendered );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets a loader for all view nodes tied to this view instance.\x0a\x09\x09 */\x0a\x09\x09setLoader: function( dashicon ) {\x0a\x09\x09\x09this.setContent(\x0a\x09\x09\x09\x09\x27\x3cdiv class=\x22loading-placeholder\x22\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3cdiv class=\x22dashicons dashicons-\x27 + ( dashicon || \x27admin-media\x27 ) + \x27\x22\x3e\x3c/div\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3cdiv class=\x22wpview-loading\x22\x3e\x3cins\x3e\x3c/ins\x3e\x3c/div\x3e\x27 +\x0a\x09\x09\x09\x09\x27\x3c/div\x3e\x27\x0a\x09\x09\x09);\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets an error for all view nodes tied to this view instance.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} message  The error message to set.\x0a\x09\x09 * @param {String} dashicon A dashicon ID. Optional. {@link https://developer.wordpress.org/resource/dashicons/}\x0a\x09\x09 */\x0a\x09\x09setError: function( message, dashicon ) {\x0a\x09\x09\x09this.setContent(\x0a\x09\x09\x09\x09\x27\x3cdiv class=\x22wpview-error\x22\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3cdiv class=\x22dashicons dashicons-\x27 + ( dashicon || \x27no\x27 ) + \x27\x22\x3e\x3c/div\x3e\x27 +\x0a\x09\x09\x09\x09\x09\x27\x3cp\x3e\x27 + message + \x27\x3c/p\x3e\x27 +\x0a\x09\x09\x09\x09\x27\x3c/div\x3e\x27\x0a\x09\x09\x09);\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Tries to find a text match in a given string.\x0a\x09\x09 *\x0a\x09\x09 * @param {String} content The string to scan.\x0a\x09\x09 *\x0a\x09\x09 * @return {Object}\x0a\x09\x09 */\x0a\x09\x09match: function( content ) {\x0a\x09\x09\x09var match = shortcode.next( this.type, content );\x0a\x0a\x09\x09\x09if ( match ) {\x0a\x09\x09\x09\x09return {\x0a\x09\x09\x09\x09\x09index: match.index,\x0a\x09\x09\x09\x09\x09content: match.content,\x0a\x09\x09\x09\x09\x09options: {\x0a\x09\x09\x09\x09\x09\x09shortcode: match.shortcode\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09};\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Update the text of a given view node.\x0a\x09\x09 *\x0a\x09\x09 * @param {String}         text   The new text.\x0a\x09\x09 * @param {tinymce.Editor} editor The TinyMCE editor instance the view node is in.\x0a\x09\x09 * @param {HTMLElement}    node   The view node to update.\x0a\x09\x09 * @param {Boolean}        force  Recreate the instance. Optional.\x0a\x09\x09 */\x0a\x09\x09update: function( text, editor, node, force ) {\x0a\x09\x09\x09_.find( views, function( view, type ) {\x0a\x09\x09\x09\x09var match = view.prototype.match( text );\x0a\x0a\x09\x09\x09\x09if ( match ) {\x0a\x09\x09\x09\x09\x09$( node ).data( \x27rendered\x27, false );\x0a\x09\x09\x09\x09\x09editor.dom.setAttrib( node, \x27data-wpview-text\x27, encodeURIComponent( text ) );\x0a\x09\x09\x09\x09\x09wp.mce.views.createInstance( type, text, match.options, force ).render();\x0a\x0a\x09\x09\x09\x09\x09editor.selection.select( node );\x0a\x09\x09\x09\x09\x09editor.nodeChanged();\x0a\x09\x09\x09\x09\x09editor.focus();\x0a\x0a\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Remove a given view node from the DOM.\x0a\x09\x09 *\x0a\x09\x09 * @param {tinymce.Editor} editor The TinyMCE editor instance the view node is in.\x0a\x09\x09 * @param {HTMLElement}    node   The view node to remove.\x0a\x09\x09 */\x0a\x09\x09remove: function( editor, node ) {\x0a\x09\x09\x09this.unbindNode.call( this, editor, node );\x0a\x09\x09\x09editor.dom.remove( node );\x0a\x09\x09\x09editor.focus();\x0a\x09\x09}\x0a\x09} );\x0a} )( window, window.wp, window.wp.shortcode, window.jQuery );\x0a\x0a/*\x0a * The WordPress core TinyMCE views.\x0a * Views for the gallery, audio, video, playlist and embed shortcodes,\x0a * and a view for embeddable URLs.\x0a */\x0a( function( window, views, media, $ ) {\x0a\x09var base, gallery, av, embed,\x0a\x09\x09schema, parser, serializer;\x0a\x0a\x09function verifyHTML( string ) {\x0a\x09\x09var settings = {};\x0a\x0a\x09\x09if ( ! window.tinymce ) {\x0a\x09\x09\x09return string.replace( /\x3c[^\x3e]+\x3e/g, \x27\x27 );\x0a\x09\x09}\x0a\x0a\x09\x09if ( ! string || ( string.indexOf( \x27\x3c\x27 ) === -1 && string.indexOf( \x27\x3e\x27 ) === -1 ) ) {\x0a\x09\x09\x09return string;\x0a\x09\x09}\x0a\x0a\x09\x09schema = schema || new window.tinymce.html.Schema( settings );\x0a\x09\x09parser = parser || new window.tinymce.html.DomParser( settings, schema );\x0a\x09\x09serializer = serializer || new window.tinymce.html.Serializer( settings, schema );\x0a\x0a\x09\x09return serializer.serialize( parser.parse( string, { forced_root_block: false } ) );\x0a\x09}\x0a\x0a\x09base = {\x0a\x09\x09state: [],\x0a\x0a\x09\x09edit: function( text, update ) {\x0a\x09\x09\x09var type = this.type,\x0a\x09\x09\x09\x09frame = media[ type ].edit( text );\x0a\x0a\x09\x09\x09this.pausePlayers && this.pausePlayers();\x0a\x0a\x09\x09\x09_.each( this.state, function( state ) {\x0a\x09\x09\x09\x09frame.state( state ).on( \x27update\x27, function( selection ) {\x0a\x09\x09\x09\x09\x09update( media[ type ].shortcode( selection ).string(), type === \x27gallery\x27 );\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09frame.on( \x27close\x27, function() {\x0a\x09\x09\x09\x09frame.detach();\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09frame.open();\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09gallery = _.extend( {}, base, {\x0a\x09\x09state: [ \x27gallery-edit\x27 ],\x0a\x09\x09template: media.template( \x27editor-gallery\x27 ),\x0a\x0a\x09\x09initialize: function() {\x0a\x09\x09\x09var attachments = media.gallery.attachments( this.shortcode, media.view.settings.post.id ),\x0a\x09\x09\x09\x09attrs = this.shortcode.attrs.named,\x0a\x09\x09\x09\x09self = this;\x0a\x0a\x09\x09\x09attachments.more()\x0a\x09\x09\x09.done( function() {\x0a\x09\x09\x09\x09attachments = attachments.toJSON();\x0a\x0a\x09\x09\x09\x09_.each( attachments, function( attachment ) {\x0a\x09\x09\x09\x09\x09if ( attachment.sizes ) {\x0a\x09\x09\x09\x09\x09\x09if ( attrs.size && attachment.sizes[ attrs.size ] ) {\x0a\x09\x09\x09\x09\x09\x09\x09attachment.thumbnail = attachment.sizes[ attrs.size ];\x0a\x09\x09\x09\x09\x09\x09} else if ( attachment.sizes.thumbnail ) {\x0a\x09\x09\x09\x09\x09\x09\x09attachment.thumbnail = attachment.sizes.thumbnail;\x0a\x09\x09\x09\x09\x09\x09} else if ( attachment.sizes.full ) {\x0a\x09\x09\x09\x09\x09\x09\x09attachment.thumbnail = attachment.sizes.full;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} );\x0a\x0a\x09\x09\x09\x09self.render( self.template( {\x0a\x09\x09\x09\x09\x09verifyHTML: verifyHTML,\x0a\x09\x09\x09\x09\x09attachments: attachments,\x0a\x09\x09\x09\x09\x09columns: attrs.columns ? parseInt( attrs.columns, 10 ) : media.galleryDefaults.columns\x0a\x09\x09\x09\x09} ) );\x0a\x09\x09\x09} )\x0a\x09\x09\x09.fail( function( jqXHR, textStatus ) {\x0a\x09\x09\x09\x09self.setError( textStatus );\x0a\x09\x09\x09} );\x0a\x09\x09}\x0a\x09} );\x0a\x0a\x09av = _.extend( {}, base, {\x0a\x09\x09action: \x27parse-media-shortcode\x27,\x0a\x0a\x09\x09initialize: function() {\x0a\x09\x09\x09var self = this, maxwidth = null;\x0a\x0a\x09\x09\x09if ( this.url ) {\x0a\x09\x09\x09\x09this.loader = false;\x0a\x09\x09\x09\x09this.shortcode = media.embed.shortcode( {\x0a\x09\x09\x09\x09\x09url: this.text\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Obtain the target width for the embed.\x0a\x09\x09\x09if ( self.editor ) {\x0a\x09\x09\x09\x09maxwidth = self.editor.getBody().clientWidth;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09wp.ajax.post( this.action, {\x0a\x09\x09\x09\x09post_ID: media.view.settings.post.id,\x0a\x09\x09\x09\x09type: this.shortcode.tag,\x0a\x09\x09\x09\x09shortcode: this.shortcode.string(),\x0a\x09\x09\x09\x09maxwidth: maxwidth\x0a\x09\x09\x09} )\x0a\x09\x09\x09.done( function( response ) {\x0a\x09\x09\x09\x09self.render( response );\x0a\x09\x09\x09} )\x0a\x09\x09\x09.fail( function( response ) {\x0a\x09\x09\x09\x09if ( self.url ) {\x0a\x09\x09\x09\x09\x09self.ignore = true;\x0a\x09\x09\x09\x09\x09self.removeMarkers();\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09self.setError( response.message || response.statusText, \x27admin-media\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09this.getEditors( function( editor ) {\x0a\x09\x09\x09\x09editor.on( \x27wpview-selected\x27, function() {\x0a\x09\x09\x09\x09\x09self.pausePlayers();\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09} );\x0a\x09\x09},\x0a\x0a\x09\x09pausePlayers: function() {\x0a\x09\x09\x09this.getNodes( function( editor, node, content ) {\x0a\x09\x09\x09\x09var win = $( \x27iframe.wpview-sandbox\x27, content ).get( 0 );\x0a\x0a\x09\x09\x09\x09if ( win && ( win = win.contentWindow ) && win.mejs ) {\x0a\x09\x09\x09\x09\x09_.each( win.mejs.players, function( player ) {\x0a\x09\x09\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09\x09\x09player.pause();\x0a\x09\x09\x09\x09\x09\x09} catch ( e ) {}\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09}\x0a\x09} );\x0a\x0a\x09embed = _.extend( {}, av, {\x0a\x09\x09action: \x27parse-embed\x27,\x0a\x0a\x09\x09edit: function( text, update ) {\x0a\x09\x09\x09var frame = media.embed.edit( text, this.url ),\x0a\x09\x09\x09\x09self = this;\x0a\x0a\x09\x09\x09this.pausePlayers();\x0a\x0a\x09\x09\x09frame.state( \x27embed\x27 ).props.on( \x27change:url\x27, function( model, url ) {\x0a\x09\x09\x09\x09if ( url && model.get( \x27url\x27 ) ) {\x0a\x09\x09\x09\x09\x09frame.state( \x27embed\x27 ).metadata = model.toJSON();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09frame.state( \x27embed\x27 ).on( \x27select\x27, function() {\x0a\x09\x09\x09\x09var data = frame.state( \x27embed\x27 ).metadata;\x0a\x0a\x09\x09\x09\x09if ( self.url ) {\x0a\x09\x09\x09\x09\x09update( data.url );\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09update( media.embed.shortcode( data ).string() );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09frame.on( \x27close\x27, function() {\x0a\x09\x09\x09\x09frame.detach();\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09frame.open();\x0a\x09\x09}\x0a\x09} );\x0a\x0a\x09views.register( \x27gallery\x27, _.extend( {}, gallery ) );\x0a\x0a\x09views.register( \x27audio\x27, _.extend( {}, av, {\x0a\x09\x09state: [ \x27audio-details\x27 ]\x0a\x09} ) );\x0a\x0a\x09views.register( \x27video\x27, _.extend( {}, av, {\x0a\x09\x09state: [ \x27video-details\x27 ]\x0a\x09} ) );\x0a\x0a\x09views.register( \x27playlist\x27, _.extend( {}, av, {\x0a\x09\x09state: [ \x27playlist-edit\x27, \x27video-playlist-edit\x27 ]\x0a\x09} ) );\x0a\x0a\x09views.register( \x27embed\x27, _.extend( {}, embed ) );\x0a\x0a\x09views.register( \x27embedURL\x27, _.extend( {}, embed, {\x0a\x09\x09match: function( content ) {\x0a\x09\x09\x09var re = /(^|\x3cp\x3e)(https?:\x5c/\x5c/[^\x5cs\x22]+?)(\x3c\x5c/p\x3e\x5cs*|$)/gi,\x0a\x09\x09\x09\x09match = re.exec( content );\x0a\x0a\x09\x09\x09if ( match ) {\x0a\x09\x09\x09\x09return {\x0a\x09\x09\x09\x09\x09index: match.index + match[1].length,\x0a\x09\x09\x09\x09\x09content: match[2],\x0a\x09\x09\x09\x09\x09options: {\x0a\x09\x09\x09\x09\x09\x09url: true\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09};\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x09} ) );\x0a} )( window, window.wp.mce.views, window.wp.media, window.jQuery );\x0a'}