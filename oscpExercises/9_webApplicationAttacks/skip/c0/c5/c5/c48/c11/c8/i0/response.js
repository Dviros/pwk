var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:00:27 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Mon, 16 Oct 2017 18:07:52 GMT\x0aETag: \x22b19-55bade28e4e00-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1207/1208\x0aContent-Length: 1208\x0aKeep-Alive: timeout=5, max=83\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/* global console, MediaElementPlayer, mejs */\x0a(function ( window, $ ) {\x0a\x09// Reintegrate `plugins` since they don\x27t exist in MEJS anymore; it won\x27t affect anything in the player\x0a\x09if (mejs.plugins === undefined) {\x0a\x09\x09mejs.plugins = {};\x0a\x09\x09mejs.plugins.silverlight = [];\x0a\x09\x09mejs.plugins.silverlight.push({\x0a\x09\x09\x09types: []\x0a\x09\x09});\x0a\x09}\x0a\x0a\x09// Inclusion of old `HtmlMediaElementShim` if it doesn\x27t exist\x0a\x09mejs.HtmlMediaElementShim = mejs.HtmlMediaElementShim || {\x0a\x09\x09getTypeFromFile: mejs.Utils.getTypeFromFile\x0a\x09};\x0a\x0a\x09// Add missing global variables for backward compatibility\x0a\x09if (mejs.MediaFeatures === undefined) {\x0a\x09\x09mejs.MediaFeatures = mejs.Features;\x0a\x09}\x0a\x09if (mejs.Utility === undefined) {\x0a\x09\x09mejs.Utility = mejs.Utils;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Create missing variables and have default `classPrefix` overridden to avoid issues.\x0a\x09 *\x0a\x09 * `media` is now a fake wrapper needed to simplify manipulation of various media types,\x0a\x09 * so in order to access the `video` or `audio` tag, use `media.originalNode` or `player.node`;\x0a\x09 * `player.container` used to be jQuery but now is a HTML element, and many elements inside\x0a\x09 * the player rely on it being a HTML now, so its conversion is difficult; however, a\x0a\x09 * `player.$container` new variable has been added to be used as jQuery object\x0a\x09 */\x0a\x09var init = MediaElementPlayer.prototype.init;\x0a\x09MediaElementPlayer.prototype.init = function () {\x0a\x09\x09this.options.classPrefix = \x27mejs-\x27;\x0a\x09\x09this.$media = this.$node = $( this.node );\x0a\x09\x09init.call( this );\x0a\x09};\x0a\x0a\x09var ready = MediaElementPlayer.prototype._meReady;\x0a\x09MediaElementPlayer.prototype._meReady = function () {\x0a\x09\x09this.container = $( this.container) ;\x0a\x09\x09this.controls = $( this.controls );\x0a\x09\x09this.layers = $( this.layers );\x0a\x09\x09ready.apply( this, arguments );\x0a\x09};\x0a\x0a\x09// Override method so certain elements can be called with jQuery\x0a\x09MediaElementPlayer.prototype.getElement = function ( el ) {\x0a\x09\x09return $ !== undefined && el instanceof $ ? el[0] : el;\x0a\x09};\x0a\x0a\x09// Add jQuery ONLY to most of custom features\x27 arguments for backward compatibility; default features rely 100%\x0a\x09// on the arguments being HTML elements to work properly\x0a\x09MediaElementPlayer.prototype.buildfeatures = function ( player, controls, layers, media ) {\x0a\x09\x09var defaultFeatures = [\x0a\x09\x09\x09\x27playpause\x27,\x0a\x09\x09\x09\x27current\x27,\x0a\x09\x09\x09\x27progress\x27,\x0a\x09\x09\x09\x27duration\x27,\x0a\x09\x09\x09\x27tracks\x27,\x0a\x09\x09\x09\x27volume\x27,\x0a\x09\x09\x09\x27fullscreen\x27\x0a\x09\x09];\x0a\x09\x09for (var i = 0, total = this.options.features.length; i \x3c total; i++) {\x0a\x09\x09\x09var feature = this.options.features[i];\x0a\x09\x09\x09if (this[\x27build\x27 + feature]) {\x0a\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09// Use jQuery for non-default features\x0a\x09\x09\x09\x09\x09if (defaultFeatures.indexOf(feature) === -1) {\x0a\x09\x09\x09\x09\x09\x09this[\x27build\x27 + feature]( player, $(controls), $(layers), media );\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09this[\x27build\x27 + feature]( player, controls, layers, media );\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09} catch (e) {\x0a\x09\x09\x09\x09\x09console.error( \x27error building \x27 + feature, e );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x09};\x0a\x0a})( window, jQuery );\x0a'}