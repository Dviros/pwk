var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:04:07 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Mon, 27 Aug 2018 14:28:26 GMT\x0aETag: \x227105-5746b89d03680-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-7518/7519\x0aContent-Length: 7519\x0aKeep-Alive: timeout=5, max=44\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/media-editor.js\x0a */\x0a\x0a/* global getUserSetting, tinymce, QTags */\x0a\x0a// WordPress, TinyMCE, and Media\x0a// -----------------------------\x0a(function($, _){\x0a\x09/**\x0a\x09 * Stores the editors\x27 `wp.media.controller.Frame` instances.\x0a\x09 *\x0a\x09 * @static\x0a\x09 */\x0a\x09var workflows = {};\x0a\x0a\x09/**\x0a\x09 * A helper mixin function to avoid truthy and falsey values being\x0a\x09 *   passed as an input that expects booleans. If key is undefined in the map,\x0a\x09 *   but has a default value, set it.\x0a\x09 *\x0a\x09 * @param {object} attrs Map of props from a shortcode or settings.\x0a\x09 * @param {string} key The key within the passed map to check for a value.\x0a\x09 * @returns {mixed|undefined} The original or coerced value of key within attrs\x0a\x09 */\x0a\x09wp.media.coerce = function ( attrs, key ) {\x0a\x09\x09if ( _.isUndefined( attrs[ key ] ) && ! _.isUndefined( this.defaults[ key ] ) ) {\x0a\x09\x09\x09attrs[ key ] = this.defaults[ key ];\x0a\x09\x09} else if ( \x27true\x27 === attrs[ key ] ) {\x0a\x09\x09\x09attrs[ key ] = true;\x0a\x09\x09} else if ( \x27false\x27 === attrs[ key ] ) {\x0a\x09\x09\x09attrs[ key ] = false;\x0a\x09\x09}\x0a\x09\x09return attrs[ key ];\x0a\x09};\x0a\x0a\x09/** @namespace wp.media.string */\x0a\x09wp.media.string = {\x0a\x09\x09/**\x0a\x09\x09 * Joins the `props` and `attachment` objects,\x0a\x09\x09 * outputting the proper object format based on the\x0a\x09\x09 * attachment\x27s type.\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} [props={}] Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {Object} Joined props\x0a\x09\x09 */\x0a\x09\x09props: function( props, attachment ) {\x0a\x09\x09\x09var link, linkUrl, size, sizes,\x0a\x09\x09\x09\x09defaultProps = wp.media.view.settings.defaultProps;\x0a\x0a\x09\x09\x09props = props ? _.clone( props ) : {};\x0a\x0a\x09\x09\x09if ( attachment && attachment.type ) {\x0a\x09\x09\x09\x09props.type = attachment.type;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( \x27image\x27 === props.type ) {\x0a\x09\x09\x09\x09props = _.defaults( props || {}, {\x0a\x09\x09\x09\x09\x09align:   defaultProps.align || getUserSetting( \x27align\x27, \x27none\x27 ),\x0a\x09\x09\x09\x09\x09size:    defaultProps.size  || getUserSetting( \x27imgsize\x27, \x27medium\x27 ),\x0a\x09\x09\x09\x09\x09url:     \x27\x27,\x0a\x09\x09\x09\x09\x09classes: []\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// All attachment-specific settings follow.\x0a\x09\x09\x09if ( ! attachment ) {\x0a\x09\x09\x09\x09return props;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09props.title = props.title || attachment.title;\x0a\x0a\x09\x09\x09link = props.link || defaultProps.link || getUserSetting( \x27urlbutton\x27, \x27file\x27 );\x0a\x09\x09\x09if ( \x27file\x27 === link || \x27embed\x27 === link ) {\x0a\x09\x09\x09\x09linkUrl = attachment.url;\x0a\x09\x09\x09} else if ( \x27post\x27 === link ) {\x0a\x09\x09\x09\x09linkUrl = attachment.link;\x0a\x09\x09\x09} else if ( \x27custom\x27 === link ) {\x0a\x09\x09\x09\x09linkUrl = props.linkUrl;\x0a\x09\x09\x09}\x0a\x09\x09\x09props.linkUrl = linkUrl || \x27\x27;\x0a\x0a\x09\x09\x09// Format properties for images.\x0a\x09\x09\x09if ( \x27image\x27 === attachment.type ) {\x0a\x09\x09\x09\x09props.classes.push( \x27wp-image-\x27 + attachment.id );\x0a\x0a\x09\x09\x09\x09sizes = attachment.sizes;\x0a\x09\x09\x09\x09size = sizes && sizes[ props.size ] ? sizes[ props.size ] : attachment;\x0a\x0a\x09\x09\x09\x09_.extend( props, _.pick( attachment, \x27align\x27, \x27caption\x27, \x27alt\x27 ), {\x0a\x09\x09\x09\x09\x09width:     size.width,\x0a\x09\x09\x09\x09\x09height:    size.height,\x0a\x09\x09\x09\x09\x09src:       size.url,\x0a\x09\x09\x09\x09\x09captionId: \x27attachment_\x27 + attachment.id\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09} else if ( \x27video\x27 === attachment.type || \x27audio\x27 === attachment.type ) {\x0a\x09\x09\x09\x09_.extend( props, _.pick( attachment, \x27title\x27, \x27type\x27, \x27icon\x27, \x27mime\x27 ) );\x0a\x09\x09\x09// Format properties for non-images.\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09props.title = props.title || attachment.filename;\x0a\x09\x09\x09\x09props.rel = props.rel || \x27attachment wp-att-\x27 + attachment.id;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return props;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Create link markup that is suitable for passing to the editor\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {string} The link markup\x0a\x09\x09 */\x0a\x09\x09link: function( props, attachment ) {\x0a\x09\x09\x09var options;\x0a\x0a\x09\x09\x09props = wp.media.string.props( props, attachment );\x0a\x0a\x09\x09\x09options = {\x0a\x09\x09\x09\x09tag:     \x27a\x27,\x0a\x09\x09\x09\x09content: props.title,\x0a\x09\x09\x09\x09attrs:   {\x0a\x09\x09\x09\x09\x09href: props.linkUrl\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if ( props.rel ) {\x0a\x09\x09\x09\x09options.attrs.rel = props.rel;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return wp.html.string( options );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Create an Audio shortcode string that is suitable for passing to the editor\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {string} The audio shortcode\x0a\x09\x09 */\x0a\x09\x09audio: function( props, attachment ) {\x0a\x09\x09\x09return wp.media.string._audioVideo( \x27audio\x27, props, attachment );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Create a Video shortcode string that is suitable for passing to the editor\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {string} The video shortcode\x0a\x09\x09 */\x0a\x09\x09video: function( props, attachment ) {\x0a\x09\x09\x09return wp.media.string._audioVideo( \x27video\x27, props, attachment );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Helper function to create a media shortcode string\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @param {string} type The shortcode tag name: \x27audio\x27 or \x27video\x27.\x0a\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {string} The media shortcode\x0a\x09\x09 */\x0a\x09\x09_audioVideo: function( type, props, attachment ) {\x0a\x09\x09\x09var shortcode, html, extension;\x0a\x0a\x09\x09\x09props = wp.media.string.props( props, attachment );\x0a\x09\x09\x09if ( props.link !== \x27embed\x27 )\x0a\x09\x09\x09\x09return wp.media.string.link( props );\x0a\x0a\x09\x09\x09shortcode = {};\x0a\x0a\x09\x09\x09if ( \x27video\x27 === type ) {\x0a\x09\x09\x09\x09if ( attachment.image && -1 === attachment.image.src.indexOf( attachment.icon ) ) {\x0a\x09\x09\x09\x09\x09shortcode.poster = attachment.image.src;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( attachment.width ) {\x0a\x09\x09\x09\x09\x09shortcode.width = attachment.width;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( attachment.height ) {\x0a\x09\x09\x09\x09\x09shortcode.height = attachment.height;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09extension = attachment.filename.split(\x27.\x27).pop();\x0a\x0a\x09\x09\x09if ( _.contains( wp.media.view.settings.embedExts, extension ) ) {\x0a\x09\x09\x09\x09shortcode[extension] = attachment.url;\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09// Render unsupported audio and video files as links.\x0a\x09\x09\x09\x09return wp.media.string.link( props );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09html = wp.shortcode.string({\x0a\x09\x09\x09\x09tag:     type,\x0a\x09\x09\x09\x09attrs:   shortcode\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09return html;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Create image markup, optionally with a link and/or wrapped in a caption shortcode,\x0a\x09\x09 *  that is suitable for passing to the editor\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09 * @returns {string}\x0a\x09\x09 */\x0a\x09\x09image: function( props, attachment ) {\x0a\x09\x09\x09var img = {},\x0a\x09\x09\x09\x09options, classes, shortcode, html;\x0a\x0a\x09\x09\x09props.type = \x27image\x27;\x0a\x09\x09\x09props = wp.media.string.props( props, attachment );\x0a\x09\x09\x09classes = props.classes || [];\x0a\x0a\x09\x09\x09img.src = ! _.isUndefined( attachment ) ? attachment.url : props.url;\x0a\x09\x09\x09_.extend( img, _.pick( props, \x27width\x27, \x27height\x27, \x27alt\x27 ) );\x0a\x0a\x09\x09\x09// Only assign the align class to the image if we\x27re not printing\x0a\x09\x09\x09// a caption, since the alignment is sent to the shortcode.\x0a\x09\x09\x09if ( props.align && ! props.caption ) {\x0a\x09\x09\x09\x09classes.push( \x27align\x27 + props.align );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( props.size ) {\x0a\x09\x09\x09\x09classes.push( \x27size-\x27 + props.size );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09img[\x27class\x27] = _.compact( classes ).join(\x27 \x27);\x0a\x0a\x09\x09\x09// Generate `img` tag options.\x0a\x09\x09\x09options = {\x0a\x09\x09\x09\x09tag:    \x27img\x27,\x0a\x09\x09\x09\x09attrs:  img,\x0a\x09\x09\x09\x09single: true\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09// Generate the `a` element options, if they exist.\x0a\x09\x09\x09if ( props.linkUrl ) {\x0a\x09\x09\x09\x09options = {\x0a\x09\x09\x09\x09\x09tag:   \x27a\x27,\x0a\x09\x09\x09\x09\x09attrs: {\x0a\x09\x09\x09\x09\x09\x09href: props.linkUrl\x0a\x09\x09\x09\x09\x09},\x0a\x09\x09\x09\x09\x09content: options\x0a\x09\x09\x09\x09};\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09html = wp.html.string( options );\x0a\x0a\x09\x09\x09// Generate the caption shortcode.\x0a\x09\x09\x09if ( props.caption ) {\x0a\x09\x09\x09\x09shortcode = {};\x0a\x0a\x09\x09\x09\x09if ( img.width ) {\x0a\x09\x09\x09\x09\x09shortcode.width = img.width;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( props.captionId ) {\x0a\x09\x09\x09\x09\x09shortcode.id = props.captionId;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( props.align ) {\x0a\x09\x09\x09\x09\x09shortcode.align = \x27align\x27 + props.align;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09html = wp.shortcode.string({\x0a\x09\x09\x09\x09\x09tag:     \x27caption\x27,\x0a\x09\x09\x09\x09\x09attrs:   shortcode,\x0a\x09\x09\x09\x09\x09content: html + \x27 \x27 + props.caption\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return html;\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09wp.media.embed = {\x0a\x09\x09coerce : wp.media.coerce,\x0a\x0a\x09\x09defaults : {\x0a\x09\x09\x09url : \x27\x27,\x0a\x09\x09\x09width: \x27\x27,\x0a\x09\x09\x09height: \x27\x27\x0a\x09\x09},\x0a\x0a\x09\x09edit : function( data, isURL ) {\x0a\x09\x09\x09var frame, props = {}, shortcode;\x0a\x0a\x09\x09\x09if ( isURL ) {\x0a\x09\x09\x09\x09props.url = data.replace(/\x3c[^\x3e]+\x3e/g, \x27\x27);\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09shortcode = wp.shortcode.next( \x27embed\x27, data ).shortcode;\x0a\x0a\x09\x09\x09\x09props = _.defaults( shortcode.attrs.named, this.defaults );\x0a\x09\x09\x09\x09if ( shortcode.content ) {\x0a\x09\x09\x09\x09\x09props.url = shortcode.content;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09frame = wp.media({\x0a\x09\x09\x09\x09frame: \x27post\x27,\x0a\x09\x09\x09\x09state: \x27embed\x27,\x0a\x09\x09\x09\x09metadata: props\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09return frame;\x0a\x09\x09},\x0a\x0a\x09\x09shortcode : function( model ) {\x0a\x09\x09\x09var self = this, content;\x0a\x0a\x09\x09\x09_.each( this.defaults, function( value, key ) {\x0a\x09\x09\x09\x09model[ key ] = self.coerce( model, key );\x0a\x0a\x09\x09\x09\x09if ( value === model[ key ] ) {\x0a\x09\x09\x09\x09\x09delete model[ key ];\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09content = model.url;\x0a\x09\x09\x09delete model.url;\x0a\x0a\x09\x09\x09return new wp.shortcode({\x0a\x09\x09\x09\x09tag: \x27embed\x27,\x0a\x09\x09\x09\x09attrs: model,\x0a\x09\x09\x09\x09content: content\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * @class wp.media.collection\x0a\x09 *\x0a\x09 * @param {Object} attributes\x0a\x09 */\x0a\x09wp.media.collection = function(attributes) {\x0a\x09\x09var collections = {};\x0a\x0a\x09\x09return _.extend(/** @lends wp.media.collection.prototype */{\x0a\x09\x09\x09coerce : wp.media.coerce,\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Retrieve attachments based on the properties of the passed shortcode\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {wp.shortcode} shortcode An instance of wp.shortcode().\x0a\x09\x09\x09 * @returns {wp.media.model.Attachments} A Backbone.Collection containing\x0a\x09\x09\x09 *      the media items belonging to a collection.\x0a\x09\x09\x09 *      The query[ this.tag ] property is a Backbone.Model\x0a\x09\x09\x09 *          containing the \x27props\x27 for the collection.\x0a\x09\x09\x09 */\x0a\x09\x09\x09attachments: function( shortcode ) {\x0a\x09\x09\x09\x09var shortcodeString = shortcode.string(),\x0a\x09\x09\x09\x09\x09result = collections[ shortcodeString ],\x0a\x09\x09\x09\x09\x09attrs, args, query, others, self = this;\x0a\x0a\x09\x09\x09\x09delete collections[ shortcodeString ];\x0a\x09\x09\x09\x09if ( result ) {\x0a\x09\x09\x09\x09\x09return result;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09// Fill the default shortcode attributes.\x0a\x09\x09\x09\x09attrs = _.defaults( shortcode.attrs.named, this.defaults );\x0a\x09\x09\x09\x09args  = _.pick( attrs, \x27orderby\x27, \x27order\x27 );\x0a\x0a\x09\x09\x09\x09args.type    = this.type;\x0a\x09\x09\x09\x09args.perPage = -1;\x0a\x0a\x09\x09\x09\x09// Mark the `orderby` override attribute.\x0a\x09\x09\x09\x09if ( undefined !== attrs.orderby ) {\x0a\x09\x09\x09\x09\x09attrs._orderByField = attrs.orderby;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( \x27rand\x27 === attrs.orderby ) {\x0a\x09\x09\x09\x09\x09attrs._orderbyRandom = true;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Map the `orderby` attribute to the corresponding model property.\x0a\x09\x09\x09\x09if ( ! attrs.orderby || /^menu_order(?: ID)?$/i.test( attrs.orderby ) ) {\x0a\x09\x09\x09\x09\x09args.orderby = \x27menuOrder\x27;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Map the `ids` param to the correct query args.\x0a\x09\x09\x09\x09if ( attrs.ids ) {\x0a\x09\x09\x09\x09\x09args.post__in = attrs.ids.split(\x27,\x27);\x0a\x09\x09\x09\x09\x09args.orderby  = \x27post__in\x27;\x0a\x09\x09\x09\x09} else if ( attrs.include ) {\x0a\x09\x09\x09\x09\x09args.post__in = attrs.include.split(\x27,\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( attrs.exclude ) {\x0a\x09\x09\x09\x09\x09args.post__not_in = attrs.exclude.split(\x27,\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( ! args.post__in ) {\x0a\x09\x09\x09\x09\x09args.uploadedTo = attrs.id;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Collect the attributes that were not included in `args`.\x0a\x09\x09\x09\x09others = _.omit( attrs, \x27id\x27, \x27ids\x27, \x27include\x27, \x27exclude\x27, \x27orderby\x27, \x27order\x27 );\x0a\x0a\x09\x09\x09\x09_.each( this.defaults, function( value, key ) {\x0a\x09\x09\x09\x09\x09others[ key ] = self.coerce( others, key );\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09query = wp.media.query( args );\x0a\x09\x09\x09\x09query[ this.tag ] = new Backbone.Model( others );\x0a\x09\x09\x09\x09return query;\x0a\x09\x09\x09},\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Triggered when clicking \x27Insert {label}\x27 or \x27Update {label}\x27\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {wp.media.model.Attachments} attachments A Backbone.Collection containing\x0a\x09\x09\x09 *      the media items belonging to a collection.\x0a\x09\x09\x09 *      The query[ this.tag ] property is a Backbone.Model\x0a\x09\x09\x09 *          containing the \x27props\x27 for the collection.\x0a\x09\x09\x09 * @returns {wp.shortcode}\x0a\x09\x09\x09 */\x0a\x09\x09\x09shortcode: function( attachments ) {\x0a\x09\x09\x09\x09var props = attachments.props.toJSON(),\x0a\x09\x09\x09\x09\x09attrs = _.pick( props, \x27orderby\x27, \x27order\x27 ),\x0a\x09\x09\x09\x09\x09shortcode, clone;\x0a\x0a\x09\x09\x09\x09if ( attachments.type ) {\x0a\x09\x09\x09\x09\x09attrs.type = attachments.type;\x0a\x09\x09\x09\x09\x09delete attachments.type;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( attachments[this.tag] ) {\x0a\x09\x09\x09\x09\x09_.extend( attrs, attachments[this.tag].toJSON() );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Convert all gallery shortcodes to use the `ids` property.\x0a\x09\x09\x09\x09// Ignore `post__in` and `post__not_in`; the attachments in\x0a\x09\x09\x09\x09// the collection will already reflect those properties.\x0a\x09\x09\x09\x09attrs.ids = attachments.pluck(\x27id\x27);\x0a\x0a\x09\x09\x09\x09// Copy the `uploadedTo` post ID.\x0a\x09\x09\x09\x09if ( props.uploadedTo ) {\x0a\x09\x09\x09\x09\x09attrs.id = props.uploadedTo;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09// Check if the gallery is randomly ordered.\x0a\x09\x09\x09\x09delete attrs.orderby;\x0a\x0a\x09\x09\x09\x09if ( attrs._orderbyRandom ) {\x0a\x09\x09\x09\x09\x09attrs.orderby = \x27rand\x27;\x0a\x09\x09\x09\x09} else if ( attrs._orderByField && attrs._orderByField != \x27rand\x27 ) {\x0a\x09\x09\x09\x09\x09attrs.orderby = attrs._orderByField;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09delete attrs._orderbyRandom;\x0a\x09\x09\x09\x09delete attrs._orderByField;\x0a\x0a\x09\x09\x09\x09// If the `ids` attribute is set and `orderby` attribute\x0a\x09\x09\x09\x09// is the default value, clear it for cleaner output.\x0a\x09\x09\x09\x09if ( attrs.ids && \x27post__in\x27 === attrs.orderby ) {\x0a\x09\x09\x09\x09\x09delete attrs.orderby;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09attrs = this.setDefaults( attrs );\x0a\x0a\x09\x09\x09\x09shortcode = new wp.shortcode({\x0a\x09\x09\x09\x09\x09tag:    this.tag,\x0a\x09\x09\x09\x09\x09attrs:  attrs,\x0a\x09\x09\x09\x09\x09type:   \x27single\x27\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09// Use a cloned version of the gallery.\x0a\x09\x09\x09\x09clone = new wp.media.model.Attachments( attachments.models, {\x0a\x09\x09\x09\x09\x09props: props\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09\x09clone[ this.tag ] = attachments[ this.tag ];\x0a\x09\x09\x09\x09collections[ shortcode.string() ] = clone;\x0a\x0a\x09\x09\x09\x09return shortcode;\x0a\x09\x09\x09},\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Triggered when double-clicking a collection shortcode placeholder\x0a\x09\x09\x09 *   in the editor\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {string} content Content that is searched for possible\x0a\x09\x09\x09 *    shortcode markup matching the passed tag name,\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @this wp.media.{prop}\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {wp.media.view.MediaFrame.Select} A media workflow.\x0a\x09\x09\x09 */\x0a\x09\x09\x09edit: function( content ) {\x0a\x09\x09\x09\x09var shortcode = wp.shortcode.next( this.tag, content ),\x0a\x09\x09\x09\x09\x09defaultPostId = this.defaults.id,\x0a\x09\x09\x09\x09\x09attachments, selection, state;\x0a\x0a\x09\x09\x09\x09// Bail if we didn\x27t match the shortcode or all of the content.\x0a\x09\x09\x09\x09if ( ! shortcode || shortcode.content !== content ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Ignore the rest of the match object.\x0a\x09\x09\x09\x09shortcode = shortcode.shortcode;\x0a\x0a\x09\x09\x09\x09if ( _.isUndefined( shortcode.get(\x27id\x27) ) && ! _.isUndefined( defaultPostId ) ) {\x0a\x09\x09\x09\x09\x09shortcode.set( \x27id\x27, defaultPostId );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09attachments = this.attachments( shortcode );\x0a\x0a\x09\x09\x09\x09selection = new wp.media.model.Selection( attachments.models, {\x0a\x09\x09\x09\x09\x09props:    attachments.props.toJSON(),\x0a\x09\x09\x09\x09\x09multiple: true\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09selection[ this.tag ] = attachments[ this.tag ];\x0a\x0a\x09\x09\x09\x09// Fetch the query\x27s attachments, and then break ties from the\x0a\x09\x09\x09\x09// query to allow for sorting.\x0a\x09\x09\x09\x09selection.more().done( function() {\x0a\x09\x09\x09\x09\x09// Break ties with the query.\x0a\x09\x09\x09\x09\x09selection.props.set({ query: false });\x0a\x09\x09\x09\x09\x09selection.unmirror();\x0a\x09\x09\x09\x09\x09selection.props.unset(\x27orderby\x27);\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09// Destroy the previous gallery frame.\x0a\x09\x09\x09\x09if ( this.frame ) {\x0a\x09\x09\x09\x09\x09this.frame.dispose();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( shortcode.attrs.named.type && \x27video\x27 === shortcode.attrs.named.type ) {\x0a\x09\x09\x09\x09\x09state = \x27video-\x27 + this.tag + \x27-edit\x27;\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09state = this.tag + \x27-edit\x27;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Store the current frame.\x0a\x09\x09\x09\x09this.frame = wp.media({\x0a\x09\x09\x09\x09\x09frame:     \x27post\x27,\x0a\x09\x09\x09\x09\x09state:     state,\x0a\x09\x09\x09\x09\x09title:     this.editTitle,\x0a\x09\x09\x09\x09\x09editing:   true,\x0a\x09\x09\x09\x09\x09multiple:  true,\x0a\x09\x09\x09\x09\x09selection: selection\x0a\x09\x09\x09\x09}).open();\x0a\x0a\x09\x09\x09\x09return this.frame;\x0a\x09\x09\x09},\x0a\x0a\x09\x09\x09setDefaults: function( attrs ) {\x0a\x09\x09\x09\x09var self = this;\x0a\x09\x09\x09\x09// Remove default attributes from the shortcode.\x0a\x09\x09\x09\x09_.each( this.defaults, function( value, key ) {\x0a\x09\x09\x09\x09\x09attrs[ key ] = self.coerce( attrs, key );\x0a\x09\x09\x09\x09\x09if ( value === attrs[ key ] ) {\x0a\x09\x09\x09\x09\x09\x09delete attrs[ key ];\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09return attrs;\x0a\x09\x09\x09}\x0a\x09\x09}, attributes );\x0a\x09};\x0a\x0a\x09wp.media._galleryDefaults = {\x0a\x09\x09itemtag: \x27dl\x27,\x0a\x09\x09icontag: \x27dt\x27,\x0a\x09\x09captiontag: \x27dd\x27,\x0a\x09\x09columns: \x273\x27,\x0a\x09\x09link: \x27post\x27,\x0a\x09\x09size: \x27thumbnail\x27,\x0a\x09\x09order: \x27ASC\x27,\x0a\x09\x09id: wp.media.view.settings.post && wp.media.view.settings.post.id,\x0a\x09\x09orderby : \x27menu_order ID\x27\x0a\x09};\x0a\x0a\x09if ( wp.media.view.settings.galleryDefaults ) {\x0a\x09\x09wp.media.galleryDefaults = _.extend( {}, wp.media._galleryDefaults, wp.media.view.settings.galleryDefaults );\x0a\x09} else {\x0a\x09\x09wp.media.galleryDefaults = wp.media._galleryDefaults;\x0a\x09}\x0a\x0a\x09wp.media.gallery = new wp.media.collection({\x0a\x09\x09tag: \x27gallery\x27,\x0a\x09\x09type : \x27image\x27,\x0a\x09\x09editTitle : wp.media.view.l10n.editGalleryTitle,\x0a\x09\x09defaults : wp.media.galleryDefaults,\x0a\x0a\x09\x09setDefaults: function( attrs ) {\x0a\x09\x09\x09var self = this, changed = ! _.isEqual( wp.media.galleryDefaults, wp.media._galleryDefaults );\x0a\x09\x09\x09_.each( this.defaults, function( value, key ) {\x0a\x09\x09\x09\x09attrs[ key ] = self.coerce( attrs, key );\x0a\x09\x09\x09\x09if ( value === attrs[ key ] && ( ! changed || value === wp.media._galleryDefaults[ key ] ) ) {\x0a\x09\x09\x09\x09\x09delete attrs[ key ];\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09\x09return attrs;\x0a\x09\x09}\x0a\x09});\x0a\x0a\x09/**\x0a\x09 * @namespace wp.media.featuredImage\x0a\x09 * @memberOf wp.media\x0a\x09 */\x0a\x09wp.media.featuredImage = {\x0a\x09\x09/**\x0a\x09\x09 * Get the featured image post ID\x0a\x09\x09 *\x0a\x09\x09 * @returns {wp.media.view.settings.post.featuredImageId|number}\x0a\x09\x09 */\x0a\x09\x09get: function() {\x0a\x09\x09\x09return wp.media.view.settings.post.featuredImageId;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Sets the featured image ID property and sets the HTML in the post meta box to the new featured image.\x0a\x09\x09 *\x0a\x09\x09 * @param {number} id The post ID of the featured image, or -1 to unset it.\x0a\x09\x09 */\x0a\x09\x09set: function( id ) {\x0a\x09\x09\x09var settings = wp.media.view.settings;\x0a\x0a\x09\x09\x09settings.post.featuredImageId = id;\x0a\x0a\x09\x09\x09wp.media.post( \x27get-post-thumbnail-html\x27, {\x0a\x09\x09\x09\x09post_id:      settings.post.id,\x0a\x09\x09\x09\x09thumbnail_id: settings.post.featuredImageId,\x0a\x09\x09\x09\x09_wpnonce:     settings.post.nonce\x0a\x09\x09\x09}).done( function( html ) {\x0a\x09\x09\x09\x09if ( html == \x270\x27 ) {\x0a\x09\x09\x09\x09\x09window.alert( window.setPostThumbnailL10n.error );\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09$( \x27.inside\x27, \x27#postimagediv\x27 ).html( html );\x0a\x09\x09\x09});\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Remove the featured image id, save the post thumbnail data and\x0a\x09\x09 * set the HTML in the post meta box to no featured image.\x0a\x09\x09 */\x0a\x09\x09remove: function() {\x0a\x09\x09\x09wp.media.featuredImage.set( -1 );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * The Featured Image workflow\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.featuredImage\x0a\x09\x09 *\x0a\x09\x09 * @returns {wp.media.view.MediaFrame.Select} A media workflow.\x0a\x09\x09 */\x0a\x09\x09frame: function() {\x0a\x09\x09\x09if ( this._frame ) {\x0a\x09\x09\x09\x09wp.media.frame = this._frame;\x0a\x09\x09\x09\x09return this._frame;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09this._frame = wp.media({\x0a\x09\x09\x09\x09state: \x27featured-image\x27,\x0a\x09\x09\x09\x09states: [ new wp.media.controller.FeaturedImage() , new wp.media.controller.EditImage() ]\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09this._frame.on( \x27toolbar:create:featured-image\x27, function( toolbar ) {\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * @this wp.media.view.MediaFrame.Select\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09this.createSelectToolbar( toolbar, {\x0a\x09\x09\x09\x09\x09text: wp.media.view.l10n.setFeaturedImage\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}, this._frame );\x0a\x0a\x09\x09\x09this._frame.on( \x27content:render:edit-image\x27, function() {\x0a\x09\x09\x09\x09var selection = this.state(\x27featured-image\x27).get(\x27selection\x27),\x0a\x09\x09\x09\x09\x09view = new wp.media.view.EditImage( { model: selection.single(), controller: this } ).render();\x0a\x0a\x09\x09\x09\x09this.content.set( view );\x0a\x0a\x09\x09\x09\x09// after bringing in the frame, load the actual editor via an ajax call\x0a\x09\x09\x09\x09view.loadEditor();\x0a\x0a\x09\x09\x09}, this._frame );\x0a\x0a\x09\x09\x09this._frame.state(\x27featured-image\x27).on( \x27select\x27, this.select );\x0a\x09\x09\x09return this._frame;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * \x27select\x27 callback for Featured Image workflow, triggered when\x0a\x09\x09 *  the \x27Set Featured Image\x27 button is clicked in the media modal.\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.controller.FeaturedImage\x0a\x09\x09 */\x0a\x09\x09select: function() {\x0a\x09\x09\x09var selection = this.get(\x27selection\x27).single();\x0a\x0a\x09\x09\x09if ( ! wp.media.view.settings.post.featuredImageId ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09wp.media.featuredImage.set( selection ? selection.id : -1 );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Open the content media manager to the \x27featured image\x27 tab when\x0a\x09\x09 * the post thumbnail is clicked.\x0a\x09\x09 *\x0a\x09\x09 * Update the featured image id when the \x27remove\x27 link is clicked.\x0a\x09\x09 */\x0a\x09\x09init: function() {\x0a\x09\x09\x09$(\x27#postimagediv\x27).on( \x27click\x27, \x27#set-post-thumbnail\x27, function( event ) {\x0a\x09\x09\x09\x09event.preventDefault();\x0a\x09\x09\x09\x09// Stop propagation to prevent thickbox from activating.\x0a\x09\x09\x09\x09event.stopPropagation();\x0a\x0a\x09\x09\x09\x09wp.media.featuredImage.frame().open();\x0a\x09\x09\x09}).on( \x27click\x27, \x27#remove-post-thumbnail\x27, function() {\x0a\x09\x09\x09\x09wp.media.featuredImage.remove();\x0a\x09\x09\x09\x09return false;\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09$( wp.media.featuredImage.init );\x0a\x0a\x09/** @namespace wp.media.editor */\x0a\x09wp.media.editor = {\x0a\x09\x09/**\x0a\x09\x09 * Send content to the editor\x0a\x09\x09 *\x0a\x09\x09 * @param {string} html Content to send to the editor\x0a\x09\x09 */\x0a\x09\x09insert: function( html ) {\x0a\x09\x09\x09var editor, wpActiveEditor,\x0a\x09\x09\x09\x09hasTinymce = ! _.isUndefined( window.tinymce ),\x0a\x09\x09\x09\x09hasQuicktags = ! _.isUndefined( window.QTags );\x0a\x0a\x09\x09\x09if ( this.activeEditor ) {\x0a\x09\x09\x09\x09wpActiveEditor = window.wpActiveEditor = this.activeEditor;\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09wpActiveEditor = window.wpActiveEditor;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Delegate to the global `send_to_editor` if it exists.\x0a\x09\x09\x09// This attempts to play nice with any themes/plugins that have\x0a\x09\x09\x09// overridden the insert functionality.\x0a\x09\x09\x09if ( window.send_to_editor ) {\x0a\x09\x09\x09\x09return window.send_to_editor.apply( this, arguments );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( ! wpActiveEditor ) {\x0a\x09\x09\x09\x09if ( hasTinymce && tinymce.activeEditor ) {\x0a\x09\x09\x09\x09\x09editor = tinymce.activeEditor;\x0a\x09\x09\x09\x09\x09wpActiveEditor = window.wpActiveEditor = editor.id;\x0a\x09\x09\x09\x09} else if ( ! hasQuicktags ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} else if ( hasTinymce ) {\x0a\x09\x09\x09\x09editor = tinymce.get( wpActiveEditor );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( editor && ! editor.isHidden() ) {\x0a\x09\x09\x09\x09editor.execCommand( \x27mceInsertContent\x27, false, html );\x0a\x09\x09\x09} else if ( hasQuicktags ) {\x0a\x09\x09\x09\x09QTags.insertContent( html );\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09document.getElementById( wpActiveEditor ).value += html;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// If the old thickbox remove function exists, call it in case\x0a\x09\x09\x09// a theme/plugin overloaded it.\x0a\x09\x09\x09if ( window.tb_remove ) {\x0a\x09\x09\x09\x09try { window.tb_remove(); } catch( e ) {}\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Setup \x27workflow\x27 and add to the \x27workflows\x27 cache. \x27open\x27 can\x0a\x09\x09 *  subsequently be called upon it.\x0a\x09\x09 *\x0a\x09\x09 * @param {string} id A slug used to identify the workflow.\x0a\x09\x09 * @param {Object} [options={}]\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.editor\x0a\x09\x09 *\x0a\x09\x09 * @returns {wp.media.view.MediaFrame.Select} A media workflow.\x0a\x09\x09 */\x0a\x09\x09add: function( id, options ) {\x0a\x09\x09\x09var workflow = this.get( id );\x0a\x0a\x09\x09\x09// only add once: if exists return existing\x0a\x09\x09\x09if ( workflow ) {\x0a\x09\x09\x09\x09return workflow;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09workflow = workflows[ id ] = wp.media( _.defaults( options || {}, {\x0a\x09\x09\x09\x09frame:    \x27post\x27,\x0a\x09\x09\x09\x09state:    \x27insert\x27,\x0a\x09\x09\x09\x09title:    wp.media.view.l10n.addMedia,\x0a\x09\x09\x09\x09multiple: true\x0a\x09\x09\x09} ) );\x0a\x0a\x09\x09\x09workflow.on( \x27insert\x27, function( selection ) {\x0a\x09\x09\x09\x09var state = workflow.state();\x0a\x0a\x09\x09\x09\x09selection = selection || state.get(\x27selection\x27);\x0a\x0a\x09\x09\x09\x09if ( ! selection )\x0a\x09\x09\x09\x09\x09return;\x0a\x0a\x09\x09\x09\x09$.when.apply( $, selection.map( function( attachment ) {\x0a\x09\x09\x09\x09\x09var display = state.display( attachment ).toJSON();\x0a\x09\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09\x09 * @this wp.media.editor\x0a\x09\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09\x09return this.send.attachment( display, attachment.toJSON() );\x0a\x09\x09\x09\x09}, this ) ).done( function() {\x0a\x09\x09\x09\x09\x09wp.media.editor.insert( _.toArray( arguments ).join(\x27\x5cn\x5cn\x27) );\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09workflow.state(\x27gallery-edit\x27).on( \x27update\x27, function( selection ) {\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * @this wp.media.editor\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09this.insert( wp.media.gallery.shortcode( selection ).string() );\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09workflow.state(\x27playlist-edit\x27).on( \x27update\x27, function( selection ) {\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * @this wp.media.editor\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09this.insert( wp.media.playlist.shortcode( selection ).string() );\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09workflow.state(\x27video-playlist-edit\x27).on( \x27update\x27, function( selection ) {\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * @this wp.media.editor\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09this.insert( wp.media.playlist.shortcode( selection ).string() );\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09workflow.state(\x27embed\x27).on( \x27select\x27, function() {\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * @this wp.media.editor\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09var state = workflow.state(),\x0a\x09\x09\x09\x09\x09type = state.get(\x27type\x27),\x0a\x09\x09\x09\x09\x09embed = state.props.toJSON();\x0a\x0a\x09\x09\x09\x09embed.url = embed.url || \x27\x27;\x0a\x0a\x09\x09\x09\x09if ( \x27link\x27 === type ) {\x0a\x09\x09\x09\x09\x09_.defaults( embed, {\x0a\x09\x09\x09\x09\x09\x09linkText: embed.url,\x0a\x09\x09\x09\x09\x09\x09linkUrl: embed.url\x0a\x09\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09\x09this.send.link( embed ).done( function( resp ) {\x0a\x09\x09\x09\x09\x09\x09wp.media.editor.insert( resp );\x0a\x09\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09} else if ( \x27image\x27 === type ) {\x0a\x09\x09\x09\x09\x09_.defaults( embed, {\x0a\x09\x09\x09\x09\x09\x09title:   embed.url,\x0a\x09\x09\x09\x09\x09\x09linkUrl: \x27\x27,\x0a\x09\x09\x09\x09\x09\x09align:   \x27none\x27,\x0a\x09\x09\x09\x09\x09\x09link:    \x27none\x27\x0a\x09\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09\x09if ( \x27none\x27 === embed.link ) {\x0a\x09\x09\x09\x09\x09\x09embed.linkUrl = \x27\x27;\x0a\x09\x09\x09\x09\x09} else if ( \x27file\x27 === embed.link ) {\x0a\x09\x09\x09\x09\x09\x09embed.linkUrl = embed.url;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09this.insert( wp.media.string.image( embed ) );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09workflow.state(\x27featured-image\x27).on( \x27select\x27, wp.media.featuredImage.select );\x0a\x09\x09\x09workflow.setState( workflow.options.state );\x0a\x09\x09\x09return workflow;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Determines the proper current workflow id\x0a\x09\x09 *\x0a\x09\x09 * @param {string} [id=\x27\x27] A slug used to identify the workflow.\x0a\x09\x09 *\x0a\x09\x09 * @returns {wpActiveEditor|string|tinymce.activeEditor.id}\x0a\x09\x09 */\x0a\x09\x09id: function( id ) {\x0a\x09\x09\x09if ( id ) {\x0a\x09\x09\x09\x09return id;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// If an empty `id` is provided, default to `wpActiveEditor`.\x0a\x09\x09\x09id = window.wpActiveEditor;\x0a\x0a\x09\x09\x09// If that doesn\x27t work, fall back to `tinymce.activeEditor.id`.\x0a\x09\x09\x09if ( ! id && ! _.isUndefined( window.tinymce ) && tinymce.activeEditor ) {\x0a\x09\x09\x09\x09id = tinymce.activeEditor.id;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Last but not least, fall back to the empty string.\x0a\x09\x09\x09id = id || \x27\x27;\x0a\x09\x09\x09return id;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Return the workflow specified by id\x0a\x09\x09 *\x0a\x09\x09 * @param {string} id A slug used to identify the workflow.\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.editor\x0a\x09\x09 *\x0a\x09\x09 * @returns {wp.media.view.MediaFrame} A media workflow.\x0a\x09\x09 */\x0a\x09\x09get: function( id ) {\x0a\x09\x09\x09id = this.id( id );\x0a\x09\x09\x09return workflows[ id ];\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Remove the workflow represented by id from the workflow cache\x0a\x09\x09 *\x0a\x09\x09 * @param {string} id A slug used to identify the workflow.\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.editor\x0a\x09\x09 */\x0a\x09\x09remove: function( id ) {\x0a\x09\x09\x09id = this.id( id );\x0a\x09\x09\x09delete workflows[ id ];\x0a\x09\x09},\x0a\x09\x09/** @namespace wp.media.editor.send */\x0a\x09\x09send: {\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Called when sending an attachment to the editor\x0a\x09\x09\x09 *   from the medial modal.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object} props Attachment details (align, link, size, etc).\x0a\x09\x09\x09 * @param {Object} attachment The attachment object, media version of Post.\x0a\x09\x09\x09 * @returns {Promise}\x0a\x09\x09\x09 */\x0a\x09\x09\x09attachment: function( props, attachment ) {\x0a\x09\x09\x09\x09var caption = attachment.caption,\x0a\x09\x09\x09\x09\x09options, html;\x0a\x0a\x09\x09\x09\x09// If captions are disabled, clear the caption.\x0a\x09\x09\x09\x09if ( ! wp.media.view.settings.captions ) {\x0a\x09\x09\x09\x09\x09delete attachment.caption;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09props = wp.media.string.props( props, attachment );\x0a\x0a\x09\x09\x09\x09options = {\x0a\x09\x09\x09\x09\x09id:           attachment.id,\x0a\x09\x09\x09\x09\x09post_content: attachment.description,\x0a\x09\x09\x09\x09\x09post_excerpt: caption\x0a\x09\x09\x09\x09};\x0a\x0a\x09\x09\x09\x09if ( props.linkUrl ) {\x0a\x09\x09\x09\x09\x09options.url = props.linkUrl;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( \x27image\x27 === attachment.type ) {\x0a\x09\x09\x09\x09\x09html = wp.media.string.image( props );\x0a\x0a\x09\x09\x09\x09\x09_.each({\x0a\x09\x09\x09\x09\x09\x09align: \x27align\x27,\x0a\x09\x09\x09\x09\x09\x09size:  \x27image-size\x27,\x0a\x09\x09\x09\x09\x09\x09alt:   \x27image_alt\x27\x0a\x09\x09\x09\x09\x09}, function( option, prop ) {\x0a\x09\x09\x09\x09\x09\x09if ( props[ prop ] )\x0a\x09\x09\x09\x09\x09\x09\x09options[ option ] = props[ prop ];\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09} else if ( \x27video\x27 === attachment.type ) {\x0a\x09\x09\x09\x09\x09html = wp.media.string.video( props, attachment );\x0a\x09\x09\x09\x09} else if ( \x27audio\x27 === attachment.type ) {\x0a\x09\x09\x09\x09\x09html = wp.media.string.audio( props, attachment );\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09html = wp.media.string.link( props );\x0a\x09\x09\x09\x09\x09options.post_title = props.title;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return wp.media.post( \x27send-attachment-to-editor\x27, {\x0a\x09\x09\x09\x09\x09nonce:      wp.media.view.settings.nonce.sendToEditor,\x0a\x09\x09\x09\x09\x09attachment: options,\x0a\x09\x09\x09\x09\x09html:       html,\x0a\x09\x09\x09\x09\x09post_id:    wp.media.view.settings.post.id\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09},\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Called when \x27Insert From URL\x27 source is not an image. Example: YouTube url.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object} embed\x0a\x09\x09\x09 * @returns {Promise}\x0a\x09\x09\x09 */\x0a\x09\x09\x09link: function( embed ) {\x0a\x09\x09\x09\x09return wp.media.post( \x27send-link-to-editor\x27, {\x0a\x09\x09\x09\x09\x09nonce:     wp.media.view.settings.nonce.sendToEditor,\x0a\x09\x09\x09\x09\x09src:       embed.linkUrl,\x0a\x09\x09\x09\x09\x09link_text: embed.linkText,\x0a\x09\x09\x09\x09\x09html:      wp.media.string.link( embed ),\x0a\x09\x09\x09\x09\x09post_id:   wp.media.view.settings.post.id\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Open a workflow\x0a\x09\x09 *\x0a\x09\x09 * @param {string} [id=undefined] Optional. A slug used to identify the workflow.\x0a\x09\x09 * @param {Object} [options={}]\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.editor\x0a\x09\x09 *\x0a\x09\x09 * @returns {wp.media.view.MediaFrame}\x0a\x09\x09 */\x0a\x09\x09open: function( id, options ) {\x0a\x09\x09\x09var workflow;\x0a\x0a\x09\x09\x09options = options || {};\x0a\x0a\x09\x09\x09id = this.id( id );\x0a\x09\x09\x09this.activeEditor = id;\x0a\x0a\x09\x09\x09workflow = this.get( id );\x0a\x0a\x09\x09\x09// Redo workflow if state has changed\x0a\x09\x09\x09if ( ! workflow || ( workflow.options && options.state !== workflow.options.state ) ) {\x0a\x09\x09\x09\x09workflow = this.add( id, options );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09wp.media.frame = workflow;\x0a\x0a\x09\x09\x09return workflow.open();\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Bind click event for .insert-media using event delegation\x0a\x09\x09 */\x0a\x09\x09init: function() {\x0a\x09\x09\x09$(document.body)\x0a\x09\x09\x09\x09.on( \x27click.add-media-button\x27, \x27.insert-media\x27, function( event ) {\x0a\x09\x09\x09\x09\x09var elem = $( event.currentTarget ),\x0a\x09\x09\x09\x09\x09\x09editor = elem.data(\x27editor\x27),\x0a\x09\x09\x09\x09\x09\x09options = {\x0a\x09\x09\x09\x09\x09\x09\x09frame:    \x27post\x27,\x0a\x09\x09\x09\x09\x09\x09\x09state:    \x27insert\x27,\x0a\x09\x09\x09\x09\x09\x09\x09title:    wp.media.view.l10n.addMedia,\x0a\x09\x09\x09\x09\x09\x09\x09multiple: true\x0a\x09\x09\x09\x09\x09\x09};\x0a\x0a\x09\x09\x09\x09\x09event.preventDefault();\x0a\x0a\x09\x09\x09\x09\x09if ( elem.hasClass( \x27gallery\x27 ) ) {\x0a\x09\x09\x09\x09\x09\x09options.state = \x27gallery\x27;\x0a\x09\x09\x09\x09\x09\x09options.title = wp.media.view.l10n.createGalleryTitle;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09wp.media.editor.open( editor, options );\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09// Initialize and render the Editor drag-and-drop uploader.\x0a\x09\x09\x09new wp.media.view.EditorUploader().render();\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09_.bindAll( wp.media.editor, \x27open\x27 );\x0a\x09$( wp.media.editor.init );\x0a}(jQuery, _));\x0an( \x27select:ac!'}