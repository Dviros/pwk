var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:56:16 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Fri, 17 May 2019 04:49:54 GMT\x0aETag: \x229c11-5890e1d14c080-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-8427/8428\x0aContent-Length: 8428\x0aKeep-Alive: timeout=5, max=27\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar image = (function (domGlobals) {\x0a    \x27use strict\x27;\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var hasDimensions = function (editor) {\x0a      return editor.settings.image_dimensions === false ? false : true;\x0a    };\x0a    var hasAdvTab = function (editor) {\x0a      return editor.settings.image_advtab === true ? true : false;\x0a    };\x0a    var getPrependUrl = function (editor) {\x0a      return editor.getParam(\x27image_prepend_url\x27, \x27\x27);\x0a    };\x0a    var getClassList = function (editor) {\x0a      return editor.getParam(\x27image_class_list\x27);\x0a    };\x0a    var hasDescription = function (editor) {\x0a      return editor.settings.image_description === false ? false : true;\x0a    };\x0a    var hasImageTitle = function (editor) {\x0a      return editor.settings.image_title === true ? true : false;\x0a    };\x0a    var hasImageCaption = function (editor) {\x0a      return editor.settings.image_caption === true ? true : false;\x0a    };\x0a    var getImageList = function (editor) {\x0a      return editor.getParam(\x27image_list\x27, false);\x0a    };\x0a    var hasUploadUrl = function (editor) {\x0a      return editor.getParam(\x27images_upload_url\x27, false);\x0a    };\x0a    var hasUploadHandler = function (editor) {\x0a      return editor.getParam(\x27images_upload_handler\x27, false);\x0a    };\x0a    var getUploadUrl = function (editor) {\x0a      return editor.getParam(\x27images_upload_url\x27);\x0a    };\x0a    var getUploadHandler = function (editor) {\x0a      return editor.getParam(\x27images_upload_handler\x27);\x0a    };\x0a    var getUploadBasePath = function (editor) {\x0a      return editor.getParam(\x27images_upload_base_path\x27);\x0a    };\x0a    var getUploadCredentials = function (editor) {\x0a      return editor.getParam(\x27images_upload_credentials\x27);\x0a    };\x0a    var Settings = {\x0a      hasDimensions: hasDimensions,\x0a      hasAdvTab: hasAdvTab,\x0a      getPrependUrl: getPrependUrl,\x0a      getClassList: getClassList,\x0a      hasDescription: hasDescription,\x0a      hasImageTitle: hasImageTitle,\x0a      hasImageCaption: hasImageCaption,\x0a      getImageList: getImageList,\x0a      hasUploadUrl: hasUploadUrl,\x0a      hasUploadHandler: hasUploadHandler,\x0a      getUploadUrl: getUploadUrl,\x0a      getUploadHandler: getUploadHandler,\x0a      getUploadBasePath: getUploadBasePath,\x0a      getUploadCredentials: getUploadCredentials\x0a    };\x0a\x0a    var Global = typeof domGlobals.window !== \x27undefined\x27 ? domGlobals.window : Function(\x27return this;\x27)();\x0a\x0a    var path = function (parts, scope) {\x0a      var o = scope !== undefined && scope !== null ? scope : Global;\x0a      for (var i = 0; i \x3c parts.length && o !== undefined && o !== null; ++i)\x0a        o = o[parts[i]];\x0a      return o;\x0a    };\x0a    var resolve = function (p, scope) {\x0a      var parts = p.split(\x27.\x27);\x0a      return path(parts, scope);\x0a    };\x0a\x0a    var unsafe = function (name, scope) {\x0a      return resolve(name, scope);\x0a    };\x0a    var getOrDie = function (name, scope) {\x0a      var actual = unsafe(name, scope);\x0a      if (actual === undefined || actual === null)\x0a        throw name + \x27 not available on this browser\x27;\x0a      return actual;\x0a    };\x0a    var Global$1 = { getOrDie: getOrDie };\x0a\x0a    function FileReader () {\x0a      var f = Global$1.getOrDie(\x27FileReader\x27);\x0a      return new f();\x0a    }\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.util.Promise\x27);\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.util.XHR\x27);\x0a\x0a    var parseIntAndGetMax = function (val1, val2) {\x0a      return Math.max(parseInt(val1, 10), parseInt(val2, 10));\x0a    };\x0a    var getImageSize = function (url, callback) {\x0a      var img = domGlobals.document.createElement(\x27img\x27);\x0a      function done(width, height) {\x0a        if (img.parentNode) {\x0a          img.parentNode.removeChild(img);\x0a        }\x0a        callback({\x0a          width: width,\x0a          height: height\x0a        });\x0a      }\x0a      img.onload = function () {\x0a        var width = parseIntAndGetMax(img.width, img.clientWidth);\x0a        var height = parseIntAndGetMax(img.height, img.clientHeight);\x0a        done(width, height);\x0a      };\x0a      img.onerror = function () {\x0a        done(0, 0);\x0a      };\x0a      var style = img.style;\x0a      style.visibility = \x27hidden\x27;\x0a      style.position = \x27fixed\x27;\x0a      style.bottom = style.left = \x270px\x27;\x0a      style.width = style.height = \x27auto\x27;\x0a      domGlobals.document.body.appendChild(img);\x0a      img.src = url;\x0a    };\x0a    var buildListItems = function (inputList, itemCallback, startItems) {\x0a      function appendItems(values, output) {\x0a        output = output || [];\x0a        global$2.each(values, function (item) {\x0a          var menuItem = { text: item.text || item.title };\x0a          if (item.menu) {\x0a            menuItem.menu = appendItems(item.menu);\x0a          } else {\x0a            menuItem.value = item.value;\x0a            itemCallback(menuItem);\x0a          }\x0a          output.push(menuItem);\x0a        });\x0a        return output;\x0a      }\x0a      return appendItems(inputList, startItems || []);\x0a    };\x0a    var removePixelSuffix = function (value) {\x0a      if (value) {\x0a        value = value.replace(/px$/, \x27\x27);\x0a      }\x0a      return value;\x0a    };\x0a    var addPixelSuffix = function (value) {\x0a      if (value.length \x3e 0 && /^[0-9]+$/.test(value)) {\x0a        value += \x27px\x27;\x0a      }\x0a      return value;\x0a    };\x0a    var mergeMargins = function (css) {\x0a      if (css.margin) {\x0a        var splitMargin = css.margin.split(\x27 \x27);\x0a        switch (splitMargin.length) {\x0a        case 1:\x0a          css[\x27margin-top\x27] = css[\x27margin-top\x27] || splitMargin[0];\x0a          css[\x27margin-right\x27] = css[\x27margin-right\x27] || splitMargin[0];\x0a          css[\x27margin-bottom\x27] = css[\x27margin-bottom\x27] || splitMargin[0];\x0a          css[\x27margin-left\x27] = css[\x27margin-left\x27] || splitMargin[0];\x0a          break;\x0a        case 2:\x0a          css[\x27margin-top\x27] = css[\x27margin-top\x27] || splitMargin[0];\x0a          css[\x27margin-right\x27] = css[\x27margin-right\x27] || splitMargin[1];\x0a          css[\x27margin-bottom\x27] = css[\x27margin-bottom\x27] || splitMargin[0];\x0a          css[\x27margin-left\x27] = css[\x27margin-left\x27] || splitMargin[1];\x0a          break;\x0a        case 3:\x0a          css[\x27margin-top\x27] = css[\x27margin-top\x27] || splitMargin[0];\x0a          css[\x27margin-right\x27] = css[\x27margin-right\x27] || splitMargin[1];\x0a          css[\x27margin-bottom\x27] = css[\x27margin-bottom\x27] || splitMargin[2];\x0a          css[\x27margin-left\x27] = css[\x27margin-left\x27] || splitMargin[1];\x0a          break;\x0a        case 4:\x0a          css[\x27margin-top\x27] = css[\x27margin-top\x27] || splitMargin[0];\x0a          css[\x27margin-right\x27] = css[\x27margin-right\x27] || splitMargin[1];\x0a          css[\x27margin-bottom\x27] = css[\x27margin-bottom\x27] || splitMargin[2];\x0a          css[\x27margin-left\x27] = css[\x27margin-left\x27] || splitMargin[3];\x0a        }\x0a        delete css.margin;\x0a      }\x0a      return css;\x0a    };\x0a    var createImageList = function (editor, callback) {\x0a      var imageList = Settings.getImageList(editor);\x0a      if (typeof imageList === \x27string\x27) {\x0a        global$3.send({\x0a          url: imageList,\x0a          success: function (text) {\x0a            callback(JSON.parse(text));\x0a          }\x0a        });\x0a      } else if (typeof imageList === \x27function\x27) {\x0a        imageList(callback);\x0a      } else {\x0a        callback(imageList);\x0a      }\x0a    };\x0a    var waitLoadImage = function (editor, data, imgElm) {\x0a      function selectImage() {\x0a        imgElm.onload = imgElm.onerror = null;\x0a        if (editor.selection) {\x0a          editor.selection.select(imgElm);\x0a          editor.nodeChanged();\x0a        }\x0a      }\x0a      imgElm.onload = function () {\x0a        if (!data.width && !data.height && Settings.hasDimensions(editor)) {\x0a          editor.dom.setAttribs(imgElm, {\x0a            width: imgElm.clientWidth,\x0a            height: imgElm.clientHeight\x0a          });\x0a        }\x0a        selectImage();\x0a      };\x0a      imgElm.onerror = selectImage;\x0a    };\x0a    var blobToDataUri = function (blob) {\x0a      return new global$1(function (resolve, reject) {\x0a        var reader = FileReader();\x0a        reader.onload = function () {\x0a          resolve(reader.result);\x0a        };\x0a        reader.onerror = function () {\x0a          reject(reader.error.message);\x0a        };\x0a        reader.readAsDataURL(blob);\x0a      });\x0a    };\x0a    var Utils = {\x0a      getImageSize: getImageSize,\x0a      buildListItems: buildListItems,\x0a      removePixelSuffix: removePixelSuffix,\x0a      addPixelSuffix: addPixelSuffix,\x0a      mergeMargins: mergeMargins,\x0a      createImageList: createImageList,\x0a      waitLoadImage: waitLoadImage,\x0a      blobToDataUri: blobToDataUri\x0a    };\x0a\x0a    var global$4 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var hasOwnProperty = Object.prototype.hasOwnProperty;\x0a    var shallow = function (old, nu) {\x0a      return nu;\x0a    };\x0a    var baseMerge = function (merger) {\x0a      return function () {\x0a        var objects = new Array(arguments.length);\x0a        for (var i = 0; i \x3c objects.length; i++)\x0a          objects[i] = arguments[i];\x0a        if (objects.length === 0)\x0a          throw new Error(\x27Can\x5c\x27t merge zero objects\x27);\x0a        var ret = {};\x0a        for (var j = 0; j \x3c objects.length; j++) {\x0a          var curObject = objects[j];\x0a          for (var key in curObject)\x0a            if (hasOwnProperty.call(curObject, key)) {\x0a              ret[key] = merger(ret[key], curObject[key]);\x0a            }\x0a        }\x0a        return ret;\x0a      };\x0a    };\x0a    var merge = baseMerge(shallow);\x0a\x0a    var DOM = global$4.DOM;\x0a    var getHspace = function (image) {\x0a      if (image.style.marginLeft && image.style.marginRight && image.style.marginLeft === image.style.marginRight) {\x0a        return Utils.removePixelSuffix(image.style.marginLeft);\x0a      } else {\x0a        return \x27\x27;\x0a      }\x0a    };\x0a    var getVspace = function (image) {\x0a      if (image.style.marginTop && image.style.marginBottom && image.style.marginTop === image.style.marginBottom) {\x0a        return Utils.removePixelSuffix(image.style.marginTop);\x0a      } else {\x0a        return \x27\x27;\x0a      }\x0a    };\x0a    var getBorder = function (image) {\x0a      if (image.style.borderWidth) {\x0a        return Utils.removePixelSuffix(image.style.borderWidth);\x0a      } else {\x0a        return \x27\x27;\x0a      }\x0a    };\x0a    var getAttrib = function (image, name) {\x0a      if (image.hasAttribute(name)) {\x0a        return image.getAttribute(name);\x0a      } else {\x0a        return \x27\x27;\x0a      }\x0a    };\x0a    var getStyle = function (image, name) {\x0a      return image.style[name] ? image.style[name] : \x27\x27;\x0a    };\x0a    var hasCaption = function (image) {\x0a      return image.parentNode !== null && image.parentNode.nodeName === \x27FIGURE\x27;\x0a    };\x0a    var setAttrib = function (image, name, value) {\x0a      image.setAttribute(name, value);\x0a    };\x0a    var wrapInFigure = function (image) {\x0a      var figureElm = DOM.create(\x27figure\x27, { class: \x27image\x27 });\x0a      DOM.insertAfter(figureElm, image);\x0a      figureElm.appendChild(image);\x0a      figureElm.appendChild(DOM.create(\x27figcaption\x27, { contentEditable: true }, \x27Caption\x27));\x0a      figureElm.contentEditable = \x27false\x27;\x0a    };\x0a    var removeFigure = function (image) {\x0a      var figureElm = image.parentNode;\x0a      DOM.insertAfter(image, figureElm);\x0a      DOM.remove(figureElm);\x0a    };\x0a    var toggleCaption = function (image) {\x0a      if (hasCaption(image)) {\x0a        removeFigure(image);\x0a      } else {\x0a        wrapInFigure(image);\x0a      }\x0a    };\x0a    var normalizeStyle = function (image, normalizeCss) {\x0a      var attrValue = image.getAttribute(\x27style\x27);\x0a      var value = normalizeCss(attrValue !== null ? attrValue : \x27\x27);\x0a      if (value.length \x3e 0) {\x0a        image.setAttribute(\x27style\x27, value);\x0a        image.setAttribute(\x27data-mce-style\x27, value);\x0a      } else {\x0a        image.removeAttribute(\x27style\x27);\x0a      }\x0a    };\x0a    var setSize = function (name, normalizeCss) {\x0a      return function (image, name, value) {\x0a        if (image.style[name]) {\x0a          image.style[name] = Utils.addPixelSuffix(value);\x0a          normalizeStyle(image, normalizeCss);\x0a        } else {\x0a          setAttrib(image, name, value);\x0a        }\x0a      };\x0a    };\x0a    var getSize = function (image, name) {\x0a      if (image.style[name]) {\x0a        return Utils.removePixelSuffix(image.style[name]);\x0a      } else {\x0a        return getAttrib(image, name);\x0a      }\x0a    };\x0a    var setHspace = function (image, value) {\x0a      var pxValue = Utils.addPixelSuffix(value);\x0a      image.style.marginLeft = pxValue;\x0a      image.style.marginRight = pxValue;\x0a    };\x0a    var setVspace = function (image, value) {\x0a      var pxValue = Utils.addPixelSuffix(value);\x0a      image.style.marginTop = pxValue;\x0a      image.style.marginBottom = pxValue;\x0a    };\x0a    var setBorder = function (image, value) {\x0a      var pxValue = Utils.addPixelSuffix(value);\x0a      image.style.borderWidth = pxValue;\x0a    };\x0a    var setBorderStyle = function (image, value) {\x0a      image.style.borderStyle = value;\x0a    };\x0a    var getBorderStyle = function (image) {\x0a      return getStyle(image, \x27borderStyle\x27);\x0a    };\x0a    var isFigure = function (elm) {\x0a      return elm.nodeName === \x27FIGURE\x27;\x0a    };\x0a    var defaultData = function () {\x0a      return {\x0a        src: \x27\x27,\x0a        alt: \x27\x27,\x0a        title: \x27\x27,\x0a        width: \x27\x27,\x0a        height: \x27\x27,\x0a        class: \x27\x27,\x0a        style: \x27\x27,\x0a        caption: false,\x0a        hspace: \x27\x27,\x0a        vspace: \x27\x27,\x0a        border: \x27\x27,\x0a        borderStyle: \x27\x27\x0a      };\x0a    };\x0a    var getStyleValue = function (normalizeCss, data) {\x0a      var image = domGlobals.document.createElement(\x27img\x27);\x0a      setAttrib(image, \x27style\x27, data.style);\x0a      if (getHspace(image) || data.hspace !== \x27\x27) {\x0a        setHspace(image, data.hspace);\x0a      }\x0a      if (getVspace(image) || data.vspace !== \x27\x27) {\x0a        setVspace(image, data.vspace);\x0a      }\x0a      if (getBorder(image) || data.border !== \x27\x27) {\x0a        setBorder(image, data.border);\x0a      }\x0a      if (getBorderStyle(image) || data.borderStyle !== \x27\x27) {\x0a        setBorderStyle(image, data.borderStyle);\x0a      }\x0a      return normalizeCss(image.getAttribute(\x27style\x27));\x0a    };\x0a    var create = function (normalizeCss, data) {\x0a      var image = domGlobals.document.createElement(\x27img\x27);\x0a      write(normalizeCss, merge(data, { caption: false }), image);\x0a      setAttrib(image, \x27alt\x27, data.alt);\x0a      if (data.caption) {\x0a        var figure = DOM.create(\x27figure\x27, { class: \x27image\x27 });\x0a        figure.appendChild(image);\x0a        figure.appendChild(DOM.create(\x27figcaption\x27, { contentEditable: true }, \x27Caption\x27));\x0a        figure.contentEditable = \x27false\x27;\x0a        return figure;\x0a      } else {\x0a        return image;\x0a      }\x0a    };\x0a    var read = function (normalizeCss, image) {\x0a      return {\x0a        src: getAttrib(image, \x27src\x27),\x0a        alt: getAttrib(image, \x27alt\x27),\x0a        title: getAttrib(image, \x27title\x27),\x0a        width: getSize(image, \x27width\x27),\x0a        height: getSize(image, \x27height\x27),\x0a        class: getAttrib(image, \x27class\x27),\x0a        style: normalizeCss(getAttrib(image, \x27style\x27)),\x0a        caption: hasCaption(image),\x0a        hspace: getHspace(image),\x0a        vspace: getVspace(image),\x0a        border: getBorder(image),\x0a        borderStyle: getStyle(image, \x27borderStyle\x27)\x0a      };\x0a    };\x0a    var updateProp = function (image, oldData, newData, name, set) {\x0a      if (newData[name] !== oldData[name]) {\x0a        set(image, name, newData[name]);\x0a      }\x0a    };\x0a    var normalized = function (set, normalizeCss) {\x0a      return function (image, name, value) {\x0a        set(image, value);\x0a        normalizeStyle(image, normalizeCss);\x0a      };\x0a    };\x0a    var write = function (normalizeCss, newData, image) {\x0a      var oldData = read(normalizeCss, image);\x0a      updateProp(image, oldData, newData, \x27caption\x27, function (image, _name, _value) {\x0a        return toggleCaption(image);\x0a      });\x0a      updateProp(image, oldData, newData, \x27src\x27, setAttrib);\x0a      updateProp(image, oldData, newData, \x27alt\x27, setAttrib);\x0a      updateProp(image, oldData, newData, \x27title\x27, setAttrib);\x0a      updateProp(image, oldData, newData, \x27width\x27, setSize(\x27width\x27, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27height\x27, setSize(\x27height\x27, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27class\x27, setAttrib);\x0a      updateProp(image, oldData, newData, \x27style\x27, normalized(function (image, value) {\x0a        return setAttrib(image, \x27style\x27, value);\x0a      }, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27hspace\x27, normalized(setHspace, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27vspace\x27, normalized(setVspace, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27border\x27, normalized(setBorder, normalizeCss));\x0a      updateProp(image, oldData, newData, \x27borderStyle\x27, normalized(setBorderStyle, normalizeCss));\x0a    };\x0a\x0a    var normalizeCss = function (editor, cssText) {\x0a      var css = editor.dom.styles.parse(cssText);\x0a      var mergedCss = Utils.mergeMargins(css);\x0a      var compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));\x0a      return editor.dom.styles.serialize(compressed);\x0a    };\x0a    var getSelectedImage = function (editor) {\x0a      var imgElm = editor.selection.getNode();\x0a      var figureElm = editor.dom.getParent(imgElm, \x27figure.image\x27);\x0a      if (figureElm) {\x0a        return editor.dom.select(\x27img\x27, figureElm)[0];\x0a      }\x0a      if (imgElm && (imgElm.nodeName !== \x27IMG\x27 || imgElm.getAttribute(\x27data-mce-object\x27) || imgElm.getAttribute(\x27data-mce-placeholder\x27))) {\x0a        return null;\x0a      }\x0a      return imgElm;\x0a    };\x0a    var splitTextBlock = function (editor, figure) {\x0a      var dom = editor.dom;\x0a      var textBlock = dom.getParent(figure.parentNode, function (node) {\x0a        return editor.schema.getTextBlockElements()[node.nodeName];\x0a      }, editor.getBody());\x0a      if (textBlock) {\x0a        return dom.split(textBlock, figure);\x0a      } else {\x0a        return figure;\x0a      }\x0a    };\x0a    var readImageDataFromSelection = function (editor) {\x0a      var image = getSelectedImage(editor);\x0a      return image ? read(function (css) {\x0a        return normalizeCss(editor, css);\x0a      }, image) : defaultData();\x0a    };\x0a    var insertImageAtCaret = function (editor, data) {\x0a      var elm = create(function (css) {\x0a        return normalizeCss(editor, css);\x0a      }, data);\x0a      editor.dom.setAttrib(elm, \x27data-mce-id\x27, \x27__mcenew\x27);\x0a      editor.focus();\x0a      editor.selection.setContent(elm.outerHTML);\x0a      var insertedElm = editor.dom.select(\x27*[data-mce-id=\x22__mcenew\x22]\x27)[0];\x0a      editor.dom.setAttrib(insertedElm, \x27data-mce-id\x27, null);\x0a      if (isFigure(insertedElm)) {\x0a        var figure = splitTextBlock(editor, insertedElm);\x0a        editor.selection.select(figure);\x0a      } else {\x0a        editor.selection.select(insertedElm);\x0a      }\x0a    };\x0a    var syncSrcAttr = function (editor, image) {\x0a      editor.dom.setAttrib(image, \x27src\x27, image.getAttribute(\x27src\x27));\x0a    };\x0a    var deleteImage = function (editor, image) {\x0a      if (image) {\x0a        var elm = editor.dom.is(image.parentNode, \x27figure.image\x27) ? image.parentNode : image;\x0a        editor.dom.remove(elm);\x0a        editor.focus();\x0a        editor.nodeChanged();\x0a        if (editor.dom.isEmpty(editor.getBody())) {\x0a          editor.setContent(\x27\x27);\x0a          editor.selection.setCursorLocation();\x0a        }\x0a      }\x0a    };\x0a    var writeImageDataToSelection = function (editor, data) {\x0a      var image = getSelectedImage(editor);\x0a      write(function (css) {\x0a        return normalizeCss(editor, css);\x0a      }, data, image);\x0a      syncSrcAttr(editor, image);\x0a      if (isFigure(image.parentNode)) {\x0a        var figure = image.parentNode;\x0a        splitTextBlock(editor, figure);\x0a        editor.selection.select(image.parentNode);\x0a      } else {\x0a        editor.selection.select(image);\x0a        Utils.waitLoadImage(editor, data, image);\x0a      }\x0a    };\x0a    var insertOrUpdateImage = function (editor, data) {\x0a      var image = getSelectedImage(editor);\x0a      if (image) {\x0a        if (data.src) {\x0a          writeImageDataToSelection(editor, data);\x0a        } else {\x0a          deleteImage(editor, image);\x0a        }\x0a      } else if (data.src) {\x0a        insertImageAtCaret(editor, data);\x0a      }\x0a    };\x0a\x0a    var updateVSpaceHSpaceBorder = function (editor) {\x0a      return function (evt) {\x0a        var dom = editor.dom;\x0a        var rootControl = evt.control.rootControl;\x0a        if (!Settings.hasAdvTab(editor)) {\x0a          return;\x0a        }\x0a        var data = rootControl.toJSON();\x0a        var css = dom.parseStyle(data.style);\x0a        rootControl.find(\x27#vspace\x27).value(\x27\x27);\x0a        rootControl.find(\x27#hspace\x27).value(\x27\x27);\x0a        css = Utils.mergeMargins(css);\x0a        if (css[\x27margin-top\x27] && css[\x27margin-bottom\x27] || css[\x27margin-right\x27] && css[\x27margin-left\x27]) {\x0a          if (css[\x27margin-top\x27] === css[\x27margin-bottom\x27]) {\x0a            rootControl.find(\x27#vspace\x27).value(Utils.removePixelSuffix(css[\x27margin-top\x27]));\x0a          } else {\x0a            rootControl.find(\x27#vspace\x27).value(\x27\x27);\x0a          }\x0a          if (css[\x27margin-right\x27] === css[\x27margin-left\x27]) {\x0a            rootControl.find(\x27#hspace\x27).value(Utils.removePixelSuffix(css[\x27margin-right\x27]));\x0a          } else {\x0a            rootControl.find(\x27#hspace\x27).value(\x27\x27);\x0a          }\x0a        }\x0a        if (css[\x27border-width\x27]) {\x0a          rootControl.find(\x27#border\x27).value(Utils.removePixelSuffix(css[\x27border-width\x27]));\x0a        } else {\x0a          rootControl.find(\x27#border\x27).value(\x27\x27);\x0a        }\x0a        if (css[\x27border-style\x27]) {\x0a          rootControl.find(\x27#borderStyle\x27).value(css[\x27border-style\x27]);\x0a        } else {\x0a          rootControl.find(\x27#borderStyle\x27).value(\x27\x27);\x0a        }\x0a        rootControl.find(\x27#style\x27).value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));\x0a      };\x0a    };\x0a    var updateStyle = function (editor, win) {\x0a      win.find(\x27#style\x27).each(function (ctrl) {\x0a        var value = getStyleValue(function (css) {\x0a          return normalizeCss(editor, css);\x0a        }, merge(defaultData(), win.toJSON()));\x0a        ctrl.value(value);\x0a      });\x0a    };\x0a    var makeTab = function (editor) {\x0a      return {\x0a        title: \x27Advanced\x27,\x0a        type: \x27form\x27,\x0a        pack: \x27start\x27,\x0a        items: [\x0a          {\x0a            label: \x27Style\x27,\x0a            name: \x27style\x27,\x0a            type: \x27textbox\x27,\x0a            onchange: updateVSpaceHSpaceBorder(editor)\x0a          },\x0a          {\x0a            type: \x27form\x27,\x0a            layout: \x27grid\x27,\x0a            packV: \x27start\x27,\x0a            columns: 2,\x0a            padding: 0,\x0a            defaults: {\x0a              type: \x27textbox\x27,\x0a              maxWidth: 50,\x0a              onchange: function (evt) {\x0a                updateStyle(editor, evt.control.rootControl);\x0a              }\x0a            },\x0a            items: [\x0a              {\x0a                label: \x27Vertical space\x27,\x0a                name: \x27vspace\x27\x0a              },\x0a              {\x0a                label: \x27Border width\x27,\x0a                name: \x27border\x27\x0a              },\x0a              {\x0a                label: \x27Horizontal space\x27,\x0a                name: \x27hspace\x27\x0a              },\x0a              {\x0a                label: \x27Border style\x27,\x0a                type: \x27listbox\x27,\x0a                name: \x27borderStyle\x27,\x0a                width: 90,\x0a                maxWidth: 90,\x0a                onselect: function (evt) {\x0a                  updateStyle(editor, evt.control.rootControl);\x0a                },\x0a                values: [\x0a                  {\x0a                    text: \x27Select...\x27,\x0a                    value: \x27\x27\x0a                  },\x0a                  {\x0a                    text: \x27Solid\x27,\x0a                    value: \x27solid\x27\x0a                  },\x0a                  {\x0a                    text: \x27Dotted\x27,\x0a                    value: \x27dotted\x27\x0a                  },\x0a                  {\x0a                    text: \x27Dashed\x27,\x0a                    value: \x27dashed\x27\x0a                  },\x0a                  {\x0a                    text: \x27Double\x27,\x0a                    value: \x27double\x27\x0a                  },\x0a                  {\x0a                    text: \x27Groove\x27,\x0a                    value: \x27groove\x27\x0a                  },\x0a                  {\x0a                    text: \x27Ridge\x27,\x0a                    value: \x27ridge\x27\x0a                  },\x0a                  {\x0a                    text: \x27Inset\x27,\x0a                    value: \x27inset\x27\x0a                  },\x0a                  {\x0a                    text: \x27Outset\x27,\x0a                    value: \x27outset\x27\x0a                  },\x0a                  {\x0a                    text: \x27None\x27,\x0a                    value: \x27none\x27\x0a                  },\x0a                  {\x0a                    text: \x27Hidden\x27,\x0a                    value: \x27hidden\x27\x0a                  }\x0a                ]\x0a              }\x0a            ]\x0a          }\x0a        ]\x0a      };\x0a    };\x0a    var AdvTab = { makeTab: makeTab };\x0a\x0a    var doSyncSize = function (widthCtrl, heightCtrl) {\x0a      widthCtrl.state.set(\x27oldVal\x27, widthCtrl.value());\x0a      heightCtrl.state.set(\x27oldVal\x27, heightCtrl.value());\x0a    };\x0a    var doSizeControls = function (win, f) {\x0a      var widthCtrl = win.find(\x27#width\x27)[0];\x0a      var heightCtrl = win.find(\x27#height\x27)[0];\x0a      var constrained = win.find(\x27#constrain\x27)[0];\x0a      if (widthCtrl && heightCtrl && constrained) {\x0a        f(widthCtrl, heightCtrl, constrained.checked());\x0a      }\x0a    };\x0a    var doUpdateSize = function (widthCtrl, heightCtrl, isContrained) {\x0a      var oldWidth = widthCtrl.state.get(\x27oldVal\x27);\x0a      var oldHeight = heightCtrl.state.get(\x27oldVal\x27);\x0a      var newWidth = widthCtrl.value();\x0a      var newHeight = heightCtrl.value();\x0a      if (isContrained && oldWidth && oldHeight && newWidth && newHeight) {\x0a        if (newWidth !== oldWidth) {\x0a          newHeight = Math.round(newWidth / oldWidth * newHeight);\x0a          if (!isNaN(newHeight)) {\x0a            heightCtrl.value(newHeight);\x0a          }\x0a        } else {\x0a          newWidth = Math.round(newHeight / oldHeight * newWidth);\x0a          if (!isNaN(newWidth)) {\x0a            widthCtrl.value(newWidth);\x0a          }\x0a        }\x0a      }\x0a      doSyncSize(widthCtrl, heightCtrl);\x0a    };\x0a    var syncSize = function (win) {\x0a      doSizeControls(win, doSyncSize);\x0a    };\x0a    var updateSize = function (win) {\x0a      doSizeControls(win, doUpdateSize);\x0a    };\x0a    var createUi = function () {\x0a      var recalcSize = function (evt) {\x0a        updateSize(evt.control.rootControl);\x0a      };\x0a      return {\x0a        type: \x27container\x27,\x0a        label: \x27Dimensions\x27,\x0a        layout: \x27flex\x27,\x0a        align: \x27center\x27,\x0a        spacing: 5,\x0a        items: [\x0a          {\x0a            name: \x27width\x27,\x0a            type: \x27textbox\x27,\x0a            maxLength: 5,\x0a            size: 5,\x0a            onchange: recalcSize,\x0a            ariaLabel: \x27Width\x27\x0a          },\x0a          {\x0a            type: \x27label\x27,\x0a            text: \x27x\x27\x0a          },\x0a          {\x0a            name: \x27height\x27,\x0a            type: \x27textbox\x27,\x0a            maxLength: 5,\x0a            size: 5,\x0a            onchange: recalcSize,\x0a            ariaLabel: \x27Height\x27\x0a          },\x0a          {\x0a            name: \x27constrain\x27,\x0a            type: \x27checkbox\x27,\x0a            checked: true,\x0a            text: \x27Constrain proportions\x27\x0a          }\x0a        ]\x0a      };\x0a    };\x0a    var SizeManager = {\x0a      createUi: createUi,\x0a      syncSize: syncSize,\x0a      updateSize: updateSize\x0a    };\x0a\x0a    var onSrcChange = function (evt, editor) {\x0a      var srcURL, prependURL, absoluteURLPattern;\x0a      var meta = evt.meta || {};\x0a      var control = evt.control;\x0a      var rootControl = control.rootControl;\x0a      var imageListCtrl = rootControl.find(\x27#image-list\x27)[0];\x0a      if (imageListCtrl) {\x0a        imageListCtrl.value(editor.convertURL(control.value(), \x27src\x27));\x0a      }\x0a      global$2.each(meta, function (value, key) {\x0a        rootControl.find(\x27#\x27 + key).value(value);\x0a      });\x0a      if (!meta.width && !meta.height) {\x0a        srcURL = editor.convertURL(control.value(), \x27src\x27);\x0a        prependURL = Settings.getPrependUrl(editor);\x0a        absoluteURLPattern = new RegExp(\x27^(?:[a-z]+:)?//\x27, \x27i\x27);\x0a        if (prependURL && !absoluteURLPattern.test(srcURL) && srcURL.substring(0, prependURL.length) !== prependURL) {\x0a          srcURL = prependURL + srcURL;\x0a        }\x0a        control.value(srcURL);\x0a        Utils.getImageSize(editor.documentBaseURI.toAbsolute(control.value()), function (data) {\x0a          if (data.width && data.height && Settings.hasDimensions(editor)) {\x0a            rootControl.find(\x27#width\x27).value(data.width);\x0a            rootControl.find(\x27#height\x27).value(data.height);\x0a            SizeManager.syncSize(rootControl);\x0a          }\x0a        });\x0a      }\x0a    };\x0a    var onBeforeCall = function (evt) {\x0a      evt.meta = evt.control.rootControl.toJSON();\x0a    };\x0a    var getGeneralItems = function (editor, imageListCtrl) {\x0a      var generalFormItems = [\x0a        {\x0a          name: \x27src\x27,\x0a          type: \x27filepicker\x27,\x0a          filetype: \x27image\x27,\x0a          label: \x27Source\x27,\x0a          autofocus: true,\x0a          onchange: function (evt) {\x0a            onSrcChange(evt, editor);\x0a          },\x0a          onbeforecall: onBeforeCall\x0a        },\x0a        imageListCtrl\x0a      ];\x0a      if (Settings.hasDescription(editor)) {\x0a        generalFormItems.push({\x0a          name: \x27alt\x27,\x0a          type: \x27textbox\x27,\x0a          label: \x27Image description\x27\x0a        });\x0a      }\x0a      if (Settings.hasImageTitle(editor)) {\x0a        generalFormItems.push({\x0a          name: \x27title\x27,\x0a          type: \x27textbox\x27,\x0a          label: \x27Image Title\x27\x0a        });\x0a      }\x0a      if (Settings.hasDimensions(editor)) {\x0a        generalFormItems.push(SizeManager.createUi());\x0a      }\x0a      if (Settings.getClassList(editor)) {\x0a        generalFormItems.push({\x0a          name: \x27class\x27,\x0a          type: \x27listbox\x27,\x0a          label: \x27Class\x27,\x0a          values: Utils.buildListItems(Settings.getClassList(editor), function (item) {\x0a            if (item.value) {\x0a              item.textStyle = function () {\x0a                return editor.formatter.getCssText({\x0a                  inline: \x27img\x27,\x0a                  classes: [item.value]\x0a                });\x0a              };\x0a            }\x0a          })\x0a        });\x0a      }\x0a      if (Settings.hasImageCaption(editor)) {\x0a        generalFormItems.push({\x0a          name: \x27caption\x27,\x0a          type: \x27checkbox\x27,\x0a          label: \x27Caption\x27\x0a        });\x0a      }\x0a      return generalFormItems;\x0a    };\x0a    var makeTab$1 = function (editor, imageListCtrl) {\x0a      return {\x0a        title: \x27General\x27,\x0a        type: \x27form\x27,\x0a        items: getGeneralItems(editor, imageListCtrl)\x0a      };\x0a    };\x0a    var MainTab = {\x0a      makeTab: makeTab$1,\x0a      getGeneralItems: getGeneralItems\x0a    };\x0a\x0a    var url = function () {\x0a      return Global$1.getOrDie(\x27URL\x27);\x0a    };\x0a    var createObjectURL = function (blob) {\x0a      return url().createObjectURL(blob);\x0a    };\x0a    var revokeObjectURL = function (u) {\x0a      url().revokeObjectURL(u);\x0a    };\x0a    var URL = {\x0a      createObjectURL: createObjectURL,\x0a      revokeObjectURL: revokeObjectURL\x0a    };\x0a\x0a    var global$5 = tinymce.util.Tools.resolve(\x27tinymce.ui.Factory\x27);\x0a\x0a    function XMLHttpRequest () {\x0a      var f = Global$1.getOrDie(\x27XMLHttpRequest\x27);\x0a      return new f();\x0a    }\x0a\x0a    var noop = function () {\x0a    };\x0a    var pathJoin = function (path1, path2) {\x0a      if (path1) {\x0a        return path1.replace(/\x5c/$/, \x27\x27) + \x27/\x27 + path2.replace(/^\x5c//, \x27\x27);\x0a      }\x0a      return path2;\x0a    };\x0a    function Uploader (settings) {\x0a      var defaultHandler = function (blobInfo, success, failure, progress) {\x0a        var xhr, formData;\x0a        xhr = XMLHttpRequest();\x0a        xhr.open(\x27POST\x27, settings.url);\x0a        xhr.withCredentials = settings.credentials;\x0a        xhr.upload.onprogress = function (e) {\x0a          progress(e.loaded / e.total * 100);\x0a        };\x0a        xhr.onerror = function () {\x0a          failure(\x27Image upload failed due to a XHR Transport error. Code: \x27 + xhr.status);\x0a        };\x0a        xhr.onload = function () {\x0a          var json;\x0a          if (xhr.status \x3c 200 || xhr.status \x3e= 300) {\x0a            failure(\x27HTTP Error: \x27 + xhr.status);\x0a            return;\x0a          }\x0a          json = JSON.parse(xhr.responseText);\x0a          if (!json || typeof json.location !== \x27string\x27) {\x0a            failure(\x27Invalid JSON: \x27 + xhr.responseText);\x0a            return;\x0a          }\x0a          success(pathJoin(settings.basePath, json.location));\x0a        };\x0a        formData = new domGlobals.FormData();\x0a        formData.append(\x27file\x27, blobInfo.blob(), blobInfo.filename());\x0a        xhr.send(formData);\x0a      };\x0a      var uploadBlob = function (blobInfo, handler) {\x0a        return new global$1(function (resolve, reject) {\x0a          try {\x0a            handler(blobInfo, resolve, reject, noop);\x0a          } catch (ex) {\x0a            reject(ex.message);\x0a          }\x0a        });\x0a      };\x0a      var isDefaultHandler = function (handler) {\x0a        return handler === defaultHandler;\x0a      };\x0a      var upload = function (blobInfo) {\x0a        return !settings.url && isDefaultHandler(settings.handler) ? global$1.reject(\x27Upload url missing from the settings.\x27) : uploadBlob(blobInfo, settings.handler);\x0a      };\x0a      settings = global$2.extend({\x0a        credentials: false,\x0a        handler: defaultHandler\x0a      }, settings);\x0a      return { upload: upload };\x0a    }\x0a\x0a    var onFileInput = function (editor) {\x0a      return function (evt) {\x0a        var Throbber = global$5.get(\x27Throbber\x27);\x0a        var rootControl = evt.control.rootControl;\x0a        var throbber = new Throbber(rootControl.getEl());\x0a        var file = evt.control.value();\x0a        var blobUri = URL.createObjectURL(file);\x0a        var uploader = Uploader({\x0a          url: Settings.getUploadUrl(editor),\x0a          basePath: Settings.getUploadBasePath(editor),\x0a          credentials: Settings.getUploadCredentials(editor),\x0a          handler: Settings.getUploadHandler(editor)\x0a        });\x0a        var finalize = function () {\x0a          throbber.hide();\x0a          URL.revokeObjectURL(blobUri);\x0a        };\x0a        throbber.show();\x0a        return Utils.blobToDataUri(file).then(function (dataUrl) {\x0a          var blobInfo = editor.editorUpload.blobCache.create({\x0a            blob: file,\x0a            blobUri: blobUri,\x0a            name: file.name ? file.name.replace(/\x5c.[^\x5c.]+$/, \x27\x27) : null,\x0a            base64: dataUrl.split(\x27,\x27)[1]\x0a          });\x0a          return uploader.upload(blobInfo).then(function (url) {\x0a            var src = rootControl.find(\x27#src\x27);\x0a            src.value(url);\x0a            rootControl.find(\x27tabpanel\x27)[0].activateTab(0);\x0a            src.fire(\x27change\x27);\x0a            finalize();\x0a            return url;\x0a          });\x0a        }).catch(function (err) {\x0a          editor.windowManager.alert(err);\x0a          finalize();\x0a        });\x0a      };\x0a    };\x0a    var acceptExts = \x27.jpg,.jpeg,.png,.gif\x27;\x0a    var makeTab$2 = function (editor) {\x0a      return {\x0a        title: \x27Upload\x27,\x0a        type: \x27form\x27,\x0a        layout: \x27flex\x27,\x0a        direction: \x27column\x27,\x0a        align: \x27stretch\x27,\x0a        padding: \x2720 20 20 20\x27,\x0a        items: [\x0a          {\x0a            type: \x27container\x27,\x0a            layout: \x27flex\x27,\x0a            direction: \x27column\x27,\x0a            align: \x27center\x27,\x0a            spacing: 10,\x0a            items: [\x0a              {\x0a                text: \x27Browse for an image\x27,\x0a                type: \x27browsebutton\x27,\x0a                accept: acceptExts,\x0a                onchange: onFileInput(editor)\x0a              },\x0a              {\x0a                text: \x27OR\x27,\x0a                type: \x27label\x27\x0a              }\x0a            ]\x0a          },\x0a          {\x0a            text: \x27Drop an image here\x27,\x0a            type: \x27dropzone\x27,\x0a            accept: acceptExts,\x0a            height: 100,\x0a            onchange: onFileInput(editor)\x0a          }\x0a        ]\x0a      };\x0a    };\x0a    var UploadTab = { makeTab: makeTab$2 };\x0a\x0a    function curry(fn) {\x0a      var initialArgs = [];\x0a      for (var _i = 1; _i \x3c arguments.length; _i++) {\x0a        initialArgs[_i - 1] = arguments[_i];\x0a      }\x0a      return function () {\x0a        var restArgs = [];\x0a        for (var _i = 0; _i \x3c arguments.length; _i++) {\x0a          restArgs[_i] = arguments[_i];\x0a        }\x0a        var all = initialArgs.concat(restArgs);\x0a        return fn.apply(null, all);\x0a      };\x0a    }\x0a\x0a    var submitForm = function (editor, evt) {\x0a      var win = evt.control.getRoot();\x0a      SizeManager.updateSize(win);\x0a      editor.undoManager.transact(function () {\x0a        var data = merge(readImageDataFromSelection(editor), win.toJSON());\x0a        insertOrUpdateImage(editor, data);\x0a      });\x0a      editor.editorUpload.uploadImagesAuto();\x0a    };\x0a    function Dialog (editor) {\x0a      function showDialog(imageList) {\x0a        var data = readImageDataFromSelection(editor);\x0a        var win, imageListCtrl;\x0a        if (imageList) {\x0a          imageListCtrl = {\x0a            type: \x27listbox\x27,\x0a            label: \x27Image list\x27,\x0a            name: \x27image-list\x27,\x0a            values: Utils.buildListItems(imageList, function (item) {\x0a              item.value = editor.convertURL(item.value || item.url, \x27src\x27);\x0a            }, [{\x0a                text: \x27None\x27,\x0a                value: \x27\x27\x0a              }]),\x0a            value: data.src && editor.convertURL(data.src, \x27src\x27),\x0a            onselect: function (e) {\x0a              var altCtrl = win.find(\x27#alt\x27);\x0a              if (!altCtrl.value() || e.lastControl && altCtrl.value() === e.lastControl.text()) {\x0a                altCtrl.value(e.control.text());\x0a              }\x0a              win.find(\x27#src\x27).value(e.control.value()).fire(\x27change\x27);\x0a            },\x0a            onPostRender: function () {\x0a              imageListCtrl = this;\x0a            }\x0a          };\x0a        }\x0a        if (Settings.hasAdvTab(editor) || Settings.hasUploadUrl(editor) || Settings.hasUploadHandler(editor)) {\x0a          var body = [MainTab.makeTab(editor, imageListCtrl)];\x0a          if (Settings.hasAdvTab(editor)) {\x0a            body.push(AdvTab.makeTab(editor));\x0a          }\x0a          if (Settings.hasUploadUrl(editor) || Settings.hasUploadHandler(editor)) {\x0a            body.push(UploadTab.makeTab(editor));\x0a          }\x0a          win = editor.windowManager.open({\x0a            title: \x27Insert/edit image\x27,\x0a            data: data,\x0a            bodyType: \x27tabpanel\x27,\x0a            body: body,\x0a            onSubmit: curry(submitForm, editor)\x0a          });\x0a        } else {\x0a          win = editor.windowManager.open({\x0a            title: \x27Insert/edit image\x27,\x0a            data: data,\x0a            body: MainTab.getGeneralItems(editor, imageListCtrl),\x0a            onSubmit: curry(submitForm, editor)\x0a          });\x0a        }\x0a        SizeManager.syncSize(win);\x0a      }\x0a      function open() {\x0a        Utils.createImageList(editor, showDialog);\x0a      }\x0a      return { open: open };\x0a    }\x0a\x0a    var register = function (editor) {\x0a      editor.addCommand(\x27mceImage\x27, Dialog(editor).open);\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var hasImageClass = function (node) {\x0a      var className = node.attr(\x27class\x27);\x0a      return className && /\x5cbimage\x5cb/.test(className);\x0a    };\x0a    var toggleContentEditableState = function (state) {\x0a      return function (nodes) {\x0a        var i = nodes.length, node;\x0a        var toggleContentEditable = function (node) {\x0a          node.attr(\x27contenteditable\x27, state ? \x27true\x27 : null);\x0a        };\x0a        while (i--) {\x0a          node = nodes[i];\x0a          if (hasImageClass(node)) {\x0a            node.attr(\x27contenteditable\x27, state ? \x27false\x27 : null);\x0a            global$2.each(node.getAll(\x27figcaption\x27), toggleContentEditable);\x0a          }\x0a        }\x0a      };\x0a    };\x0a    var setup = function (editor) {\x0a      editor.on(\x27preInit\x27, function () {\x0a        editor.parser.addNodeFilter(\x27figure\x27, toggleContentEditableState(true));\x0a        editor.serializer.addNodeFilter(\x27figure\x27, toggleContentEditableState(false));\x0a      });\x0a    };\x0a    var FilterContent = { setup: setup };\x0a\x0a    var register$1 = function (editor) {\x0a      editor.addButton(\x27image\x27, {\x0a        icon: \x27image\x27,\x0a        tooltip: \x27Insert/edit image\x27,\x0a        onclick: Dialog(editor).open,\x0a        stateSelector: \x27img:not([data-mce-object],[data-mce-placeholder]),figure.image\x27\x0a      });\x0a      editor.addMenuItem(\x27image\x27, {\x0a        icon: \x27image\x27,\x0a        text: \x27Image\x27,\x0a        onclick: Dialog(editor).open,\x0a        context: \x27insert\x27,\x0a        prependToContext: true\x0a      });\x0a    };\x0a    var Buttons = { register: register$1 };\x0a\x0a    global.add(\x27image\x27, function (editor) {\x0a      FilterContent.setup(editor);\x0a      Buttons.register(editor);\x0a      Commands.register(editor);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}(window));\x0a})();\x0a'}