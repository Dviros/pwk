var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:55:24 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Wed, 30 Jan 2019 14:12:52 GMT\x0aETag: \x22de2-580ad81630100-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1297/1298\x0aContent-Length: 1298\x0aKeep-Alive: timeout=5, max=64\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a( function( tinymce ) {\x0a\x09tinymce.PluginManager.add( \x27wpemoji\x27, function( editor ) {\x0a\x09\x09var typing,\x0a\x09\x09\x09wp = window.wp,\x0a\x09\x09\x09settings = window._wpemojiSettings,\x0a\x09\x09\x09env = tinymce.Env,\x0a\x09\x09\x09ua = window.navigator.userAgent,\x0a\x09\x09\x09isWin = ua.indexOf( \x27Windows\x27 ) \x3e -1,\x0a\x09\x09\x09isWin8 = ( function() {\x0a\x09\x09\x09\x09var match = ua.match( /Windows NT 6\x5c.(\x5cd)/ );\x0a\x0a\x09\x09\x09\x09if ( match && match[1] \x3e 1 ) {\x0a\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return false;\x0a\x09\x09\x09}());\x0a\x0a\x09\x09if ( ! wp || ! wp.emoji || settings.supports.everything ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09function setImgAttr( image ) {\x0a\x09\x09\x09image.className = \x27emoji\x27;\x0a\x09\x09\x09image.setAttribute( \x27data-mce-resize\x27, \x27false\x27 );\x0a\x09\x09\x09image.setAttribute( \x27data-mce-placeholder\x27, \x271\x27 );\x0a\x09\x09\x09image.setAttribute( \x27data-wp-emoji\x27, \x271\x27 );\x0a\x09\x09}\x0a\x0a\x09\x09function replaceEmoji( node ) {\x0a\x09\x09\x09var imgAttr = {\x0a\x09\x09\x09\x09\x27data-mce-resize\x27: \x27false\x27,\x0a\x09\x09\x09\x09\x27data-mce-placeholder\x27: \x271\x27,\x0a\x09\x09\x09\x09\x27data-wp-emoji\x27: \x271\x27\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09wp.emoji.parse( node, { imgAttr: imgAttr } );\x0a\x09\x09}\x0a\x0a\x09\x09// Test if the node text contains emoji char(s) and replace.\x0a\x09\x09function parseNode( node ) {\x0a\x09\x09\x09var selection, bookmark;\x0a\x0a\x09\x09\x09if ( node && window.twemoji && window.twemoji.test( node.textContent || node.innerText ) ) {\x0a\x09\x09\x09\x09if ( env.webkit ) {\x0a\x09\x09\x09\x09\x09selection = editor.selection;\x0a\x09\x09\x09\x09\x09bookmark = selection.getBookmark();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09replaceEmoji( node );\x0a\x0a\x09\x09\x09\x09if ( env.webkit ) {\x0a\x09\x09\x09\x09\x09selection.moveToBookmark( bookmark );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09if ( isWin8 ) {\x0a\x09\x09\x09// Windows 8+ emoji can be \x22typed\x22 with the onscreen keyboard.\x0a\x09\x09\x09// That triggers the normal keyboard events, but not the \x27input\x27 event.\x0a\x09\x09\x09// Thankfully it sets keyCode 231 when the onscreen keyboard inserts any emoji.\x0a\x09\x09\x09editor.on( \x27keyup\x27, function( event ) {\x0a\x09\x09\x09\x09if ( event.keyCode === 231 ) {\x0a\x09\x09\x09\x09\x09parseNode( editor.selection.getNode() );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09} else if ( ! isWin ) {\x0a\x09\x09\x09// In MacOS inserting emoji doesn\x27t trigger the stanradr keyboard events.\x0a\x09\x09\x09// Thankfully it triggers the \x27input\x27 event.\x0a\x09\x09\x09// This works in Android and iOS as well.\x0a\x09\x09\x09editor.on( \x27keydown keyup\x27, function( event ) {\x0a\x09\x09\x09\x09typing = ( event.type === \x27keydown\x27 );\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09editor.on( \x27input\x27, function() {\x0a\x09\x09\x09\x09if ( typing ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09parseNode( editor.selection.getNode() );\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09editor.on( \x27setcontent\x27, function( event ) {\x0a\x09\x09\x09var selection = editor.selection,\x0a\x09\x09\x09\x09node = selection.getNode();\x0a\x0a\x09\x09\x09if ( window.twemoji && window.twemoji.test( node.textContent || node.innerText ) ) {\x0a\x09\x09\x09\x09replaceEmoji( node );\x0a\x0a\x09\x09\x09\x09// In IE all content in the editor is left selected after wp.emoji.parse()...\x0a\x09\x09\x09\x09// Collapse the selection to the beginning.\x0a\x09\x09\x09\x09if ( env.ie && env.ie \x3c 9 && event.load && node && node.nodeName === \x27BODY\x27 ) {\x0a\x09\x09\x09\x09\x09selection.collapse( true );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09} );\x0a\x0a\x09\x09// Convert Twemoji compatible pasted emoji replacement images into our format.\x0a\x09\x09editor.on( \x27PastePostProcess\x27, function( event ) {\x0a\x09\x09\x09if ( window.twemoji ) {\x0a\x09\x09\x09\x09tinymce.each( editor.dom.$( \x27img.emoji\x27, event.node ), function( image ) {\x0a\x09\x09\x09\x09\x09if ( image.alt && window.twemoji.test( image.alt ) ) {\x0a\x09\x09\x09\x09\x09\x09setImgAttr( image );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x0a\x09\x09editor.on( \x27postprocess\x27, function( event ) {\x0a\x09\x09\x09if ( event.content ) {\x0a\x09\x09\x09\x09event.content = event.content.replace( /\x3cimg[^\x3e]+data-wp-emoji=\x22[^\x3e]+\x3e/g, function( img ) {\x0a\x09\x09\x09\x09\x09var alt = img.match( /alt=\x22([^\x22]+)\x22/ );\x0a\x0a\x09\x09\x09\x09\x09if ( alt && alt[1] ) {\x0a\x09\x09\x09\x09\x09\x09return alt[1];\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09return img;\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x09\x09} );\x0a\x0a\x09\x09editor.on( \x27resolvename\x27, function( event ) {\x0a\x09\x09\x09if ( event.target.nodeName === \x27IMG\x27 && editor.dom.getAttrib( event.target, \x27data-wp-emoji\x27 ) ) {\x0a\x09\x09\x09\x09event.preventDefault();\x0a\x09\x09\x09}\x0a\x09\x09} );\x0a\x09} );\x0a} )( window.tinymce );\x0a'}