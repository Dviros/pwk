var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:58:41 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Tue, 26 Sep 2017 21:15:47 GMT\x0aETag: \x221040-55a1e2dc5a6c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1469/1470\x0aContent-Length: 1470\x0aKeep-Alive: timeout=5, max=37\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * mctabs.js\x0a *\x0a * Released under LGPL License.\x0a * Copyright (c) 1999-2017 Ephox Corp. All rights reserved\x0a *\x0a * License: http://www.tinymce.com/license\x0a * Contributing: http://www.tinymce.com/contributing\x0a */\x0a\x0a/*jshint globals: tinyMCEPopup */\x0a\x0afunction MCTabs() {\x0a  this.settings = [];\x0a  this.onChange = tinyMCEPopup.editor.windowManager.createInstance(\x27tinymce.util.Dispatcher\x27);\x0a}\x0a\x0aMCTabs.prototype.init = function (settings) {\x0a  this.settings = settings;\x0a};\x0a\x0aMCTabs.prototype.getParam = function (name, default_value) {\x0a  var value = null;\x0a\x0a  value = (typeof (this.settings[name]) == \x22undefined\x22) ? default_value : this.settings[name];\x0a\x0a  // Fix bool values\x0a  if (value == \x22true\x22 || value == \x22false\x22) {\x0a    return (value == \x22true\x22);\x0a  }\x0a\x0a  return value;\x0a};\x0a\x0aMCTabs.prototype.showTab = function (tab) {\x0a  tab.className = \x27current\x27;\x0a  tab.setAttribute(\x22aria-selected\x22, true);\x0a  tab.setAttribute(\x22aria-expanded\x22, true);\x0a  tab.tabIndex = 0;\x0a};\x0a\x0aMCTabs.prototype.hideTab = function (tab) {\x0a  var t = this;\x0a\x0a  tab.className = \x27\x27;\x0a  tab.setAttribute(\x22aria-selected\x22, false);\x0a  tab.setAttribute(\x22aria-expanded\x22, false);\x0a  tab.tabIndex = -1;\x0a};\x0a\x0aMCTabs.prototype.showPanel = function (panel) {\x0a  panel.className = \x27current\x27;\x0a  panel.setAttribute(\x22aria-hidden\x22, false);\x0a};\x0a\x0aMCTabs.prototype.hidePanel = function (panel) {\x0a  panel.className = \x27panel\x27;\x0a  panel.setAttribute(\x22aria-hidden\x22, true);\x0a};\x0a\x0aMCTabs.prototype.getPanelForTab = function (tabElm) {\x0a  return tinyMCEPopup.dom.getAttrib(tabElm, \x22aria-controls\x22);\x0a};\x0a\x0aMCTabs.prototype.displayTab = function (tab_id, panel_id, avoid_focus) {\x0a  var panelElm, panelContainerElm, tabElm, tabContainerElm, selectionClass, nodes, i, t = this;\x0a\x0a  tabElm = document.getElementById(tab_id);\x0a\x0a  if (panel_id === undefined) {\x0a    panel_id = t.getPanelForTab(tabElm);\x0a  }\x0a\x0a  panelElm = document.getElementById(panel_id);\x0a  panelContainerElm = panelElm ? panelElm.parentNode : null;\x0a  tabContainerElm = tabElm ? tabElm.parentNode : null;\x0a  selectionClass = t.getParam(\x27selection_class\x27, \x27current\x27);\x0a\x0a  if (tabElm && tabContainerElm) {\x0a    nodes = tabContainerElm.childNodes;\x0a\x0a    // Hide all other tabs\x0a    for (i = 0; i \x3c nodes.length; i++) {\x0a      if (nodes[i].nodeName == \x22LI\x22) {\x0a        t.hideTab(nodes[i]);\x0a      }\x0a    }\x0a\x0a    // Show selected tab\x0a    t.showTab(tabElm);\x0a  }\x0a\x0a  if (panelElm && panelContainerElm) {\x0a    nodes = panelContainerElm.childNodes;\x0a\x0a    // Hide all other panels\x0a    for (i = 0; i \x3c nodes.length; i++) {\x0a      if (nodes[i].nodeName == \x22DIV\x22) {\x0a        t.hidePanel(nodes[i]);\x0a      }\x0a    }\x0a\x0a    if (!avoid_focus) {\x0a      tabElm.focus();\x0a    }\x0a\x0a    // Show selected panel\x0a    t.showPanel(panelElm);\x0a  }\x0a};\x0a\x0aMCTabs.prototype.getAnchor = function () {\x0a  var pos, url = document.location.href;\x0a\x0a  if ((pos = url.lastIndexOf(\x27#\x27)) != -1) {\x0a    return url.substring(pos + 1);\x0a  }\x0a\x0a  return \x22\x22;\x0a};\x0a\x0a\x0a//Global instance\x0avar mcTabs = new MCTabs();\x0a\x0atinyMCEPopup.onInit.add(function () {\x0a  var tinymce = tinyMCEPopup.getWin().tinymce, dom = tinyMCEPopup.dom, each = tinymce.each;\x0a\x0a  each(dom.select(\x27div.tabs\x27), function (tabContainerElm) {\x0a    //var keyNav;\x0a\x0a    dom.setAttrib(tabContainerElm, \x22role\x22, \x22tablist\x22);\x0a\x0a    var items = tinyMCEPopup.dom.select(\x27li\x27, tabContainerElm);\x0a    var action = function (id) {\x0a      mcTabs.displayTab(id, mcTabs.getPanelForTab(id));\x0a      mcTabs.onChange.dispatch(id);\x0a    };\x0a\x0a    each(items, function (item) {\x0a      dom.setAttrib(item, \x27role\x27, \x27tab\x27);\x0a      dom.bind(item, \x27click\x27, function (evt) {\x0a        action(item.id);\x0a      });\x0a    });\x0a\x0a    dom.bind(dom.getRoot(), \x27keydown\x27, function (evt) {\x0a      if (evt.keyCode === 9 && evt.ctrlKey && !evt.altKey) { // Tab\x0a        //keyNav.moveFocus(evt.shiftKey ? -1 : 1);\x0a        tinymce.dom.Event.cancel(evt);\x0a      }\x0a    });\x0a\x0a    each(dom.select(\x27a\x27, tabContainerElm), function (a) {\x0a      dom.setAttrib(a, \x27tabindex\x27, \x27-1\x27);\x0a    });\x0a\x0a    /*keyNav = tinyMCEPopup.editor.windowManager.createInstance(\x27tinymce.ui.KeyboardNavigation\x27, {\x0a      root: tabContainerElm,\x0a      items: items,\x0a      onAction: action,\x0a      actOnFocus: true,\x0a      enableLeftRight: true,\x0a      enableUpDown: true\x0a    }, tinyMCEPopup.dom);*/\x0a  }\x0a);\x0a});'}