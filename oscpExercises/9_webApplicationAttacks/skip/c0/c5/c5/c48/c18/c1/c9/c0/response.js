var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:56:39 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Tue, 29 Jan 2019 20:19:51 GMT\x0aETag: \x2293f9-5809e83fae7c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-8034/8035\x0aContent-Length: 8035\x0aKeep-Alive: timeout=5, max=96\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar media = (function () {\x0a    \x27use strict\x27;\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.Env\x27);\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var getScripts = function (editor) {\x0a      return editor.getParam(\x27media_scripts\x27);\x0a    };\x0a    var getAudioTemplateCallback = function (editor) {\x0a      return editor.getParam(\x27audio_template_callback\x27);\x0a    };\x0a    var getVideoTemplateCallback = function (editor) {\x0a      return editor.getParam(\x27video_template_callback\x27);\x0a    };\x0a    var hasLiveEmbeds = function (editor) {\x0a      return editor.getParam(\x27media_live_embeds\x27, true);\x0a    };\x0a    var shouldFilterHtml = function (editor) {\x0a      return editor.getParam(\x27media_filter_html\x27, true);\x0a    };\x0a    var getUrlResolver = function (editor) {\x0a      return editor.getParam(\x27media_url_resolver\x27);\x0a    };\x0a    var hasAltSource = function (editor) {\x0a      return editor.getParam(\x27media_alt_source\x27, true);\x0a    };\x0a    var hasPoster = function (editor) {\x0a      return editor.getParam(\x27media_poster\x27, true);\x0a    };\x0a    var hasDimensions = function (editor) {\x0a      return editor.getParam(\x27media_dimensions\x27, true);\x0a    };\x0a    var Settings = {\x0a      getScripts: getScripts,\x0a      getAudioTemplateCallback: getAudioTemplateCallback,\x0a      getVideoTemplateCallback: getVideoTemplateCallback,\x0a      hasLiveEmbeds: hasLiveEmbeds,\x0a      shouldFilterHtml: shouldFilterHtml,\x0a      getUrlResolver: getUrlResolver,\x0a      hasAltSource: hasAltSource,\x0a      hasPoster: hasPoster,\x0a      hasDimensions: hasDimensions\x0a    };\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.html.SaxParser\x27);\x0a\x0a    var global$4 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var getVideoScriptMatch = function (prefixes, src) {\x0a      if (prefixes) {\x0a        for (var i = 0; i \x3c prefixes.length; i++) {\x0a          if (src.indexOf(prefixes[i].filter) !== -1) {\x0a            return prefixes[i];\x0a          }\x0a        }\x0a      }\x0a    };\x0a    var VideoScript = { getVideoScriptMatch: getVideoScriptMatch };\x0a\x0a    var trimPx = function (value) {\x0a      return value.replace(/px$/, \x27\x27);\x0a    };\x0a    var addPx = function (value) {\x0a      return /^[0-9.]+$/.test(value) ? value + \x27px\x27 : value;\x0a    };\x0a    var getSize = function (name) {\x0a      return function (elm) {\x0a        return elm ? trimPx(elm.style[name]) : \x27\x27;\x0a      };\x0a    };\x0a    var setSize = function (name) {\x0a      return function (elm, value) {\x0a        if (elm) {\x0a          elm.style[name] = addPx(value);\x0a        }\x0a      };\x0a    };\x0a    var Size = {\x0a      getMaxWidth: getSize(\x27maxWidth\x27),\x0a      getMaxHeight: getSize(\x27maxHeight\x27),\x0a      setMaxWidth: setSize(\x27maxWidth\x27),\x0a      setMaxHeight: setSize(\x27maxHeight\x27)\x0a    };\x0a\x0a    var DOM = global$4.DOM;\x0a    var getEphoxEmbedIri = function (elm) {\x0a      return DOM.getAttrib(elm, \x27data-ephox-embed-iri\x27);\x0a    };\x0a    var isEphoxEmbed = function (html) {\x0a      var fragment = DOM.createFragment(html);\x0a      return getEphoxEmbedIri(fragment.firstChild) !== \x27\x27;\x0a    };\x0a    var htmlToDataSax = function (prefixes, html) {\x0a      var data = {};\x0a      global$3({\x0a        validate: false,\x0a        allow_conditional_comments: true,\x0a        special: \x27script,noscript\x27,\x0a        start: function (name, attrs) {\x0a          if (!data.source1 && name === \x27param\x27) {\x0a            data.source1 = attrs.map.movie;\x0a          }\x0a          if (name === \x27iframe\x27 || name === \x27object\x27 || name === \x27embed\x27 || name === \x27video\x27 || name === \x27audio\x27) {\x0a            if (!data.type) {\x0a              data.type = name;\x0a            }\x0a            data = global$2.extend(attrs.map, data);\x0a          }\x0a          if (name === \x27script\x27) {\x0a            var videoScript = VideoScript.getVideoScriptMatch(prefixes, attrs.map.src);\x0a            if (!videoScript) {\x0a              return;\x0a            }\x0a            data = {\x0a              type: \x27script\x27,\x0a              source1: attrs.map.src,\x0a              width: videoScript.width,\x0a              height: videoScript.height\x0a            };\x0a          }\x0a          if (name === \x27source\x27) {\x0a            if (!data.source1) {\x0a              data.source1 = attrs.map.src;\x0a            } else if (!data.source2) {\x0a              data.source2 = attrs.map.src;\x0a            }\x0a          }\x0a          if (name === \x27img\x27 && !data.poster) {\x0a            data.poster = attrs.map.src;\x0a          }\x0a        }\x0a      }).parse(html);\x0a      data.source1 = data.source1 || data.src || data.data;\x0a      data.source2 = data.source2 || \x27\x27;\x0a      data.poster = data.poster || \x27\x27;\x0a      return data;\x0a    };\x0a    var ephoxEmbedHtmlToData = function (html) {\x0a      var fragment = DOM.createFragment(html);\x0a      var div = fragment.firstChild;\x0a      return {\x0a        type: \x27ephox-embed-iri\x27,\x0a        source1: getEphoxEmbedIri(div),\x0a        source2: \x27\x27,\x0a        poster: \x27\x27,\x0a        width: Size.getMaxWidth(div),\x0a        height: Size.getMaxHeight(div)\x0a      };\x0a    };\x0a    var htmlToData = function (prefixes, html) {\x0a      return isEphoxEmbed(html) ? ephoxEmbedHtmlToData(html) : htmlToDataSax(prefixes, html);\x0a    };\x0a    var HtmlToData = { htmlToData: htmlToData };\x0a\x0a    var global$5 = tinymce.util.Tools.resolve(\x27tinymce.util.Promise\x27);\x0a\x0a    var guess = function (url) {\x0a      var mimes = {\x0a        mp3: \x27audio/mpeg\x27,\x0a        wav: \x27audio/wav\x27,\x0a        mp4: \x27video/mp4\x27,\x0a        webm: \x27video/webm\x27,\x0a        ogg: \x27video/ogg\x27,\x0a        swf: \x27application/x-shockwave-flash\x27\x0a      };\x0a      var fileEnd = url.toLowerCase().split(\x27.\x27).pop();\x0a      var mime = mimes[fileEnd];\x0a      return mime ? mime : \x27\x27;\x0a    };\x0a    var Mime = { guess: guess };\x0a\x0a    var global$6 = tinymce.util.Tools.resolve(\x27tinymce.html.Writer\x27);\x0a\x0a    var global$7 = tinymce.util.Tools.resolve(\x27tinymce.html.Schema\x27);\x0a\x0a    var DOM$1 = global$4.DOM;\x0a    var setAttributes = function (attrs, updatedAttrs) {\x0a      var name;\x0a      var i;\x0a      var value;\x0a      var attr;\x0a      for (name in updatedAttrs) {\x0a        value = \x27\x27 + updatedAttrs[name];\x0a        if (attrs.map[name]) {\x0a          i = attrs.length;\x0a          while (i--) {\x0a            attr = attrs[i];\x0a            if (attr.name === name) {\x0a              if (value) {\x0a                attrs.map[name] = value;\x0a                attr.value = value;\x0a              } else {\x0a                delete attrs.map[name];\x0a                attrs.splice(i, 1);\x0a              }\x0a            }\x0a          }\x0a        } else if (value) {\x0a          attrs.push({\x0a            name: name,\x0a            value: value\x0a          });\x0a          attrs.map[name] = value;\x0a        }\x0a      }\x0a    };\x0a    var normalizeHtml = function (html) {\x0a      var writer = global$6();\x0a      var parser = global$3(writer);\x0a      parser.parse(html);\x0a      return writer.getContent();\x0a    };\x0a    var updateHtmlSax = function (html, data, updateAll) {\x0a      var writer = global$6();\x0a      var sourceCount = 0;\x0a      var hasImage;\x0a      global$3({\x0a        validate: false,\x0a        allow_conditional_comments: true,\x0a        special: \x27script,noscript\x27,\x0a        comment: function (text) {\x0a          writer.comment(text);\x0a        },\x0a        cdata: function (text) {\x0a          writer.cdata(text);\x0a        },\x0a        text: function (text, raw) {\x0a          writer.text(text, raw);\x0a        },\x0a        start: function (name, attrs, empty) {\x0a          switch (name) {\x0a          case \x27video\x27:\x0a          case \x27object\x27:\x0a          case \x27embed\x27:\x0a          case \x27img\x27:\x0a          case \x27iframe\x27:\x0a            if (data.height !== undefined && data.width !== undefined) {\x0a              setAttributes(attrs, {\x0a                width: data.width,\x0a                height: data.height\x0a              });\x0a            }\x0a            break;\x0a          }\x0a          if (updateAll) {\x0a            switch (name) {\x0a            case \x27video\x27:\x0a              setAttributes(attrs, {\x0a                poster: data.poster,\x0a                src: \x27\x27\x0a              });\x0a              if (data.source2) {\x0a                setAttributes(attrs, { src: \x27\x27 });\x0a              }\x0a              break;\x0a            case \x27iframe\x27:\x0a              setAttributes(attrs, { src: data.source1 });\x0a              break;\x0a            case \x27source\x27:\x0a              sourceCount++;\x0a              if (sourceCount \x3c= 2) {\x0a                setAttributes(attrs, {\x0a                  src: data[\x27source\x27 + sourceCount],\x0a                  type: data[\x27source\x27 + sourceCount + \x27mime\x27]\x0a                });\x0a                if (!data[\x27source\x27 + sourceCount]) {\x0a                  return;\x0a                }\x0a              }\x0a              break;\x0a            case \x27img\x27:\x0a              if (!data.poster) {\x0a                return;\x0a              }\x0a              hasImage = true;\x0a              break;\x0a            }\x0a          }\x0a          writer.start(name, attrs, empty);\x0a        },\x0a        end: function (name) {\x0a          if (name === \x27video\x27 && updateAll) {\x0a            for (var index = 1; index \x3c= 2; index++) {\x0a              if (data[\x27source\x27 + index]) {\x0a                var attrs = [];\x0a                attrs.map = {};\x0a                if (sourceCount \x3c index) {\x0a                  setAttributes(attrs, {\x0a                    src: data[\x27source\x27 + index],\x0a                    type: data[\x27source\x27 + index + \x27mime\x27]\x0a                  });\x0a                  writer.start(\x27source\x27, attrs, true);\x0a                }\x0a              }\x0a            }\x0a          }\x0a          if (data.poster && name === \x27object\x27 && updateAll && !hasImage) {\x0a            var imgAttrs = [];\x0a            imgAttrs.map = {};\x0a            setAttributes(imgAttrs, {\x0a              src: data.poster,\x0a              width: data.width,\x0a              height: data.height\x0a            });\x0a            writer.start(\x27img\x27, imgAttrs, true);\x0a          }\x0a          writer.end(name);\x0a        }\x0a      }, global$7({})).parse(html);\x0a      return writer.getContent();\x0a    };\x0a    var isEphoxEmbed$1 = function (html) {\x0a      var fragment = DOM$1.createFragment(html);\x0a      return DOM$1.getAttrib(fragment.firstChild, \x27data-ephox-embed-iri\x27) !== \x27\x27;\x0a    };\x0a    var updateEphoxEmbed = function (html, data) {\x0a      var fragment = DOM$1.createFragment(html);\x0a      var div = fragment.firstChild;\x0a      Size.setMaxWidth(div, data.width);\x0a      Size.setMaxHeight(div, data.height);\x0a      return normalizeHtml(div.outerHTML);\x0a    };\x0a    var updateHtml = function (html, data, updateAll) {\x0a      return isEphoxEmbed$1(html) ? updateEphoxEmbed(html, data) : updateHtmlSax(html, data, updateAll);\x0a    };\x0a    var UpdateHtml = { updateHtml: updateHtml };\x0a\x0a    var urlPatterns = [\x0a      {\x0a        regex: /youtu\x5c.be\x5c/([\x5cw\x5c-_\x5c?&=.]+)/i,\x0a        type: \x27iframe\x27,\x0a        w: 560,\x0a        h: 314,\x0a        url: \x27//www.youtube.com/embed/$1\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /youtube\x5c.com(.+)v=([^&]+)(&([a-z0-9&=\x5c-_]+))?/i,\x0a        type: \x27iframe\x27,\x0a        w: 560,\x0a        h: 314,\x0a        url: \x27//www.youtube.com/embed/$2?$4\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /youtube.com\x5c/embed\x5c/([a-z0-9\x5c?&=\x5c-_]+)/i,\x0a        type: \x27iframe\x27,\x0a        w: 560,\x0a        h: 314,\x0a        url: \x27//www.youtube.com/embed/$1\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /vimeo\x5c.com\x5c/([0-9]+)/,\x0a        type: \x27iframe\x27,\x0a        w: 425,\x0a        h: 350,\x0a        url: \x27//player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /vimeo\x5c.com\x5c/(.*)\x5c/([0-9]+)/,\x0a        type: \x27iframe\x27,\x0a        w: 425,\x0a        h: 350,\x0a        url: \x27//player.vimeo.com/video/$2?title=0&amp;byline=0\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /maps\x5c.google\x5c.([a-z]{2,3})\x5c/maps\x5c/(.+)msid=(.+)/,\x0a        type: \x27iframe\x27,\x0a        w: 425,\x0a        h: 350,\x0a        url: \x27//maps.google.com/maps/ms?msid=$2&output=embed\x22\x27,\x0a        allowFullscreen: false\x0a      },\x0a      {\x0a        regex: /dailymotion\x5c.com\x5c/video\x5c/([^_]+)/,\x0a        type: \x27iframe\x27,\x0a        w: 480,\x0a        h: 270,\x0a        url: \x27//www.dailymotion.com/embed/video/$1\x27,\x0a        allowFullscreen: true\x0a      },\x0a      {\x0a        regex: /dai\x5c.ly\x5c/([^_]+)/,\x0a        type: \x27iframe\x27,\x0a        w: 480,\x0a        h: 270,\x0a        url: \x27//www.dailymotion.com/embed/video/$1\x27,\x0a        allowFullscreen: true\x0a      }\x0a    ];\x0a    var getUrl = function (pattern, url) {\x0a      var match = pattern.regex.exec(url);\x0a      var newUrl = pattern.url;\x0a      var _loop_1 = function (i) {\x0a        newUrl = newUrl.replace(\x27$\x27 + i, function () {\x0a          return match[i] ? match[i] : \x27\x27;\x0a        });\x0a      };\x0a      for (var i = 0; i \x3c match.length; i++) {\x0a        _loop_1(i);\x0a      }\x0a      return newUrl.replace(/\x5c?$/, \x27\x27);\x0a    };\x0a    var matchPattern = function (url) {\x0a      var pattern = urlPatterns.filter(function (pattern) {\x0a        return pattern.regex.test(url);\x0a      });\x0a      if (pattern.length \x3e 0) {\x0a        return global$2.extend({}, pattern[0], { url: getUrl(pattern[0], url) });\x0a      } else {\x0a        return null;\x0a      }\x0a    };\x0a\x0a    var getIframeHtml = function (data) {\x0a      var allowFullscreen = data.allowFullscreen ? \x27 allowFullscreen=\x221\x22\x27 : \x27\x27;\x0a      return \x27\x3ciframe src=\x22\x27 + data.source1 + \x27\x22 width=\x22\x27 + data.width + \x27\x22 height=\x22\x27 + data.height + \x27\x22\x27 + allowFullscreen + \x27\x3e\x3c/iframe\x3e\x27;\x0a    };\x0a    var getFlashHtml = function (data) {\x0a      var html = \x27\x3cobject data=\x22\x27 + data.source1 + \x27\x22 width=\x22\x27 + data.width + \x27\x22 height=\x22\x27 + data.height + \x27\x22 type=\x22application/x-shockwave-flash\x22\x3e\x27;\x0a      if (data.poster) {\x0a        html += \x27\x3cimg src=\x22\x27 + data.poster + \x27\x22 width=\x22\x27 + data.width + \x27\x22 height=\x22\x27 + data.height + \x27\x22 /\x3e\x27;\x0a      }\x0a      html += \x27\x3c/object\x3e\x27;\x0a      return html;\x0a    };\x0a    var getAudioHtml = function (data, audioTemplateCallback) {\x0a      if (audioTemplateCallback) {\x0a        return audioTemplateCallback(data);\x0a      } else {\x0a        return \x27\x3caudio controls=\x22controls\x22 src=\x22\x27 + data.source1 + \x27\x22\x3e\x27 + (data.source2 ? \x27\x5cn\x3csource src=\x22\x27 + data.source2 + \x27\x22\x27 + (data.source2mime ? \x27 type=\x22\x27 + data.source2mime + \x27\x22\x27 : \x27\x27) + \x27 /\x3e\x5cn\x27 : \x27\x27) + \x27\x3c/audio\x3e\x27;\x0a      }\x0a    };\x0a    var getVideoHtml = function (data, videoTemplateCallback) {\x0a      if (videoTemplateCallback) {\x0a        return videoTemplateCallback(data);\x0a      } else {\x0a        return \x27\x3cvideo width=\x22\x27 + data.width + \x27\x22 height=\x22\x27 + data.height + \x27\x22\x27 + (data.poster ? \x27 poster=\x22\x27 + data.poster + \x27\x22\x27 : \x27\x27) + \x27 controls=\x22controls\x22\x3e\x5cn\x27 + \x27\x3csource src=\x22\x27 + data.source1 + \x27\x22\x27 + (data.source1mime ? \x27 type=\x22\x27 + data.source1mime + \x27\x22\x27 : \x27\x27) + \x27 /\x3e\x5cn\x27 + (data.source2 ? \x27\x3csource src=\x22\x27 + data.source2 + \x27\x22\x27 + (data.source2mime ? \x27 type=\x22\x27 + data.source2mime + \x27\x22\x27 : \x27\x27) + \x27 /\x3e\x5cn\x27 : \x27\x27) + \x27\x3c/video\x3e\x27;\x0a      }\x0a    };\x0a    var getScriptHtml = function (data) {\x0a      return \x27\x3cscript src=\x22\x27 + data.source1 + \x27\x22\x3e\x3c/script\x3e\x27;\x0a    };\x0a    var dataToHtml = function (editor, dataIn) {\x0a      var data = global$2.extend({}, dataIn);\x0a      if (!data.source1) {\x0a        global$2.extend(data, HtmlToData.htmlToData(Settings.getScripts(editor), data.embed));\x0a        if (!data.source1) {\x0a          return \x27\x27;\x0a        }\x0a      }\x0a      if (!data.source2) {\x0a        data.source2 = \x27\x27;\x0a      }\x0a      if (!data.poster) {\x0a        data.poster = \x27\x27;\x0a      }\x0a      data.source1 = editor.convertURL(data.source1, \x27source\x27);\x0a      data.source2 = editor.convertURL(data.source2, \x27source\x27);\x0a      data.source1mime = Mime.guess(data.source1);\x0a      data.source2mime = Mime.guess(data.source2);\x0a      data.poster = editor.convertURL(data.poster, \x27poster\x27);\x0a      var pattern = matchPattern(data.source1);\x0a      if (pattern) {\x0a        data.source1 = pattern.url;\x0a        data.type = pattern.type;\x0a        data.allowFullscreen = pattern.allowFullscreen;\x0a        data.width = data.width || pattern.w;\x0a        data.height = data.height || pattern.h;\x0a      }\x0a      if (data.embed) {\x0a        return UpdateHtml.updateHtml(data.embed, data, true);\x0a      } else {\x0a        var videoScript = VideoScript.getVideoScriptMatch(Settings.getScripts(editor), data.source1);\x0a        if (videoScript) {\x0a          data.type = \x27script\x27;\x0a          data.width = videoScript.width;\x0a          data.height = videoScript.height;\x0a        }\x0a        var audioTemplateCallback = Settings.getAudioTemplateCallback(editor);\x0a        var videoTemplateCallback = Settings.getVideoTemplateCallback(editor);\x0a        data.width = data.width || 300;\x0a        data.height = data.height || 150;\x0a        global$2.each(data, function (value, key) {\x0a          data[key] = editor.dom.encode(value);\x0a        });\x0a        if (data.type === \x27iframe\x27) {\x0a          return getIframeHtml(data);\x0a        } else if (data.source1mime === \x27application/x-shockwave-flash\x27) {\x0a          return getFlashHtml(data);\x0a        } else if (data.source1mime.indexOf(\x27audio\x27) !== -1) {\x0a          return getAudioHtml(data, audioTemplateCallback);\x0a        } else if (data.type === \x27script\x27) {\x0a          return getScriptHtml(data);\x0a        } else {\x0a          return getVideoHtml(data, videoTemplateCallback);\x0a        }\x0a      }\x0a    };\x0a    var DataToHtml = { dataToHtml: dataToHtml };\x0a\x0a    var cache = {};\x0a    var embedPromise = function (data, dataToHtml, handler) {\x0a      return new global$5(function (res, rej) {\x0a        var wrappedResolve = function (response) {\x0a          if (response.html) {\x0a            cache[data.source1] = response;\x0a          }\x0a          return res({\x0a            url: data.source1,\x0a            html: response.html ? response.html : dataToHtml(data)\x0a          });\x0a        };\x0a        if (cache[data.source1]) {\x0a          wrappedResolve(cache[data.source1]);\x0a        } else {\x0a          handler({ url: data.source1 }, wrappedResolve, rej);\x0a        }\x0a      });\x0a    };\x0a    var defaultPromise = function (data, dataToHtml) {\x0a      return new global$5(function (res) {\x0a        res({\x0a          html: dataToHtml(data),\x0a          url: data.source1\x0a        });\x0a      });\x0a    };\x0a    var loadedData = function (editor) {\x0a      return function (data) {\x0a        return DataToHtml.dataToHtml(editor, data);\x0a      };\x0a    };\x0a    var getEmbedHtml = function (editor, data) {\x0a      var embedHandler = Settings.getUrlResolver(editor);\x0a      return embedHandler ? embedPromise(data, loadedData(editor), embedHandler) : defaultPromise(data, loadedData(editor));\x0a    };\x0a    var isCached = function (url) {\x0a      return cache.hasOwnProperty(url);\x0a    };\x0a    var Service = {\x0a      getEmbedHtml: getEmbedHtml,\x0a      isCached: isCached\x0a    };\x0a\x0a    var doSyncSize = function (widthCtrl, heightCtrl) {\x0a      widthCtrl.state.set(\x27oldVal\x27, widthCtrl.value());\x0a      heightCtrl.state.set(\x27oldVal\x27, heightCtrl.value());\x0a    };\x0a    var doSizeControls = function (win, f) {\x0a      var widthCtrl = win.find(\x27#width\x27)[0];\x0a      var heightCtrl = win.find(\x27#height\x27)[0];\x0a      var constrained = win.find(\x27#constrain\x27)[0];\x0a      if (widthCtrl && heightCtrl && constrained) {\x0a        f(widthCtrl, heightCtrl, constrained.checked());\x0a      }\x0a    };\x0a    var doUpdateSize = function (widthCtrl, heightCtrl, isContrained) {\x0a      var oldWidth = widthCtrl.state.get(\x27oldVal\x27);\x0a      var oldHeight = heightCtrl.state.get(\x27oldVal\x27);\x0a      var newWidth = widthCtrl.value();\x0a      var newHeight = heightCtrl.value();\x0a      if (isContrained && oldWidth && oldHeight && newWidth && newHeight) {\x0a        if (newWidth !== oldWidth) {\x0a          newHeight = Math.round(newWidth / oldWidth * newHeight);\x0a          if (!isNaN(newHeight)) {\x0a            heightCtrl.value(newHeight);\x0a          }\x0a        } else {\x0a          newWidth = Math.round(newHeight / oldHeight * newWidth);\x0a          if (!isNaN(newWidth)) {\x0a            widthCtrl.value(newWidth);\x0a          }\x0a        }\x0a      }\x0a      doSyncSize(widthCtrl, heightCtrl);\x0a    };\x0a    var syncSize = function (win) {\x0a      doSizeControls(win, doSyncSize);\x0a    };\x0a    var updateSize = function (win) {\x0a      doSizeControls(win, doUpdateSize);\x0a    };\x0a    var createUi = function (onChange) {\x0a      var recalcSize = function () {\x0a        onChange(function (win) {\x0a          updateSize(win);\x0a        });\x0a      };\x0a      return {\x0a        type: \x27container\x27,\x0a        label: \x27Dimensions\x27,\x0a        layout: \x27flex\x27,\x0a        align: \x27center\x27,\x0a        spacing: 5,\x0a        items: [\x0a          {\x0a            name: \x27width\x27,\x0a            type: \x27textbox\x27,\x0a            maxLength: 5,\x0a            size: 5,\x0a            onchange: recalcSize,\x0a            ariaLabel: \x27Width\x27\x0a          },\x0a          {\x0a            type: \x27label\x27,\x0a            text: \x27x\x27\x0a          },\x0a          {\x0a            name: \x27height\x27,\x0a            type: \x27textbox\x27,\x0a            maxLength: 5,\x0a            size: 5,\x0a            onchange: recalcSize,\x0a            ariaLabel: \x27Height\x27\x0a          },\x0a          {\x0a            name: \x27constrain\x27,\x0a            type: \x27checkbox\x27,\x0a            checked: true,\x0a            text: \x27Constrain proportions\x27\x0a          }\x0a        ]\x0a      };\x0a    };\x0a    var SizeManager = {\x0a      createUi: createUi,\x0a      syncSize: syncSize,\x0a      updateSize: updateSize\x0a    };\x0a\x0a    var embedChange = global$1.ie && global$1.ie \x3c= 8 ? \x27onChange\x27 : \x27onInput\x27;\x0a    var handleError = function (editor) {\x0a      return function (error) {\x0a        var errorMessage = error && error.msg ? \x27Media embed handler error: \x27 + error.msg : \x27Media embed handler threw unknown error.\x27;\x0a        editor.notificationManager.open({\x0a          type: \x27error\x27,\x0a          text: errorMessage\x0a        });\x0a      };\x0a    };\x0a    var getData = function (editor) {\x0a      var element = editor.selection.getNode();\x0a      var dataEmbed = element.getAttribute(\x27data-ephox-embed-iri\x27);\x0a      if (dataEmbed) {\x0a        return {\x0a          \x27source1\x27: dataEmbed,\x0a          \x27data-ephox-embed-iri\x27: dataEmbed,\x0a          \x27width\x27: Size.getMaxWidth(element),\x0a          \x27height\x27: Size.getMaxHeight(element)\x0a        };\x0a      }\x0a      return element.getAttribute(\x27data-mce-object\x27) ? HtmlToData.htmlToData(Settings.getScripts(editor), editor.serializer.serialize(element, { selection: true })) : {};\x0a    };\x0a    var getSource = function (editor) {\x0a      var elm = editor.selection.getNode();\x0a      if (elm.getAttribute(\x27data-mce-object\x27) || elm.getAttribute(\x27data-ephox-embed-iri\x27)) {\x0a        return editor.selection.getContent();\x0a      }\x0a    };\x0a    var addEmbedHtml = function (win, editor) {\x0a      return function (response) {\x0a        var html = response.html;\x0a        var embed = win.find(\x27#embed\x27)[0];\x0a        var data = global$2.extend(HtmlToData.htmlToData(Settings.getScripts(editor), html), { source1: response.url });\x0a        win.fromJSON(data);\x0a        if (embed) {\x0a          embed.value(html);\x0a          SizeManager.updateSize(win);\x0a        }\x0a      };\x0a    };\x0a    var selectPlaceholder = function (editor, beforeObjects) {\x0a      var i;\x0a      var y;\x0a      var afterObjects = editor.dom.select(\x27img[data-mce-object]\x27);\x0a      for (i = 0; i \x3c beforeObjects.length; i++) {\x0a        for (y = afterObjects.length - 1; y \x3e= 0; y--) {\x0a          if (beforeObjects[i] === afterObjects[y]) {\x0a            afterObjects.splice(y, 1);\x0a          }\x0a        }\x0a      }\x0a      editor.selection.select(afterObjects[0]);\x0a    };\x0a    var handleInsert = function (editor, html) {\x0a      var beforeObjects = editor.dom.select(\x27img[data-mce-object]\x27);\x0a      editor.insertContent(html);\x0a      selectPlaceholder(editor, beforeObjects);\x0a      editor.nodeChanged();\x0a    };\x0a    var submitForm = function (win, editor) {\x0a      var data = win.toJSON();\x0a      data.embed = UpdateHtml.updateHtml(data.embed, data);\x0a      if (data.embed && Service.isCached(data.source1)) {\x0a        handleInsert(editor, data.embed);\x0a      } else {\x0a        Service.getEmbedHtml(editor, data).then(function (response) {\x0a          handleInsert(editor, response.html);\x0a        }).catch(handleError(editor));\x0a      }\x0a    };\x0a    var populateMeta = function (win, meta) {\x0a      global$2.each(meta, function (value, key) {\x0a        win.find(\x27#\x27 + key).value(value);\x0a      });\x0a    };\x0a    var showDialog = function (editor) {\x0a      var win;\x0a      var data;\x0a      var generalFormItems = [{\x0a          name: \x27source1\x27,\x0a          type: \x27filepicker\x27,\x0a          filetype: \x27media\x27,\x0a          size: 40,\x0a          autofocus: true,\x0a          label: \x27Source\x27,\x0a          onpaste: function () {\x0a            setTimeout(function () {\x0a              Service.getEmbedHtml(editor, win.toJSON()).then(addEmbedHtml(win, editor)).catch(handleError(editor));\x0a            }, 1);\x0a          },\x0a          onchange: function (e) {\x0a            Service.getEmbedHtml(editor, win.toJSON()).then(addEmbedHtml(win, editor)).catch(handleError(editor));\x0a            populateMeta(win, e.meta);\x0a          },\x0a          onbeforecall: function (e) {\x0a            e.meta = win.toJSON();\x0a          }\x0a        }];\x0a      var advancedFormItems = [];\x0a      var reserialise = function (update) {\x0a        update(win);\x0a        data = win.toJSON();\x0a        win.find(\x27#embed\x27).value(UpdateHtml.updateHtml(data.embed, data));\x0a      };\x0a      if (Settings.hasAltSource(editor)) {\x0a        advancedFormItems.push({\x0a          name: \x27source2\x27,\x0a          type: \x27filepicker\x27,\x0a          filetype: \x27media\x27,\x0a          size: 40,\x0a          label: \x27Alternative source\x27\x0a        });\x0a      }\x0a      if (Settings.hasPoster(editor)) {\x0a        advancedFormItems.push({\x0a          name: \x27poster\x27,\x0a          type: \x27filepicker\x27,\x0a          filetype: \x27image\x27,\x0a          size: 40,\x0a          label: \x27Poster\x27\x0a        });\x0a      }\x0a      if (Settings.hasDimensions(editor)) {\x0a        var control = SizeManager.createUi(reserialise);\x0a        generalFormItems.push(control);\x0a      }\x0a      data = getData(editor);\x0a      var embedTextBox = {\x0a        id: \x27mcemediasource\x27,\x0a        type: \x27textbox\x27,\x0a        flex: 1,\x0a        name: \x27embed\x27,\x0a        value: getSource(editor),\x0a        multiline: true,\x0a        rows: 5,\x0a        label: \x27Source\x27\x0a      };\x0a      var updateValueOnChange = function () {\x0a        data = global$2.extend({}, HtmlToData.htmlToData(Settings.getScripts(editor), this.value()));\x0a        this.parent().parent().fromJSON(data);\x0a      };\x0a      embedTextBox[embedChange] = updateValueOnChange;\x0a      var body = [\x0a        {\x0a          title: \x27General\x27,\x0a          type: \x27form\x27,\x0a          items: generalFormItems\x0a        },\x0a        {\x0a          title: \x27Embed\x27,\x0a          type: \x27container\x27,\x0a          layout: \x27flex\x27,\x0a          direction: \x27column\x27,\x0a          align: \x27stretch\x27,\x0a          padding: 10,\x0a          spacing: 10,\x0a          items: [\x0a            {\x0a              type: \x27label\x27,\x0a              text: \x27Paste your embed code below:\x27,\x0a              forId: \x27mcemediasource\x27\x0a            },\x0a            embedTextBox\x0a          ]\x0a        }\x0a      ];\x0a      if (advancedFormItems.length \x3e 0) {\x0a        body.push({\x0a          title: \x27Advanced\x27,\x0a          type: \x27form\x27,\x0a          items: advancedFormItems\x0a        });\x0a      }\x0a      win = editor.windowManager.open({\x0a        title: \x27Insert/edit media\x27,\x0a        data: data,\x0a        bodyType: \x27tabpanel\x27,\x0a        body: body,\x0a        onSubmit: function () {\x0a          SizeManager.updateSize(win);\x0a          submitForm(win, editor);\x0a        }\x0a      });\x0a      SizeManager.syncSize(win);\x0a    };\x0a    var Dialog = { showDialog: showDialog };\x0a\x0a    var get = function (editor) {\x0a      var showDialog = function () {\x0a        Dialog.showDialog(editor);\x0a      };\x0a      return { showDialog: showDialog };\x0a    };\x0a    var Api = { get: get };\x0a\x0a    var register = function (editor) {\x0a      var showDialog = function () {\x0a        Dialog.showDialog(editor);\x0a      };\x0a      editor.addCommand(\x27mceMedia\x27, showDialog);\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var global$8 = tinymce.util.Tools.resolve(\x27tinymce.html.Node\x27);\x0a\x0a    var sanitize = function (editor, html) {\x0a      if (Settings.shouldFilterHtml(editor) === false) {\x0a        return html;\x0a      }\x0a      var writer = global$6();\x0a      var blocked;\x0a      global$3({\x0a        validate: false,\x0a        allow_conditional_comments: false,\x0a        special: \x27script,noscript\x27,\x0a        comment: function (text) {\x0a          writer.comment(text);\x0a        },\x0a        cdata: function (text) {\x0a          writer.cdata(text);\x0a        },\x0a        text: function (text, raw) {\x0a          writer.text(text, raw);\x0a        },\x0a        start: function (name, attrs, empty) {\x0a          blocked = true;\x0a          if (name === \x27script\x27 || name === \x27noscript\x27) {\x0a            return;\x0a          }\x0a          for (var i = 0; i \x3c attrs.length; i++) {\x0a            if (attrs[i].name.indexOf(\x27on\x27) === 0) {\x0a              return;\x0a            }\x0a            if (attrs[i].name === \x27style\x27) {\x0a              attrs[i].value = editor.dom.serializeStyle(editor.dom.parseStyle(attrs[i].value), name);\x0a            }\x0a          }\x0a          writer.start(name, attrs, empty);\x0a          blocked = false;\x0a        },\x0a        end: function (name) {\x0a          if (blocked) {\x0a            return;\x0a          }\x0a          writer.end(name);\x0a        }\x0a      }, global$7({})).parse(html);\x0a      return writer.getContent();\x0a    };\x0a    var Sanitize = { sanitize: sanitize };\x0a\x0a    var createPlaceholderNode = function (editor, node) {\x0a      var placeHolder;\x0a      var name = node.name;\x0a      placeHolder = new global$8(\x27img\x27, 1);\x0a      placeHolder.shortEnded = true;\x0a      retainAttributesAndInnerHtml(editor, node, placeHolder);\x0a      placeHolder.attr({\x0a        \x27width\x27: node.attr(\x27width\x27) || \x27300\x27,\x0a        \x27height\x27: node.attr(\x27height\x27) || (name === \x27audio\x27 ? \x2730\x27 : \x27150\x27),\x0a        \x27style\x27: node.attr(\x27style\x27),\x0a        \x27src\x27: global$1.transparentSrc,\x0a        \x27data-mce-object\x27: name,\x0a        \x27class\x27: \x27mce-object mce-object-\x27 + name\x0a      });\x0a      return placeHolder;\x0a    };\x0a    var createPreviewIframeNode = function (editor, node) {\x0a      var previewWrapper;\x0a      var previewNode;\x0a      var shimNode;\x0a      var name = node.name;\x0a      previewWrapper = new global$8(\x27span\x27, 1);\x0a      previewWrapper.attr({\x0a        \x27contentEditable\x27: \x27false\x27,\x0a        \x27style\x27: node.attr(\x27style\x27),\x0a        \x27data-mce-object\x27: name,\x0a        \x27class\x27: \x27mce-preview-object mce-object-\x27 + name\x0a      });\x0a      retainAttributesAndInnerHtml(editor, node, previewWrapper);\x0a      previewNode = new global$8(name, 1);\x0a      previewNode.attr({\x0a        src: node.attr(\x27src\x27),\x0a        allowfullscreen: node.attr(\x27allowfullscreen\x27),\x0a        style: node.attr(\x27style\x27),\x0a        class: node.attr(\x27class\x27),\x0a        width: node.attr(\x27width\x27),\x0a        height: node.attr(\x27height\x27),\x0a        frameborder: \x270\x27\x0a      });\x0a      shimNode = new global$8(\x27span\x27, 1);\x0a      shimNode.attr(\x27class\x27, \x27mce-shim\x27);\x0a      previewWrapper.append(previewNode);\x0a      previewWrapper.append(shimNode);\x0a      return previewWrapper;\x0a    };\x0a    var retainAttributesAndInnerHtml = function (editor, sourceNode, targetNode) {\x0a      var attrName;\x0a      var attrValue;\x0a      var attribs;\x0a      var ai;\x0a      var innerHtml;\x0a      attribs = sourceNode.attributes;\x0a      ai = attribs.length;\x0a      while (ai--) {\x0a        attrName = attribs[ai].name;\x0a        attrValue = attribs[ai].value;\x0a        if (attrName !== \x27width\x27 && attrName !== \x27height\x27 && attrName !== \x27style\x27) {\x0a          if (attrName === \x27data\x27 || attrName === \x27src\x27) {\x0a            attrValue = editor.convertURL(attrValue, attrName);\x0a          }\x0a          targetNode.attr(\x27data-mce-p-\x27 + attrName, attrValue);\x0a        }\x0a      }\x0a      innerHtml = sourceNode.firstChild && sourceNode.firstChild.value;\x0a      if (innerHtml) {\x0a        targetNode.attr(\x27data-mce-html\x27, escape(Sanitize.sanitize(editor, innerHtml)));\x0a        targetNode.firstChild = null;\x0a      }\x0a    };\x0a    var isWithinEphoxEmbed = function (node) {\x0a      while (node = node.parent) {\x0a        if (node.attr(\x27data-ephox-embed-iri\x27)) {\x0a          return true;\x0a        }\x0a      }\x0a      return false;\x0a    };\x0a    var placeHolderConverter = function (editor) {\x0a      return function (nodes) {\x0a        var i = nodes.length;\x0a        var node;\x0a        var videoScript;\x0a        while (i--) {\x0a          node = nodes[i];\x0a          if (!node.parent) {\x0a            continue;\x0a          }\x0a          if (node.parent.attr(\x27data-mce-object\x27)) {\x0a            continue;\x0a          }\x0a          if (node.name === \x27script\x27) {\x0a            videoScript = VideoScript.getVideoScriptMatch(Settings.getScripts(editor), node.attr(\x27src\x27));\x0a            if (!videoScript) {\x0a              continue;\x0a            }\x0a          }\x0a          if (videoScript) {\x0a            if (videoScript.width) {\x0a              node.attr(\x27width\x27, videoScript.width.toString());\x0a            }\x0a            if (videoScript.height) {\x0a              node.attr(\x27height\x27, videoScript.height.toString());\x0a            }\x0a          }\x0a          if (node.name === \x27iframe\x27 && Settings.hasLiveEmbeds(editor) && global$1.ceFalse) {\x0a            if (!isWithinEphoxEmbed(node)) {\x0a              node.replace(createPreviewIframeNode(editor, node));\x0a            }\x0a          } else {\x0a            if (!isWithinEphoxEmbed(node)) {\x0a              node.replace(createPlaceholderNode(editor, node));\x0a            }\x0a          }\x0a        }\x0a      };\x0a    };\x0a    var Nodes = {\x0a      createPreviewIframeNode: createPreviewIframeNode,\x0a      createPlaceholderNode: createPlaceholderNode,\x0a      placeHolderConverter: placeHolderConverter\x0a    };\x0a\x0a    var setup = function (editor) {\x0a      editor.on(\x27preInit\x27, function () {\x0a        var specialElements = editor.schema.getSpecialElements();\x0a        global$2.each(\x27video audio iframe object\x27.split(\x27 \x27), function (name) {\x0a          specialElements[name] = new RegExp(\x27\x3c/\x27 + name + \x27[^\x3e]*\x3e\x27, \x27gi\x27);\x0a        });\x0a        var boolAttrs = editor.schema.getBoolAttrs();\x0a        global$2.each(\x27webkitallowfullscreen mozallowfullscreen allowfullscreen\x27.split(\x27 \x27), function (name) {\x0a          boolAttrs[name] = {};\x0a        });\x0a        editor.parser.addNodeFilter(\x27iframe,video,audio,object,embed,script\x27, Nodes.placeHolderConverter(editor));\x0a        editor.serializer.addAttributeFilter(\x27data-mce-object\x27, function (nodes, name) {\x0a          var i = nodes.length;\x0a          var node;\x0a          var realElm;\x0a          var ai;\x0a          var attribs;\x0a          var innerHtml;\x0a          var innerNode;\x0a          var realElmName;\x0a          var className;\x0a          while (i--) {\x0a            node = nodes[i];\x0a            if (!node.parent) {\x0a              continue;\x0a            }\x0a            realElmName = node.attr(name);\x0a            realElm = new global$8(realElmName, 1);\x0a            if (realElmName !== \x27audio\x27 && realElmName !== \x27script\x27) {\x0a              className = node.attr(\x27class\x27);\x0a              if (className && className.indexOf(\x27mce-preview-object\x27) !== -1) {\x0a                realElm.attr({\x0a                  width: node.firstChild.attr(\x27width\x27),\x0a                  height: node.firstChild.attr(\x27height\x27)\x0a                });\x0a              } else {\x0a                realElm.attr({\x0a                  width: node.attr(\x27width\x27),\x0a                  height: node.attr(\x27height\x27)\x0a                });\x0a              }\x0a            }\x0a            realElm.attr({ style: node.attr(\x27style\x27) });\x0a            attribs = node.attributes;\x0a            ai = attribs.length;\x0a            while (ai--) {\x0a              var attrName = attribs[ai].name;\x0a              if (attrName.indexOf(\x27data-mce-p-\x27) === 0) {\x0a                realElm.attr(attrName.substr(11), attribs[ai].value);\x0a              }\x0a            }\x0a            if (realElmName === \x27script\x27) {\x0a              realElm.attr(\x27type\x27, \x27text/javascript\x27);\x0a            }\x0a            innerHtml = node.attr(\x27data-mce-html\x27);\x0a            if (innerHtml) {\x0a              innerNode = new global$8(\x27#text\x27, 3);\x0a              innerNode.raw = true;\x0a              innerNode.value = Sanitize.sanitize(editor, unescape(innerHtml));\x0a              realElm.append(innerNode);\x0a            }\x0a            node.replace(realElm);\x0a          }\x0a        });\x0a      });\x0a      editor.on(\x27setContent\x27, function () {\x0a        editor.$(\x27span.mce-preview-object\x27).each(function (index, elm) {\x0a          var $elm = editor.$(elm);\x0a          if ($elm.find(\x27span.mce-shim\x27, elm).length === 0) {\x0a            $elm.append(\x27\x3cspan class=\x22mce-shim\x22\x3e\x3c/span\x3e\x27);\x0a          }\x0a        });\x0a      });\x0a    };\x0a    var FilterContent = { setup: setup };\x0a\x0a    var setup$1 = function (editor) {\x0a      editor.on(\x27ResolveName\x27, function (e) {\x0a        var name;\x0a        if (e.target.nodeType === 1 && (name = e.target.getAttribute(\x27data-mce-object\x27))) {\x0a          e.name = name;\x0a        }\x0a      });\x0a    };\x0a    var ResolveName = { setup: setup$1 };\x0a\x0a    var setup$2 = function (editor) {\x0a      editor.on(\x27click keyup\x27, function () {\x0a        var selectedNode = editor.selection.getNode();\x0a        if (selectedNode && editor.dom.hasClass(selectedNode, \x27mce-preview-object\x27)) {\x0a          if (editor.dom.getAttrib(selectedNode, \x27data-mce-selected\x27)) {\x0a            selectedNode.setAttribute(\x27data-mce-selected\x27, \x272\x27);\x0a          }\x0a        }\x0a      });\x0a      editor.on(\x27ObjectSelected\x27, function (e) {\x0a        var objectType = e.target.getAttribute(\x27data-mce-object\x27);\x0a        if (objectType === \x27audio\x27 || objectType === \x27script\x27) {\x0a          e.preventDefault();\x0a        }\x0a      });\x0a      editor.on(\x27objectResized\x27, function (e) {\x0a        var target = e.target;\x0a        var html;\x0a        if (target.getAttribute(\x27data-mce-object\x27)) {\x0a          html = target.getAttribute(\x27data-mce-html\x27);\x0a          if (html) {\x0a            html = unescape(html);\x0a            target.setAttribute(\x27data-mce-html\x27, escape(UpdateHtml.updateHtml(html, {\x0a              width: e.width,\x0a              height: e.height\x0a            })));\x0a          }\x0a        }\x0a      });\x0a    };\x0a    var Selection = { setup: setup$2 };\x0a\x0a    var register$1 = function (editor) {\x0a      editor.addButton(\x27media\x27, {\x0a        tooltip: \x27Insert/edit media\x27,\x0a        cmd: \x27mceMedia\x27,\x0a        stateSelector: [\x0a          \x27img[data-mce-object]\x27,\x0a          \x27span[data-mce-object]\x27,\x0a          \x27div[data-ephox-embed-iri]\x27\x0a        ]\x0a      });\x0a      editor.addMenuItem(\x27media\x27, {\x0a        icon: \x27media\x27,\x0a        text: \x27Media\x27,\x0a        cmd: \x27mceMedia\x27,\x0a        context: \x27insert\x27,\x0a        prependToContext: true\x0a      });\x0a    };\x0a    var Buttons = { register: register$1 };\x0a\x0a    global.add(\x27media\x27, function (editor) {\x0a      Commands.register(editor);\x0a      Buttons.register(editor);\x0a      ResolveName.setup(editor);\x0a      FilterContent.setup(editor);\x0a      Selection.setup(editor);\x0a      return Api.get(editor);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}());\x0a})();\x0a'}