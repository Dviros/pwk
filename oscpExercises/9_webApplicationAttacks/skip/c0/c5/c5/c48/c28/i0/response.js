var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:12:19 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:30:15 GMT\x0aETag: \x22535a-56faa82e93bc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-5584/5585\x0aContent-Length: 5585\x0aKeep-Alive: timeout=5, max=89\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/autosave.js\x0a */\x0a\x0a/* global tinymce, wpCookies, autosaveL10n, switchEditors */\x0a// Back-compat\x0awindow.autosave = function() {\x0a\x09return true;\x0a};\x0a\x0a/**\x0a * Adds autosave to the window object on dom ready.\x0a *\x0a * @since 3.9.0\x0a *\x0a * @param {jQuery} $ jQuery object.\x0a * @param {window} The window object.\x0a *\x0a */\x0a( function( $, window ) {\x0a\x09/**\x0a\x09 * Auto saves the post.\x0a\x09 *\x0a\x09 * @since 3.9.0\x0a\x09 *\x0a\x09 * @returns {Object}\x0a\x09 * \x09{{\x0a\x09 * \x09\x09getPostData: getPostData,\x0a\x09 * \x09\x09getCompareString: getCompareString,\x0a\x09 * \x09\x09disableButtons: disableButtons,\x0a\x09 * \x09\x09enableButtons: enableButtons,\x0a\x09 * \x09\x09local: ({hasStorage, getSavedPostData, save, suspend, resume}|*),\x0a\x09 * \x09\x09server: ({tempBlockSave, triggerSave, postChanged, suspend, resume}|*)}\x0a\x09 * \x09}\x0a\x09 * \x09The object with all functions for autosave.\x0a\x09 */\x0a\x09function autosave() {\x0a\x09\x09var initialCompareString,\x0a\x09\x09\x09lastTriggerSave = 0,\x0a\x09\x09\x09$document = $(document);\x0a\x0a\x09\x09/**\x0a\x09\x09 * Returns the data saved in both local and remote autosave.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} type The type of autosave either local or remote.\x0a\x09\x09 *\x0a\x09\x09 * @returns {Object} Object containing the post data.\x0a\x09\x09 */\x0a\x09\x09function getPostData( type ) {\x0a\x09\x09\x09var post_name, parent_id, data,\x0a\x09\x09\x09\x09time = ( new Date() ).getTime(),\x0a\x09\x09\x09\x09cats = [],\x0a\x09\x09\x09\x09editor = getEditor();\x0a\x0a\x09\x09\x09// Don\x27t run editor.save() more often than every 3 seconds.\x0a\x09\x09\x09// It is resource intensive and might slow down typing in long posts on slow devices.\x0a\x09\x09\x09if ( editor && editor.isDirty() && ! editor.isHidden() && time - 3000 \x3e lastTriggerSave ) {\x0a\x09\x09\x09\x09editor.save();\x0a\x09\x09\x09\x09lastTriggerSave = time;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09data = {\x0a\x09\x09\x09\x09post_id: $( \x27#post_ID\x27 ).val() || 0,\x0a\x09\x09\x09\x09post_type: $( \x27#post_type\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09post_author: $( \x27#post_author\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09post_title: $( \x27#title\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09content: $( \x27#content\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09excerpt: $( \x27#excerpt\x27 ).val() || \x27\x27\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if ( type === \x27local\x27 ) {\x0a\x09\x09\x09\x09return data;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09$( \x27input[id^=\x22in-category-\x22]:checked\x27 ).each( function() {\x0a\x09\x09\x09\x09cats.push( this.value );\x0a\x09\x09\x09});\x0a\x09\x09\x09data.catslist = cats.join(\x27,\x27);\x0a\x0a\x09\x09\x09if ( post_name = $( \x27#post_name\x27 ).val() ) {\x0a\x09\x09\x09\x09data.post_name = post_name;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( parent_id = $( \x27#parent_id\x27 ).val() ) {\x0a\x09\x09\x09\x09data.parent_id = parent_id;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( $( \x27#comment_status\x27 ).prop( \x27checked\x27 ) ) {\x0a\x09\x09\x09\x09data.comment_status = \x27open\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( $( \x27#ping_status\x27 ).prop( \x27checked\x27 ) ) {\x0a\x09\x09\x09\x09data.ping_status = \x27open\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( $( \x27#auto_draft\x27 ).val() === \x271\x27 ) {\x0a\x09\x09\x09\x09data.auto_draft = \x271\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return data;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Concatenates the title, content and excerpt. This is used to track changes\x0a\x09\x09 * when auto-saving.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} postData The object containing the post data.\x0a\x09\x09 *\x0a\x09\x09 * @returns {string} A concatenated string with title, content and excerpt.\x0a\x09\x09 */\x0a\x09\x09function getCompareString( postData ) {\x0a\x09\x09\x09if ( typeof postData === \x27object\x27 ) {\x0a\x09\x09\x09\x09return ( postData.post_title || \x27\x27 ) + \x27::\x27 + ( postData.content || \x27\x27 ) + \x27::\x27 + ( postData.excerpt || \x27\x27 );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return ( $(\x27#title\x27).val() || \x27\x27 ) + \x27::\x27 + ( $(\x27#content\x27).val() || \x27\x27 ) + \x27::\x27 + ( $(\x27#excerpt\x27).val() || \x27\x27 );\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Disables save buttons.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function disableButtons() {\x0a\x09\x09\x09$document.trigger(\x27autosave-disable-buttons\x27);\x0a\x0a\x09\x09\x09// Re-enable 5 sec later. Just gives autosave a head start to avoid collisions.\x0a\x09\x09\x09setTimeout( enableButtons, 5000 );\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Enables save buttons.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function enableButtons() {\x0a\x09\x09\x09$document.trigger( \x27autosave-enable-buttons\x27 );\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets the content editor.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean|*} Returns either false if the editor is undefined,\x0a\x09\x09 * \x09\x09\x09\x09\x09\x09or the instance of the content editor.\x0a\x09\x09 */\x0a\x09\x09function getEditor() {\x0a\x09\x09\x09return typeof tinymce !== \x27undefined\x27 && tinymce.get(\x27content\x27);\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Autosave in localStorage.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {\x0a\x09\x09 * {\x0a\x09\x09 * \x09hasStorage: *,\x0a\x09\x09 * \x09getSavedPostData: getSavedPostData,\x0a\x09\x09 * \x09save: save,\x0a\x09\x09 * \x09suspend: suspend,\x0a\x09\x09 * \x09resume: resume\x0a\x09\x09 * \x09}\x0a\x09\x09 * }\x0a\x09\x09 * The object with all functions for local storage autosave.\x0a\x09\x09 */\x0a\x09\x09function autosaveLocal() {\x0a\x09\x09\x09var blog_id, post_id, hasStorage, intervalTimer,\x0a\x09\x09\x09\x09lastCompareString,\x0a\x09\x09\x09\x09isSuspended = false;\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Checks if the browser supports sessionStorage and it\x27s not disabled.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean} True if the sessionStorage is supported and enabled.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function checkStorage() {\x0a\x09\x09\x09\x09var test = Math.random().toString(),\x0a\x09\x09\x09\x09\x09result = false;\x0a\x0a\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09window.sessionStorage.setItem( \x27wp-test\x27, test );\x0a\x09\x09\x09\x09\x09result = window.sessionStorage.getItem( \x27wp-test\x27 ) === test;\x0a\x09\x09\x09\x09\x09window.sessionStorage.removeItem( \x27wp-test\x27 );\x0a\x09\x09\x09\x09} catch(e) {}\x0a\x0a\x09\x09\x09\x09hasStorage = result;\x0a\x09\x09\x09\x09return result;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Initializes the local storage.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean|Object} False if no sessionStorage in the browser or an Object\x0a\x09\x09\x09 *                           containing all postData for this blog.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function getStorage() {\x0a\x09\x09\x09\x09var stored_obj = false;\x0a\x09\x09\x09\x09// Separate local storage containers for each blog_id\x0a\x09\x09\x09\x09if ( hasStorage && blog_id ) {\x0a\x09\x09\x09\x09\x09stored_obj = sessionStorage.getItem( \x27wp-autosave-\x27 + blog_id );\x0a\x0a\x09\x09\x09\x09\x09if ( stored_obj ) {\x0a\x09\x09\x09\x09\x09\x09stored_obj = JSON.parse( stored_obj );\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09stored_obj = {};\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return stored_obj;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets the storage for this blog. Confirms that the data was saved\x0a\x09\x09\x09 * successfully.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean} True if the data was saved successfully, false if it wasn\x27t saved.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function setStorage( stored_obj ) {\x0a\x09\x09\x09\x09var key;\x0a\x0a\x09\x09\x09\x09if ( hasStorage && blog_id ) {\x0a\x09\x09\x09\x09\x09key = \x27wp-autosave-\x27 + blog_id;\x0a\x09\x09\x09\x09\x09sessionStorage.setItem( key, JSON.stringify( stored_obj ) );\x0a\x09\x09\x09\x09\x09return sessionStorage.getItem( key ) !== null;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return false;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Gets the saved post data for the current post.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean|Object} False if no storage or no data or the postData as an Object.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function getSavedPostData() {\x0a\x09\x09\x09\x09var stored = getStorage();\x0a\x0a\x09\x09\x09\x09if ( ! stored || ! post_id ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return stored[ \x27post_\x27 + post_id ] || false;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets (save or delete) post data in the storage.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * If stored_data evaluates to \x27false\x27 the storage key for the current post will be removed.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object|boolean|null} stored_data The post data to store or null/false/empty to delete the key.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean} True if data is stored, false if data was removed.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function setData( stored_data ) {\x0a\x09\x09\x09\x09var stored = getStorage();\x0a\x0a\x09\x09\x09\x09if ( ! stored || ! post_id ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( stored_data ) {\x0a\x09\x09\x09\x09\x09stored[ \x27post_\x27 + post_id ] = stored_data;\x0a\x09\x09\x09\x09} else if ( stored.hasOwnProperty( \x27post_\x27 + post_id ) ) {\x0a\x09\x09\x09\x09\x09delete stored[ \x27post_\x27 + post_id ];\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return setStorage( stored );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets isSuspended to true.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function suspend() {\x0a\x09\x09\x09\x09isSuspended = true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets isSuspended to false.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function resume() {\x0a\x09\x09\x09\x09isSuspended = false;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Saves post data for the current post.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * Runs on a 15 sec. interval, saves when there are differences in the post title or content.\x0a\x09\x09\x09 * When the optional data is provided, updates the last saved post data.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object} data The post data for saving, minimum \x27post_title\x27 and \x27content\x27.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean} Returns true when data has been saved, otherwise it returns false.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function save( data ) {\x0a\x09\x09\x09\x09var postData, compareString,\x0a\x09\x09\x09\x09\x09result = false;\x0a\x0a\x09\x09\x09\x09if ( isSuspended || ! hasStorage ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( data ) {\x0a\x09\x09\x09\x09\x09postData = getSavedPostData() || {};\x0a\x09\x09\x09\x09\x09$.extend( postData, data );\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09postData = getPostData(\x27local\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09compareString = getCompareString( postData );\x0a\x0a\x09\x09\x09\x09if ( typeof lastCompareString === \x27undefined\x27 ) {\x0a\x09\x09\x09\x09\x09lastCompareString = initialCompareString;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// If the content, title and excerpt did not change since the last save, don\x27t save again.\x0a\x09\x09\x09\x09if ( compareString === lastCompareString ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09postData.save_time = ( new Date() ).getTime();\x0a\x09\x09\x09\x09postData.status = $( \x27#post_status\x27 ).val() || \x27\x27;\x0a\x09\x09\x09\x09result = setData( postData );\x0a\x0a\x09\x09\x09\x09if ( result ) {\x0a\x09\x09\x09\x09\x09lastCompareString = compareString;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return result;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Initializes the auto save function.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * Checks whether the editor is active or not to use the editor events\x0a\x09\x09\x09 * to autosave, or uses the values from the elements to autosave.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * Runs on DOM ready.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function run() {\x0a\x09\x09\x09\x09post_id = $(\x27#post_ID\x27).val() || 0;\x0a\x0a\x09\x09\x09\x09// Check if the local post data is different than the loaded post data.\x0a\x09\x09\x09\x09if ( $( \x27#wp-content-wrap\x27 ).hasClass( \x27tmce-active\x27 ) ) {\x0a\x0a\x09\x09\x09\x09\x09// If TinyMCE loads first, check the post 1.5 sec. after it is ready.\x0a\x09\x09\x09\x09\x09// By this time the content has been loaded in the editor and \x27saved\x27 to the textarea.\x0a\x09\x09\x09\x09\x09// This prevents false positives.\x0a\x09\x09\x09\x09\x09$document.on( \x27tinymce-editor-init.autosave\x27, function() {\x0a\x09\x09\x09\x09\x09\x09window.setTimeout( function() {\x0a\x09\x09\x09\x09\x09\x09\x09checkPost();\x0a\x09\x09\x09\x09\x09\x09}, 1500 );\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09checkPost();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Save every 15 sec.\x0a\x09\x09\x09\x09intervalTimer = window.setInterval( save, 15000 );\x0a\x0a\x09\x09\x09\x09$( \x27form#post\x27 ).on( \x27submit.autosave-local\x27, function() {\x0a\x09\x09\x09\x09\x09var editor = getEditor(),\x0a\x09\x09\x09\x09\x09\x09post_id = $(\x27#post_ID\x27).val() || 0;\x0a\x0a\x09\x09\x09\x09\x09if ( editor && ! editor.isHidden() ) {\x0a\x0a\x09\x09\x09\x09\x09\x09// Last onSubmit event in the editor, needs to run after the content has been moved to the textarea.\x0a\x09\x09\x09\x09\x09\x09editor.on( \x27submit\x27, function() {\x0a\x09\x09\x09\x09\x09\x09\x09save({\x0a\x09\x09\x09\x09\x09\x09\x09\x09post_title: $( \x27#title\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09\x09\x09\x09\x09content: $( \x27#content\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09\x09\x09\x09\x09excerpt: $( \x27#excerpt\x27 ).val() || \x27\x27\x0a\x09\x09\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09save({\x0a\x09\x09\x09\x09\x09\x09\x09post_title: $( \x27#title\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09\x09\x09\x09content: $( \x27#content\x27 ).val() || \x27\x27,\x0a\x09\x09\x09\x09\x09\x09\x09excerpt: $( \x27#excerpt\x27 ).val() || \x27\x27\x0a\x09\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09var secure = ( \x27https:\x27 === window.location.protocol );\x0a\x09\x09\x09\x09\x09wpCookies.set( \x27wp-saving-post\x27, post_id + \x27-check\x27, 24 * 60 * 60, false, false, secure );\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Compares 2 strings. Removes whitespaces in the strings before comparing them.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {string} str1 The first string.\x0a\x09\x09\x09 * @param {string} str2 The second string.\x0a\x09\x09\x09 * @returns {boolean} True if the strings are the same.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function compare( str1, str2 ) {\x0a\x09\x09\x09\x09function removeSpaces( string ) {\x0a\x09\x09\x09\x09\x09return string.toString().replace(/[\x5cx20\x5ct\x5cr\x5cn\x5cf]+/g, \x27\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return ( removeSpaces( str1 || \x27\x27 ) === removeSpaces( str2 || \x27\x27 ) );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Checks if the saved data for the current post (if any) is different than the\x0a\x09\x09\x09 * loaded post data on the screen.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * Shows a standard message letting the user restore the post data if different.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function checkPost() {\x0a\x09\x09\x09\x09var content, post_title, excerpt, $notice,\x0a\x09\x09\x09\x09\x09postData = getSavedPostData(),\x0a\x09\x09\x09\x09\x09cookie = wpCookies.get( \x27wp-saving-post\x27 ),\x0a\x09\x09\x09\x09\x09$newerAutosaveNotice = $( \x27#has-newer-autosave\x27 ).parent( \x27.notice\x27 ),\x0a\x09\x09\x09\x09\x09$headerEnd = $( \x27.wp-header-end\x27 );\x0a\x0a\x09\x09\x09\x09if ( cookie === post_id + \x27-saved\x27 ) {\x0a\x09\x09\x09\x09\x09wpCookies.remove( \x27wp-saving-post\x27 );\x0a\x09\x09\x09\x09\x09// The post was saved properly, remove old data and bail\x0a\x09\x09\x09\x09\x09setData( false );\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( ! postData ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09content = $( \x27#content\x27 ).val() || \x27\x27;\x0a\x09\x09\x09\x09post_title = $( \x27#title\x27 ).val() || \x27\x27;\x0a\x09\x09\x09\x09excerpt = $( \x27#excerpt\x27 ).val() || \x27\x27;\x0a\x0a\x09\x09\x09\x09if ( compare( content, postData.content ) && compare( post_title, postData.post_title ) &&\x0a\x09\x09\x09\x09\x09compare( excerpt, postData.excerpt ) ) {\x0a\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * If \x27.wp-header-end\x27 is found, append the notices after it otherwise\x0a\x09\x09\x09\x09 * after the first h1 or h2 heading found within the main content.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09if ( ! $headerEnd.length ) {\x0a\x09\x09\x09\x09\x09$headerEnd = $( \x27.wrap h1, .wrap h2\x27 ).first();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$notice = $( \x27#local-storage-notice\x27 )\x0a\x09\x09\x09\x09\x09.insertAfter( $headerEnd )\x0a\x09\x09\x09\x09\x09.addClass( \x27notice-warning\x27 );\x0a\x0a\x09\x09\x09\x09if ( $newerAutosaveNotice.length ) {\x0a\x0a\x09\x09\x09\x09\x09// If there is a \x22server\x22 autosave notice, hide it.\x0a\x09\x09\x09\x09\x09// The data in the session storage is either the same or newer.\x0a\x09\x09\x09\x09\x09$newerAutosaveNotice.slideUp( 150, function() {\x0a\x09\x09\x09\x09\x09\x09$notice.slideDown( 150 );\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09$notice.slideDown( 200 );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$notice.find( \x27.restore-backup\x27 ).on( \x27click.autosave-local\x27, function() {\x0a\x09\x09\x09\x09\x09restorePost( postData );\x0a\x09\x09\x09\x09\x09$notice.fadeTo( 250, 0, function() {\x0a\x09\x09\x09\x09\x09\x09$notice.slideUp( 150 );\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Restores the current title, content and excerpt from postData.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object} postData The object containing all post data.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {boolean} True if the post is restored.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function restorePost( postData ) {\x0a\x09\x09\x09\x09var editor;\x0a\x0a\x09\x09\x09\x09if ( postData ) {\x0a\x09\x09\x09\x09\x09// Set the last saved data\x0a\x09\x09\x09\x09\x09lastCompareString = getCompareString( postData );\x0a\x0a\x09\x09\x09\x09\x09if ( $( \x27#title\x27 ).val() !== postData.post_title ) {\x0a\x09\x09\x09\x09\x09\x09$( \x27#title\x27 ).focus().val( postData.post_title || \x27\x27 );\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09$( \x27#excerpt\x27 ).val( postData.excerpt || \x27\x27 );\x0a\x09\x09\x09\x09\x09editor = getEditor();\x0a\x0a\x09\x09\x09\x09\x09if ( editor && ! editor.isHidden() && typeof switchEditors !== \x27undefined\x27 ) {\x0a\x09\x09\x09\x09\x09\x09if ( editor.settings.wpautop && postData.content ) {\x0a\x09\x09\x09\x09\x09\x09\x09postData.content = switchEditors.wpautop( postData.content );\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09// Make sure there\x27s an undo level in the editor\x0a\x09\x09\x09\x09\x09\x09editor.undoManager.transact( function() {\x0a\x09\x09\x09\x09\x09\x09\x09editor.setContent( postData.content || \x27\x27 );\x0a\x09\x09\x09\x09\x09\x09\x09editor.nodeChanged();\x0a\x09\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09\x09} else {\x0a\x0a\x09\x09\x09\x09\x09\x09// Make sure the Text editor is selected\x0a\x09\x09\x09\x09\x09\x09$( \x27#content-html\x27 ).click();\x0a\x09\x09\x09\x09\x09\x09$( \x27#content\x27 ).focus();\x0a\x0a\x09\x09\x09\x09\x09\x09// Using document.execCommand() will let the user undo.\x0a\x09\x09\x09\x09\x09\x09document.execCommand( \x27selectAll\x27 );\x0a\x09\x09\x09\x09\x09\x09document.execCommand( \x27insertText\x27, false, postData.content || \x27\x27 );\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return false;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09blog_id = typeof window.autosaveL10n !== \x27undefined\x27 && window.autosaveL10n.blog_id;\x0a\x0a\x09\x09\x09// Check if the browser supports sessionStorage and it\x27s not disabled,\x0a\x09\x09\x09// then initialize and run checkPost().\x0a\x09\x09\x09// Don\x27t run if the post type supports neither \x27editor\x27 (textarea#content) nor \x27excerpt\x27.\x0a\x09\x09\x09if ( checkStorage() && blog_id && ( $(\x27#content\x27).length || $(\x27#excerpt\x27).length ) ) {\x0a\x09\x09\x09\x09$document.ready( run );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return {\x0a\x09\x09\x09\x09hasStorage: hasStorage,\x0a\x09\x09\x09\x09getSavedPostData: getSavedPostData,\x0a\x09\x09\x09\x09save: save,\x0a\x09\x09\x09\x09suspend: suspend,\x0a\x09\x09\x09\x09resume: resume\x0a\x09\x09\x09};\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Auto saves the post on the server.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {Object} {\x0a\x09\x09 * \x09{\x0a\x09\x09 * \x09\x09tempBlockSave: tempBlockSave,\x0a\x09\x09 * \x09\x09triggerSave: triggerSave,\x0a\x09\x09 * \x09\x09postChanged: postChanged,\x0a\x09\x09 * \x09\x09suspend: suspend,\x0a\x09\x09 * \x09\x09resume: resume\x0a\x09\x09 * \x09\x09}\x0a\x09\x09 * \x09} The object all functions for autosave.\x0a\x09\x09 */\x0a\x09\x09function autosaveServer() {\x0a\x09\x09\x09var _blockSave, _blockSaveTimer, previousCompareString, lastCompareString,\x0a\x09\x09\x09\x09nextRun = 0,\x0a\x09\x09\x09\x09isSuspended = false;\x0a\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Blocks saving for the next 10 seconds.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function tempBlockSave() {\x0a\x09\x09\x09\x09_blockSave = true;\x0a\x09\x09\x09\x09window.clearTimeout( _blockSaveTimer );\x0a\x0a\x09\x09\x09\x09_blockSaveTimer = window.setTimeout( function() {\x0a\x09\x09\x09\x09\x09_blockSave = false;\x0a\x09\x09\x09\x09}, 10000 );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets isSuspended to true.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function suspend() {\x0a\x09\x09\x09\x09isSuspended = true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets isSuspended to false.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function resume() {\x0a\x09\x09\x09\x09isSuspended = false;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Triggers the autosave with the post data.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @param {Object} data The post data.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function response( data ) {\x0a\x09\x09\x09\x09_schedule();\x0a\x09\x09\x09\x09_blockSave = false;\x0a\x09\x09\x09\x09lastCompareString = previousCompareString;\x0a\x09\x09\x09\x09previousCompareString = \x27\x27;\x0a\x0a\x09\x09\x09\x09$document.trigger( \x27after-autosave\x27, [data] );\x0a\x09\x09\x09\x09enableButtons();\x0a\x0a\x09\x09\x09\x09if ( data.success ) {\x0a\x09\x09\x09\x09\x09// No longer an auto-draft\x0a\x09\x09\x09\x09\x09$( \x27#auto_draft\x27 ).val(\x27\x27);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Saves immediately.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * Resets the timing and tells heartbeat to connect now.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function triggerSave() {\x0a\x09\x09\x09\x09nextRun = 0;\x0a\x09\x09\x09\x09wp.heartbeat.connectNow();\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Checks if the post content in the textarea has changed since page load.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * This also happens when TinyMCE is active and editor.save() is triggered by\x0a\x09\x09\x09 * wp.autosave.getPostData().\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @return {boolean} True if the post has been changed.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function postChanged() {\x0a\x09\x09\x09\x09return getCompareString() !== initialCompareString;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Checks if the post can be saved or not.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * If the post hasn\x27t changed or it cannot be updated,\x0a\x09\x09\x09 * because the autosave is blocked or suspended, the function returns false.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {Object} Returns the post data.\x0a\x09\x09\x09 */\x0a\x09\x09\x09function save() {\x0a\x09\x09\x09\x09var postData, compareString;\x0a\x0a\x09\x09\x09\x09// window.autosave() used for back-compat\x0a\x09\x09\x09\x09if ( isSuspended || _blockSave || ! window.autosave() ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( ( new Date() ).getTime() \x3c nextRun ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09postData = getPostData();\x0a\x09\x09\x09\x09compareString = getCompareString( postData );\x0a\x0a\x09\x09\x09\x09// First check\x0a\x09\x09\x09\x09if ( typeof lastCompareString === \x27undefined\x27 ) {\x0a\x09\x09\x09\x09\x09lastCompareString = initialCompareString;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// No change\x0a\x09\x09\x09\x09if ( compareString === lastCompareString ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09previousCompareString = compareString;\x0a\x09\x09\x09\x09tempBlockSave();\x0a\x09\x09\x09\x09disableButtons();\x0a\x0a\x09\x09\x09\x09$document.trigger( \x27wpcountwords\x27, [ postData.content ] )\x0a\x09\x09\x09\x09\x09.trigger( \x27before-autosave\x27, [ postData ] );\x0a\x0a\x09\x09\x09\x09postData._wpnonce = $( \x27#_wpnonce\x27 ).val() || \x27\x27;\x0a\x0a\x09\x09\x09\x09return postData;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets the next run, based on the autosave interval.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @private\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09function _schedule() {\x0a\x09\x09\x09\x09nextRun = ( new Date() ).getTime() + ( autosaveL10n.autosaveInterval * 1000 ) || 60000;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Sets the autosaveData on the autosave heartbeat.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09 */\x0a\x09\x09\x09$document.on( \x27heartbeat-send.autosave\x27, function( event, data ) {\x0a\x09\x09\x09\x09var autosaveData = save();\x0a\x0a\x09\x09\x09\x09if ( autosaveData ) {\x0a\x09\x09\x09\x09\x09data.wp_autosave = autosaveData;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * Triggers the autosave of the post with the autosave data on the autosave\x0a\x09\x09\x09\x09 * heartbeat.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09}).on( \x27heartbeat-tick.autosave\x27, function( event, data ) {\x0a\x09\x09\x09\x09if ( data.wp_autosave ) {\x0a\x09\x09\x09\x09\x09response( data.wp_autosave );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * Disables buttons and throws a notice when the connection is lost.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09}).on( \x27heartbeat-connection-lost.autosave\x27, function( event, error, status ) {\x0a\x0a\x09\x09\x09\x09// When connection is lost, keep user from submitting changes.\x0a\x09\x09\x09\x09if ( \x27timeout\x27 === error || 603 === status ) {\x0a\x09\x09\x09\x09\x09var $notice = $(\x27#lost-connection-notice\x27);\x0a\x0a\x09\x09\x09\x09\x09if ( ! wp.autosave.local.hasStorage ) {\x0a\x09\x09\x09\x09\x09\x09$notice.find(\x27.hide-if-no-sessionstorage\x27).hide();\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09$notice.show();\x0a\x09\x09\x09\x09\x09disableButtons();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/**\x0a\x09\x09\x09\x09 * Enables buttons when the connection is restored.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @since 3.9.0\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * @returns {void}\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09}).on( \x27heartbeat-connection-restored.autosave\x27, function() {\x0a\x09\x09\x09\x09$(\x27#lost-connection-notice\x27).hide();\x0a\x09\x09\x09\x09enableButtons();\x0a\x09\x09\x09}).ready( function() {\x0a\x09\x09\x09\x09_schedule();\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09return {\x0a\x09\x09\x09\x09tempBlockSave: tempBlockSave,\x0a\x09\x09\x09\x09triggerSave: triggerSave,\x0a\x09\x09\x09\x09postChanged: postChanged,\x0a\x09\x09\x09\x09suspend: suspend,\x0a\x09\x09\x09\x09resume: resume\x0a\x09\x09\x09};\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets the autosave time out.\x0a\x09\x09 *\x0a\x09\x09 * Wait for TinyMCE to initialize plus 1 second. for any external css to finish loading,\x0a\x09\x09 * then save to the textarea before setting initialCompareString.\x0a\x09\x09 * This avoids any insignificant differences between the initial textarea content and the content\x0a\x09\x09 * extracted from the editor.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.9.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09$document.on( \x27tinymce-editor-init.autosave\x27, function( event, editor ) {\x0a\x09\x09\x09if ( editor.id === \x27content\x27 ) {\x0a\x09\x09\x09\x09window.setTimeout( function() {\x0a\x09\x09\x09\x09\x09editor.save();\x0a\x09\x09\x09\x09\x09initialCompareString = getCompareString();\x0a\x09\x09\x09\x09}, 1000 );\x0a\x09\x09\x09}\x0a\x09\x09}).ready( function() {\x0a\x0a\x09\x09\x09// Set the initial compare string in case TinyMCE is not used or not loaded first\x0a\x09\x09\x09initialCompareString = getCompareString();\x0a\x09\x09});\x0a\x0a\x09\x09return {\x0a\x09\x09\x09getPostData: getPostData,\x0a\x09\x09\x09getCompareString: getCompareString,\x0a\x09\x09\x09disableButtons: disableButtons,\x0a\x09\x09\x09enableButtons: enableButtons,\x0a\x09\x09\x09local: autosaveLocal(),\x0a\x09\x09\x09server: autosaveServer()\x0a\x09\x09};\x0a\x09}\x0a\x0a\x09/** @namespace wp */\x0a\x09window.wp = window.wp || {};\x0a\x09window.wp.autosave = autosave();\x0a\x0a}( jQuery, window ));\x0a\xf1\x8b\x1bw\x0c?\xe5\x9f\xf1\x05'}