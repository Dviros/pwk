var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:27 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Mon, 08 Apr 2019 05:22:51 GMT\x0aETag: \x226be1-585fe071bc0c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-7857/7858\x0aContent-Length: 7858\x0aKeep-Alive: timeout=5, max=81\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */\x0avar twemoji = (function (\x0a  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*\x0a    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\x0a  */\x0a\x0a  // WARNING:   this file is generated automatically via\x0a  //            `node 2/scripts/generate`\x0a  //            please update its `createTwemoji` function\x0a  //            at the bottom of the same file instead.\x0a\x0a) {\x0a  \x27use strict\x27;\x0a\x0a  /*jshint maxparams:4 */\x0a\x0a  var\x0a    // the exported module object\x0a    twemoji = {\x0a\x0a\x0a    /////////////////////////\x0a    //      properties     //\x0a    /////////////////////////\x0a\x0a      // default assets url, by default will be Twitter Inc. CDN\x0a      base: \x27https://twemoji.maxcdn.com/2/\x27,\x0a\x0a      // default assets file extensions, by default \x27.png\x27\x0a      ext: \x27.png\x27,\x0a\x0a      // default assets/folder size, by default \x2272x72\x22\x0a      // available via Twitter CDN: 72\x0a      size: \x2772x72\x27,\x0a\x0a      // default class name, by default \x27emoji\x27\x0a      className: \x27emoji\x27,\x0a\x0a      // basic utilities / helpers to convert code points\x0a      // to JavaScript surrogates and vice versa\x0a      convert: {\x0a\x0a        /**\x0a         * Given an HEX codepoint, returns UTF16 surrogate pairs.\x0a         *\x0a         * @param   string  generic codepoint, i.e. \x271F4A9\x27\x0a         * @return  string  codepoint transformed into utf16 surrogates pair,\x0a         *          i.e. \x5cuD83D\x5cuDCA9\x0a         *\x0a         * @example\x0a         *  twemoji.convert.fromCodePoint(\x271f1e8\x27);\x0a         *  // \x22\x5cud83c\x5cudde8\x22\x0a         *\x0a         *  \x271f1e8-1f1f3\x27.split(\x27-\x27).map(twemoji.convert.fromCodePoint).join(\x27\x27)\x0a         *  // \x22\x5cud83c\x5cudde8\x5cud83c\x5cuddf3\x22\x0a         */\x0a        fromCodePoint: fromCodePoint,\x0a\x0a        /**\x0a         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.\x0a         *\x0a         * @param   string  generic utf16 surrogates pair, i.e. \x5cuD83D\x5cuDCA9\x0a         * @param   string  optional separator for double code points, default=\x27-\x27\x0a         * @return  string  utf16 transformed into codepoint, i.e. \x271F4A9\x27\x0a         *\x0a         * @example\x0a         *  twemoji.convert.toCodePoint(\x27\x5cud83c\x5cudde8\x5cud83c\x5cuddf3\x27);\x0a         *  // \x221f1e8-1f1f3\x22\x0a         *\x0a         *  twemoji.convert.toCodePoint(\x27\x5cud83c\x5cudde8\x5cud83c\x5cuddf3\x27, \x27~\x27);\x0a         *  // \x221f1e8~1f1f3\x22\x0a         */\x0a        toCodePoint: toCodePoint\x0a      },\x0a\x0a\x0a    /////////////////////////\x0a    //       methods       //\x0a    /////////////////////////\x0a\x0a      /**\x0a       * User first: used to remove missing images\x0a       * preserving the original text intent when\x0a       * a fallback for network problems is desired.\x0a       * Automatically added to Image nodes via DOM\x0a       * It could be recycled for string operations via:\x0a       *  $(\x27img.emoji\x27).on(\x27error\x27, twemoji.onerror)\x0a       */\x0a      onerror: function onerror() {\x0a        if (this.parentNode) {\x0a          this.parentNode.replaceChild(createText(this.alt, false), this);\x0a        }\x0a      },\x0a\x0a      /**\x0a       * Main method/logic to generate either \x3cimg\x3e tags or HTMLImage nodes.\x0a       *  \x22emojify\x22 a generic text or DOM Element.\x0a       *\x0a       * @overloads\x0a       *\x0a       * String replacement for `innerHTML` or server side operations\x0a       *  twemoji.parse(string);\x0a       *  twemoji.parse(string, Function);\x0a       *  twemoji.parse(string, Object);\x0a       *\x0a       * HTMLElement tree parsing for safer operations over existing DOM\x0a       *  twemoji.parse(HTMLElement);\x0a       *  twemoji.parse(HTMLElement, Function);\x0a       *  twemoji.parse(HTMLElement, Object);\x0a       *\x0a       * @param   string|HTMLElement  the source to parse and enrich with emoji.\x0a       *\x0a       *          string              replace emoji matches with \x3cimg\x3e tags.\x0a       *                              Mainly used to inject emoji via `innerHTML`\x0a       *                              It does **not** parse the string or validate it,\x0a       *                              it simply replaces found emoji with a tag.\x0a       *                              NOTE: be sure this won\x27t affect security.\x0a       *\x0a       *          HTMLElement         walk through the DOM tree and find emoji\x0a       *                              that are inside **text node only** (nodeType === 3)\x0a       *                              Mainly used to put emoji in already generated DOM\x0a       *                              without compromising surrounding nodes and\x0a       *                              **avoiding** the usage of `innerHTML`.\x0a       *                              NOTE: Using DOM elements instead of strings should\x0a       *                              improve security without compromising too much\x0a       *                              performance compared with a less safe `innerHTML`.\x0a       *\x0a       * @param   Function|Object  [optional]\x0a       *                              either the callback that will be invoked or an object\x0a       *                              with all properties to use per each found emoji.\x0a       *\x0a       *          Function            if specified, this will be invoked per each emoji\x0a       *                              that has been found through the RegExp except\x0a       *                              those follwed by the invariant \x5cuFE0E (\x22as text\x22).\x0a       *                              Once invoked, parameters will be:\x0a       *\x0a       *                                iconId:string     the lower case HEX code point\x0a       *                                                  i.e. \x221f4a9\x22\x0a       *\x0a       *                                options:Object    all info for this parsing operation\x0a       *\x0a       *                                variant:char      the optional \x5cuFE0F (\x22as image\x22)\x0a       *                                                  variant, in case this info\x0a       *                                                  is anyhow meaningful.\x0a       *                                                  By default this is ignored.\x0a       *\x0a       *                              If such callback will return a falsy value instead\x0a       *                              of a valid `src` to use for the image, nothing will\x0a       *                              actually change for that specific emoji.\x0a       *\x0a       *\x0a       *          Object              if specified, an object containing the following properties\x0a       *\x0a       *            callback   Function  the callback to invoke per each found emoji.\x0a       *            base       string    the base url, by default twemoji.base\x0a       *            ext        string    the image extension, by default twemoji.ext\x0a       *            size       string    the assets size, by default twemoji.size\x0a       *\x0a       * @example\x0a       *\x0a       *  twemoji.parse(\x22I \x5cu2764\x5cuFE0F emoji!\x22);\x0a       *  // I \x3cimg class=\x22emoji\x22 draggable=\x22false\x22 alt=\x22\xe2\x9d\xa4\xef\xb8\x8f\x22 src=\x22/assets/2764.gif\x22/\x3e emoji!\x0a       *\x0a       *\x0a       *  twemoji.parse(\x22I \x5cu2764\x5cuFE0F emoji!\x22, function(iconId, options) {\x0a       *    return \x27/assets/\x27 + iconId + \x27.gif\x27;\x0a       *  });\x0a       *  // I \x3cimg class=\x22emoji\x22 draggable=\x22false\x22 alt=\x22\xe2\x9d\xa4\xef\xb8\x8f\x22 src=\x22/assets/2764.gif\x22/\x3e emoji!\x0a       *\x0a       *\x0a       * twemoji.parse(\x22I \x5cu2764\x5cuFE0F emoji!\x22, {\x0a       *   size: 72,\x0a       *   callback: function(iconId, options) {\x0a       *     return \x27/assets/\x27 + options.size + \x27/\x27 + iconId + options.ext;\x0a       *   }\x0a       * });\x0a       *  // I \x3cimg class=\x22emoji\x22 draggable=\x22false\x22 alt=\x22\xe2\x9d\xa4\xef\xb8\x8f\x22 src=\x22/assets/72x72/2764.png\x22/\x3e emoji!\x0a       *\x0a       */\x0a      parse: parse,\x0a\x0a      /**\x0a       * Given a string, invokes the callback argument\x0a       *  per each emoji found in such string.\x0a       * This is the most raw version used by\x0a       *  the .parse(string) method itself.\x0a       *\x0a       * @param   string    generic string to parse\x0a       * @param   Function  a generic callback that will be\x0a       *                    invoked to replace the content.\x0a       *                    This calback wil receive standard\x0a       *                    String.prototype.replace(str, callback)\x0a       *                    arguments such:\x0a       *  callback(\x0a       *    rawText,  // the emoji match\x0a       *  );\x0a       *\x0a       *                    and others commonly received via replace.\x0a       */\x0a      replace: replace,\x0a\x0a      /**\x0a       * Simplify string tests against emoji.\x0a       *\x0a       * @param   string  some text that might contain emoji\x0a       * @return  boolean true if any emoji was found, false otherwise.\x0a       *\x0a       * @example\x0a       *\x0a       *  if (twemoji.test(someContent)) {\x0a       *    console.log(\x22emoji All The Things!\x22);\x0a       *  }\x0a       */\x0a      test: test\x0a    },\x0a\x0a    // used to escape HTML special chars in attributes\x0a    escaper = {\x0a      \x27&\x27: \x27&amp;\x27,\x0a      \x27\x3c\x27: \x27&lt;\x27,\x0a      \x27\x3e\x27: \x27&gt;\x27,\x0a      \x22\x27\x22: \x27&#39;\x27,\x0a      \x27\x22\x27: \x27&quot;\x27\x0a    },\x0a\x0a    // RegExp based on emoji\x27s official Unicode standards\x0a    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt\x0a    re = /(?:\x5cud83d\x5cudc68\x5cud83c\x5cudffc\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c\x5cudffb|\x5cud83d\x5cudc68\x5cud83c\x5cudffd\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb\x5cudffc]|\x5cud83d\x5cudc68\x5cud83c\x5cudffe\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb-\x5cudffd]|\x5cud83d\x5cudc68\x5cud83c\x5cudfff\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb-\x5cudffe]|\x5cud83d\x5cudc69\x5cud83c\x5cudffb\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffc-\x5cudfff]|\x5cud83d\x5cudc69\x5cud83c\x5cudffc\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb\x5cudffd-\x5cudfff]|\x5cud83d\x5cudc69\x5cud83c\x5cudffc\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc69\x5cud83c\x5cudffb|\x5cud83d\x5cudc69\x5cud83c\x5cudffd\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb\x5cudffc\x5cudffe\x5cudfff]|\x5cud83d\x5cudc69\x5cud83c\x5cudffd\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc69\x5cud83c[\x5cudffb\x5cudffc]|\x5cud83d\x5cudc69\x5cud83c\x5cudffe\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb-\x5cudffd\x5cudfff]|\x5cud83d\x5cudc69\x5cud83c\x5cudffe\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc69\x5cud83c[\x5cudffb-\x5cudffd]|\x5cud83d\x5cudc69\x5cud83c\x5cudfff\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc68\x5cud83c[\x5cudffb-\x5cudffe]|\x5cud83d\x5cudc69\x5cud83c\x5cudfff\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83d\x5cudc69\x5cud83c[\x5cudffb-\x5cudffe]|\x5cud83e\x5cuddd1\x5cud83c\x5cudffb\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1\x5cud83c\x5cudffb|\x5cud83e\x5cuddd1\x5cud83c\x5cudffc\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1\x5cud83c[\x5cudffb\x5cudffc]|\x5cud83e\x5cuddd1\x5cud83c\x5cudffd\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1\x5cud83c[\x5cudffb-\x5cudffd]|\x5cud83e\x5cuddd1\x5cud83c\x5cudffe\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1\x5cud83c[\x5cudffb-\x5cudffe]|\x5cud83e\x5cuddd1\x5cud83c\x5cudfff\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1\x5cud83c[\x5cudffb-\x5cudfff]|\x5cud83e\x5cuddd1\x5cu200d\x5cud83e\x5cudd1d\x5cu200d\x5cud83e\x5cuddd1|\x5cud83d\x5cudc6b\x5cud83c[\x5cudffb-\x5cudfff]|\x5cud83d\x5cudc6c\x5cud83c[\x5cudffb-\x5cudfff]|\x5cud83d\x5cudc6d\x5cud83c[\x5cudffb-\x5cudfff]|\x5cud83d[\x5cudc6b-\x5cudc6d])|(?:\x5cud83d[\x5cudc68\x5cudc69])(?:\x5cud83c[\x5cudffb-\x5cudfff])?\x5cu200d(?:\x5cu2695\x5cufe0f|\x5cu2696\x5cufe0f|\x5cu2708\x5cufe0f|\x5cud83c[\x5cudf3e\x5cudf73\x5cudf93\x5cudfa4\x5cudfa8\x5cudfeb\x5cudfed]|\x5cud83d[\x5cudcbb\x5cudcbc\x5cudd27\x5cudd2c\x5cude80\x5cude92]|\x5cud83e[\x5cuddaf-\x5cuddb3\x5cuddbc\x5cuddbd])|(?:\x5cud83c[\x5cudfcb\x5cudfcc]|\x5cud83d[\x5cudd74\x5cudd75]|\x5cu26f9)((?:\x5cud83c[\x5cudffb-\x5cudfff]|\x5cufe0f)\x5cu200d[\x5cu2640\x5cu2642]\x5cufe0f)|(?:\x5cud83c[\x5cudfc3\x5cudfc4\x5cudfca]|\x5cud83d[\x5cudc6e\x5cudc71\x5cudc73\x5cudc77\x5cudc81\x5cudc82\x5cudc86\x5cudc87\x5cude45-\x5cude47\x5cude4b\x5cude4d\x5cude4e\x5cudea3\x5cudeb4-\x5cudeb6]|\x5cud83e[\x5cudd26\x5cudd35\x5cudd37-\x5cudd39\x5cudd3d\x5cudd3e\x5cuddb8\x5cuddb9\x5cuddcd-\x5cuddcf\x5cuddd6-\x5cudddd])(?:\x5cud83c[\x5cudffb-\x5cudfff])?\x5cu200d[\x5cu2640\x5cu2642]\x5cufe0f|(?:\x5cud83d\x5cudc68\x5cu200d\x5cu2764\x5cufe0f\x5cu200d\x5cud83d\x5cudc8b\x5cu200d\x5cud83d\x5cudc68|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc66\x5cu200d\x5cud83d\x5cudc66|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc67\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc66\x5cu200d\x5cud83d\x5cudc66|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc67\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc69\x5cu200d\x5cu2764\x5cufe0f\x5cu200d\x5cud83d\x5cudc8b\x5cu200d\x5cud83d[\x5cudc68\x5cudc69]|\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc66\x5cu200d\x5cud83d\x5cudc66|\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc67\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc68\x5cu200d\x5cu2764\x5cufe0f\x5cu200d\x5cud83d\x5cudc68|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc66\x5cu200d\x5cud83d\x5cudc66|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc67\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc68\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc68\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc69\x5cu200d\x5cu2764\x5cufe0f\x5cu200d\x5cud83d[\x5cudc68\x5cudc69]|\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc66\x5cu200d\x5cud83d\x5cudc66|\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc67\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc69\x5cu200d\x5cud83d\x5cudc69\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83c\x5cudff3\x5cufe0f\x5cu200d\x5cud83c\x5cudf08|\x5cud83c\x5cudff4\x5cu200d\x5cu2620\x5cufe0f|\x5cud83d\x5cudc15\x5cu200d\x5cud83e\x5cuddba|\x5cud83d\x5cudc41\x5cu200d\x5cud83d\x5cudde8|\x5cud83d\x5cudc68\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc69\x5cu200d\x5cud83d[\x5cudc66\x5cudc67]|\x5cud83d\x5cudc6f\x5cu200d\x5cu2640\x5cufe0f|\x5cud83d\x5cudc6f\x5cu200d\x5cu2642\x5cufe0f|\x5cud83e\x5cudd3c\x5cu200d\x5cu2640\x5cufe0f|\x5cud83e\x5cudd3c\x5cu200d\x5cu2642\x5cufe0f|\x5cud83e\x5cuddde\x5cu200d\x5cu2640\x5cufe0f|\x5cud83e\x5cuddde\x5cu200d\x5cu2642\x5cufe0f|\x5cud83e\x5cudddf\x5cu200d\x5cu2640\x5cufe0f|\x5cud83e\x5cudddf\x5cu200d\x5cu2642\x5cufe0f)|[#*0-9]\x5cufe0f?\x5cu20e3|(?:[\xc2\xa9\xc2\xae\x5cu2122\x5cu265f]\x5cufe0f)|(?:\x5cud83c[\x5cudc04\x5cudd70\x5cudd71\x5cudd7e\x5cudd7f\x5cude02\x5cude1a\x5cude2f\x5cude37\x5cudf21\x5cudf24-\x5cudf2c\x5cudf36\x5cudf7d\x5cudf96\x5cudf97\x5cudf99-\x5cudf9b\x5cudf9e\x5cudf9f\x5cudfcd\x5cudfce\x5cudfd4-\x5cudfdf\x5cudff3\x5cudff5\x5cudff7]|\x5cud83d[\x5cudc3f\x5cudc41\x5cudcfd\x5cudd49\x5cudd4a\x5cudd6f\x5cudd70\x5cudd73\x5cudd76-\x5cudd79\x5cudd87\x5cudd8a-\x5cudd8d\x5cudda5\x5cudda8\x5cuddb1\x5cuddb2\x5cuddbc\x5cuddc2-\x5cuddc4\x5cuddd1-\x5cuddd3\x5cudddc-\x5cuddde\x5cudde1\x5cudde3\x5cudde8\x5cuddef\x5cuddf3\x5cuddfa\x5cudecb\x5cudecd-\x5cudecf\x5cudee0-\x5cudee5\x5cudee9\x5cudef0\x5cudef3]|[\x5cu203c\x5cu2049\x5cu2139\x5cu2194-\x5cu2199\x5cu21a9\x5cu21aa\x5cu231a\x5cu231b\x5cu2328\x5cu23cf\x5cu23ed-\x5cu23ef\x5cu23f1\x5cu23f2\x5cu23f8-\x5cu23fa\x5cu24c2\x5cu25aa\x5cu25ab\x5cu25b6\x5cu25c0\x5cu25fb-\x5cu25fe\x5cu2600-\x5cu2604\x5cu260e\x5cu2611\x5cu2614\x5cu2615\x5cu2618\x5cu2620\x5cu2622\x5cu2623\x5cu2626\x5cu262a\x5cu262e\x5cu262f\x5cu2638-\x5cu263a\x5cu2640\x5cu2642\x5cu2648-\x5cu2653\x5cu2660\x5cu2663\x5cu2665\x5cu2666\x5cu2668\x5cu267b\x5cu267f\x5cu2692-\x5cu2697\x5cu2699\x5cu269b\x5cu269c\x5cu26a0\x5cu26a1\x5cu26aa\x5cu26ab\x5cu26b0\x5cu26b1\x5cu26bd\x5cu26be\x5cu26c4\x5cu26c5\x5cu26c8\x5cu26cf\x5cu26d1\x5cu26d3\x5cu26d4\x5cu26e9\x5cu26ea\x5cu26f0-\x5cu26f5\x5cu26f8\x5cu26fa\x5cu26fd\x5cu2702\x5cu2708\x5cu2709\x5cu270f\x5cu2712\x5cu2714\x5cu2716\x5cu271d\x5cu2721\x5cu2733\x5cu2734\x5cu2744\x5cu2747\x5cu2757\x5cu2763\x5cu2764\x5cu27a1\x5cu2934\x5cu2935\x5cu2b05-\x5cu2b07\x5cu2b1b\x5cu2b1c\x5cu2b50\x5cu2b55\x5cu3030\x5cu303d\x5cu3297\x5cu3299])(?:\x5cufe0f|(?!\x5cufe0e))|(?:(?:\x5cud83c[\x5cudfcb\x5cudfcc]|\x5cud83d[\x5cudd74\x5cudd75\x5cudd90]|[\x5cu261d\x5cu26f7\x5cu26f9\x5cu270c\x5cu270d])(?:\x5cufe0f|(?!\x5cufe0e))|(?:\x5cud83c[\x5cudf85\x5cudfc2-\x5cudfc4\x5cudfc7\x5cudfca]|\x5cud83d[\x5cudc42\x5cudc43\x5cudc46-\x5cudc50\x5cudc66-\x5cudc69\x5cudc6e\x5cudc70-\x5cudc78\x5cudc7c\x5cudc81-\x5cudc83\x5cudc85-\x5cudc87\x5cudcaa\x5cudd7a\x5cudd95\x5cudd96\x5cude45-\x5cude47\x5cude4b-\x5cude4f\x5cudea3\x5cudeb4-\x5cudeb6\x5cudec0\x5cudecc]|\x5cud83e[\x5cudd0f\x5cudd18-\x5cudd1c\x5cudd1e\x5cudd1f\x5cudd26\x5cudd30-\x5cudd39\x5cudd3d\x5cudd3e\x5cuddb5\x5cuddb6\x5cuddb8\x5cuddb9\x5cuddbb\x5cuddcd-\x5cuddcf\x5cuddd1-\x5cudddd]|[\x5cu270a\x5cu270b]))(?:\x5cud83c[\x5cudffb-\x5cudfff])?|(?:\x5cud83c\x5cudff4\x5cudb40\x5cudc67\x5cudb40\x5cudc62\x5cudb40\x5cudc65\x5cudb40\x5cudc6e\x5cudb40\x5cudc67\x5cudb40\x5cudc7f|\x5cud83c\x5cudff4\x5cudb40\x5cudc67\x5cudb40\x5cudc62\x5cudb40\x5cudc73\x5cudb40\x5cudc63\x5cudb40\x5cudc74\x5cudb40\x5cudc7f|\x5cud83c\x5cudff4\x5cudb40\x5cudc67\x5cudb40\x5cudc62\x5cudb40\x5cudc77\x5cudb40\x5cudc6c\x5cudb40\x5cudc73\x5cudb40\x5cudc7f|\x5cud83c\x5cudde6\x5cud83c[\x5cudde8-\x5cuddec\x5cuddee\x5cuddf1\x5cuddf2\x5cuddf4\x5cuddf6-\x5cuddfa\x5cuddfc\x5cuddfd\x5cuddff]|\x5cud83c\x5cudde7\x5cud83c[\x5cudde6\x5cudde7\x5cudde9-\x5cuddef\x5cuddf1-\x5cuddf4\x5cuddf6-\x5cuddf9\x5cuddfb\x5cuddfc\x5cuddfe\x5cuddff]|\x5cud83c\x5cudde8\x5cud83c[\x5cudde6\x5cudde8\x5cudde9\x5cuddeb-\x5cuddee\x5cuddf0-\x5cuddf5\x5cuddf7\x5cuddfa-\x5cuddff]|\x5cud83c\x5cudde9\x5cud83c[\x5cuddea\x5cuddec\x5cuddef\x5cuddf0\x5cuddf2\x5cuddf4\x5cuddff]|\x5cud83c\x5cuddea\x5cud83c[\x5cudde6\x5cudde8\x5cuddea\x5cuddec\x5cudded\x5cuddf7-\x5cuddfa]|\x5cud83c\x5cuddeb\x5cud83c[\x5cuddee-\x5cuddf0\x5cuddf2\x5cuddf4\x5cuddf7]|\x5cud83c\x5cuddec\x5cud83c[\x5cudde6\x5cudde7\x5cudde9-\x5cuddee\x5cuddf1-\x5cuddf3\x5cuddf5-\x5cuddfa\x5cuddfc\x5cuddfe]|\x5cud83c\x5cudded\x5cud83c[\x5cuddf0\x5cuddf2\x5cuddf3\x5cuddf7\x5cuddf9\x5cuddfa]|\x5cud83c\x5cuddee\x5cud83c[\x5cudde8-\x5cuddea\x5cuddf1-\x5cuddf4\x5cuddf6-\x5cuddf9]|\x5cud83c\x5cuddef\x5cud83c[\x5cuddea\x5cuddf2\x5cuddf4\x5cuddf5]|\x5cud83c\x5cuddf0\x5cud83c[\x5cuddea\x5cuddec-\x5cuddee\x5cuddf2\x5cuddf3\x5cuddf5\x5cuddf7\x5cuddfc\x5cuddfe\x5cuddff]|\x5cud83c\x5cuddf1\x5cud83c[\x5cudde6-\x5cudde8\x5cuddee\x5cuddf0\x5cuddf7-\x5cuddfb\x5cuddfe]|\x5cud83c\x5cuddf2\x5cud83c[\x5cudde6\x5cudde8-\x5cudded\x5cuddf0-\x5cuddff]|\x5cud83c\x5cuddf3\x5cud83c[\x5cudde6\x5cudde8\x5cuddea-\x5cuddec\x5cuddee\x5cuddf1\x5cuddf4\x5cuddf5\x5cuddf7\x5cuddfa\x5cuddff]|\x5cud83c\x5cuddf4\x5cud83c\x5cuddf2|\x5cud83c\x5cuddf5\x5cud83c[\x5cudde6\x5cuddea-\x5cudded\x5cuddf0-\x5cuddf3\x5cuddf7-\x5cuddf9\x5cuddfc\x5cuddfe]|\x5cud83c\x5cuddf6\x5cud83c\x5cudde6|\x5cud83c\x5cuddf7\x5cud83c[\x5cuddea\x5cuddf4\x5cuddf8\x5cuddfa\x5cuddfc]|\x5cud83c\x5cuddf8\x5cud83c[\x5cudde6-\x5cuddea\x5cuddec-\x5cuddf4\x5cuddf7-\x5cuddf9\x5cuddfb\x5cuddfd-\x5cuddff]|\x5cud83c\x5cuddf9\x5cud83c[\x5cudde6\x5cudde8\x5cudde9\x5cuddeb-\x5cudded\x5cuddef-\x5cuddf4\x5cuddf7\x5cuddf9\x5cuddfb\x5cuddfc\x5cuddff]|\x5cud83c\x5cuddfa\x5cud83c[\x5cudde6\x5cuddec\x5cuddf2\x5cuddf3\x5cuddf8\x5cuddfe\x5cuddff]|\x5cud83c\x5cuddfb\x5cud83c[\x5cudde6\x5cudde8\x5cuddea\x5cuddec\x5cuddee\x5cuddf3\x5cuddfa]|\x5cud83c\x5cuddfc\x5cud83c[\x5cuddeb\x5cuddf8]|\x5cud83c\x5cuddfd\x5cud83c\x5cuddf0|\x5cud83c\x5cuddfe\x5cud83c[\x5cuddea\x5cuddf9]|\x5cud83c\x5cuddff\x5cud83c[\x5cudde6\x5cuddf2\x5cuddfc]|\x5cud83c[\x5cudccf\x5cudd8e\x5cudd91-\x5cudd9a\x5cudde6-\x5cuddff\x5cude01\x5cude32-\x5cude36\x5cude38-\x5cude3a\x5cude50\x5cude51\x5cudf00-\x5cudf20\x5cudf2d-\x5cudf35\x5cudf37-\x5cudf7c\x5cudf7e-\x5cudf84\x5cudf86-\x5cudf93\x5cudfa0-\x5cudfc1\x5cudfc5\x5cudfc6\x5cudfc8\x5cudfc9\x5cudfcf-\x5cudfd3\x5cudfe0-\x5cudff0\x5cudff4\x5cudff8-\x5cudfff]|\x5cud83d[\x5cudc00-\x5cudc3e\x5cudc40\x5cudc44\x5cudc45\x5cudc51-\x5cudc65\x5cudc6a-\x5cudc6d\x5cudc6f\x5cudc79-\x5cudc7b\x5cudc7d-\x5cudc80\x5cudc84\x5cudc88-\x5cudca9\x5cudcab-\x5cudcfc\x5cudcff-\x5cudd3d\x5cudd4b-\x5cudd4e\x5cudd50-\x5cudd67\x5cudda4\x5cuddfb-\x5cude44\x5cude48-\x5cude4a\x5cude80-\x5cudea2\x5cudea4-\x5cudeb3\x5cudeb7-\x5cudebf\x5cudec1-\x5cudec5\x5cuded0-\x5cuded2\x5cuded5\x5cudeeb\x5cudeec\x5cudef4-\x5cudefa\x5cudfe0-\x5cudfeb]|\x5cud83e[\x5cudd0d\x5cudd0e\x5cudd10-\x5cudd17\x5cudd1d\x5cudd20-\x5cudd25\x5cudd27-\x5cudd2f\x5cudd3a\x5cudd3c\x5cudd3f-\x5cudd45\x5cudd47-\x5cudd71\x5cudd73-\x5cudd76\x5cudd7a-\x5cudda2\x5cudda5-\x5cuddaa\x5cuddae-\x5cuddb4\x5cuddb7\x5cuddba\x5cuddbc-\x5cuddca\x5cuddd0\x5cuddde-\x5cuddff\x5cude70-\x5cude73\x5cude78-\x5cude7a\x5cude80-\x5cude82\x5cude90-\x5cude95]|[\x5cu23e9-\x5cu23ec\x5cu23f0\x5cu23f3\x5cu267e\x5cu26ce\x5cu2705\x5cu2728\x5cu274c\x5cu274e\x5cu2753-\x5cu2755\x5cu2795-\x5cu2797\x5cu27b0\x5cu27bf\x5cue50a])|\x5cufe0f/g,\x0a\x0a    // avoid runtime RegExp creation for not so smart,\x0a    // not JIT based, and old browsers / engines\x0a    UFE0Fg = /\x5cuFE0F/g,\x0a\x0a    // avoid using a string literal like \x27\x5cu200D\x27 here because minifiers expand it inline\x0a    U200D = String.fromCharCode(0x200D),\x0a\x0a    // used to find HTML special chars in attributes\x0a    rescaper = /[&\x3c\x3e\x27\x22]/g,\x0a\x0a    // nodes with type 1 which should **not** be parsed\x0a    shouldntBeParsed = /^(?:iframe|noframes|noscript|script|select|style|textarea)$/,\x0a\x0a    // just a private shortcut\x0a    fromCharCode = String.fromCharCode;\x0a\x0a  return twemoji;\x0a\x0a\x0a  /////////////////////////\x0a  //  private functions  //\x0a  //     declaration     //\x0a  /////////////////////////\x0a\x0a  /**\x0a   * Shortcut to create text nodes\x0a   * @param   string  text used to create DOM text node\x0a   * @return  Node  a DOM node with that text\x0a   */\x0a  function createText(text, clean) {\x0a    return document.createTextNode(clean ? text.replace(UFE0Fg, \x27\x27) : text);\x0a  }\x0a\x0a  /**\x0a   * Utility function to escape html attribute text\x0a   * @param   string  text use in HTML attribute\x0a   * @return  string  text encoded to use in HTML attribute\x0a   */\x0a  function escapeHTML(s) {\x0a    return s.replace(rescaper, replacer);\x0a  }\x0a\x0a  /**\x0a   * Default callback used to generate emoji src\x0a   *  based on Twitter CDN\x0a   * @param   string    the emoji codepoint string\x0a   * @param   string    the default size to use, i.e. \x2236x36\x22\x0a   * @return  string    the image source to use\x0a   */\x0a  function defaultImageSrcGenerator(icon, options) {\x0a    return \x27\x27.concat(options.base, options.size, \x27/\x27, icon, options.ext);\x0a  }\x0a\x0a  /**\x0a   * Given a generic DOM nodeType 1, walk through all children\x0a   * and store every nodeType 3 (#text) found in the tree.\x0a   * @param   Element a DOM Element with probably some text in it\x0a   * @param   Array the list of previously discovered text nodes\x0a   * @return  Array same list with new discovered nodes, if any\x0a   */\x0a  function grabAllTextNodes(node, allText) {\x0a    var\x0a      childNodes = node.childNodes,\x0a      length = childNodes.length,\x0a      subnode,\x0a      nodeType;\x0a    while (length--) {\x0a      subnode = childNodes[length];\x0a      nodeType = subnode.nodeType;\x0a      // parse emoji only in text nodes\x0a      if (nodeType === 3) {\x0a        // collect them to process emoji later\x0a        allText.push(subnode);\x0a      }\x0a      // ignore all nodes that are not type 1, that are svg, or that\x0a      // should not be parsed as script, style, and others\x0a      else if (nodeType === 1 && !(\x27ownerSVGElement\x27 in subnode) &&\x0a          !shouldntBeParsed.test(subnode.nodeName.toLowerCase())) {\x0a        grabAllTextNodes(subnode, allText);\x0a      }\x0a    }\x0a    return allText;\x0a  }\x0a\x0a  /**\x0a   * Used to both remove the possible variant\x0a   *  and to convert utf16 into code points.\x0a   *  If there is a zero-width-joiner (U+200D), leave the variants in.\x0a   * @param   string    the raw text of the emoji match\x0a   * @return  string    the code point\x0a   */\x0a  function grabTheRightIcon(rawText) {\x0a    // if variant is present as \x5cuFE0F\x0a    return toCodePoint(rawText.indexOf(U200D) \x3c 0 ?\x0a      rawText.replace(UFE0Fg, \x27\x27) :\x0a      rawText\x0a    );\x0a  }\x0a\x0a  /**\x0a   * DOM version of the same logic / parser:\x0a   *  emojify all found sub-text nodes placing images node instead.\x0a   * @param   Element   generic DOM node with some text in some child node\x0a   * @param   Object    options  containing info about how to parse\x0a    *\x0a    *            .callback   Function  the callback to invoke per each found emoji.\x0a    *            .base       string    the base url, by default twemoji.base\x0a    *            .ext        string    the image extension, by default twemoji.ext\x0a    *            .size       string    the assets size, by default twemoji.size\x0a    *\x0a   * @return  Element same generic node with emoji in place, if any.\x0a   */\x0a  function parseNode(node, options) {\x0a    var\x0a      allText = grabAllTextNodes(node, []),\x0a      length = allText.length,\x0a      attrib,\x0a      attrname,\x0a      modified,\x0a      fragment,\x0a      subnode,\x0a      text,\x0a      match,\x0a      i,\x0a      index,\x0a      img,\x0a      rawText,\x0a      iconId,\x0a      src;\x0a    while (length--) {\x0a      modified = false;\x0a      fragment = document.createDocumentFragment();\x0a      subnode = allText[length];\x0a      text = subnode.nodeValue;\x0a      i = 0;\x0a      while ((match = re.exec(text))) {\x0a        index = match.index;\x0a        if (index !== i) {\x0a          fragment.appendChild(\x0a            createText(text.slice(i, index), true)\x0a          );\x0a        }\x0a        rawText = match[0];\x0a        iconId = grabTheRightIcon(rawText);\x0a        i = index + rawText.length;\x0a        src = options.callback(iconId, options);\x0a        if (iconId && src) {\x0a          img = new Image();\x0a          img.onerror = options.onerror;\x0a          img.setAttribute(\x27draggable\x27, \x27false\x27);\x0a          attrib = options.attributes(rawText, iconId);\x0a          for (attrname in attrib) {\x0a            if (\x0a              attrib.hasOwnProperty(attrname) &&\x0a              // don\x27t allow any handlers to be set + don\x27t allow overrides\x0a              attrname.indexOf(\x27on\x27) !== 0 &&\x0a              !img.hasAttribute(attrname)\x0a            ) {\x0a              img.setAttribute(attrname, attrib[attrname]);\x0a            }\x0a          }\x0a          img.className = options.className;\x0a          img.alt = rawText;\x0a          img.src = src;\x0a          modified = true;\x0a          fragment.appendChild(img);\x0a        }\x0a        if (!img) fragment.appendChild(createText(rawText, false));\x0a        img = null;\x0a      }\x0a      // is there actually anything to replace in here ?\x0a      if (modified) {\x0a        // any text left to be added ?\x0a        if (i \x3c text.length) {\x0a          fragment.appendChild(\x0a            createText(text.slice(i), true)\x0a          );\x0a        }\x0a        // replace the text node only, leave intact\x0a        // anything else surrounding such text\x0a        subnode.parentNode.replaceChild(fragment, subnode);\x0a      }\x0a    }\x0a    return node;\x0a  }\x0a\x0a  /**\x0a   * String/HTML version of the same logic / parser:\x0a   *  emojify a generic text placing images tags instead of surrogates pair.\x0a   * @param   string    generic string with possibly some emoji in it\x0a   * @param   Object    options  containing info about how to parse\x0a   *\x0a   *            .callback   Function  the callback to invoke per each found emoji.\x0a   *            .base       string    the base url, by default twemoji.base\x0a   *            .ext        string    the image extension, by default twemoji.ext\x0a   *            .size       string    the assets size, by default twemoji.size\x0a   *\x0a   * @return  the string with \x3cimg tags\x3e replacing all found and parsed emoji\x0a   */\x0a  function parseString(str, options) {\x0a    return replace(str, function (rawText) {\x0a      var\x0a        ret = rawText,\x0a        iconId = grabTheRightIcon(rawText),\x0a        src = options.callback(iconId, options),\x0a        attrib,\x0a        attrname;\x0a      if (iconId && src) {\x0a        // recycle the match string replacing the emoji\x0a        // with its image counter part\x0a        ret = \x27\x3cimg \x27.concat(\x0a          \x27class=\x22\x27, options.className, \x27\x22 \x27,\x0a          \x27draggable=\x22false\x22 \x27,\x0a          // needs to preserve user original intent\x0a          // when variants should be copied and pasted too\x0a          \x27alt=\x22\x27,\x0a          rawText,\x0a          \x27\x22\x27,\x0a          \x27 src=\x22\x27,\x0a          src,\x0a          \x27\x22\x27\x0a        );\x0a        attrib = options.attributes(rawText, iconId);\x0a        for (attrname in attrib) {\x0a          if (\x0a            attrib.hasOwnProperty(attrname) &&\x0a            // don\x27t allow any handlers to be set + don\x27t allow overrides\x0a            attrname.indexOf(\x27on\x27) !== 0 &&\x0a            ret.indexOf(\x27 \x27 + attrname + \x27=\x27) === -1\x0a          ) {\x0a            ret = ret.concat(\x27 \x27, attrname, \x27=\x22\x27, escapeHTML(attrib[attrname]), \x27\x22\x27);\x0a          }\x0a        }\x0a        ret = ret.concat(\x27/\x3e\x27);\x0a      }\x0a      return ret;\x0a    });\x0a  }\x0a\x0a  /**\x0a   * Function used to actually replace HTML special chars\x0a   * @param   string  HTML special char\x0a   * @return  string  encoded HTML special char\x0a   */\x0a  function replacer(m) {\x0a    return escaper[m];\x0a  }\x0a\x0a  /**\x0a   * Default options.attribute callback\x0a   * @return  null\x0a   */\x0a  function returnNull() {\x0a    return null;\x0a  }\x0a\x0a  /**\x0a   * Given a generic value, creates its squared counterpart if it\x27s a number.\x0a   *  As example, number 36 will return \x2736x36\x27.\x0a   * @param   any     a generic value.\x0a   * @return  any     a string representing asset size, i.e. \x2236x36\x22\x0a   *                  only in case the value was a number.\x0a   *                  Returns initial value otherwise.\x0a   */\x0a  function toSizeSquaredAsset(value) {\x0a    return typeof value === \x27number\x27 ?\x0a      value + \x27x\x27 + value :\x0a      value;\x0a  }\x0a\x0a\x0a  /////////////////////////\x0a  //  exported functions //\x0a  //     declaration     //\x0a  /////////////////////////\x0a\x0a  function fromCodePoint(codepoint) {\x0a    var code = typeof codepoint === \x27string\x27 ?\x0a          parseInt(codepoint, 16) : codepoint;\x0a    if (code \x3c 0x10000) {\x0a      return fromCharCode(code);\x0a    }\x0a    code -= 0x10000;\x0a    return fromCharCode(\x0a      0xD800 + (code \x3e\x3e 10),\x0a      0xDC00 + (code & 0x3FF)\x0a    );\x0a  }\x0a\x0a  function parse(what, how) {\x0a    if (!how || typeof how === \x27function\x27) {\x0a      how = {callback: how};\x0a    }\x0a    // if first argument is string, inject html \x3cimg\x3e tags\x0a    // otherwise use the DOM tree and parse text nodes only\x0a    return (typeof what === \x27string\x27 ? parseString : parseNode)(what, {\x0a      callback:   how.callback || defaultImageSrcGenerator,\x0a      attributes: typeof how.attributes === \x27function\x27 ? how.attributes : returnNull,\x0a      base:       typeof how.base === \x27string\x27 ? how.base : twemoji.base,\x0a      ext:        how.ext || twemoji.ext,\x0a      size:       how.folder || toSizeSquaredAsset(how.size || twemoji.size),\x0a      className:  how.className || twemoji.className,\x0a      onerror:    how.onerror || twemoji.onerror\x0a    });\x0a  }\x0a\x0a  function replace(text, callback) {\x0a    return String(text).replace(re, callback);\x0a  }\x0a\x0a  function test(text) {\x0a    // IE6 needs a reset before too\x0a    re.lastIndex = 0;\x0a    var result = re.test(text);\x0a    re.lastIndex = 0;\x0a    return result;\x0a  }\x0a\x0a  function toCodePoint(unicodeSurrogates, sep) {\x0a    var\x0a      r = [],\x0a      c = 0,\x0a      p = 0,\x0a      i = 0;\x0a    while (i \x3c unicodeSurrogates.length) {\x0a      c = unicodeSurrogates.charCodeAt(i++);\x0a      if (p) {\x0a        r.push((0x10000 + ((p - 0xD800) \x3c\x3c 10) + (c - 0xDC00)).toString(16));\x0a        p = 0;\x0a      } else if (0xD800 \x3c= c && c \x3c= 0xDBFF) {\x0a        p = c;\x0a      } else {\x0a        r.push(c.toString(16));\x0a      }\x0a    }\x0a    return r.join(sep || \x27-\x27);\x0a  }\x0a\x0a}());'}