var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:05:01 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 21 Mar 2019 12:48:00 GMT\x0aETag: \x22377e-5849a25f20000-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-3261/3262\x0aContent-Length: 3262\x0aKeep-Alive: timeout=5, max=76\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0athis[\x22wp\x22] = this[\x22wp\x22] || {}; this[\x22wp\x22][\x22wordcount\x22] =\x0a/******/ (function(modules) { // webpackBootstrap\x0a/******/ \x09// The module cache\x0a/******/ \x09var installedModules = {};\x0a/******/\x0a/******/ \x09// The require function\x0a/******/ \x09function __webpack_require__(moduleId) {\x0a/******/\x0a/******/ \x09\x09// Check if module is in cache\x0a/******/ \x09\x09if(installedModules[moduleId]) {\x0a/******/ \x09\x09\x09return installedModules[moduleId].exports;\x0a/******/ \x09\x09}\x0a/******/ \x09\x09// Create a new module (and put it into the cache)\x0a/******/ \x09\x09var module = installedModules[moduleId] = {\x0a/******/ \x09\x09\x09i: moduleId,\x0a/******/ \x09\x09\x09l: false,\x0a/******/ \x09\x09\x09exports: {}\x0a/******/ \x09\x09};\x0a/******/\x0a/******/ \x09\x09// Execute the module function\x0a/******/ \x09\x09modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\x0a/******/\x0a/******/ \x09\x09// Flag the module as loaded\x0a/******/ \x09\x09module.l = true;\x0a/******/\x0a/******/ \x09\x09// Return the exports of the module\x0a/******/ \x09\x09return module.exports;\x0a/******/ \x09}\x0a/******/\x0a/******/\x0a/******/ \x09// expose the modules object (__webpack_modules__)\x0a/******/ \x09__webpack_require__.m = modules;\x0a/******/\x0a/******/ \x09// expose the module cache\x0a/******/ \x09__webpack_require__.c = installedModules;\x0a/******/\x0a/******/ \x09// define getter function for harmony exports\x0a/******/ \x09__webpack_require__.d = function(exports, name, getter) {\x0a/******/ \x09\x09if(!__webpack_require__.o(exports, name)) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, name, { enumerable: true, get: getter });\x0a/******/ \x09\x09}\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// define __esModule on exports\x0a/******/ \x09__webpack_require__.r = function(exports) {\x0a/******/ \x09\x09if(typeof Symbol !== \x27undefined\x27 && Symbol.toStringTag) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, Symbol.toStringTag, { value: \x27Module\x27 });\x0a/******/ \x09\x09}\x0a/******/ \x09\x09Object.defineProperty(exports, \x27__esModule\x27, { value: true });\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// create a fake namespace object\x0a/******/ \x09// mode & 1: value is a module id, require it\x0a/******/ \x09// mode & 2: merge all properties of value into the ns\x0a/******/ \x09// mode & 4: return value when already ns object\x0a/******/ \x09// mode & 8|1: behave like require\x0a/******/ \x09__webpack_require__.t = function(value, mode) {\x0a/******/ \x09\x09if(mode & 1) value = __webpack_require__(value);\x0a/******/ \x09\x09if(mode & 8) return value;\x0a/******/ \x09\x09if((mode & 4) && typeof value === \x27object\x27 && value && value.__esModule) return value;\x0a/******/ \x09\x09var ns = Object.create(null);\x0a/******/ \x09\x09__webpack_require__.r(ns);\x0a/******/ \x09\x09Object.defineProperty(ns, \x27default\x27, { enumerable: true, value: value });\x0a/******/ \x09\x09if(mode & 2 && typeof value != \x27string\x27) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\x0a/******/ \x09\x09return ns;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// getDefaultExport function for compatibility with non-harmony modules\x0a/******/ \x09__webpack_require__.n = function(module) {\x0a/******/ \x09\x09var getter = module && module.__esModule ?\x0a/******/ \x09\x09\x09function getDefault() { return module[\x27default\x27]; } :\x0a/******/ \x09\x09\x09function getModuleExports() { return module; };\x0a/******/ \x09\x09__webpack_require__.d(getter, \x27a\x27, getter);\x0a/******/ \x09\x09return getter;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// Object.prototype.hasOwnProperty.call\x0a/******/ \x09__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\x0a/******/\x0a/******/ \x09// __webpack_public_path__\x0a/******/ \x09__webpack_require__.p = \x22\x22;\x0a/******/\x0a/******/\x0a/******/ \x09// Load entry module and return exports\x0a/******/ \x09return __webpack_require__(__webpack_require__.s = 365);\x0a/******/ })\x0a/************************************************************************/\x0a/******/ ({\x0a\x0a/***/ 2:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22lodash\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 365:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a__webpack_require__.r(__webpack_exports__);\x0a\x0a// EXTERNAL MODULE: external \x22lodash\x22\x0avar external_lodash_ = __webpack_require__(2);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/defaultSettings.js\x0avar defaultSettings = {\x0a  HTMLRegExp: /\x3c\x5c/?[a-z][^\x3e]*?\x3e/gi,\x0a  HTMLcommentRegExp: /\x3c!--[\x5cs\x5cS]*?--\x3e/g,\x0a  spaceRegExp: /&nbsp;|&#160;/gi,\x0a  HTMLEntityRegExp: /&\x5cS+?;/g,\x0a  // \x5cu2014 = em-dash\x0a  connectorRegExp: /--|\x5cu2014/g,\x0a  // Characters to be removed from input text.\x0a  removeRegExp: new RegExp([\x27[\x27, // Basic Latin (extract)\x0a  \x22!-@[-`{-~\x22, // Latin-1 Supplement (extract)\x0a  \x22\x5cx80-\x5cxBF\x5cxD7\x5cxF7\x22,\x0a  /*\x0a   * The following range consists of:\x0a   * General Punctuation\x0a   * Superscripts and Subscripts\x0a   * Currency Symbols\x0a   * Combining Diacritical Marks for Symbols\x0a   * Letterlike Symbols\x0a   * Number Forms\x0a   * Arrows\x0a   * Mathematical Operators\x0a   * Miscellaneous Technical\x0a   * Control Pictures\x0a   * Optical Character Recognition\x0a   * Enclosed Alphanumerics\x0a   * Box Drawing\x0a   * Block Elements\x0a   * Geometric Shapes\x0a   * Miscellaneous Symbols\x0a   * Dingbats\x0a   * Miscellaneous Mathematical Symbols-A\x0a   * Supplemental Arrows-A\x0a   * Braille Patterns\x0a   * Supplemental Arrows-B\x0a   * Miscellaneous Mathematical Symbols-B\x0a   * Supplemental Mathematical Operators\x0a   * Miscellaneous Symbols and Arrows\x0a   */\x0a  \x22\x5cu2000-\x5cu2BFF\x22, // Supplemental Punctuation\x0a  \x22\x5cu2E00-\x5cu2E7F\x22, \x27]\x27].join(\x27\x27), \x27g\x27),\x0a  // Remove UTF-16 surrogate points, see https://en.wikipedia.org/wiki/UTF-16#U.2BD800_to_U.2BDFFF\x0a  astralRegExp: /[\x5cuD800-\x5cuDBFF][\x5cuDC00-\x5cuDFFF]/g,\x0a  wordsRegExp: /\x5cS\x5cs+/g,\x0a  characters_excluding_spacesRegExp: /\x5cS/g,\x0a\x0a  /*\x0a   * Match anything that is not a formatting character, excluding:\x0a   * \x5cf = form feed\x0a   * \x5cn = new line\x0a   * \x5cr = carriage return\x0a   * \x5ct = tab\x0a   * \x5cv = vertical tab\x0a   * \x5cu00AD = soft hyphen\x0a   * \x5cu2028 = line separator\x0a   * \x5cu2029 = paragraph separator\x0a   */\x0a  characters_including_spacesRegExp: /[^\x5cf\x5cn\x5cr\x5ct\x5cv\x5cu00AD\x5cu2028\x5cu2029]/g,\x0a  l10n: {\x0a    type: \x27words\x27\x0a  }\x0a};\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripTags.js\x0a/**\x0a * Replaces items matched in the regex with new line\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripTags = (function (settings, text) {\x0a  if (settings.HTMLRegExp) {\x0a    return text.replace(settings.HTMLRegExp, \x27\x5cn\x27);\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/transposeAstralsToCountableChar.js\x0a/**\x0a * Replaces items matched in the regex with character.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var transposeAstralsToCountableChar = (function (settings, text) {\x0a  if (settings.astralRegExp) {\x0a    return text.replace(settings.astralRegExp, \x27a\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripHTMLEntities.js\x0a/**\x0a * Removes items matched in the regex.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripHTMLEntities = (function (settings, text) {\x0a  if (settings.HTMLEntityRegExp) {\x0a    return text.replace(settings.HTMLEntityRegExp, \x27\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripConnectors.js\x0a/**\x0a * Replaces items matched in the regex with spaces.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripConnectors = (function (settings, text) {\x0a  if (settings.connectorRegExp) {\x0a    return text.replace(settings.connectorRegExp, \x27 \x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripRemovables.js\x0a/**\x0a * Removes items matched in the regex.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripRemovables = (function (settings, text) {\x0a  if (settings.removeRegExp) {\x0a    return text.replace(settings.removeRegExp, \x27\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripHTMLComments.js\x0a/**\x0a * Removes items matched in the regex.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripHTMLComments = (function (settings, text) {\x0a  if (settings.HTMLcommentRegExp) {\x0a    return text.replace(settings.HTMLcommentRegExp, \x27\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripShortcodes.js\x0a/**\x0a * Replaces items matched in the regex with a new line.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripShortcodes = (function (settings, text) {\x0a  if (settings.shortcodesRegExp) {\x0a    return text.replace(settings.shortcodesRegExp, \x27\x5cn\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/stripSpaces.js\x0a/**\x0a * Replaces items matched in the regex with spaces.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var stripSpaces = (function (settings, text) {\x0a  if (settings.spaceRegExp) {\x0a    return text.replace(settings.spaceRegExp, \x27 \x27);\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/transposeHTMLEntitiesToCountableChars.js\x0a/**\x0a * Replaces items matched in the regex with a single character.\x0a *\x0a * @param {Object} settings The main settings object containing regular expressions\x0a * @param {string} text     The string being counted.\x0a *\x0a * @return {string} The manipulated text.\x0a */\x0a/* harmony default export */ var transposeHTMLEntitiesToCountableChars = (function (settings, text) {\x0a  if (settings.HTMLEntityRegExp) {\x0a    return text.replace(settings.HTMLEntityRegExp, \x27a\x27);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/wordcount/build-module/index.js\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22count\x22, function() { return count; });\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a/**\x0a * Private function to manage the settings.\x0a *\x0a * @param {string} type         The type of count to be done.\x0a * @param {Object} userSettings Custom settings for the count.\x0a *\x0a * @return {void|Object|*} The combined settings object to be used.\x0a */\x0a\x0afunction loadSettings(type, userSettings) {\x0a  var settings = Object(external_lodash_[\x22extend\x22])(defaultSettings, userSettings);\x0a  settings.shortcodes = settings.l10n.shortcodes || {};\x0a\x0a  if (settings.shortcodes && settings.shortcodes.length) {\x0a    settings.shortcodesRegExp = new RegExp(\x27\x5c\x5c[\x5c\x5c/?(?:\x27 + settings.shortcodes.join(\x27|\x27) + \x27)[^\x5c\x5c]]*?\x5c\x5c]\x27, \x27g\x27);\x0a  }\x0a\x0a  settings.type = type || settings.l10n.type;\x0a\x0a  if (settings.type !== \x27characters_excluding_spaces\x27 && settings.type !== \x27characters_including_spaces\x27) {\x0a    settings.type = \x27words\x27;\x0a  }\x0a\x0a  return settings;\x0a}\x0a/**\x0a * Match the regex for the type \x27words\x27\x0a *\x0a * @param {string} text     The text being processed\x0a * @param {string} regex    The regular expression pattern being matched\x0a * @param {Object} settings Settings object containing regular expressions for each strip function\x0a *\x0a * @return {Array|{index: number, input: string}} The matched string.\x0a */\x0a\x0a\x0afunction matchWords(text, regex, settings) {\x0a  text = Object(external_lodash_[\x22flow\x22])(stripTags.bind(this, settings), stripHTMLComments.bind(this, settings), stripShortcodes.bind(this, settings), stripSpaces.bind(this, settings), stripHTMLEntities.bind(this, settings), stripConnectors.bind(this, settings), stripRemovables.bind(this, settings))(text);\x0a  text = text + \x27\x5cn\x27;\x0a  return text.match(regex);\x0a}\x0a/**\x0a * Match the regex for either \x27characters_excluding_spaces\x27 or \x27characters_including_spaces\x27\x0a *\x0a * @param {string} text     The text being processed\x0a * @param {string} regex    The regular expression pattern being matched\x0a * @param {Object} settings Settings object containing regular expressions for each strip function\x0a *\x0a * @return {Array|{index: number, input: string}} The matched string.\x0a */\x0a\x0a\x0afunction matchCharacters(text, regex, settings) {\x0a  text = Object(external_lodash_[\x22flow\x22])(stripTags.bind(this, settings), stripHTMLComments.bind(this, settings), stripShortcodes.bind(this, settings), stripSpaces.bind(this, settings), transposeAstralsToCountableChar.bind(this, settings), transposeHTMLEntitiesToCountableChars.bind(this, settings))(text);\x0a  text = text + \x27\x5cn\x27;\x0a  return text.match(regex);\x0a}\x0a/**\x0a * Count some words.\x0a *\x0a * @param {String} text         The text being processed\x0a * @param {String} type         The type of count. Accepts ;words\x27, \x27characters_excluding_spaces\x27, or \x27characters_including_spaces\x27.\x0a * @param {Object} userSettings Custom settings object.\x0a *\x0a * @example\x0a * ```js\x0a * import { count } from \x27@wordpress/wordcount\x27;\x0a * const numberOfWords = count( \x27Words to count\x27, \x27words\x27, {} )\x0a * ```\x0a *\x0a * @return {Number} The word or character count.\x0a */\x0a\x0a\x0afunction count(text, type, userSettings) {\x0a  if (\x27\x27 === text) {\x0a    return 0;\x0a  }\x0a\x0a  if (text) {\x0a    var settings = loadSettings(type, userSettings);\x0a    var matchRegExp = settings[type + \x27RegExp\x27];\x0a    var results = \x27words\x27 === settings.type ? matchWords(text, matchRegExp, settings) : matchCharacters(text, matchRegExp, settings);\x0a    return results ? results.length : 0;\x0a  }\x0a}\x0a\x0a\x0a/***/ })\x0a\x0a/******/ });'}