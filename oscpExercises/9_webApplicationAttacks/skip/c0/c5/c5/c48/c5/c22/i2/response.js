var res = {'data':'HTTP/1.1 200 OK\x0aDate: Sun, 20 Sep 2020 15:10:54 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 16 May 2019 18:12:57 GMT\x0aETag: \x2263aca-58905372b9c40-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aKeep-Alive: timeout=5, max=35\x0aConnection: Keep-Alive\x0aTransfer-Encoding: chunked\x0aContent-Type: application/javascript\x0a\x0athis[\x22wp\x22] = this[\x22wp\x22] || {}; this[\x22wp\x22][\x22blocks\x22] =\x0a/******/ (function(modules) { // webpackBootstrap\x0a/******/ \x09// The module cache\x0a/******/ \x09var installedModules = {};\x0a/******/\x0a/******/ \x09// The require function\x0a/******/ \x09function __webpack_require__(moduleId) {\x0a/******/\x0a/******/ \x09\x09// Check if module is in cache\x0a/******/ \x09\x09if(installedModules[moduleId]) {\x0a/******/ \x09\x09\x09return installedModules[moduleId].exports;\x0a/******/ \x09\x09}\x0a/******/ \x09\x09// Create a new module (and put it into the cache)\x0a/******/ \x09\x09var module = installedModules[moduleId] = {\x0a/******/ \x09\x09\x09i: moduleId,\x0a/******/ \x09\x09\x09l: false,\x0a/******/ \x09\x09\x09exports: {}\x0a/******/ \x09\x09};\x0a/******/\x0a/******/ \x09\x09// Execute the module function\x0a/******/ \x09\x09modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\x0a/******/\x0a/******/ \x09\x09// Flag the module as loaded\x0a/******/ \x09\x09module.l = true;\x0a/******/\x0a/******/ \x09\x09// Return the exports of the module\x0a/******/ \x09\x09return module.exports;\x0a/******/ \x09}\x0a/******/\x0a/******/\x0a/******/ \x09// expose the modules object (__webpack_modules__)\x0a/******/ \x09__webpack_require__.m = modules;\x0a/******/\x0a/******/ \x09// expose the module cache\x0a/******/ \x09__webpack_require__.c = installedModules;\x0a/******/\x0a/******/ \x09// define getter function for harmony exports\x0a/******/ \x09__webpack_require__.d = function(exports, name, getter) {\x0a/******/ \x09\x09if(!__webpack_require__.o(exports, name)) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, name, { enumerable: true, get: getter });\x0a/******/ \x09\x09}\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// define __esModule on exports\x0a/******/ \x09__webpack_require__.r = function(exports) {\x0a/******/ \x09\x09if(typeof Symbol !== \x27undefined\x27 && Symbol.toStringTag) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, Symbol.toStringTag, { value: \x27Module\x27 });\x0a/******/ \x09\x09}\x0a/******/ \x09\x09Object.defineProperty(exports, \x27__esModule\x27, { value: true });\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// create a fake namespace object\x0a/******/ \x09// mode & 1: value is a module id, require it\x0a/******/ \x09// mode & 2: merge all properties of value into the ns\x0a/******/ \x09// mode & 4: return value when already ns object\x0a/******/ \x09// mode & 8|1: behave like require\x0a/******/ \x09__webpack_require__.t = function(value, mode) {\x0a/******/ \x09\x09if(mode & 1) value = __webpack_require__(value);\x0a/******/ \x09\x09if(mode & 8) return value;\x0a/******/ \x09\x09if((mode & 4) && typeof value === \x27object\x27 && value && value.__esModule) return value;\x0a/******/ \x09\x09var ns = Object.create(null);\x0a/******/ \x09\x09__webpack_require__.r(ns);\x0a/******/ \x09\x09Object.defineProperty(ns, \x27default\x27, { enumerable: true, value: value });\x0a/******/ \x09\x09if(mode & 2 && typeof value != \x27string\x27) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\x0a/******/ \x09\x09return ns;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// getDefaultExport function for compatibility with non-harmony modules\x0a/******/ \x09__webpack_require__.n = function(module) {\x0a/******/ \x09\x09var getter = module && module.__esModule ?\x0a/******/ \x09\x09\x09function getDefault() { return module[\x27default\x27]; } :\x0a/******/ \x09\x09\x09function getModuleExports() { return module; };\x0a/******/ \x09\x09__webpack_require__.d(getter, \x27a\x27, getter);\x0a/******/ \x09\x09return getter;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// Object.prototype.hasOwnProperty.call\x0a/******/ \x09__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\x0a/******/\x0a/******/ \x09// __webpack_public_path__\x0a/******/ \x09__webpack_require__.p = \x22\x22;\x0a/******/\x0a/******/\x0a/******/ \x09// Load entry module and return exports\x0a/******/ \x09return __webpack_require__(__webpack_require__.s = 362);\x0a/******/ })\x0a/************************************************************************/\x0a/******/ ({\x0a\x0a/***/ 0:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22element\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 1:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22i18n\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 10:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _classCallCheck; });\x0afunction _classCallCheck(instance, Constructor) {\x0a  if (!(instance instanceof Constructor)) {\x0a    throw new TypeError(\x22Cannot call a class as a function\x22);\x0a  }\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 134:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22shortcode\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 15:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _defineProperty; });\x0afunction _defineProperty(obj, key, value) {\x0a  if (key in obj) {\x0a    Object.defineProperty(obj, key, {\x0a      value: value,\x0a      enumerable: true,\x0a      configurable: true,\x0a      writable: true\x0a    });\x0a  } else {\x0a    obj[key] = value;\x0a  }\x0a\x0a  return obj;\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 17:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\x0afunction _arrayWithoutHoles(arr) {\x0a  if (Array.isArray(arr)) {\x0a    for (var i = 0, arr2 = new Array(arr.length); i \x3c arr.length; i++) {\x0a      arr2[i] = arr[i];\x0a    }\x0a\x0a    return arr2;\x0a  }\x0a}\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\x0avar iterableToArray = __webpack_require__(34);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\x0afunction _nonIterableSpread() {\x0a  throw new TypeError(\x22Invalid attempt to spread non-iterable instance\x22);\x0a}\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _toConsumableArray; });\x0a\x0a\x0a\x0afunction _toConsumableArray(arr) {\x0a  return _arrayWithoutHoles(arr) || Object(iterableToArray[\x22a\x22 /* default */])(arr) || _nonIterableSpread();\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 19:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _extends; });\x0afunction _extends() {\x0a  _extends = Object.assign || function (target) {\x0a    for (var i = 1; i \x3c arguments.length; i++) {\x0a      var source = arguments[i];\x0a\x0a      for (var key in source) {\x0a        if (Object.prototype.hasOwnProperty.call(source, key)) {\x0a          target[key] = source[key];\x0a        }\x0a      }\x0a    }\x0a\x0a    return target;\x0a  };\x0a\x0a  return _extends.apply(this, arguments);\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 2:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22lodash\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 205:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22blockSerializationDefaultParser\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 206:\x0a/***/ (function(module, exports, __webpack_require__) {\x0a\x0avar __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown v 1.9.0 - 10-11-2018 */\x0d\x0a(function(){\x0d\x0a/**\x0a * Created by Tivie on 13-07-2015.\x0a */\x0a\x0afunction getDefaultOpts (simple) {\x0a  \x27use strict\x27;\x0a\x0a  var defaultOptions = {\x0a    omitExtraWLInCodeBlocks: {\x0a      defaultValue: false,\x0a      describe: \x27Omit the default extra whiteline added to code blocks\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    noHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off generated header id\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    prefixHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \x5c\x27section-\x5c\x27 prefix\x27,\x0a      type: \x27string\x27\x0a    },\x0a    rawPrefixHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the \x22 char is used in the prefix)\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    ghCompatibleHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    rawHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Remove only spaces, \x5c\x27 and \x22 from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    headerLevelStart: {\x0a      defaultValue: false,\x0a      describe: \x27The header blocks level start\x27,\x0a      type: \x27integer\x27\x0a    },\x0a    parseImgDimensions: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off image dimension parsing\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    simplifiedAutoLink: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off GFM autolink style\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    excludeTrailingPunctuationFromURLs: {\x0a      defaultValue: false,\x0a      describe: \x27Excludes trailing punctuation from links generated with autoLinking\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    literalMidWordUnderscores: {\x0a      defaultValue: false,\x0a      describe: \x27Parse midword underscores as literal underscores\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    literalMidWordAsterisks: {\x0a      defaultValue: false,\x0a      describe: \x27Parse midword asterisks as literal asterisks\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    strikethrough: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off strikethrough support\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    tables: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off tables support\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    tablesHeaderId: {\x0a      defaultValue: false,\x0a      describe: \x27Add an id to table headers\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    ghCodeBlocks: {\x0a      defaultValue: true,\x0a      describe: \x27Turn on/off GFM fenced code blocks support\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    tasklists: {\x0a      defaultValue: false,\x0a      describe: \x27Turn on/off GFM tasklist support\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    smoothLivePreview: {\x0a      defaultValue: false,\x0a      describe: \x27Prevents weird effects in live previews due to incomplete input\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    smartIndentationFix: {\x0a      defaultValue: false,\x0a      description: \x27Tries to smartly fix indentation in es6 strings\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    disableForced4SpacesIndentedSublists: {\x0a      defaultValue: false,\x0a      description: \x27Disables the requirement of indenting nested sublists by 4 spaces\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    simpleLineBreaks: {\x0a      defaultValue: false,\x0a      description: \x27Parses simple line breaks as \x3cbr\x3e (GFM Style)\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    requireSpaceBeforeHeadingText: {\x0a      defaultValue: false,\x0a      description: \x27Makes adding a space between `#` and the header text mandatory (GFM Style)\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    ghMentions: {\x0a      defaultValue: false,\x0a      description: \x27Enables github @mentions\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    ghMentionsLink: {\x0a      defaultValue: \x27https://github.com/{u}\x27,\x0a      description: \x27Changes the link generated by @mentions. Only applies if ghMentions option is enabled.\x27,\x0a      type: \x27string\x27\x0a    },\x0a    encodeEmails: {\x0a      defaultValue: true,\x0a      description: \x27Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    openLinksInNewWindow: {\x0a      defaultValue: false,\x0a      description: \x27Open all links in new windows\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    backslashEscapesHTMLTags: {\x0a      defaultValue: false,\x0a      description: \x27Support for HTML Tag escaping. ex: \x5c\x3cdiv\x3efoo\x5c\x3c/div\x3e\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    emoji: {\x0a      defaultValue: false,\x0a      description: \x27Enable emoji support. Ex: `this is a :smile: emoji`\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    underline: {\x0a      defaultValue: false,\x0a      description: \x27Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `\x3cem\x3e` and `\x3cstrong\x3e`\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    completeHTMLDocument: {\x0a      defaultValue: false,\x0a      description: \x27Outputs a complete html document, including `\x3chtml\x3e`, `\x3chead\x3e` and `\x3cbody\x3e` tags\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    metadata: {\x0a      defaultValue: false,\x0a      description: \x27Enable support for document metadata (defined at the top of the document between `\xc2\xab\xc2\xab\xc2\xab` and `\xc2\xbb\xc2\xbb\xc2\xbb` or between `---` and `---`).\x27,\x0a      type: \x27boolean\x27\x0a    },\x0a    splitAdjacentBlockquotes: {\x0a      defaultValue: false,\x0a      description: \x27Split adjacent blockquote blocks\x27,\x0a      type: \x27boolean\x27\x0a    }\x0a  };\x0a  if (simple === false) {\x0a    return JSON.parse(JSON.stringify(defaultOptions));\x0a  }\x0a  var ret = {};\x0a  for (var opt in defaultOptions) {\x0a    if (defaultOptions.hasOwnProperty(opt)) {\x0a      ret[opt] = defaultOptions[opt].defaultValue;\x0a    }\x0a  }\x0a  return ret;\x0a}\x0a\x0afunction allOptionsOn () {\x0a  \x27use strict\x27;\x0a  var options = getDefaultOpts(true),\x0a      ret = {};\x0a  for (var opt in options) {\x0a    if (options.hasOwnProperty(opt)) {\x0a      ret[opt] = true;\x0a    }\x0a  }\x0a  return ret;\x0a}\x0a\x0d\x0a/**\x0a * Created by Tivie on 06-01-2015.\x0a */\x0a\x0a// Private properties\x0avar showdown = {},\x0a    parsers = {},\x0a    extensions = {},\x0a    globalOptions = getDefaultOpts(true),\x0a    setFlavor = \x27vanilla\x27,\x0a    flavor = {\x0a      github: {\x0a        omitExtraWLInCodeBlocks:              true,\x0a        simplifiedAutoLink:                   true,\x0a        excludeTrailingPunctuationFromURLs:   true,\x0a        literalMidWordUnderscores:            true,\x0a        strikethrough:                        true,\x0a        tables:                               true,\x0a        tablesHeaderId:                       true,\x0a        ghCodeBlocks:                         true,\x0a        tasklists:                            true,\x0a        disableForced4SpacesIndentedSublists: true,\x0a        simpleLineBreaks:                     true,\x0a        requireSpaceBeforeHeadingText:        true,\x0a        ghCompatibleHeaderId:                 true,\x0a        ghMentions:                           true,\x0a        backslashEscapesHTMLTags:             true,\x0a        emoji:                                true,\x0a        splitAdjacentBlockquotes:             true\x0a      },\x0a      original: {\x0a        noHeaderId:                           true,\x0a        ghCodeBlocks:                         false\x0a      },\x0a      ghost: {\x0a        omitExtraWLInCodeBlocks:              true,\x0a        parseImgDimensions:                   true,\x0a        simplifiedAutoLink:                   true,\x0a        excludeTrailingPunctuationFromURLs:   true,\x0a        literalMidWordUnderscores:            true,\x0a        strikethrough:                        true,\x0a        tables:                               true,\x0a        tablesHeaderId:                       true,\x0a        ghCodeBlocks:                         true,\x0a        tasklists:                            true,\x0a        smoothLivePreview:                    true,\x0a        simpleLineBreaks:                     true,\x0a        requireSpaceBeforeHeadingText:        true,\x0a        ghMentions:                           false,\x0a        encodeEmails:                         true\x0a      },\x0a      vanilla: getDefaultOpts(true),\x0a      allOn: allOptionsOn()\x0a    };\x0a\x0a/**\x0a * helper namespace\x0a * @type {{}}\x0a */\x0ashowdown.helper = {};\x0a\x0a/**\x0a * TODO LEGACY SUPPORT CODE\x0a * @type {{}}\x0a */\x0ashowdown.extensions = {};\x0a\x0a/**\x0a * Set a global option\x0a * @static\x0a * @param {string} key\x0a * @param {*} value\x0a * @returns {showdown}\x0a */\x0ashowdown.setOption = function (key, value) {\x0a  \x27use strict\x27;\x0a  globalOptions[key] = value;\x0a  return this;\x0a};\x0a\x0a/**\x0a * Get a global option\x0a * @static\x0a * @param {string} key\x0a * @returns {*}\x0a */\x0ashowdown.getOption = function (key) {\x0a  \x27use strict\x27;\x0a  return globalOptions[key];\x0a};\x0a\x0a/**\x0a * Get the global options\x0a * @static\x0a * @returns {{}}\x0a */\x0ashowdown.getOptions = function () {\x0a  \x27use strict\x27;\x0a  return globalOptions;\x0a};\x0a\x0a/**\x0a * Reset global options to the default values\x0a * @static\x0a */\x0ashowdown.resetOptions = function () {\x0a  \x27use strict\x27;\x0a  globalOptions = getDefaultOpts(true);\x0a};\x0a\x0a/**\x0a * Set the flavor showdown should use as default\x0a * @param {string} name\x0a */\x0ashowdown.setFlavor = function (name) {\x0a  \x27use strict\x27;\x0a  if (!flavor.hasOwnProperty(name)) {\x0a    throw Error(name + \x27 flavor was not found\x27);\x0a  }\x0a  showdown.resetOptions();\x0a  var preset = flavor[name];\x0a  setFlavor = name;\x0a  for (var option in preset) {\x0a    if (preset.hasOwnProperty(option)) {\x0a      globalOptions[option] = preset[option];\x0a    }\x0a  }\x0a};\x0a\x0a/**\x0a * Get the currently set flavor\x0a * @returns {string}\x0a */\x0ashowdown.getFlavor = function () {\x0a  \x27use strict\x27;\x0a  return setFlavor;\x0a};\x0a\x0a/**\x0a * Get the options of a specified flavor. Returns undefined if the flavor was not found\x0a * @param {string} name Name of the flavor\x0a * @returns {{}|undefined}\x0a */\x0ashowdown.getFlavorOptions = function (name) {\x0a  \x27use strict\x27;\x0a  if (flavor.hasOwnProperty(name)) {\x0a    return flavor[name];\x0a  }\x0a};\x0a\x0a/**\x0a * Get the default options\x0a * @static\x0a * @param {boolean} [simple=true]\x0a * @returns {{}}\x0a */\x0ashowdown.getDefaultOptions = function (simple) {\x0a  \x27use strict\x27;\x0a  return getDefaultOpts(simple);\x0a};\x0a\x0a/**\x0a * Get or set a subParser\x0a *\x0a * subParser(name)       - Get a registered subParser\x0a * subParser(name, func) - Register a subParser\x0a * @static\x0a * @param {string} name\x0a * @param {function} [func]\x0a * @returns {*}\x0a */\x0ashowdown.subParser = function (name, func) {\x0a  \x27use strict\x27;\x0a  if (showdown.helper.isString(name)) {\x0a    if (typeof func !== \x27undefined\x27) {\x0a      parsers[name] = func;\x0a    } else {\x0a      if (parsers.hasOwnProperty(name)) {\x0a        return parsers[name];\x0a      } else {\x0a        throw Error(\x27SubParser named \x27 + name + \x27 not registered!\x27);\x0a      }\x0a    }\x0a  }\x0a};\x0a\x0a/**\x0a * Gets or registers an extension\x0a * @static\x0a * @param {string} name\x0a * @param {object|function=} ext\x0a * @returns {*}\x0a */\x0ashowdown.extension = function (name, ext) {\x0a  \x27use strict\x27;\x0a\x0a  if (!showdown.helper.isString(name)) {\x0a    throw Error(\x27Extension \x5c\x27name\x5c\x27 must be a string\x27);\x0a  }\x0a\x0a  name = showdown.helper.stdExtName(name);\x0a\x0a  // Getter\x0a  if (showdown.helper.isUndefined(ext)) {\x0a    if (!extensions.hasOwnProperty(name)) {\x0a      throw Error(\x27Extension named \x27 + name + \x27 is not registered!\x27);\x0a    }\x0a    return extensions[name];\x0a\x0a    // Setter\x0a  } else {\x0a    // Expand extension if it\x27s wrapped in a function\x0a    if (typeof ext === \x27function\x27) {\x0a      ext = ext();\x0a    }\x0a\x0a    // Ensure extension is an array\x0a    if (!showdown.helper.isArray(ext)) {\x0a      ext = [ext];\x0a    }\x0a\x0a    var validExtension = validate(ext, name);\x0a\x0a    if (validExtension.valid) {\x0a      extensions[name] = ext;\x0a    } else {\x0a      throw Error(validExtension.error);\x0a    }\x0a  }\x0a};\x0a\x0a/**\x0a * Gets all extensions registered\x0a * @returns {{}}\x0a */\x0ashowdown.getAllExtensions = function () {\x0a  \x27use strict\x27;\x0a  return extensions;\x0a};\x0a\x0a/**\x0a * Remove an extension\x0a * @param {string} name\x0a */\x0ashowdown.removeExtension = function (name) {\x0a  \x27use strict\x27;\x0a  delete extensions[name];\x0a};\x0a\x0a/**\x0a * Removes all extensions\x0a */\x0ashowdown.resetExtensions = function () {\x0a  \x27use strict\x27;\x0a  extensions = {};\x0a};\x0a\x0a/**\x0a * Validate extension\x0a * @param {array} extension\x0a * @param {string} name\x0a * @returns {{valid: boolean, error: string}}\x0a */\x0afunction validate (extension, name) {\x0a  \x27use strict\x27;\x0a\x0a  var errMsg = (name) ? \x27Error in \x27 + name + \x27 extension-\x3e\x27 : \x27Error in unnamed extension\x27,\x0a      ret = {\x0a        valid: true,\x0a        error: \x27\x27\x0a      };\x0a\x0a  if (!showdown.helper.isArray(extension)) {\x0a    extension = [extension];\x0a  }\x0a\x0a  for (var i = 0; i \x3c extension.length; ++i) {\x0a    var baseMsg = errMsg + \x27 sub-extension \x27 + i + \x27: \x27,\x0a        ext = extension[i];\x0a    if (typeof ext !== \x27object\x27) {\x0a      ret.valid = false;\x0a      ret.error = baseMsg + \x27must be an object, but \x27 + typeof ext + \x27 given\x27;\x0a      return ret;\x0a    }\x0a\x0a    if (!showdown.helper.isString(ext.type)) {\x0a      ret.valid = false;\x0a      ret.error = baseMsg + \x27property \x22type\x22 must be a string, but \x27 + typeof ext.type + \x27 given\x27;\x0a      return ret;\x0a    }\x0a\x0a    var type = ext.type = ext.type.toLowerCase();\x0a\x0a    // normalize extension type\x0a    if (type === \x27language\x27) {\x0a      type = ext.type = \x27lang\x27;\x0a    }\x0a\x0a    if (type === \x27html\x27) {\x0a      type = ext.type = \x27output\x27;\x0a    }\x0a\x0a    if (type !== \x27lang\x27 && type !== \x27output\x27 && type !== \x27listener\x27) {\x0a      ret.valid = false;\x0a      ret.error = baseMsg + \x27type \x27 + type + \x27 is not recognized. Valid values: \x22lang/language\x22, \x22output/html\x22 or \x22listener\x22\x27;\x0a      return ret;\x0a    }\x0a\x0a    if (type === \x27listener\x27) {\x0a      if (showdown.helper.isUndefined(ext.listeners)) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + \x27. Extensions of type \x22listener\x22 must have a property called \x22listeners\x22\x27;\x0a        return ret;\x0a      }\x0a    } else {\x0a      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + type + \x27 extensions must define either a \x22regex\x22 property or a \x22filter\x22 method\x27;\x0a        return ret;\x0a      }\x0a    }\x0a\x0a    if (ext.listeners) {\x0a      if (typeof ext.listeners !== \x27object\x27) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + \x27\x22listeners\x22 property must be an object but \x27 + typeof ext.listeners + \x27 given\x27;\x0a        return ret;\x0a      }\x0a      for (var ln in ext.listeners) {\x0a        if (ext.listeners.hasOwnProperty(ln)) {\x0a          if (typeof ext.listeners[ln] !== \x27function\x27) {\x0a            ret.valid = false;\x0a            ret.error = baseMsg + \x27\x22listeners\x22 property must be an hash of [event name]: [callback]. listeners.\x27 + ln +\x0a              \x27 must be a function but \x27 + typeof ext.listeners[ln] + \x27 given\x27;\x0a            return ret;\x0a          }\x0a        }\x0a      }\x0a    }\x0a\x0a    if (ext.filter) {\x0a      if (typeof ext.filter !== \x27function\x27) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + \x27\x22filter\x22 must be a function, but \x27 + typeof ext.filter + \x27 given\x27;\x0a        return ret;\x0a      }\x0a    } else if (ext.regex) {\x0a      if (showdown.helper.isString(ext.regex)) {\x0a        ext.regex = new RegExp(ext.regex, \x27g\x27);\x0a      }\x0a      if (!(ext.regex instanceof RegExp)) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + \x27\x22regex\x22 property must either be a string or a RegExp object, but \x27 + typeof ext.regex + \x27 given\x27;\x0a        return ret;\x0a      }\x0a      if (showdown.helper.isUndefined(ext.replace)) {\x0a        ret.valid = false;\x0a        ret.error = baseMsg + \x27\x22regex\x22 extensions must implement a replace string or function\x27;\x0a        return ret;\x0a      }\x0a    }\x0a  }\x0a  return ret;\x0a}\x0a\x0a/**\x0a * Validate extension\x0a * @param {object} ext\x0a * @returns {boolean}\x0a */\x0ashowdown.validateExtension = function (ext) {\x0a  \x27use strict\x27;\x0a\x0a  var validateExtension = validate(ext, null);\x0a  if (!validateExtension.valid) {\x0a    console.warn(validateExtension.error);\x0a    return false;\x0a  }\x0a  return true;\x0a};\x0a\x0d\x0a/**\x0a * showdownjs helper functions\x0a */\x0a\x0aif (!showdown.hasOwnProperty(\x27helper\x27)) {\x0a  showdown.helper = {};\x0a}\x0a\x0a/**\x0a * Check if var is string\x0a * @static\x0a * @param {string} a\x0a * @returns {boolean}\x0a */\x0ashowdown.helper.isString = function (a) {\x0a  \x27use strict\x27;\x0a  return (typeof a === \x27string\x27 || a instanceof String);\x0a};\x0a\x0a/**\x0a * Check if var is a function\x0a * @static\x0a * @param {*} a\x0a * @returns {boolean}\x0a */\x0ashowdown.helper.isFunction = function (a) {\x0a  \x27use strict\x27;\x0a  var getType = {};\x0a  return a && getType.toString.call(a) === \x27[object Function]\x27;\x0a};\x0a\x0a/**\x0a * isArray helper function\x0a * @static\x0a * @param {*} a\x0a * @returns {boolean}\x0a */\x0ashowdown.helper.isArray = function (a) {\x0a  \x27use strict\x27;\x0a  return Array.isArray(a);\x0a};\x0a\x0a/**\x0a * Check if value is undefined\x0a * @static\x0a * @param {*} value The value to check.\x0a * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\x0a */\x0ashowdown.helper.isUndefined = function (value) {\x0a  \x27use strict\x27;\x0a  return typeof value === \x27undefined\x27;\x0a};\x0a\x0a/**\x0a * ForEach helper function\x0a * Iterates over Arrays and Objects (own properties only)\x0a * @static\x0a * @param {*} obj\x0a * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\x0a */\x0ashowdown.helper.forEach = function (obj, callback) {\x0a  \x27use strict\x27;\x0a  // check if obj is defined\x0a  if (showdown.helper.isUndefined(obj)) {\x0a    throw new Error(\x27obj param is required\x27);\x0a  }\x0a\x0a  if (showdown.helper.isUndefined(callback)) {\x0a    throw new Error(\x27callback param is required\x27);\x0a  }\x0a\x0a  if (!showdown.helper.isFunction(callback)) {\x0a    throw new Error(\x27callback param must be a function/closure\x27);\x0a  }\x0a\x0a  if (typeof obj.forEach === \x27function\x27) {\x0a    obj.forEach(callback);\x0a  } else if (showdown.helper.isArray(obj)) {\x0a    for (var i = 0; i \x3c obj.length; i++) {\x0a      callback(obj[i], i, obj);\x0a    }\x0a  } else if (typeof (obj) === \x27object\x27) {\x0a    for (var prop in obj) {\x0a      if (obj.hasOwnProperty(prop)) {\x0a        callback(obj[prop], prop, obj);\x0a      }\x0a    }\x0a  } else {\x0a    throw new Error(\x27obj does not seem to be an array or an iterable object\x27);\x0a  }\x0a};\x0a\x0a/**\x0a * Standardidize extension name\x0a * @static\x0a * @param {string} s extension name\x0a * @returns {string}\x0a */\x0ashowdown.helper.stdExtName = function (s) {\x0a  \x27use strict\x27;\x0a  return s.replace(/[_?*+\x5c/\x5c\x5c.^-]/g, \x27\x27).replace(/\x5cs/g, \x27\x27).toLowerCase();\x0a};\x0a\x0afunction escapeCharactersCallback (wholeMatch, m1) {\x0a  \x27use strict\x27;\x0a  var charCodeToEscape = m1.charCodeAt(0);\x0a  return \x27\xc2\xa8E\x27 + charCodeToEscape + \x27E\x27;\x0a}\x0a\x0a/**\x0a * Callback used to escape characters when passing through String.replace\x0a * @static\x0a * @param {string} wholeMatch\x0a * @param {string} m1\x0a * @returns {string}\x0a */\x0ashowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\x0a\x0a/**\x0a * Escape characters in a string\x0a * @static\x0a * @param {string} text\x0a * @param {string} charsToEscape\x0a * @param {boolean} afterBackslash\x0a * @returns {XML|string|void|*}\x0a */\x0ashowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\x0a  \x27use strict\x27;\x0a  // First we have to escape the escape characters so that\x0a  // we can build a character class out of them\x0a  var regexString = \x27([\x27 + charsToEscape.replace(/([\x5c[\x5c]\x5c\x5c])/g, \x27\x5c\x5c$1\x27) + \x27])\x27;\x0a\x0a  if (afterBackslash) {\x0a    regexString = \x27\x5c\x5c\x5c\x5c\x27 + regexString;\x0a  }\x0a\x0a  var regex = new RegExp(regexString, \x27g\x27);\x0a  text = text.replace(regex, escapeCharactersCallback);\x0a\x0a  return text;\x0a};\x0a\x0a/**\x0a * Unescape HTML entities\x0a * @param txt\x0a * @returns {string}\x0a */\x0ashowdown.helper.unescapeHTMLEntities = function (txt) {\x0a  \x27use strict\x27;\x0a\x0a  return txt\x0a    .replace(/&quot;/g, \x27\x22\x27)\x0a    .replace(/&lt;/g, \x27\x3c\x27)\x0a    .replace(/&gt;/g, \x27\x3e\x27)\x0a    .replace(/&amp;/g, \x27&\x27);\x0a};\x0a\x0avar rgxFindMatchPos = function (str, left, right, flags) {\x0a  \x27use strict\x27;\x0a  var f = flags || \x27\x27,\x0a      g = f.indexOf(\x27g\x27) \x3e -1,\x0a      x = new RegExp(left + \x27|\x27 + right, \x27g\x27 + f.replace(/g/g, \x27\x27)),\x0a      l = new RegExp(left, f.replace(/g/g, \x27\x27)),\x0a      pos = [],\x0a      t, s, m, start, end;\x0a\x0a  do {\x0a    t = 0;\x0a    while ((m = x.exec(str))) {\x0a      if (l.test(m[0])) {\x0a        if (!(t++)) {\x0a          s = x.lastIndex;\x0a          start = s - m[0].length;\x0a        }\x0a      } else if (t) {\x0a        if (!--t) {\x0a          end = m.index + m[0].length;\x0a          var obj = {\x0a            left: {start: start, end: s},\x0a            match: {start: s, end: m.index},\x0a            right: {start: m.index, end: end},\x0a            wholeMatch: {start: start, end: end}\x0a          };\x0a          pos.push(obj);\x0a          if (!g) {\x0a            return pos;\x0a          }\x0a        }\x0a      }\x0a    }\x0a  } while (t && (x.lastIndex = s));\x0a\x0a  return pos;\x0a};\x0a\x0a/**\x0a * matchRecursiveRegExp\x0a *\x0a * (c) 2007 Steven Levithan \x3cstevenlevithan.com\x3e\x0a * MIT License\x0a *\x0a * Accepts a string to search, a left and right format delimiter\x0a * as regex patterns, and optional regex flags. Returns an array\x0a * of matches, allowing nested instances of left/right delimiters.\x0a * Use the \x22g\x22 flag to return all matches, otherwise only the\x0a * first is returned. Be careful to ensure that the left and\x0a * right format delimiters produce mutually exclusive matches.\x0a * Backreferences are not supported within the right delimiter\x0a * due to how it is internally combined with the left delimiter.\x0a * When matching strings whose format delimiters are unbalanced\x0a * to the left or right, the output is intentionally as a\x0a * conventional regex library with recursion support would\x0a * produce, e.g. \x22\x3c\x3cx\x3e\x22 and \x22\x3cx\x3e\x3e\x22 both produce [\x22x\x22] when using\x0a * \x22\x3c\x22 and \x22\x3e\x22 as the delimiters (both strings contain a single,\x0a * balanced instance of \x22\x3cx\x3e\x22).\x0a *\x0a * examples:\x0a * matchRecursiveRegExp(\x22test\x22, \x22\x5c\x5c(\x22, \x22\x5c\x5c)\x22)\x0a * returns: []\x0a * matchRecursiveRegExp(\x22\x3ct\x3c\x3ce\x3e\x3e\x3cs\x3e\x3et\x3c\x3e\x22, \x22\x3c\x22, \x22\x3e\x22, \x22g\x22)\x0a * returns: [\x22t\x3c\x3ce\x3e\x3e\x3cs\x3e\x22, \x22\x22]\x0a * matchRecursiveRegExp(\x22\x3cdiv id=\x5c\x22x\x5c\x22\x3etest\x3c/div\x3e\x22, \x22\x3cdiv\x5c\x5cb[^\x3e]*\x3e\x22, \x22\x3c/div\x3e\x22, \x22gi\x22)\x0a * returns: [\x22test\x22]\x0a */\x0ashowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\x0a  \x27use strict\x27;\x0a\x0a  var matchPos = rgxFindMatchPos (str, left, right, flags),\x0a      results = [];\x0a\x0a  for (var i = 0; i \x3c matchPos.length; ++i) {\x0a    results.push([\x0a      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\x0a      str.slice(matchPos[i].match.start, matchPos[i].match.end),\x0a      str.slice(matchPos[i].left.start, matchPos[i].left.end),\x0a      str.slice(matchPos[i].right.start, matchPos[i].right.end)\x0a    ]);\x0a  }\x0a  return results;\x0a};\x0a\x0a/**\x0a *\x0a * @param {string} str\x0a * @param {string|function} replacement\x0a * @param {string} left\x0a * @param {string} right\x0a * @param {string} flags\x0a * @returns {string}\x0a */\x0ashowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\x0a  \x27use strict\x27;\x0a\x0a  if (!showdown.helper.isFunction(replacement)) {\x0a    var repStr = replacement;\x0a    replacement = function () {\x0a      return repStr;\x0a    };\x0a  }\x0a\x0a  var matchPos = rgxFindMatchPos(str, left, right, flags),\x0a      finalStr = str,\x0a      lng = matchPos.length;\x0a\x0a  if (lng \x3e 0) {\x0a    var bits = [];\x0a    if (matchPos[0].wholeMatch.start !== 0) {\x0a      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\x0a    }\x0a    for (var i = 0; i \x3c lng; ++i) {\x0a      bits.push(\x0a        replacement(\x0a          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\x0a          str.slice(matchPos[i].match.start, matchPos[i].match.end),\x0a          str.slice(matchPos[i].left.start, matchPos[i].left.end),\x0a          str.slice(matchPos[i].right.start, matchPos[i].right.end)\x0a        )\x0a      );\x0a      if (i \x3c lng - 1) {\x0a        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\x0a      }\x0a    }\x0a    if (matchPos[lng - 1].wholeMatch.end \x3c str.length) {\x0a      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\x0a    }\x0a    finalStr = bits.join(\x27\x27);\x0a  }\x0a  return finalStr;\x0a};\x0a\x0a/**\x0a * Returns the index within the passed String object of the first occurrence of the specified regex,\x0a * starting the search at fromIndex. Returns -1 if the value is not found.\x0a *\x0a * @param {string} str string to search\x0a * @param {RegExp} regex Regular expression to search\x0a * @param {int} [fromIndex = 0] Index to start the search\x0a * @returns {Number}\x0a * @throws InvalidArgumentError\x0a */\x0ashowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\x0a  \x27use strict\x27;\x0a  if (!showdown.helper.isString(str)) {\x0a    throw \x27InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string\x27;\x0a  }\x0a  if (regex instanceof RegExp === false) {\x0a    throw \x27InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp\x27;\x0a  }\x0a  var indexOf = str.substring(fromIndex || 0).search(regex);\x0a  return (indexOf \x3e= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\x0a};\x0a\x0a/**\x0a * Splits the passed string object at the defined index, and returns an array composed of the two substrings\x0a * @param {string} str string to split\x0a * @param {int} index index to split string at\x0a * @returns {[string,string]}\x0a * @throws InvalidArgumentError\x0a */\x0ashowdown.helper.splitAtIndex = function (str, index) {\x0a  \x27use strict\x27;\x0a  if (!showdown.helper.isString(str)) {\x0a    throw \x27InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string\x27;\x0a  }\x0a  return [str.substring(0, index), str.substring(index)];\x0a};\x0a\x0a/**\x0a * Obfuscate an e-mail address through the use of Character Entities,\x0a * transforming ASCII characters into their equivalent decimal or hex entities.\x0a *\x0a * Since it has a random component, subsequent calls to this function produce different results\x0a *\x0a * @param {string} mail\x0a * @returns {string}\x0a */\x0ashowdown.helper.encodeEmailAddress = function (mail) {\x0a  \x27use strict\x27;\x0a  var encode = [\x0a    function (ch) {\x0a      return \x27&#\x27 + ch.charCodeAt(0) + \x27;\x27;\x0a    },\x0a    function (ch) {\x0a      return \x27&#x\x27 + ch.charCodeAt(0).toString(16) + \x27;\x27;\x0a    },\x0a    function (ch) {\x0a      return ch;\x0a    }\x0a  ];\x0a\x0a  mail = mail.replace(/./g, function (ch) {\x0a    if (ch === \x27@\x27) {\x0a      // this *must* be encoded. I insist.\x0a      ch = encode[Math.floor(Math.random() * 2)](ch);\x0a    } else {\x0a      var r = Math.random();\x0a      // roughly 10% raw, 45% hex, 45% dec\x0a      ch = (\x0a        r \x3e 0.9 ? encode[2](ch) : r \x3e 0.45 ? encode[1](ch) : encode[0](ch)\x0a      );\x0a    }\x0a    return ch;\x0a  });\x0a\x0a  return mail;\x0a};\x0a\x0a/**\x0a *\x0a * @param str\x0a * @param targetLength\x0a * @param padString\x0a * @returns {string}\x0a */\x0ashowdown.helper.padEnd = function padEnd (str, targetLength, padString) {\x0a  \x27use strict\x27;\x0a  /*jshint bitwise: false*/\x0a  // eslint-disable-next-line space-infix-ops\x0a  targetLength = targetLength\x3e\x3e0; //floor if number or convert non-number to 0;\x0a  /*jshint bitwise: true*/\x0a  padString = String(padString || \x27 \x27);\x0a  if (str.length \x3e targetLength) {\x0a    return String(str);\x0a  } else {\x0a    targetLength = targetLength - str.length;\x0a    if (targetLength \x3e padString.length) {\x0a      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\x0a    }\x0a    return String(str) + padString.slice(0,targetLength);\x0a  }\x0a};\x0a\x0a/**\x0a * POLYFILLS\x0a */\x0a// use this instead of builtin is undefined for IE8 compatibility\x0aif (typeof(console) === \x27undefined\x27) {\x0a  console = {\x0a    warn: function (msg) {\x0a      \x27use strict\x27;\x0a      alert(msg);\x0a    },\x0a    log: function (msg) {\x0a      \x27use strict\x27;\x0a      alert(msg);\x0a    },\x0a    error: function (msg) {\x0a      \x27use strict\x27;\x0a      throw msg;\x0a    }\x0a  };\x0a}\x0a\x0a/**\x0a * Common regexes.\x0a * We declare some common regexes to improve performance\x0a */\x0ashowdown.helper.regexes = {\x0a  asteriskDashAndColon: /([*_:~])/g\x0a};\x0a\x0a/**\x0a * EMOJIS LIST\x0a */\x0ashowdown.helper.emojis = {\x0a  \x27+1\x27:\x27\x5cud83d\x5cudc4d\x27,\x0a  \x27-1\x27:\x27\x5cud83d\x5cudc4e\x27,\x0a  \x27100\x27:\x27\x5cud83d\x5cudcaf\x27,\x0a  \x271234\x27:\x27\x5cud83d\x5cudd22\x27,\x0a  \x271st_place_medal\x27:\x27\x5cud83e\x5cudd47\x27,\x0a  \x272nd_place_medal\x27:\x27\x5cud83e\x5cudd48\x27,\x0a  \x273rd_place_medal\x27:\x27\x5cud83e\x5cudd49\x27,\x0a  \x278ball\x27:\x27\x5cud83c\x5cudfb1\x27,\x0a  \x27a\x27:\x27\x5cud83c\x5cudd70\x5cufe0f\x27,\x0a  \x27ab\x27:\x27\x5cud83c\x5cudd8e\x27,\x0a  \x27abc\x27:\x27\x5cud83d\x5cudd24\x27,\x0a  \x27abcd\x27:\x27\x5cud83d\x5cudd21\x27,\x0a  \x27accept\x27:\x27\x5cud83c\x5cude51\x27,\x0a  \x27aerial_tramway\x27:\x27\x5cud83d\x5cudea1\x27,\x0a  \x27airplane\x27:\x27\x5cu2708\x5cufe0f\x27,\x0a  \x27alarm_clock\x27:\x27\x5cu23f0\x27,\x0a  \x27alembic\x27:\x27\x5cu2697\x5cufe0f\x27,\x0a  \x27alien\x27:\x27\x5cud83d\x5cudc7d\x27,\x0a  \x27ambulance\x27:\x27\x5cud83d\x5cude91\x27,\x0a  \x27amphora\x27:\x27\x5cud83c\x5cudffa\x27,\x0a  \x27anchor\x27:\x27\x5cu2693\x5cufe0f\x27,\x0a  \x27angel\x27:\x27\x5cud83d\x5cudc7c\x27,\x0a  \x27anger\x27:\x27\x5cud83d\x5cudca2\x27,\x0a  \x27angry\x27:\x27\x5cud83d\x5cude20\x27,\x0a  \x27anguished\x27:\x27\x5cud83d\x5cude27\x27,\x0a  \x27ant\x27:\x27\x5cud83d\x5cudc1c\x27,\x0a  \x27apple\x27:\x27\x5cud83c\x5cudf4e\x27,\x0a  \x27aquarius\x27:\x27\x5cu2652\x5cufe0f\x27,\x0a  \x27aries\x27:\x27\x5cu2648\x5cufe0f\x27,\x0a  \x27arrow_backward\x27:\x27\x5cu25c0\x5cufe0f\x27,\x0a  \x27arrow_double_down\x27:\x27\x5cu23ec\x27,\x0a  \x27arrow_double_up\x27:\x27\x5cu23eb\x27,\x0a  \x27arrow_down\x27:\x27\x5cu2b07\x5cufe0f\x27,\x0a  \x27arrow_down_small\x27:\x27\x5cud83d\x5cudd3d\x27,\x0a  \x27arrow_forward\x27:\x27\x5cu25b6\x5cufe0f\x27,\x0a  \x27arrow_heading_down\x27:\x27\x5cu2935\x5cufe0f\x27,\x0a  \x27arrow_heading_up\x27:\x27\x5cu2934\x5cufe0f\x27,\x0a  \x27arrow_left\x27:\x27\x5cu2b05\x5cufe0f\x27,\x0a  \x27arrow_lower_left\x27:\x27\x5cu2199\x5cufe0f\x27,\x0a  \x27arrow_lower_right\x27:\x27\x5cu2198\x5cufe0f\x27,\x0a  \x27arrow_right\x27:\x27\x5cu27a1\x5cufe0f\x27,\x0a  \x27arrow_right_hook\x27:\x27\x5cu21aa\x5cufe0f\x27,\x0a  \x27arrow_up\x27:\x27\x5cu2b06\x5cufe0f\x27,\x0a  \x27arrow_up_down\x27:\x27\x5cu2195\x5cufe0f\x27,\x0a  \x27arrow_up_small\x27:\x27\x5cud83d\x5cudd3c\x27,\x0a  \x27arrow_upper_left\x27:\x27\x5cu2196\x5cufe0f\x27,\x0a  \x27arrow_upper_right\x27:\x27\x5cu2197\x5cufe0f\x27,\x0a  \x27arrows_clockwise\x27:\x27\x5cud83d\x5cudd03\x27,\x0a  \x27arrows_counterclockwise\x27:\x27\x5cud83d\x5cudd04\x27,\x0a  \x27art\x27:\x27\x5cud83c\x5cudfa8\x27,\x0a  \x27articulated_lorry\x27:\x27\x5cud83d\x5cude9b\x27,\x0a  \x27artificial_satellite\x27:\x27\x5cud83d\x5cudef0\x27,\x0a  \x27astonished\x27:\x27\x5cud83d\x5cude32\x27,\x0a  \x27athletic_shoe\x27:\x27\x5cud83d\x5cudc5f\x27,\x0a  \x27atm\x27:\x27\x5cud83c\x5cudfe7\x27,\x0a  \x27atom_symbol\x27:\x27\x5cu269b\x5cufe0f\x27,\x0a  \x27avocado\x27:\x27\x5cud83e\x5cudd51\x27,\x0a  \x27b\x27:\x27\x5cud83c\x5cudd71\x5cufe0f\x27,\x0a  \x27baby\x27:\x27\x5cud83d\x5cudc76\x27,\x0a  \x27baby_bottle\x27:\x27\x5cud83c\x5cudf7c\x27,\x0a  \x27baby_chick\x27:\x27\x5cud83d\x5cudc24\x27,\x0a  \x27baby_symbol\x27:\x27\x5cud83d\x5cudebc\x27,\x0a  \x27back\x27:\x27\x5cud83d\x5cudd19\x27,\x0a  \x27bacon\x27:\x27\x5cud83e\x5cudd53\x27,\x0a  \x27badminton\x27:\x27\x5cud83c\x5cudff8\x27,\x0a  \x27baggage_claim\x27:\x27\x5cud83d\x5cudec4\x27,\x0a  \x27baguette_bread\x27:\x27\x5cud83e\x5cudd56\x27,\x0a  \x27balance_scale\x27:\x27\x5cu2696\x5cufe0f\x27,\x0a  \x27balloon\x27:\x27\x5cud83c\x5cudf88\x27,\x0a  \x27ballot_box\x27:\x27\x5cud83d\x5cuddf3\x27,\x0a  \x27ballot_box_with_check\x27:\x27\x5cu2611\x5cufe0f\x27,\x0a  \x27bamboo\x27:\x27\x5cud83c\x5cudf8d\x27,\x0a  \x27banana\x27:\x27\x5cud83c\x5cudf4c\x27,\x0a  \x27bangbang\x27:\x27\x5cu203c\x5cufe0f\x27,\x0a  \x27bank\x27:\x27\x5cud83c\x5cudfe6\x27,\x0a  \x27bar_chart\x27:\x27\x5cud83d\x5cudcca\x27,\x0a  \x27barber\x27:\x27\x5cud83d\x5cudc88\x27,\x0a  \x27baseball\x27:\x27\x5cu26be\x5cufe0f\x27,\x0a  \x27basketball\x27:\x27\x5cud83c\x5cudfc0\x27,\x0a  \x27basketball_man\x27:\x27\x5cu26f9\x5cufe0f\x27,\x0a  \x27basketball_woman\x27:\x27\x5cu26f9\x5cufe0f&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27bat\x27:\x27\x5cud83e\x5cudd87\x27,\x0a  \x27bath\x27:\x27\x5cud83d\x5cudec0\x27,\x0a  \x27bathtub\x27:\x27\x5cud83d\x5cudec1\x27,\x0a  \x27battery\x27:\x27\x5cud83d\x5cudd0b\x27,\x0a  \x27beach_umbrella\x27:\x27\x5cud83c\x5cudfd6\x27,\x0a  \x27bear\x27:\x27\x5cud83d\x5cudc3b\x27,\x0a  \x27bed\x27:\x27\x5cud83d\x5cudecf\x27,\x0a  \x27bee\x27:\x27\x5cud83d\x5cudc1d\x27,\x0a  \x27beer\x27:\x27\x5cud83c\x5cudf7a\x27,\x0a  \x27beers\x27:\x27\x5cud83c\x5cudf7b\x27,\x0a  \x27beetle\x27:\x27\x5cud83d\x5cudc1e\x27,\x0a  \x27beginner\x27:\x27\x5cud83d\x5cudd30\x27,\x0a  \x27bell\x27:\x27\x5cud83d\x5cudd14\x27,\x0a  \x27bellhop_bell\x27:\x27\x5cud83d\x5cudece\x27,\x0a  \x27bento\x27:\x27\x5cud83c\x5cudf71\x27,\x0a  \x27biking_man\x27:\x27\x5cud83d\x5cudeb4\x27,\x0a  \x27bike\x27:\x27\x5cud83d\x5cudeb2\x27,\x0a  \x27biking_woman\x27:\x27\x5cud83d\x5cudeb4&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27bikini\x27:\x27\x5cud83d\x5cudc59\x27,\x0a  \x27biohazard\x27:\x27\x5cu2623\x5cufe0f\x27,\x0a  \x27bird\x27:\x27\x5cud83d\x5cudc26\x27,\x0a  \x27birthday\x27:\x27\x5cud83c\x5cudf82\x27,\x0a  \x27black_circle\x27:\x27\x5cu26ab\x5cufe0f\x27,\x0a  \x27black_flag\x27:\x27\x5cud83c\x5cudff4\x27,\x0a  \x27black_heart\x27:\x27\x5cud83d\x5cudda4\x27,\x0a  \x27black_joker\x27:\x27\x5cud83c\x5cudccf\x27,\x0a  \x27black_large_square\x27:\x27\x5cu2b1b\x5cufe0f\x27,\x0a  \x27black_medium_small_square\x27:\x27\x5cu25fe\x5cufe0f\x27,\x0a  \x27black_medium_square\x27:\x27\x5cu25fc\x5cufe0f\x27,\x0a  \x27black_nib\x27:\x27\x5cu2712\x5cufe0f\x27,\x0a  \x27black_small_square\x27:\x27\x5cu25aa\x5cufe0f\x27,\x0a  \x27black_square_button\x27:\x27\x5cud83d\x5cudd32\x27,\x0a  \x27blonde_man\x27:\x27\x5cud83d\x5cudc71\x27,\x0a  \x27blonde_woman\x27:\x27\x5cud83d\x5cudc71&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27blossom\x27:\x27\x5cud83c\x5cudf3c\x27,\x0a  \x27blowfish\x27:\x27\x5cud83d\x5cudc21\x27,\x0a  \x27blue_book\x27:\x27\x5cud83d\x5cudcd8\x27,\x0a  \x27blue_car\x27:\x27\x5cud83d\x5cude99\x27,\x0a  \x27blue_heart\x27:\x27\x5cud83d\x5cudc99\x27,\x0a  \x27blush\x27:\x27\x5cud83d\x5cude0a\x27,\x0a  \x27boar\x27:\x27\x5cud83d\x5cudc17\x27,\x0a  \x27boat\x27:\x27\x5cu26f5\x5cufe0f\x27,\x0a  \x27bomb\x27:\x27\x5cud83d\x5cudca3\x27,\x0a  \x27book\x27:\x27\x5cud83d\x5cudcd6\x27,\x0a  \x27bookmark\x27:\x27\x5cud83d\x5cudd16\x27,\x0a  \x27bookmark_tabs\x27:\x27\x5cud83d\x5cudcd1\x27,\x0a  \x27books\x27:\x27\x5cud83d\x5cudcda\x27,\x0a  \x27boom\x27:\x27\x5cud83d\x5cudca5\x27,\x0a  \x27boot\x27:\x27\x5cud83d\x5cudc62\x27,\x0a  \x27bouquet\x27:\x27\x5cud83d\x5cudc90\x27,\x0a  \x27bowing_man\x27:\x27\x5cud83d\x5cude47\x27,\x0a  \x27bow_and_arrow\x27:\x27\x5cud83c\x5cudff9\x27,\x0a  \x27bowing_woman\x27:\x27\x5cud83d\x5cude47&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27bowling\x27:\x27\x5cud83c\x5cudfb3\x27,\x0a  \x27boxing_glove\x27:\x27\x5cud83e\x5cudd4a\x27,\x0a  \x27boy\x27:\x27\x5cud83d\x5cudc66\x27,\x0a  \x27bread\x27:\x27\x5cud83c\x5cudf5e\x27,\x0a  \x27bride_with_veil\x27:\x27\x5cud83d\x5cudc70\x27,\x0a  \x27bridge_at_night\x27:\x27\x5cud83c\x5cudf09\x27,\x0a  \x27briefcase\x27:\x27\x5cud83d\x5cudcbc\x27,\x0a  \x27broken_heart\x27:\x27\x5cud83d\x5cudc94\x27,\x0a  \x27bug\x27:\x27\x5cud83d\x5cudc1b\x27,\x0a  \x27building_construction\x27:\x27\x5cud83c\x5cudfd7\x27,\x0a  \x27bulb\x27:\x27\x5cud83d\x5cudca1\x27,\x0a  \x27bullettrain_front\x27:\x27\x5cud83d\x5cude85\x27,\x0a  \x27bullettrain_side\x27:\x27\x5cud83d\x5cude84\x27,\x0a  \x27burrito\x27:\x27\x5cud83c\x5cudf2f\x27,\x0a  \x27bus\x27:\x27\x5cud83d\x5cude8c\x27,\x0a  \x27business_suit_levitating\x27:\x27\x5cud83d\x5cudd74\x27,\x0a  \x27busstop\x27:\x27\x5cud83d\x5cude8f\x27,\x0a  \x27bust_in_silhouette\x27:\x27\x5cud83d\x5cudc64\x27,\x0a  \x27busts_in_silhouette\x27:\x27\x5cud83d\x5cudc65\x27,\x0a  \x27butterfly\x27:\x27\x5cud83e\x5cudd8b\x27,\x0a  \x27cactus\x27:\x27\x5cud83c\x5cudf35\x27,\x0a  \x27cake\x27:\x27\x5cud83c\x5cudf70\x27,\x0a  \x27calendar\x27:\x27\x5cud83d\x5cudcc6\x27,\x0a  \x27call_me_hand\x27:\x27\x5cud83e\x5cudd19\x27,\x0a  \x27calling\x27:\x27\x5cud83d\x5cudcf2\x27,\x0a  \x27camel\x27:\x27\x5cud83d\x5cudc2b\x27,\x0a  \x27camera\x27:\x27\x5cud83d\x5cudcf7\x27,\x0a  \x27camera_flash\x27:\x27\x5cud83d\x5cudcf8\x27,\x0a  \x27camping\x27:\x27\x5cud83c\x5cudfd5\x27,\x0a  \x27cancer\x27:\x27\x5cu264b\x5cufe0f\x27,\x0a  \x27candle\x27:\x27\x5cud83d\x5cudd6f\x27,\x0a  \x27candy\x27:\x27\x5cud83c\x5cudf6c\x27,\x0a  \x27canoe\x27:\x27\x5cud83d\x5cudef6\x27,\x0a  \x27capital_abcd\x27:\x27\x5cud83d\x5cudd20\x27,\x0a  \x27capricorn\x27:\x27\x5cu2651\x5cufe0f\x27,\x0a  \x27car\x27:\x27\x5cud83d\x5cude97\x27,\x0a  \x27card_file_box\x27:\x27\x5cud83d\x5cuddc3\x27,\x0a  \x27card_index\x27:\x27\x5cud83d\x5cudcc7\x27,\x0a  \x27card_index_dividers\x27:\x27\x5cud83d\x5cuddc2\x27,\x0a  \x27carousel_horse\x27:\x27\x5cud83c\x5cudfa0\x27,\x0a  \x27carrot\x27:\x27\x5cud83e\x5cudd55\x27,\x0a  \x27cat\x27:\x27\x5cud83d\x5cudc31\x27,\x0a  \x27cat2\x27:\x27\x5cud83d\x5cudc08\x27,\x0a  \x27cd\x27:\x27\x5cud83d\x5cudcbf\x27,\x0a  \x27chains\x27:\x27\x5cu26d3\x27,\x0a  \x27champagne\x27:\x27\x5cud83c\x5cudf7e\x27,\x0a  \x27chart\x27:\x27\x5cud83d\x5cudcb9\x27,\x0a  \x27chart_with_downwards_trend\x27:\x27\x5cud83d\x5cudcc9\x27,\x0a  \x27chart_with_upwards_trend\x27:\x27\x5cud83d\x5cudcc8\x27,\x0a  \x27checkered_flag\x27:\x27\x5cud83c\x5cudfc1\x27,\x0a  \x27cheese\x27:\x27\x5cud83e\x5cuddc0\x27,\x0a  \x27cherries\x27:\x27\x5cud83c\x5cudf52\x27,\x0a  \x27cherry_blossom\x27:\x27\x5cud83c\x5cudf38\x27,\x0a  \x27chestnut\x27:\x27\x5cud83c\x5cudf30\x27,\x0a  \x27chicken\x27:\x27\x5cud83d\x5cudc14\x27,\x0a  \x27children_crossing\x27:\x27\x5cud83d\x5cudeb8\x27,\x0a  \x27chipmunk\x27:\x27\x5cud83d\x5cudc3f\x27,\x0a  \x27chocolate_bar\x27:\x27\x5cud83c\x5cudf6b\x27,\x0a  \x27christmas_tree\x27:\x27\x5cud83c\x5cudf84\x27,\x0a  \x27church\x27:\x27\x5cu26ea\x5cufe0f\x27,\x0a  \x27cinema\x27:\x27\x5cud83c\x5cudfa6\x27,\x0a  \x27circus_tent\x27:\x27\x5cud83c\x5cudfaa\x27,\x0a  \x27city_sunrise\x27:\x27\x5cud83c\x5cudf07\x27,\x0a  \x27city_sunset\x27:\x27\x5cud83c\x5cudf06\x27,\x0a  \x27cityscape\x27:\x27\x5cud83c\x5cudfd9\x27,\x0a  \x27cl\x27:\x27\x5cud83c\x5cudd91\x27,\x0a  \x27clamp\x27:\x27\x5cud83d\x5cudddc\x27,\x0a  \x27clap\x27:\x27\x5cud83d\x5cudc4f\x27,\x0a  \x27clapper\x27:\x27\x5cud83c\x5cudfac\x27,\x0a  \x27classical_building\x27:\x27\x5cud83c\x5cudfdb\x27,\x0a  \x27clinking_glasses\x27:\x27\x5cud83e\x5cudd42\x27,\x0a  \x27clipboard\x27:\x27\x5cud83d\x5cudccb\x27,\x0a  \x27clock1\x27:\x27\x5cud83d\x5cudd50\x27,\x0a  \x27clock10\x27:\x27\x5cud83d\x5cudd59\x27,\x0a  \x27clock1030\x27:\x27\x5cud83d\x5cudd65\x27,\x0a  \x27clock11\x27:\x27\x5cud83d\x5cudd5a\x27,\x0a  \x27clock1130\x27:\x27\x5cud83d\x5cudd66\x27,\x0a  \x27clock12\x27:\x27\x5cud83d\x5cudd5b\x27,\x0a  \x27clock1230\x27:\x27\x5cud83d\x5cudd67\x27,\x0a  \x27clock130\x27:\x27\x5cud83d\x5cudd5c\x27,\x0a  \x27clock2\x27:\x27\x5cud83d\x5cudd51\x27,\x0a  \x27clock230\x27:\x27\x5cud83d\x5cudd5d\x27,\x0a  \x27clock3\x27:\x27\x5cud83d\x5cudd52\x27,\x0a  \x27clock330\x27:\x27\x5cud83d\x5cudd5e\x27,\x0a  \x27clock4\x27:\x27\x5cud83d\x5cudd53\x27,\x0a  \x27clock430\x27:\x27\x5cud83d\x5cudd5f\x27,\x0a  \x27clock5\x27:\x27\x5cud83d\x5cudd54\x27,\x0a  \x27clock530\x27:\x27\x5cud83d\x5cudd60\x27,\x0a  \x27clock6\x27:\x27\x5cud83d\x5cudd55\x27,\x0a  \x27clock630\x27:\x27\x5cud83d\x5cudd61\x27,\x0a  \x27clock7\x27:\x27\x5cud83d\x5cudd56\x27,\x0a  \x27clock730\x27:\x27\x5cud83d\x5cudd62\x27,\x0a  \x27clock8\x27:\x27\x5cud83d\x5cudd57\x27,\x0a  \x27clock830\x27:\x27\x5cud83d\x5cudd63\x27,\x0a  \x27clock9\x27:\x27\x5cud83d\x5cudd58\x27,\x0a  \x27clock930\x27:\x27\x5cud83d\x5cudd64\x27,\x0a  \x27closed_book\x27:\x27\x5cud83d\x5cudcd5\x27,\x0a  \x27closed_lock_with_key\x27:\x27\x5cud83d\x5cudd10\x27,\x0a  \x27closed_umbrella\x27:\x27\x5cud83c\x5cudf02\x27,\x0a  \x27cloud\x27:\x27\x5cu2601\x5cufe0f\x27,\x0a  \x27cloud_with_lightning\x27:\x27\x5cud83c\x5cudf29\x27,\x0a  \x27cloud_with_lightning_and_rain\x27:\x27\x5cu26c8\x27,\x0a  \x27cloud_with_rain\x27:\x27\x5cud83c\x5cudf27\x27,\x0a  \x27cloud_with_snow\x27:\x27\x5cud83c\x5cudf28\x27,\x0a  \x27clown_face\x27:\x27\x5cud83e\x5cudd21\x27,\x0a  \x27clubs\x27:\x27\x5cu2663\x5cufe0f\x27,\x0a  \x27cocktail\x27:\x27\x5cud83c\x5cudf78\x27,\x0a  \x27coffee\x27:\x27\x5cu2615\x5cufe0f\x27,\x0a  \x27coffin\x27:\x27\x5cu26b0\x5cufe0f\x27,\x0a  \x27cold_sweat\x27:\x27\x5cud83d\x5cude30\x27,\x0a  \x27comet\x27:\x27\x5cu2604\x5cufe0f\x27,\x0a  \x27computer\x27:\x27\x5cud83d\x5cudcbb\x27,\x0a  \x27computer_mouse\x27:\x27\x5cud83d\x5cuddb1\x27,\x0a  \x27confetti_ball\x27:\x27\x5cud83c\x5cudf8a\x27,\x0a  \x27confounded\x27:\x27\x5cud83d\x5cude16\x27,\x0a  \x27confused\x27:\x27\x5cud83d\x5cude15\x27,\x0a  \x27congratulations\x27:\x27\x5cu3297\x5cufe0f\x27,\x0a  \x27construction\x27:\x27\x5cud83d\x5cudea7\x27,\x0a  \x27construction_worker_man\x27:\x27\x5cud83d\x5cudc77\x27,\x0a  \x27construction_worker_woman\x27:\x27\x5cud83d\x5cudc77&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27control_knobs\x27:\x27\x5cud83c\x5cudf9b\x27,\x0a  \x27convenience_store\x27:\x27\x5cud83c\x5cudfea\x27,\x0a  \x27cookie\x27:\x27\x5cud83c\x5cudf6a\x27,\x0a  \x27cool\x27:\x27\x5cud83c\x5cudd92\x27,\x0a  \x27policeman\x27:\x27\x5cud83d\x5cudc6e\x27,\x0a  \x27copyright\x27:\x27\x5cu00a9\x5cufe0f\x27,\x0a  \x27corn\x27:\x27\x5cud83c\x5cudf3d\x27,\x0a  \x27couch_and_lamp\x27:\x27\x5cud83d\x5cudecb\x27,\x0a  \x27couple\x27:\x27\x5cud83d\x5cudc6b\x27,\x0a  \x27couple_with_heart_woman_man\x27:\x27\x5cud83d\x5cudc91\x27,\x0a  \x27couple_with_heart_man_man\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cu2764\x5cufe0f&zwj;\x5cud83d\x5cudc68\x27,\x0a  \x27couple_with_heart_woman_woman\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cu2764\x5cufe0f&zwj;\x5cud83d\x5cudc69\x27,\x0a  \x27couplekiss_man_man\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cu2764\x5cufe0f&zwj;\x5cud83d\x5cudc8b&zwj;\x5cud83d\x5cudc68\x27,\x0a  \x27couplekiss_man_woman\x27:\x27\x5cud83d\x5cudc8f\x27,\x0a  \x27couplekiss_woman_woman\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cu2764\x5cufe0f&zwj;\x5cud83d\x5cudc8b&zwj;\x5cud83d\x5cudc69\x27,\x0a  \x27cow\x27:\x27\x5cud83d\x5cudc2e\x27,\x0a  \x27cow2\x27:\x27\x5cud83d\x5cudc04\x27,\x0a  \x27cowboy_hat_face\x27:\x27\x5cud83e\x5cudd20\x27,\x0a  \x27crab\x27:\x27\x5cud83e\x5cudd80\x27,\x0a  \x27crayon\x27:\x27\x5cud83d\x5cudd8d\x27,\x0a  \x27credit_card\x27:\x27\x5cud83d\x5cudcb3\x27,\x0a  \x27crescent_moon\x27:\x27\x5cud83c\x5cudf19\x27,\x0a  \x27cricket\x27:\x27\x5cud83c\x5cudfcf\x27,\x0a  \x27crocodile\x27:\x27\x5cud83d\x5cudc0a\x27,\x0a  \x27croissant\x27:\x27\x5cud83e\x5cudd50\x27,\x0a  \x27crossed_fingers\x27:\x27\x5cud83e\x5cudd1e\x27,\x0a  \x27crossed_flags\x27:\x27\x5cud83c\x5cudf8c\x27,\x0a  \x27crossed_swords\x27:\x27\x5cu2694\x5cufe0f\x27,\x0a  \x27crown\x27:\x27\x5cud83d\x5cudc51\x27,\x0a  \x27cry\x27:\x27\x5cud83d\x5cude22\x27,\x0a  \x27crying_cat_face\x27:\x27\x5cud83d\x5cude3f\x27,\x0a  \x27crystal_ball\x27:\x27\x5cud83d\x5cudd2e\x27,\x0a  \x27cucumber\x27:\x27\x5cud83e\x5cudd52\x27,\x0a  \x27cupid\x27:\x27\x5cud83d\x5cudc98\x27,\x0a  \x27curly_loop\x27:\x27\x5cu27b0\x27,\x0a  \x27currency_exchange\x27:\x27\x5cud83d\x5cudcb1\x27,\x0a  \x27curry\x27:\x27\x5cud83c\x5cudf5b\x27,\x0a  \x27custard\x27:\x27\x5cud83c\x5cudf6e\x27,\x0a  \x27customs\x27:\x27\x5cud83d\x5cudec3\x27,\x0a  \x27cyclone\x27:\x27\x5cud83c\x5cudf00\x27,\x0a  \x27dagger\x27:\x27\x5cud83d\x5cudde1\x27,\x0a  \x27dancer\x27:\x27\x5cud83d\x5cudc83\x27,\x0a  \x27dancing_women\x27:\x27\x5cud83d\x5cudc6f\x27,\x0a  \x27dancing_men\x27:\x27\x5cud83d\x5cudc6f&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27dango\x27:\x27\x5cud83c\x5cudf61\x27,\x0a  \x27dark_sunglasses\x27:\x27\x5cud83d\x5cudd76\x27,\x0a  \x27dart\x27:\x27\x5cud83c\x5cudfaf\x27,\x0a  \x27dash\x27:\x27\x5cud83d\x5cudca8\x27,\x0a  \x27date\x27:\x27\x5cud83d\x5cudcc5\x27,\x0a  \x27deciduous_tree\x27:\x27\x5cud83c\x5cudf33\x27,\x0a  \x27deer\x27:\x27\x5cud83e\x5cudd8c\x27,\x0a  \x27department_store\x27:\x27\x5cud83c\x5cudfec\x27,\x0a  \x27derelict_house\x27:\x27\x5cud83c\x5cudfda\x27,\x0a  \x27desert\x27:\x27\x5cud83c\x5cudfdc\x27,\x0a  \x27desert_island\x27:\x27\x5cud83c\x5cudfdd\x27,\x0a  \x27desktop_computer\x27:\x27\x5cud83d\x5cudda5\x27,\x0a  \x27male_detective\x27:\x27\x5cud83d\x5cudd75\x5cufe0f\x27,\x0a  \x27diamond_shape_with_a_dot_inside\x27:\x27\x5cud83d\x5cudca0\x27,\x0a  \x27diamonds\x27:\x27\x5cu2666\x5cufe0f\x27,\x0a  \x27disappointed\x27:\x27\x5cud83d\x5cude1e\x27,\x0a  \x27disappointed_relieved\x27:\x27\x5cud83d\x5cude25\x27,\x0a  \x27dizzy\x27:\x27\x5cud83d\x5cudcab\x27,\x0a  \x27dizzy_face\x27:\x27\x5cud83d\x5cude35\x27,\x0a  \x27do_not_litter\x27:\x27\x5cud83d\x5cudeaf\x27,\x0a  \x27dog\x27:\x27\x5cud83d\x5cudc36\x27,\x0a  \x27dog2\x27:\x27\x5cud83d\x5cudc15\x27,\x0a  \x27dollar\x27:\x27\x5cud83d\x5cudcb5\x27,\x0a  \x27dolls\x27:\x27\x5cud83c\x5cudf8e\x27,\x0a  \x27dolphin\x27:\x27\x5cud83d\x5cudc2c\x27,\x0a  \x27door\x27:\x27\x5cud83d\x5cudeaa\x27,\x0a  \x27doughnut\x27:\x27\x5cud83c\x5cudf69\x27,\x0a  \x27dove\x27:\x27\x5cud83d\x5cudd4a\x27,\x0a  \x27dragon\x27:\x27\x5cud83d\x5cudc09\x27,\x0a  \x27dragon_face\x27:\x27\x5cud83d\x5cudc32\x27,\x0a  \x27dress\x27:\x27\x5cud83d\x5cudc57\x27,\x0a  \x27dromedary_camel\x27:\x27\x5cud83d\x5cudc2a\x27,\x0a  \x27drooling_face\x27:\x27\x5cud83e\x5cudd24\x27,\x0a  \x27droplet\x27:\x27\x5cud83d\x5cudca7\x27,\x0a  \x27drum\x27:\x27\x5cud83e\x5cudd41\x27,\x0a  \x27duck\x27:\x27\x5cud83e\x5cudd86\x27,\x0a  \x27dvd\x27:\x27\x5cud83d\x5cudcc0\x27,\x0a  \x27e-mail\x27:\x27\x5cud83d\x5cudce7\x27,\x0a  \x27eagle\x27:\x27\x5cud83e\x5cudd85\x27,\x0a  \x27ear\x27:\x27\x5cud83d\x5cudc42\x27,\x0a  \x27ear_of_rice\x27:\x27\x5cud83c\x5cudf3e\x27,\x0a  \x27earth_africa\x27:\x27\x5cud83c\x5cudf0d\x27,\x0a  \x27earth_americas\x27:\x27\x5cud83c\x5cudf0e\x27,\x0a  \x27earth_asia\x27:\x27\x5cud83c\x5cudf0f\x27,\x0a  \x27egg\x27:\x27\x5cud83e\x5cudd5a\x27,\x0a  \x27eggplant\x27:\x27\x5cud83c\x5cudf46\x27,\x0a  \x27eight_pointed_black_star\x27:\x27\x5cu2734\x5cufe0f\x27,\x0a  \x27eight_spoked_asterisk\x27:\x27\x5cu2733\x5cufe0f\x27,\x0a  \x27electric_plug\x27:\x27\x5cud83d\x5cudd0c\x27,\x0a  \x27elephant\x27:\x27\x5cud83d\x5cudc18\x27,\x0a  \x27email\x27:\x27\x5cu2709\x5cufe0f\x27,\x0a  \x27end\x27:\x27\x5cud83d\x5cudd1a\x27,\x0a  \x27envelope_with_arrow\x27:\x27\x5cud83d\x5cudce9\x27,\x0a  \x27euro\x27:\x27\x5cud83d\x5cudcb6\x27,\x0a  \x27european_castle\x27:\x27\x5cud83c\x5cudff0\x27,\x0a  \x27european_post_office\x27:\x27\x5cud83c\x5cudfe4\x27,\x0a  \x27evergreen_tree\x27:\x27\x5cud83c\x5cudf32\x27,\x0a  \x27exclamation\x27:\x27\x5cu2757\x5cufe0f\x27,\x0a  \x27expressionless\x27:\x27\x5cud83d\x5cude11\x27,\x0a  \x27eye\x27:\x27\x5cud83d\x5cudc41\x27,\x0a  \x27eye_speech_bubble\x27:\x27\x5cud83d\x5cudc41&zwj;\x5cud83d\x5cudde8\x27,\x0a  \x27eyeglasses\x27:\x27\x5cud83d\x5cudc53\x27,\x0a  \x27eyes\x27:\x27\x5cud83d\x5cudc40\x27,\x0a  \x27face_with_head_bandage\x27:\x27\x5cud83e\x5cudd15\x27,\x0a  \x27face_with_thermometer\x27:\x27\x5cud83e\x5cudd12\x27,\x0a  \x27fist_oncoming\x27:\x27\x5cud83d\x5cudc4a\x27,\x0a  \x27factory\x27:\x27\x5cud83c\x5cudfed\x27,\x0a  \x27fallen_leaf\x27:\x27\x5cud83c\x5cudf42\x27,\x0a  \x27family_man_woman_boy\x27:\x27\x5cud83d\x5cudc6a\x27,\x0a  \x27family_man_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_boy_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc66&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_man_girl_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_girl_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_man_man_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_man_boy_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc66&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_man_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_man_man_girl_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_man_girl_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_man_woman_boy_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc66&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_woman_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_man_woman_girl_boy\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_man_woman_girl_girl\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_woman_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_boy_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc66&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_girl\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_woman_girl_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_girl_girl\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_woman_woman_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_woman_boy_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc66&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_woman_girl\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27family_woman_woman_girl_boy\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc66\x27,\x0a  \x27family_woman_woman_girl_girl\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudc67&zwj;\x5cud83d\x5cudc67\x27,\x0a  \x27fast_forward\x27:\x27\x5cu23e9\x27,\x0a  \x27fax\x27:\x27\x5cud83d\x5cudce0\x27,\x0a  \x27fearful\x27:\x27\x5cud83d\x5cude28\x27,\x0a  \x27feet\x27:\x27\x5cud83d\x5cudc3e\x27,\x0a  \x27female_detective\x27:\x27\x5cud83d\x5cudd75\x5cufe0f&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27ferris_wheel\x27:\x27\x5cud83c\x5cudfa1\x27,\x0a  \x27ferry\x27:\x27\x5cu26f4\x27,\x0a  \x27field_hockey\x27:\x27\x5cud83c\x5cudfd1\x27,\x0a  \x27file_cabinet\x27:\x27\x5cud83d\x5cuddc4\x27,\x0a  \x27file_folder\x27:\x27\x5cud83d\x5cudcc1\x27,\x0a  \x27film_projector\x27:\x27\x5cud83d\x5cudcfd\x27,\x0a  \x27film_strip\x27:\x27\x5cud83c\x5cudf9e\x27,\x0a  \x27fire\x27:\x27\x5cud83d\x5cudd25\x27,\x0a  \x27fire_engine\x27:\x27\x5cud83d\x5cude92\x27,\x0a  \x27fireworks\x27:\x27\x5cud83c\x5cudf86\x27,\x0a  \x27first_quarter_moon\x27:\x27\x5cud83c\x5cudf13\x27,\x0a  \x27first_quarter_moon_with_face\x27:\x27\x5cud83c\x5cudf1b\x27,\x0a  \x27fish\x27:\x27\x5cud83d\x5cudc1f\x27,\x0a  \x27fish_cake\x27:\x27\x5cud83c\x5cudf65\x27,\x0a  \x27fishing_pole_and_fish\x27:\x27\x5cud83c\x5cudfa3\x27,\x0a  \x27fist_raised\x27:\x27\x5cu270a\x27,\x0a  \x27fist_left\x27:\x27\x5cud83e\x5cudd1b\x27,\x0a  \x27fist_right\x27:\x27\x5cud83e\x5cudd1c\x27,\x0a  \x27flags\x27:\x27\x5cud83c\x5cudf8f\x27,\x0a  \x27flashlight\x27:\x27\x5cud83d\x5cudd26\x27,\x0a  \x27fleur_de_lis\x27:\x27\x5cu269c\x5cufe0f\x27,\x0a  \x27flight_arrival\x27:\x27\x5cud83d\x5cudeec\x27,\x0a  \x27flight_departure\x27:\x27\x5cud83d\x5cudeeb\x27,\x0a  \x27floppy_disk\x27:\x27\x5cud83d\x5cudcbe\x27,\x0a  \x27flower_playing_cards\x27:\x27\x5cud83c\x5cudfb4\x27,\x0a  \x27flushed\x27:\x27\x5cud83d\x5cude33\x27,\x0a  \x27fog\x27:\x27\x5cud83c\x5cudf2b\x27,\x0a  \x27foggy\x27:\x27\x5cud83c\x5cudf01\x27,\x0a  \x27football\x27:\x27\x5cud83c\x5cudfc8\x27,\x0a  \x27footprints\x27:\x27\x5cud83d\x5cudc63\x27,\x0a  \x27fork_and_knife\x27:\x27\x5cud83c\x5cudf74\x27,\x0a  \x27fountain\x27:\x27\x5cu26f2\x5cufe0f\x27,\x0a  \x27fountain_pen\x27:\x27\x5cud83d\x5cudd8b\x27,\x0a  \x27four_leaf_clover\x27:\x27\x5cud83c\x5cudf40\x27,\x0a  \x27fox_face\x27:\x27\x5cud83e\x5cudd8a\x27,\x0a  \x27framed_picture\x27:\x27\x5cud83d\x5cuddbc\x27,\x0a  \x27free\x27:\x27\x5cud83c\x5cudd93\x27,\x0a  \x27fried_egg\x27:\x27\x5cud83c\x5cudf73\x27,\x0a  \x27fried_shrimp\x27:\x27\x5cud83c\x5cudf64\x27,\x0a  \x27fries\x27:\x27\x5cud83c\x5cudf5f\x27,\x0a  \x27frog\x27:\x27\x5cud83d\x5cudc38\x27,\x0a  \x27frowning\x27:\x27\x5cud83d\x5cude26\x27,\x0a  \x27frowning_face\x27:\x27\x5cu2639\x5cufe0f\x27,\x0a  \x27frowning_man\x27:\x27\x5cud83d\x5cude4d&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27frowning_woman\x27:\x27\x5cud83d\x5cude4d\x27,\x0a  \x27middle_finger\x27:\x27\x5cud83d\x5cudd95\x27,\x0a  \x27fuelpump\x27:\x27\x5cu26fd\x5cufe0f\x27,\x0a  \x27full_moon\x27:\x27\x5cud83c\x5cudf15\x27,\x0a  \x27full_moon_with_face\x27:\x27\x5cud83c\x5cudf1d\x27,\x0a  \x27funeral_urn\x27:\x27\x5cu26b1\x5cufe0f\x27,\x0a  \x27game_die\x27:\x27\x5cud83c\x5cudfb2\x27,\x0a  \x27gear\x27:\x27\x5cu2699\x5cufe0f\x27,\x0a  \x27gem\x27:\x27\x5cud83d\x5cudc8e\x27,\x0a  \x27gemini\x27:\x27\x5cu264a\x5cufe0f\x27,\x0a  \x27ghost\x27:\x27\x5cud83d\x5cudc7b\x27,\x0a  \x27gift\x27:\x27\x5cud83c\x5cudf81\x27,\x0a  \x27gift_heart\x27:\x27\x5cud83d\x5cudc9d\x27,\x0a  \x27girl\x27:\x27\x5cud83d\x5cudc67\x27,\x0a  \x27globe_with_meridians\x27:\x27\x5cud83c\x5cudf10\x27,\x0a  \x27goal_net\x27:\x27\x5cud83e\x5cudd45\x27,\x0a  \x27goat\x27:\x27\x5cud83d\x5cudc10\x27,\x0a  \x27golf\x27:\x27\x5cu26f3\x5cufe0f\x27,\x0a  \x27golfing_man\x27:\x27\x5cud83c\x5cudfcc\x5cufe0f\x27,\x0a  \x27golfing_woman\x27:\x27\x5cud83c\x5cudfcc\x5cufe0f&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27gorilla\x27:\x27\x5cud83e\x5cudd8d\x27,\x0a  \x27grapes\x27:\x27\x5cud83c\x5cudf47\x27,\x0a  \x27green_apple\x27:\x27\x5cud83c\x5cudf4f\x27,\x0a  \x27green_book\x27:\x27\x5cud83d\x5cudcd7\x27,\x0a  \x27green_heart\x27:\x27\x5cud83d\x5cudc9a\x27,\x0a  \x27green_salad\x27:\x27\x5cud83e\x5cudd57\x27,\x0a  \x27grey_exclamation\x27:\x27\x5cu2755\x27,\x0a  \x27grey_question\x27:\x27\x5cu2754\x27,\x0a  \x27grimacing\x27:\x27\x5cud83d\x5cude2c\x27,\x0a  \x27grin\x27:\x27\x5cud83d\x5cude01\x27,\x0a  \x27grinning\x27:\x27\x5cud83d\x5cude00\x27,\x0a  \x27guardsman\x27:\x27\x5cud83d\x5cudc82\x27,\x0a  \x27guardswoman\x27:\x27\x5cud83d\x5cudc82&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27guitar\x27:\x27\x5cud83c\x5cudfb8\x27,\x0a  \x27gun\x27:\x27\x5cud83d\x5cudd2b\x27,\x0a  \x27haircut_woman\x27:\x27\x5cud83d\x5cudc87\x27,\x0a  \x27haircut_man\x27:\x27\x5cud83d\x5cudc87&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27hamburger\x27:\x27\x5cud83c\x5cudf54\x27,\x0a  \x27hammer\x27:\x27\x5cud83d\x5cudd28\x27,\x0a  \x27hammer_and_pick\x27:\x27\x5cu2692\x27,\x0a  \x27hammer_and_wrench\x27:\x27\x5cud83d\x5cudee0\x27,\x0a  \x27hamster\x27:\x27\x5cud83d\x5cudc39\x27,\x0a  \x27hand\x27:\x27\x5cu270b\x27,\x0a  \x27handbag\x27:\x27\x5cud83d\x5cudc5c\x27,\x0a  \x27handshake\x27:\x27\x5cud83e\x5cudd1d\x27,\x0a  \x27hankey\x27:\x27\x5cud83d\x5cudca9\x27,\x0a  \x27hatched_chick\x27:\x27\x5cud83d\x5cudc25\x27,\x0a  \x27hatching_chick\x27:\x27\x5cud83d\x5cudc23\x27,\x0a  \x27headphones\x27:\x27\x5cud83c\x5cudfa7\x27,\x0a  \x27hear_no_evil\x27:\x27\x5cud83d\x5cude49\x27,\x0a  \x27heart\x27:\x27\x5cu2764\x5cufe0f\x27,\x0a  \x27heart_decoration\x27:\x27\x5cud83d\x5cudc9f\x27,\x0a  \x27heart_eyes\x27:\x27\x5cud83d\x5cude0d\x27,\x0a  \x27heart_eyes_cat\x27:\x27\x5cud83d\x5cude3b\x27,\x0a  \x27heartbeat\x27:\x27\x5cud83d\x5cudc93\x27,\x0a  \x27heartpulse\x27:\x27\x5cud83d\x5cudc97\x27,\x0a  \x27hearts\x27:\x27\x5cu2665\x5cufe0f\x27,\x0a  \x27heavy_check_mark\x27:\x27\x5cu2714\x5cufe0f\x27,\x0a  \x27heavy_division_sign\x27:\x27\x5cu2797\x27,\x0a  \x27heavy_dollar_sign\x27:\x27\x5cud83d\x5cudcb2\x27,\x0a  \x27heavy_heart_exclamation\x27:\x27\x5cu2763\x5cufe0f\x27,\x0a  \x27heavy_minus_sign\x27:\x27\x5cu2796\x27,\x0a  \x27heavy_multiplication_x\x27:\x27\x5cu2716\x5cufe0f\x27,\x0a  \x27heavy_plus_sign\x27:\x27\x5cu2795\x27,\x0a  \x27helicopter\x27:\x27\x5cud83d\x5cude81\x27,\x0a  \x27herb\x27:\x27\x5cud83c\x5cudf3f\x27,\x0a  \x27hibiscus\x27:\x27\x5cud83c\x5cudf3a\x27,\x0a  \x27high_brightness\x27:\x27\x5cud83d\x5cudd06\x27,\x0a  \x27high_heel\x27:\x27\x5cud83d\x5cudc60\x27,\x0a  \x27hocho\x27:\x27\x5cud83d\x5cudd2a\x27,\x0a  \x27hole\x27:\x27\x5cud83d\x5cudd73\x27,\x0a  \x27honey_pot\x27:\x27\x5cud83c\x5cudf6f\x27,\x0a  \x27horse\x27:\x27\x5cud83d\x5cudc34\x27,\x0a  \x27horse_racing\x27:\x27\x5cud83c\x5cudfc7\x27,\x0a  \x27hospital\x27:\x27\x5cud83c\x5cudfe5\x27,\x0a  \x27hot_pepper\x27:\x27\x5cud83c\x5cudf36\x27,\x0a  \x27hotdog\x27:\x27\x5cud83c\x5cudf2d\x27,\x0a  \x27hotel\x27:\x27\x5cud83c\x5cudfe8\x27,\x0a  \x27hotsprings\x27:\x27\x5cu2668\x5cufe0f\x27,\x0a  \x27hourglass\x27:\x27\x5cu231b\x5cufe0f\x27,\x0a  \x27hourglass_flowing_sand\x27:\x27\x5cu23f3\x27,\x0a  \x27house\x27:\x27\x5cud83c\x5cudfe0\x27,\x0a  \x27house_with_garden\x27:\x27\x5cud83c\x5cudfe1\x27,\x0a  \x27houses\x27:\x27\x5cud83c\x5cudfd8\x27,\x0a  \x27hugs\x27:\x27\x5cud83e\x5cudd17\x27,\x0a  \x27hushed\x27:\x27\x5cud83d\x5cude2f\x27,\x0a  \x27ice_cream\x27:\x27\x5cud83c\x5cudf68\x27,\x0a  \x27ice_hockey\x27:\x27\x5cud83c\x5cudfd2\x27,\x0a  \x27ice_skate\x27:\x27\x5cu26f8\x27,\x0a  \x27icecream\x27:\x27\x5cud83c\x5cudf66\x27,\x0a  \x27id\x27:\x27\x5cud83c\x5cudd94\x27,\x0a  \x27ideograph_advantage\x27:\x27\x5cud83c\x5cude50\x27,\x0a  \x27imp\x27:\x27\x5cud83d\x5cudc7f\x27,\x0a  \x27inbox_tray\x27:\x27\x5cud83d\x5cudce5\x27,\x0a  \x27incoming_envelope\x27:\x27\x5cud83d\x5cudce8\x27,\x0a  \x27tipping_hand_woman\x27:\x27\x5cud83d\x5cudc81\x27,\x0a  \x27information_source\x27:\x27\x5cu2139\x5cufe0f\x27,\x0a  \x27innocent\x27:\x27\x5cud83d\x5cude07\x27,\x0a  \x27interrobang\x27:\x27\x5cu2049\x5cufe0f\x27,\x0a  \x27iphone\x27:\x27\x5cud83d\x5cudcf1\x27,\x0a  \x27izakaya_lantern\x27:\x27\x5cud83c\x5cudfee\x27,\x0a  \x27jack_o_lantern\x27:\x27\x5cud83c\x5cudf83\x27,\x0a  \x27japan\x27:\x27\x5cud83d\x5cuddfe\x27,\x0a  \x27japanese_castle\x27:\x27\x5cud83c\x5cudfef\x27,\x0a  \x27japanese_goblin\x27:\x27\x5cud83d\x5cudc7a\x27,\x0a  \x27japanese_ogre\x27:\x27\x5cud83d\x5cudc79\x27,\x0a  \x27jeans\x27:\x27\x5cud83d\x5cudc56\x27,\x0a  \x27joy\x27:\x27\x5cud83d\x5cude02\x27,\x0a  \x27joy_cat\x27:\x27\x5cud83d\x5cude39\x27,\x0a  \x27joystick\x27:\x27\x5cud83d\x5cudd79\x27,\x0a  \x27kaaba\x27:\x27\x5cud83d\x5cudd4b\x27,\x0a  \x27key\x27:\x27\x5cud83d\x5cudd11\x27,\x0a  \x27keyboard\x27:\x27\x5cu2328\x5cufe0f\x27,\x0a  \x27keycap_ten\x27:\x27\x5cud83d\x5cudd1f\x27,\x0a  \x27kick_scooter\x27:\x27\x5cud83d\x5cudef4\x27,\x0a  \x27kimono\x27:\x27\x5cud83d\x5cudc58\x27,\x0a  \x27kiss\x27:\x27\x5cud83d\x5cudc8b\x27,\x0a  \x27kissing\x27:\x27\x5cud83d\x5cude17\x27,\x0a  \x27kissing_cat\x27:\x27\x5cud83d\x5cude3d\x27,\x0a  \x27kissing_closed_eyes\x27:\x27\x5cud83d\x5cude1a\x27,\x0a  \x27kissing_heart\x27:\x27\x5cud83d\x5cude18\x27,\x0a  \x27kissing_smiling_eyes\x27:\x27\x5cud83d\x5cude19\x27,\x0a  \x27kiwi_fruit\x27:\x27\x5cud83e\x5cudd5d\x27,\x0a  \x27koala\x27:\x27\x5cud83d\x5cudc28\x27,\x0a  \x27koko\x27:\x27\x5cud83c\x5cude01\x27,\x0a  \x27label\x27:\x27\x5cud83c\x5cudff7\x27,\x0a  \x27large_blue_circle\x27:\x27\x5cud83d\x5cudd35\x27,\x0a  \x27large_blue_diamond\x27:\x27\x5cud83d\x5cudd37\x27,\x0a  \x27large_orange_diamond\x27:\x27\x5cud83d\x5cudd36\x27,\x0a  \x27last_quarter_moon\x27:\x27\x5cud83c\x5cudf17\x27,\x0a  \x27last_quarter_moon_with_face\x27:\x27\x5cud83c\x5cudf1c\x27,\x0a  \x27latin_cross\x27:\x27\x5cu271d\x5cufe0f\x27,\x0a  \x27laughing\x27:\x27\x5cud83d\x5cude06\x27,\x0a  \x27leaves\x27:\x27\x5cud83c\x5cudf43\x27,\x0a  \x27ledger\x27:\x27\x5cud83d\x5cudcd2\x27,\x0a  \x27left_luggage\x27:\x27\x5cud83d\x5cudec5\x27,\x0a  \x27left_right_arrow\x27:\x27\x5cu2194\x5cufe0f\x27,\x0a  \x27leftwards_arrow_with_hook\x27:\x27\x5cu21a9\x5cufe0f\x27,\x0a  \x27lemon\x27:\x27\x5cud83c\x5cudf4b\x27,\x0a  \x27leo\x27:\x27\x5cu264c\x5cufe0f\x27,\x0a  \x27leopard\x27:\x27\x5cud83d\x5cudc06\x27,\x0a  \x27level_slider\x27:\x27\x5cud83c\x5cudf9a\x27,\x0a  \x27libra\x27:\x27\x5cu264e\x5cufe0f\x27,\x0a  \x27light_rail\x27:\x27\x5cud83d\x5cude88\x27,\x0a  \x27link\x27:\x27\x5cud83d\x5cudd17\x27,\x0a  \x27lion\x27:\x27\x5cud83e\x5cudd81\x27,\x0a  \x27lips\x27:\x27\x5cud83d\x5cudc44\x27,\x0a  \x27lipstick\x27:\x27\x5cud83d\x5cudc84\x27,\x0a  \x27lizard\x27:\x27\x5cud83e\x5cudd8e\x27,\x0a  \x27lock\x27:\x27\x5cud83d\x5cudd12\x27,\x0a  \x27lock_with_ink_pen\x27:\x27\x5cud83d\x5cudd0f\x27,\x0a  \x27lollipop\x27:\x27\x5cud83c\x5cudf6d\x27,\x0a  \x27loop\x27:\x27\x5cu27bf\x27,\x0a  \x27loud_sound\x27:\x27\x5cud83d\x5cudd0a\x27,\x0a  \x27loudspeaker\x27:\x27\x5cud83d\x5cudce2\x27,\x0a  \x27love_hotel\x27:\x27\x5cud83c\x5cudfe9\x27,\x0a  \x27love_letter\x27:\x27\x5cud83d\x5cudc8c\x27,\x0a  \x27low_brightness\x27:\x27\x5cud83d\x5cudd05\x27,\x0a  \x27lying_face\x27:\x27\x5cud83e\x5cudd25\x27,\x0a  \x27m\x27:\x27\x5cu24c2\x5cufe0f\x27,\x0a  \x27mag\x27:\x27\x5cud83d\x5cudd0d\x27,\x0a  \x27mag_right\x27:\x27\x5cud83d\x5cudd0e\x27,\x0a  \x27mahjong\x27:\x27\x5cud83c\x5cudc04\x5cufe0f\x27,\x0a  \x27mailbox\x27:\x27\x5cud83d\x5cudceb\x27,\x0a  \x27mailbox_closed\x27:\x27\x5cud83d\x5cudcea\x27,\x0a  \x27mailbox_with_mail\x27:\x27\x5cud83d\x5cudcec\x27,\x0a  \x27mailbox_with_no_mail\x27:\x27\x5cud83d\x5cudced\x27,\x0a  \x27man\x27:\x27\x5cud83d\x5cudc68\x27,\x0a  \x27man_artist\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudfa8\x27,\x0a  \x27man_astronaut\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cude80\x27,\x0a  \x27man_cartwheeling\x27:\x27\x5cud83e\x5cudd38&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_cook\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudf73\x27,\x0a  \x27man_dancing\x27:\x27\x5cud83d\x5cudd7a\x27,\x0a  \x27man_facepalming\x27:\x27\x5cud83e\x5cudd26&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_factory_worker\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudfed\x27,\x0a  \x27man_farmer\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudf3e\x27,\x0a  \x27man_firefighter\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cude92\x27,\x0a  \x27man_health_worker\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cu2695\x5cufe0f\x27,\x0a  \x27man_in_tuxedo\x27:\x27\x5cud83e\x5cudd35\x27,\x0a  \x27man_judge\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cu2696\x5cufe0f\x27,\x0a  \x27man_juggling\x27:\x27\x5cud83e\x5cudd39&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_mechanic\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudd27\x27,\x0a  \x27man_office_worker\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudcbc\x27,\x0a  \x27man_pilot\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cu2708\x5cufe0f\x27,\x0a  \x27man_playing_handball\x27:\x27\x5cud83e\x5cudd3e&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_playing_water_polo\x27:\x27\x5cud83e\x5cudd3d&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_scientist\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudd2c\x27,\x0a  \x27man_shrugging\x27:\x27\x5cud83e\x5cudd37&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27man_singer\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudfa4\x27,\x0a  \x27man_student\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudf93\x27,\x0a  \x27man_teacher\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83c\x5cudfeb\x27,\x0a  \x27man_technologist\x27:\x27\x5cud83d\x5cudc68&zwj;\x5cud83d\x5cudcbb\x27,\x0a  \x27man_with_gua_pi_mao\x27:\x27\x5cud83d\x5cudc72\x27,\x0a  \x27man_with_turban\x27:\x27\x5cud83d\x5cudc73\x27,\x0a  \x27tangerine\x27:\x27\x5cud83c\x5cudf4a\x27,\x0a  \x27mans_shoe\x27:\x27\x5cud83d\x5cudc5e\x27,\x0a  \x27mantelpiece_clock\x27:\x27\x5cud83d\x5cudd70\x27,\x0a  \x27maple_leaf\x27:\x27\x5cud83c\x5cudf41\x27,\x0a  \x27martial_arts_uniform\x27:\x27\x5cud83e\x5cudd4b\x27,\x0a  \x27mask\x27:\x27\x5cud83d\x5cude37\x27,\x0a  \x27massage_woman\x27:\x27\x5cud83d\x5cudc86\x27,\x0a  \x27massage_man\x27:\x27\x5cud83d\x5cudc86&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27meat_on_bone\x27:\x27\x5cud83c\x5cudf56\x27,\x0a  \x27medal_military\x27:\x27\x5cud83c\x5cudf96\x27,\x0a  \x27medal_sports\x27:\x27\x5cud83c\x5cudfc5\x27,\x0a  \x27mega\x27:\x27\x5cud83d\x5cudce3\x27,\x0a  \x27melon\x27:\x27\x5cud83c\x5cudf48\x27,\x0a  \x27memo\x27:\x27\x5cud83d\x5cudcdd\x27,\x0a  \x27men_wrestling\x27:\x27\x5cud83e\x5cudd3c&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27menorah\x27:\x27\x5cud83d\x5cudd4e\x27,\x0a  \x27mens\x27:\x27\x5cud83d\x5cudeb9\x27,\x0a  \x27metal\x27:\x27\x5cud83e\x5cudd18\x27,\x0a  \x27metro\x27:\x27\x5cud83d\x5cude87\x27,\x0a  \x27microphone\x27:\x27\x5cud83c\x5cudfa4\x27,\x0a  \x27microscope\x27:\x27\x5cud83d\x5cudd2c\x27,\x0a  \x27milk_glass\x27:\x27\x5cud83e\x5cudd5b\x27,\x0a  \x27milky_way\x27:\x27\x5cud83c\x5cudf0c\x27,\x0a  \x27minibus\x27:\x27\x5cud83d\x5cude90\x27,\x0a  \x27minidisc\x27:\x27\x5cud83d\x5cudcbd\x27,\x0a  \x27mobile_phone_off\x27:\x27\x5cud83d\x5cudcf4\x27,\x0a  \x27money_mouth_face\x27:\x27\x5cud83e\x5cudd11\x27,\x0a  \x27money_with_wings\x27:\x27\x5cud83d\x5cudcb8\x27,\x0a  \x27moneybag\x27:\x27\x5cud83d\x5cudcb0\x27,\x0a  \x27monkey\x27:\x27\x5cud83d\x5cudc12\x27,\x0a  \x27monkey_face\x27:\x27\x5cud83d\x5cudc35\x27,\x0a  \x27monorail\x27:\x27\x5cud83d\x5cude9d\x27,\x0a  \x27moon\x27:\x27\x5cud83c\x5cudf14\x27,\x0a  \x27mortar_board\x27:\x27\x5cud83c\x5cudf93\x27,\x0a  \x27mosque\x27:\x27\x5cud83d\x5cudd4c\x27,\x0a  \x27motor_boat\x27:\x27\x5cud83d\x5cudee5\x27,\x0a  \x27motor_scooter\x27:\x27\x5cud83d\x5cudef5\x27,\x0a  \x27motorcycle\x27:\x27\x5cud83c\x5cudfcd\x27,\x0a  \x27motorway\x27:\x27\x5cud83d\x5cudee3\x27,\x0a  \x27mount_fuji\x27:\x27\x5cud83d\x5cuddfb\x27,\x0a  \x27mountain\x27:\x27\x5cu26f0\x27,\x0a  \x27mountain_biking_man\x27:\x27\x5cud83d\x5cudeb5\x27,\x0a  \x27mountain_biking_woman\x27:\x27\x5cud83d\x5cudeb5&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27mountain_cableway\x27:\x27\x5cud83d\x5cudea0\x27,\x0a  \x27mountain_railway\x27:\x27\x5cud83d\x5cude9e\x27,\x0a  \x27mountain_snow\x27:\x27\x5cud83c\x5cudfd4\x27,\x0a  \x27mouse\x27:\x27\x5cud83d\x5cudc2d\x27,\x0a  \x27mouse2\x27:\x27\x5cud83d\x5cudc01\x27,\x0a  \x27movie_camera\x27:\x27\x5cud83c\x5cudfa5\x27,\x0a  \x27moyai\x27:\x27\x5cud83d\x5cuddff\x27,\x0a  \x27mrs_claus\x27:\x27\x5cud83e\x5cudd36\x27,\x0a  \x27muscle\x27:\x27\x5cud83d\x5cudcaa\x27,\x0a  \x27mushroom\x27:\x27\x5cud83c\x5cudf44\x27,\x0a  \x27musical_keyboard\x27:\x27\x5cud83c\x5cudfb9\x27,\x0a  \x27musical_note\x27:\x27\x5cud83c\x5cudfb5\x27,\x0a  \x27musical_score\x27:\x27\x5cud83c\x5cudfbc\x27,\x0a  \x27mute\x27:\x27\x5cud83d\x5cudd07\x27,\x0a  \x27nail_care\x27:\x27\x5cud83d\x5cudc85\x27,\x0a  \x27name_badge\x27:\x27\x5cud83d\x5cudcdb\x27,\x0a  \x27national_park\x27:\x27\x5cud83c\x5cudfde\x27,\x0a  \x27nauseated_face\x27:\x27\x5cud83e\x5cudd22\x27,\x0a  \x27necktie\x27:\x27\x5cud83d\x5cudc54\x27,\x0a  \x27negative_squared_cross_mark\x27:\x27\x5cu274e\x27,\x0a  \x27nerd_face\x27:\x27\x5cud83e\x5cudd13\x27,\x0a  \x27neutral_face\x27:\x27\x5cud83d\x5cude10\x27,\x0a  \x27new\x27:\x27\x5cud83c\x5cudd95\x27,\x0a  \x27new_moon\x27:\x27\x5cud83c\x5cudf11\x27,\x0a  \x27new_moon_with_face\x27:\x27\x5cud83c\x5cudf1a\x27,\x0a  \x27newspaper\x27:\x27\x5cud83d\x5cudcf0\x27,\x0a  \x27newspaper_roll\x27:\x27\x5cud83d\x5cuddde\x27,\x0a  \x27next_track_button\x27:\x27\x5cu23ed\x27,\x0a  \x27ng\x27:\x27\x5cud83c\x5cudd96\x27,\x0a  \x27no_good_man\x27:\x27\x5cud83d\x5cude45&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27no_good_woman\x27:\x27\x5cud83d\x5cude45\x27,\x0a  \x27night_with_stars\x27:\x27\x5cud83c\x5cudf03\x27,\x0a  \x27no_bell\x27:\x27\x5cud83d\x5cudd15\x27,\x0a  \x27no_bicycles\x27:\x27\x5cud83d\x5cudeb3\x27,\x0a  \x27no_entry\x27:\x27\x5cu26d4\x5cufe0f\x27,\x0a  \x27no_entry_sign\x27:\x27\x5cud83d\x5cudeab\x27,\x0a  \x27no_mobile_phones\x27:\x27\x5cud83d\x5cudcf5\x27,\x0a  \x27no_mouth\x27:\x27\x5cud83d\x5cude36\x27,\x0a  \x27no_pedestrians\x27:\x27\x5cud83d\x5cudeb7\x27,\x0a  \x27no_smoking\x27:\x27\x5cud83d\x5cudead\x27,\x0a  \x27non-potable_water\x27:\x27\x5cud83d\x5cudeb1\x27,\x0a  \x27nose\x27:\x27\x5cud83d\x5cudc43\x27,\x0a  \x27notebook\x27:\x27\x5cud83d\x5cudcd3\x27,\x0a  \x27notebook_with_decorative_cover\x27:\x27\x5cud83d\x5cudcd4\x27,\x0a  \x27notes\x27:\x27\x5cud83c\x5cudfb6\x27,\x0a  \x27nut_and_bolt\x27:\x27\x5cud83d\x5cudd29\x27,\x0a  \x27o\x27:\x27\x5cu2b55\x5cufe0f\x27,\x0a  \x27o2\x27:\x27\x5cud83c\x5cudd7e\x5cufe0f\x27,\x0a  \x27ocean\x27:\x27\x5cud83c\x5cudf0a\x27,\x0a  \x27octopus\x27:\x27\x5cud83d\x5cudc19\x27,\x0a  \x27oden\x27:\x27\x5cud83c\x5cudf62\x27,\x0a  \x27office\x27:\x27\x5cud83c\x5cudfe2\x27,\x0a  \x27oil_drum\x27:\x27\x5cud83d\x5cudee2\x27,\x0a  \x27ok\x27:\x27\x5cud83c\x5cudd97\x27,\x0a  \x27ok_hand\x27:\x27\x5cud83d\x5cudc4c\x27,\x0a  \x27ok_man\x27:\x27\x5cud83d\x5cude46&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27ok_woman\x27:\x27\x5cud83d\x5cude46\x27,\x0a  \x27old_key\x27:\x27\x5cud83d\x5cudddd\x27,\x0a  \x27older_man\x27:\x27\x5cud83d\x5cudc74\x27,\x0a  \x27older_woman\x27:\x27\x5cud83d\x5cudc75\x27,\x0a  \x27om\x27:\x27\x5cud83d\x5cudd49\x27,\x0a  \x27on\x27:\x27\x5cud83d\x5cudd1b\x27,\x0a  \x27oncoming_automobile\x27:\x27\x5cud83d\x5cude98\x27,\x0a  \x27oncoming_bus\x27:\x27\x5cud83d\x5cude8d\x27,\x0a  \x27oncoming_police_car\x27:\x27\x5cud83d\x5cude94\x27,\x0a  \x27oncoming_taxi\x27:\x27\x5cud83d\x5cude96\x27,\x0a  \x27open_file_folder\x27:\x27\x5cud83d\x5cudcc2\x27,\x0a  \x27open_hands\x27:\x27\x5cud83d\x5cudc50\x27,\x0a  \x27open_mouth\x27:\x27\x5cud83d\x5cude2e\x27,\x0a  \x27open_umbrella\x27:\x27\x5cu2602\x5cufe0f\x27,\x0a  \x27ophiuchus\x27:\x27\x5cu26ce\x27,\x0a  \x27orange_book\x27:\x27\x5cud83d\x5cudcd9\x27,\x0a  \x27orthodox_cross\x27:\x27\x5cu2626\x5cufe0f\x27,\x0a  \x27outbox_tray\x27:\x27\x5cud83d\x5cudce4\x27,\x0a  \x27owl\x27:\x27\x5cud83e\x5cudd89\x27,\x0a  \x27ox\x27:\x27\x5cud83d\x5cudc02\x27,\x0a  \x27package\x27:\x27\x5cud83d\x5cudce6\x27,\x0a  \x27page_facing_up\x27:\x27\x5cud83d\x5cudcc4\x27,\x0a  \x27page_with_curl\x27:\x27\x5cud83d\x5cudcc3\x27,\x0a  \x27pager\x27:\x27\x5cud83d\x5cudcdf\x27,\x0a  \x27paintbrush\x27:\x27\x5cud83d\x5cudd8c\x27,\x0a  \x27palm_tree\x27:\x27\x5cud83c\x5cudf34\x27,\x0a  \x27pancakes\x27:\x27\x5cud83e\x5cudd5e\x27,\x0a  \x27panda_face\x27:\x27\x5cud83d\x5cudc3c\x27,\x0a  \x27paperclip\x27:\x27\x5cud83d\x5cudcce\x27,\x0a  \x27paperclips\x27:\x27\x5cud83d\x5cudd87\x27,\x0a  \x27parasol_on_ground\x27:\x27\x5cu26f1\x27,\x0a  \x27parking\x27:\x27\x5cud83c\x5cudd7f\x5cufe0f\x27,\x0a  \x27part_alternation_mark\x27:\x27\x5cu303d\x5cufe0f\x27,\x0a  \x27partly_sunny\x27:\x27\x5cu26c5\x5cufe0f\x27,\x0a  \x27passenger_ship\x27:\x27\x5cud83d\x5cudef3\x27,\x0a  \x27passport_control\x27:\x27\x5cud83d\x5cudec2\x27,\x0a  \x27pause_button\x27:\x27\x5cu23f8\x27,\x0a  \x27peace_symbol\x27:\x27\x5cu262e\x5cufe0f\x27,\x0a  \x27peach\x27:\x27\x5cud83c\x5cudf51\x27,\x0a  \x27peanuts\x27:\x27\x5cud83e\x5cudd5c\x27,\x0a  \x27pear\x27:\x27\x5cud83c\x5cudf50\x27,\x0a  \x27pen\x27:\x27\x5cud83d\x5cudd8a\x27,\x0a  \x27pencil2\x27:\x27\x5cu270f\x5cufe0f\x27,\x0a  \x27penguin\x27:\x27\x5cud83d\x5cudc27\x27,\x0a  \x27pensive\x27:\x27\x5cud83d\x5cude14\x27,\x0a  \x27performing_arts\x27:\x27\x5cud83c\x5cudfad\x27,\x0a  \x27persevere\x27:\x27\x5cud83d\x5cude23\x27,\x0a  \x27person_fencing\x27:\x27\x5cud83e\x5cudd3a\x27,\x0a  \x27pouting_woman\x27:\x27\x5cud83d\x5cude4e\x27,\x0a  \x27phone\x27:\x27\x5cu260e\x5cufe0f\x27,\x0a  \x27pick\x27:\x27\x5cu26cf\x27,\x0a  \x27pig\x27:\x27\x5cud83d\x5cudc37\x27,\x0a  \x27pig2\x27:\x27\x5cud83d\x5cudc16\x27,\x0a  \x27pig_nose\x27:\x27\x5cud83d\x5cudc3d\x27,\x0a  \x27pill\x27:\x27\x5cud83d\x5cudc8a\x27,\x0a  \x27pineapple\x27:\x27\x5cud83c\x5cudf4d\x27,\x0a  \x27ping_pong\x27:\x27\x5cud83c\x5cudfd3\x27,\x0a  \x27pisces\x27:\x27\x5cu2653\x5cufe0f\x27,\x0a  \x27pizza\x27:\x27\x5cud83c\x5cudf55\x27,\x0a  \x27place_of_worship\x27:\x27\x5cud83d\x5cuded0\x27,\x0a  \x27plate_with_cutlery\x27:\x27\x5cud83c\x5cudf7d\x27,\x0a  \x27play_or_pause_button\x27:\x27\x5cu23ef\x27,\x0a  \x27point_down\x27:\x27\x5cud83d\x5cudc47\x27,\x0a  \x27point_left\x27:\x27\x5cud83d\x5cudc48\x27,\x0a  \x27point_right\x27:\x27\x5cud83d\x5cudc49\x27,\x0a  \x27point_up\x27:\x27\x5cu261d\x5cufe0f\x27,\x0a  \x27point_up_2\x27:\x27\x5cud83d\x5cudc46\x27,\x0a  \x27police_car\x27:\x27\x5cud83d\x5cude93\x27,\x0a  \x27policewoman\x27:\x27\x5cud83d\x5cudc6e&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27poodle\x27:\x27\x5cud83d\x5cudc29\x27,\x0a  \x27popcorn\x27:\x27\x5cud83c\x5cudf7f\x27,\x0a  \x27post_office\x27:\x27\x5cud83c\x5cudfe3\x27,\x0a  \x27postal_horn\x27:\x27\x5cud83d\x5cudcef\x27,\x0a  \x27postbox\x27:\x27\x5cud83d\x5cudcee\x27,\x0a  \x27potable_water\x27:\x27\x5cud83d\x5cudeb0\x27,\x0a  \x27potato\x27:\x27\x5cud83e\x5cudd54\x27,\x0a  \x27pouch\x27:\x27\x5cud83d\x5cudc5d\x27,\x0a  \x27poultry_leg\x27:\x27\x5cud83c\x5cudf57\x27,\x0a  \x27pound\x27:\x27\x5cud83d\x5cudcb7\x27,\x0a  \x27rage\x27:\x27\x5cud83d\x5cude21\x27,\x0a  \x27pouting_cat\x27:\x27\x5cud83d\x5cude3e\x27,\x0a  \x27pouting_man\x27:\x27\x5cud83d\x5cude4e&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27pray\x27:\x27\x5cud83d\x5cude4f\x27,\x0a  \x27prayer_beads\x27:\x27\x5cud83d\x5cudcff\x27,\x0a  \x27pregnant_woman\x27:\x27\x5cud83e\x5cudd30\x27,\x0a  \x27previous_track_button\x27:\x27\x5cu23ee\x27,\x0a  \x27prince\x27:\x27\x5cud83e\x5cudd34\x27,\x0a  \x27princess\x27:\x27\x5cud83d\x5cudc78\x27,\x0a  \x27printer\x27:\x27\x5cud83d\x5cudda8\x27,\x0a  \x27purple_heart\x27:\x27\x5cud83d\x5cudc9c\x27,\x0a  \x27purse\x27:\x27\x5cud83d\x5cudc5b\x27,\x0a  \x27pushpin\x27:\x27\x5cud83d\x5cudccc\x27,\x0a  \x27put_litter_in_its_place\x27:\x27\x5cud83d\x5cudeae\x27,\x0a  \x27question\x27:\x27\x5cu2753\x27,\x0a  \x27rabbit\x27:\x27\x5cud83d\x5cudc30\x27,\x0a  \x27rabbit2\x27:\x27\x5cud83d\x5cudc07\x27,\x0a  \x27racehorse\x27:\x27\x5cud83d\x5cudc0e\x27,\x0a  \x27racing_car\x27:\x27\x5cud83c\x5cudfce\x27,\x0a  \x27radio\x27:\x27\x5cud83d\x5cudcfb\x27,\x0a  \x27radio_button\x27:\x27\x5cud83d\x5cudd18\x27,\x0a  \x27radioactive\x27:\x27\x5cu2622\x5cufe0f\x27,\x0a  \x27railway_car\x27:\x27\x5cud83d\x5cude83\x27,\x0a  \x27railway_track\x27:\x27\x5cud83d\x5cudee4\x27,\x0a  \x27rainbow\x27:\x27\x5cud83c\x5cudf08\x27,\x0a  \x27rainbow_flag\x27:\x27\x5cud83c\x5cudff3\x5cufe0f&zwj;\x5cud83c\x5cudf08\x27,\x0a  \x27raised_back_of_hand\x27:\x27\x5cud83e\x5cudd1a\x27,\x0a  \x27raised_hand_with_fingers_splayed\x27:\x27\x5cud83d\x5cudd90\x27,\x0a  \x27raised_hands\x27:\x27\x5cud83d\x5cude4c\x27,\x0a  \x27raising_hand_woman\x27:\x27\x5cud83d\x5cude4b\x27,\x0a  \x27raising_hand_man\x27:\x27\x5cud83d\x5cude4b&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27ram\x27:\x27\x5cud83d\x5cudc0f\x27,\x0a  \x27ramen\x27:\x27\x5cud83c\x5cudf5c\x27,\x0a  \x27rat\x27:\x27\x5cud83d\x5cudc00\x27,\x0a  \x27record_button\x27:\x27\x5cu23fa\x27,\x0a  \x27recycle\x27:\x27\x5cu267b\x5cufe0f\x27,\x0a  \x27red_circle\x27:\x27\x5cud83d\x5cudd34\x27,\x0a  \x27registered\x27:\x27\x5cu00ae\x5cufe0f\x27,\x0a  \x27relaxed\x27:\x27\x5cu263a\x5cufe0f\x27,\x0a  \x27relieved\x27:\x27\x5cud83d\x5cude0c\x27,\x0a  \x27reminder_ribbon\x27:\x27\x5cud83c\x5cudf97\x27,\x0a  \x27repeat\x27:\x27\x5cud83d\x5cudd01\x27,\x0a  \x27repeat_one\x27:\x27\x5cud83d\x5cudd02\x27,\x0a  \x27rescue_worker_helmet\x27:\x27\x5cu26d1\x27,\x0a  \x27restroom\x27:\x27\x5cud83d\x5cudebb\x27,\x0a  \x27revolving_hearts\x27:\x27\x5cud83d\x5cudc9e\x27,\x0a  \x27rewind\x27:\x27\x5cu23ea\x27,\x0a  \x27rhinoceros\x27:\x27\x5cud83e\x5cudd8f\x27,\x0a  \x27ribbon\x27:\x27\x5cud83c\x5cudf80\x27,\x0a  \x27rice\x27:\x27\x5cud83c\x5cudf5a\x27,\x0a  \x27rice_ball\x27:\x27\x5cud83c\x5cudf59\x27,\x0a  \x27rice_cracker\x27:\x27\x5cud83c\x5cudf58\x27,\x0a  \x27rice_scene\x27:\x27\x5cud83c\x5cudf91\x27,\x0a  \x27right_anger_bubble\x27:\x27\x5cud83d\x5cuddef\x27,\x0a  \x27ring\x27:\x27\x5cud83d\x5cudc8d\x27,\x0a  \x27robot\x27:\x27\x5cud83e\x5cudd16\x27,\x0a  \x27rocket\x27:\x27\x5cud83d\x5cude80\x27,\x0a  \x27rofl\x27:\x27\x5cud83e\x5cudd23\x27,\x0a  \x27roll_eyes\x27:\x27\x5cud83d\x5cude44\x27,\x0a  \x27roller_coaster\x27:\x27\x5cud83c\x5cudfa2\x27,\x0a  \x27rooster\x27:\x27\x5cud83d\x5cudc13\x27,\x0a  \x27rose\x27:\x27\x5cud83c\x5cudf39\x27,\x0a  \x27rosette\x27:\x27\x5cud83c\x5cudff5\x27,\x0a  \x27rotating_light\x27:\x27\x5cud83d\x5cudea8\x27,\x0a  \x27round_pushpin\x27:\x27\x5cud83d\x5cudccd\x27,\x0a  \x27rowing_man\x27:\x27\x5cud83d\x5cudea3\x27,\x0a  \x27rowing_woman\x27:\x27\x5cud83d\x5cudea3&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27rugby_football\x27:\x27\x5cud83c\x5cudfc9\x27,\x0a  \x27running_man\x27:\x27\x5cud83c\x5cudfc3\x27,\x0a  \x27running_shirt_with_sash\x27:\x27\x5cud83c\x5cudfbd\x27,\x0a  \x27running_woman\x27:\x27\x5cud83c\x5cudfc3&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27sa\x27:\x27\x5cud83c\x5cude02\x5cufe0f\x27,\x0a  \x27sagittarius\x27:\x27\x5cu2650\x5cufe0f\x27,\x0a  \x27sake\x27:\x27\x5cud83c\x5cudf76\x27,\x0a  \x27sandal\x27:\x27\x5cud83d\x5cudc61\x27,\x0a  \x27santa\x27:\x27\x5cud83c\x5cudf85\x27,\x0a  \x27satellite\x27:\x27\x5cud83d\x5cudce1\x27,\x0a  \x27saxophone\x27:\x27\x5cud83c\x5cudfb7\x27,\x0a  \x27school\x27:\x27\x5cud83c\x5cudfeb\x27,\x0a  \x27school_satchel\x27:\x27\x5cud83c\x5cudf92\x27,\x0a  \x27scissors\x27:\x27\x5cu2702\x5cufe0f\x27,\x0a  \x27scorpion\x27:\x27\x5cud83e\x5cudd82\x27,\x0a  \x27scorpius\x27:\x27\x5cu264f\x5cufe0f\x27,\x0a  \x27scream\x27:\x27\x5cud83d\x5cude31\x27,\x0a  \x27scream_cat\x27:\x27\x5cud83d\x5cude40\x27,\x0a  \x27scroll\x27:\x27\x5cud83d\x5cudcdc\x27,\x0a  \x27seat\x27:\x27\x5cud83d\x5cudcba\x27,\x0a  \x27secret\x27:\x27\x5cu3299\x5cufe0f\x27,\x0a  \x27see_no_evil\x27:\x27\x5cud83d\x5cude48\x27,\x0a  \x27seedling\x27:\x27\x5cud83c\x5cudf31\x27,\x0a  \x27selfie\x27:\x27\x5cud83e\x5cudd33\x27,\x0a  \x27shallow_pan_of_food\x27:\x27\x5cud83e\x5cudd58\x27,\x0a  \x27shamrock\x27:\x27\x5cu2618\x5cufe0f\x27,\x0a  \x27shark\x27:\x27\x5cud83e\x5cudd88\x27,\x0a  \x27shaved_ice\x27:\x27\x5cud83c\x5cudf67\x27,\x0a  \x27sheep\x27:\x27\x5cud83d\x5cudc11\x27,\x0a  \x27shell\x27:\x27\x5cud83d\x5cudc1a\x27,\x0a  \x27shield\x27:\x27\x5cud83d\x5cudee1\x27,\x0a  \x27shinto_shrine\x27:\x27\x5cu26e9\x27,\x0a  \x27ship\x27:\x27\x5cud83d\x5cudea2\x27,\x0a  \x27shirt\x27:\x27\x5cud83d\x5cudc55\x27,\x0a  \x27shopping\x27:\x27\x5cud83d\x5cudecd\x27,\x0a  \x27shopping_cart\x27:\x27\x5cud83d\x5cuded2\x27,\x0a  \x27shower\x27:\x27\x5cud83d\x5cudebf\x27,\x0a  \x27shrimp\x27:\x27\x5cud83e\x5cudd90\x27,\x0a  \x27signal_strength\x27:\x27\x5cud83d\x5cudcf6\x27,\x0a  \x27six_pointed_star\x27:\x27\x5cud83d\x5cudd2f\x27,\x0a  \x27ski\x27:\x27\x5cud83c\x5cudfbf\x27,\x0a  \x27skier\x27:\x27\x5cu26f7\x27,\x0a  \x27skull\x27:\x27\x5cud83d\x5cudc80\x27,\x0a  \x27skull_and_crossbones\x27:\x27\x5cu2620\x5cufe0f\x27,\x0a  \x27sleeping\x27:\x27\x5cud83d\x5cude34\x27,\x0a  \x27sleeping_bed\x27:\x27\x5cud83d\x5cudecc\x27,\x0a  \x27sleepy\x27:\x27\x5cud83d\x5cude2a\x27,\x0a  \x27slightly_frowning_face\x27:\x27\x5cud83d\x5cude41\x27,\x0a  \x27slightly_smiling_face\x27:\x27\x5cud83d\x5cude42\x27,\x0a  \x27slot_machine\x27:\x27\x5cud83c\x5cudfb0\x27,\x0a  \x27small_airplane\x27:\x27\x5cud83d\x5cudee9\x27,\x0a  \x27small_blue_diamond\x27:\x27\x5cud83d\x5cudd39\x27,\x0a  \x27small_orange_diamond\x27:\x27\x5cud83d\x5cudd38\x27,\x0a  \x27small_red_triangle\x27:\x27\x5cud83d\x5cudd3a\x27,\x0a  \x27small_red_triangle_down\x27:\x27\x5cud83d\x5cudd3b\x27,\x0a  \x27smile\x27:\x27\x5cud83d\x5cude04\x27,\x0a  \x27smile_cat\x27:\x27\x5cud83d\x5cude38\x27,\x0a  \x27smiley\x27:\x27\x5cud83d\x5cude03\x27,\x0a  \x27smiley_cat\x27:\x27\x5cud83d\x5cude3a\x27,\x0a  \x27smiling_imp\x27:\x27\x5cud83d\x5cude08\x27,\x0a  \x27smirk\x27:\x27\x5cud83d\x5cude0f\x27,\x0a  \x27smirk_cat\x27:\x27\x5cud83d\x5cude3c\x27,\x0a  \x27smoking\x27:\x27\x5cud83d\x5cudeac\x27,\x0a  \x27snail\x27:\x27\x5cud83d\x5cudc0c\x27,\x0a  \x27snake\x27:\x27\x5cud83d\x5cudc0d\x27,\x0a  \x27sneezing_face\x27:\x27\x5cud83e\x5cudd27\x27,\x0a  \x27snowboarder\x27:\x27\x5cud83c\x5cudfc2\x27,\x0a  \x27snowflake\x27:\x27\x5cu2744\x5cufe0f\x27,\x0a  \x27snowman\x27:\x27\x5cu26c4\x5cufe0f\x27,\x0a  \x27snowman_with_snow\x27:\x27\x5cu2603\x5cufe0f\x27,\x0a  \x27sob\x27:\x27\x5cud83d\x5cude2d\x27,\x0a  \x27soccer\x27:\x27\x5cu26bd\x5cufe0f\x27,\x0a  \x27soon\x27:\x27\x5cud83d\x5cudd1c\x27,\x0a  \x27sos\x27:\x27\x5cud83c\x5cudd98\x27,\x0a  \x27sound\x27:\x27\x5cud83d\x5cudd09\x27,\x0a  \x27space_invader\x27:\x27\x5cud83d\x5cudc7e\x27,\x0a  \x27spades\x27:\x27\x5cu2660\x5cufe0f\x27,\x0a  \x27spaghetti\x27:\x27\x5cud83c\x5cudf5d\x27,\x0a  \x27sparkle\x27:\x27\x5cu2747\x5cufe0f\x27,\x0a  \x27sparkler\x27:\x27\x5cud83c\x5cudf87\x27,\x0a  \x27sparkles\x27:\x27\x5cu2728\x27,\x0a  \x27sparkling_heart\x27:\x27\x5cud83d\x5cudc96\x27,\x0a  \x27speak_no_evil\x27:\x27\x5cud83d\x5cude4a\x27,\x0a  \x27speaker\x27:\x27\x5cud83d\x5cudd08\x27,\x0a  \x27speaking_head\x27:\x27\x5cud83d\x5cudde3\x27,\x0a  \x27speech_balloon\x27:\x27\x5cud83d\x5cudcac\x27,\x0a  \x27speedboat\x27:\x27\x5cud83d\x5cudea4\x27,\x0a  \x27spider\x27:\x27\x5cud83d\x5cudd77\x27,\x0a  \x27spider_web\x27:\x27\x5cud83d\x5cudd78\x27,\x0a  \x27spiral_calendar\x27:\x27\x5cud83d\x5cuddd3\x27,\x0a  \x27spiral_notepad\x27:\x27\x5cud83d\x5cuddd2\x27,\x0a  \x27spoon\x27:\x27\x5cud83e\x5cudd44\x27,\x0a  \x27squid\x27:\x27\x5cud83e\x5cudd91\x27,\x0a  \x27stadium\x27:\x27\x5cud83c\x5cudfdf\x27,\x0a  \x27star\x27:\x27\x5cu2b50\x5cufe0f\x27,\x0a  \x27star2\x27:\x27\x5cud83c\x5cudf1f\x27,\x0a  \x27star_and_crescent\x27:\x27\x5cu262a\x5cufe0f\x27,\x0a  \x27star_of_david\x27:\x27\x5cu2721\x5cufe0f\x27,\x0a  \x27stars\x27:\x27\x5cud83c\x5cudf20\x27,\x0a  \x27station\x27:\x27\x5cud83d\x5cude89\x27,\x0a  \x27statue_of_liberty\x27:\x27\x5cud83d\x5cuddfd\x27,\x0a  \x27steam_locomotive\x27:\x27\x5cud83d\x5cude82\x27,\x0a  \x27stew\x27:\x27\x5cud83c\x5cudf72\x27,\x0a  \x27stop_button\x27:\x27\x5cu23f9\x27,\x0a  \x27stop_sign\x27:\x27\x5cud83d\x5cuded1\x27,\x0a  \x27stopwatch\x27:\x27\x5cu23f1\x27,\x0a  \x27straight_ruler\x27:\x27\x5cud83d\x5cudccf\x27,\x0a  \x27strawberry\x27:\x27\x5cud83c\x5cudf53\x27,\x0a  \x27stuck_out_tongue\x27:\x27\x5cud83d\x5cude1b\x27,\x0a  \x27stuck_out_tongue_closed_eyes\x27:\x27\x5cud83d\x5cude1d\x27,\x0a  \x27stuck_out_tongue_winking_eye\x27:\x27\x5cud83d\x5cude1c\x27,\x0a  \x27studio_microphone\x27:\x27\x5cud83c\x5cudf99\x27,\x0a  \x27stuffed_flatbread\x27:\x27\x5cud83e\x5cudd59\x27,\x0a  \x27sun_behind_large_cloud\x27:\x27\x5cud83c\x5cudf25\x27,\x0a  \x27sun_behind_rain_cloud\x27:\x27\x5cud83c\x5cudf26\x27,\x0a  \x27sun_behind_small_cloud\x27:\x27\x5cud83c\x5cudf24\x27,\x0a  \x27sun_with_face\x27:\x27\x5cud83c\x5cudf1e\x27,\x0a  \x27sunflower\x27:\x27\x5cud83c\x5cudf3b\x27,\x0a  \x27sunglasses\x27:\x27\x5cud83d\x5cude0e\x27,\x0a  \x27sunny\x27:\x27\x5cu2600\x5cufe0f\x27,\x0a  \x27sunrise\x27:\x27\x5cud83c\x5cudf05\x27,\x0a  \x27sunrise_over_mountains\x27:\x27\x5cud83c\x5cudf04\x27,\x0a  \x27surfing_man\x27:\x27\x5cud83c\x5cudfc4\x27,\x0a  \x27surfing_woman\x27:\x27\x5cud83c\x5cudfc4&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27sushi\x27:\x27\x5cud83c\x5cudf63\x27,\x0a  \x27suspension_railway\x27:\x27\x5cud83d\x5cude9f\x27,\x0a  \x27sweat\x27:\x27\x5cud83d\x5cude13\x27,\x0a  \x27sweat_drops\x27:\x27\x5cud83d\x5cudca6\x27,\x0a  \x27sweat_smile\x27:\x27\x5cud83d\x5cude05\x27,\x0a  \x27sweet_potato\x27:\x27\x5cud83c\x5cudf60\x27,\x0a  \x27swimming_man\x27:\x27\x5cud83c\x5cudfca\x27,\x0a  \x27swimming_woman\x27:\x27\x5cud83c\x5cudfca&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27symbols\x27:\x27\x5cud83d\x5cudd23\x27,\x0a  \x27synagogue\x27:\x27\x5cud83d\x5cudd4d\x27,\x0a  \x27syringe\x27:\x27\x5cud83d\x5cudc89\x27,\x0a  \x27taco\x27:\x27\x5cud83c\x5cudf2e\x27,\x0a  \x27tada\x27:\x27\x5cud83c\x5cudf89\x27,\x0a  \x27tanabata_tree\x27:\x27\x5cud83c\x5cudf8b\x27,\x0a  \x27taurus\x27:\x27\x5cu2649\x5cufe0f\x27,\x0a  \x27taxi\x27:\x27\x5cud83d\x5cude95\x27,\x0a  \x27tea\x27:\x27\x5cud83c\x5cudf75\x27,\x0a  \x27telephone_receiver\x27:\x27\x5cud83d\x5cudcde\x27,\x0a  \x27telescope\x27:\x27\x5cud83d\x5cudd2d\x27,\x0a  \x27tennis\x27:\x27\x5cud83c\x5cudfbe\x27,\x0a  \x27tent\x27:\x27\x5cu26fa\x5cufe0f\x27,\x0a  \x27thermometer\x27:\x27\x5cud83c\x5cudf21\x27,\x0a  \x27thinking\x27:\x27\x5cud83e\x5cudd14\x27,\x0a  \x27thought_balloon\x27:\x27\x5cud83d\x5cudcad\x27,\x0a  \x27ticket\x27:\x27\x5cud83c\x5cudfab\x27,\x0a  \x27tickets\x27:\x27\x5cud83c\x5cudf9f\x27,\x0a  \x27tiger\x27:\x27\x5cud83d\x5cudc2f\x27,\x0a  \x27tiger2\x27:\x27\x5cud83d\x5cudc05\x27,\x0a  \x27timer_clock\x27:\x27\x5cu23f2\x27,\x0a  \x27tipping_hand_man\x27:\x27\x5cud83d\x5cudc81&zwj;\x5cu2642\x5cufe0f\x27,\x0a  \x27tired_face\x27:\x27\x5cud83d\x5cude2b\x27,\x0a  \x27tm\x27:\x27\x5cu2122\x5cufe0f\x27,\x0a  \x27toilet\x27:\x27\x5cud83d\x5cudebd\x27,\x0a  \x27tokyo_tower\x27:\x27\x5cud83d\x5cuddfc\x27,\x0a  \x27tomato\x27:\x27\x5cud83c\x5cudf45\x27,\x0a  \x27tongue\x27:\x27\x5cud83d\x5cudc45\x27,\x0a  \x27top\x27:\x27\x5cud83d\x5cudd1d\x27,\x0a  \x27tophat\x27:\x27\x5cud83c\x5cudfa9\x27,\x0a  \x27tornado\x27:\x27\x5cud83c\x5cudf2a\x27,\x0a  \x27trackball\x27:\x27\x5cud83d\x5cuddb2\x27,\x0a  \x27tractor\x27:\x27\x5cud83d\x5cude9c\x27,\x0a  \x27traffic_light\x27:\x27\x5cud83d\x5cudea5\x27,\x0a  \x27train\x27:\x27\x5cud83d\x5cude8b\x27,\x0a  \x27train2\x27:\x27\x5cud83d\x5cude86\x27,\x0a  \x27tram\x27:\x27\x5cud83d\x5cude8a\x27,\x0a  \x27triangular_flag_on_post\x27:\x27\x5cud83d\x5cudea9\x27,\x0a  \x27triangular_ruler\x27:\x27\x5cud83d\x5cudcd0\x27,\x0a  \x27trident\x27:\x27\x5cud83d\x5cudd31\x27,\x0a  \x27triumph\x27:\x27\x5cud83d\x5cude24\x27,\x0a  \x27trolleybus\x27:\x27\x5cud83d\x5cude8e\x27,\x0a  \x27trophy\x27:\x27\x5cud83c\x5cudfc6\x27,\x0a  \x27tropical_drink\x27:\x27\x5cud83c\x5cudf79\x27,\x0a  \x27tropical_fish\x27:\x27\x5cud83d\x5cudc20\x27,\x0a  \x27truck\x27:\x27\x5cud83d\x5cude9a\x27,\x0a  \x27trumpet\x27:\x27\x5cud83c\x5cudfba\x27,\x0a  \x27tulip\x27:\x27\x5cud83c\x5cudf37\x27,\x0a  \x27tumbler_glass\x27:\x27\x5cud83e\x5cudd43\x27,\x0a  \x27turkey\x27:\x27\x5cud83e\x5cudd83\x27,\x0a  \x27turtle\x27:\x27\x5cud83d\x5cudc22\x27,\x0a  \x27tv\x27:\x27\x5cud83d\x5cudcfa\x27,\x0a  \x27twisted_rightwards_arrows\x27:\x27\x5cud83d\x5cudd00\x27,\x0a  \x27two_hearts\x27:\x27\x5cud83d\x5cudc95\x27,\x0a  \x27two_men_holding_hands\x27:\x27\x5cud83d\x5cudc6c\x27,\x0a  \x27two_women_holding_hands\x27:\x27\x5cud83d\x5cudc6d\x27,\x0a  \x27u5272\x27:\x27\x5cud83c\x5cude39\x27,\x0a  \x27u5408\x27:\x27\x5cud83c\x5cude34\x27,\x0a  \x27u55b6\x27:\x27\x5cud83c\x5cude3a\x27,\x0a  \x27u6307\x27:\x27\x5cud83c\x5cude2f\x5cufe0f\x27,\x0a  \x27u6708\x27:\x27\x5cud83c\x5cude37\x5cufe0f\x27,\x0a  \x27u6709\x27:\x27\x5cud83c\x5cude36\x27,\x0a  \x27u6e80\x27:\x27\x5cud83c\x5cude35\x27,\x0a  \x27u7121\x27:\x27\x5cud83c\x5cude1a\x5cufe0f\x27,\x0a  \x27u7533\x27:\x27\x5cud83c\x5cude38\x27,\x0a  \x27u7981\x27:\x27\x5cud83c\x5cude32\x27,\x0a  \x27u7a7a\x27:\x27\x5cud83c\x5cude33\x27,\x0a  \x27umbrella\x27:\x27\x5cu2614\x5cufe0f\x27,\x0a  \x27unamused\x27:\x27\x5cud83d\x5cude12\x27,\x0a  \x27underage\x27:\x27\x5cud83d\x5cudd1e\x27,\x0a  \x27unicorn\x27:\x27\x5cud83e\x5cudd84\x27,\x0a  \x27unlock\x27:\x27\x5cud83d\x5cudd13\x27,\x0a  \x27up\x27:\x27\x5cud83c\x5cudd99\x27,\x0a  \x27upside_down_face\x27:\x27\x5cud83d\x5cude43\x27,\x0a  \x27v\x27:\x27\x5cu270c\x5cufe0f\x27,\x0a  \x27vertical_traffic_light\x27:\x27\x5cud83d\x5cudea6\x27,\x0a  \x27vhs\x27:\x27\x5cud83d\x5cudcfc\x27,\x0a  \x27vibration_mode\x27:\x27\x5cud83d\x5cudcf3\x27,\x0a  \x27video_camera\x27:\x27\x5cud83d\x5cudcf9\x27,\x0a  \x27video_game\x27:\x27\x5cud83c\x5cudfae\x27,\x0a  \x27violin\x27:\x27\x5cud83c\x5cudfbb\x27,\x0a  \x27virgo\x27:\x27\x5cu264d\x5cufe0f\x27,\x0a  \x27volcano\x27:\x27\x5cud83c\x5cudf0b\x27,\x0a  \x27volleyball\x27:\x27\x5cud83c\x5cudfd0\x27,\x0a  \x27vs\x27:\x27\x5cud83c\x5cudd9a\x27,\x0a  \x27vulcan_salute\x27:\x27\x5cud83d\x5cudd96\x27,\x0a  \x27walking_man\x27:\x27\x5cud83d\x5cudeb6\x27,\x0a  \x27walking_woman\x27:\x27\x5cud83d\x5cudeb6&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27waning_crescent_moon\x27:\x27\x5cud83c\x5cudf18\x27,\x0a  \x27waning_gibbous_moon\x27:\x27\x5cud83c\x5cudf16\x27,\x0a  \x27warning\x27:\x27\x5cu26a0\x5cufe0f\x27,\x0a  \x27wastebasket\x27:\x27\x5cud83d\x5cuddd1\x27,\x0a  \x27watch\x27:\x27\x5cu231a\x5cufe0f\x27,\x0a  \x27water_buffalo\x27:\x27\x5cud83d\x5cudc03\x27,\x0a  \x27watermelon\x27:\x27\x5cud83c\x5cudf49\x27,\x0a  \x27wave\x27:\x27\x5cud83d\x5cudc4b\x27,\x0a  \x27wavy_dash\x27:\x27\x5cu3030\x5cufe0f\x27,\x0a  \x27waxing_crescent_moon\x27:\x27\x5cud83c\x5cudf12\x27,\x0a  \x27wc\x27:\x27\x5cud83d\x5cudebe\x27,\x0a  \x27weary\x27:\x27\x5cud83d\x5cude29\x27,\x0a  \x27wedding\x27:\x27\x5cud83d\x5cudc92\x27,\x0a  \x27weight_lifting_man\x27:\x27\x5cud83c\x5cudfcb\x5cufe0f\x27,\x0a  \x27weight_lifting_woman\x27:\x27\x5cud83c\x5cudfcb\x5cufe0f&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27whale\x27:\x27\x5cud83d\x5cudc33\x27,\x0a  \x27whale2\x27:\x27\x5cud83d\x5cudc0b\x27,\x0a  \x27wheel_of_dharma\x27:\x27\x5cu2638\x5cufe0f\x27,\x0a  \x27wheelchair\x27:\x27\x5cu267f\x5cufe0f\x27,\x0a  \x27white_check_mark\x27:\x27\x5cu2705\x27,\x0a  \x27white_circle\x27:\x27\x5cu26aa\x5cufe0f\x27,\x0a  \x27white_flag\x27:\x27\x5cud83c\x5cudff3\x5cufe0f\x27,\x0a  \x27white_flower\x27:\x27\x5cud83d\x5cudcae\x27,\x0a  \x27white_large_square\x27:\x27\x5cu2b1c\x5cufe0f\x27,\x0a  \x27white_medium_small_square\x27:\x27\x5cu25fd\x5cufe0f\x27,\x0a  \x27white_medium_square\x27:\x27\x5cu25fb\x5cufe0f\x27,\x0a  \x27white_small_square\x27:\x27\x5cu25ab\x5cufe0f\x27,\x0a  \x27white_square_button\x27:\x27\x5cud83d\x5cudd33\x27,\x0a  \x27wilted_flower\x27:\x27\x5cud83e\x5cudd40\x27,\x0a  \x27wind_chime\x27:\x27\x5cud83c\x5cudf90\x27,\x0a  \x27wind_face\x27:\x27\x5cud83c\x5cudf2c\x27,\x0a  \x27wine_glass\x27:\x27\x5cud83c\x5cudf77\x27,\x0a  \x27wink\x27:\x27\x5cud83d\x5cude09\x27,\x0a  \x27wolf\x27:\x27\x5cud83d\x5cudc3a\x27,\x0a  \x27woman\x27:\x27\x5cud83d\x5cudc69\x27,\x0a  \x27woman_artist\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudfa8\x27,\x0a  \x27woman_astronaut\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cude80\x27,\x0a  \x27woman_cartwheeling\x27:\x27\x5cud83e\x5cudd38&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_cook\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudf73\x27,\x0a  \x27woman_facepalming\x27:\x27\x5cud83e\x5cudd26&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_factory_worker\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudfed\x27,\x0a  \x27woman_farmer\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudf3e\x27,\x0a  \x27woman_firefighter\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cude92\x27,\x0a  \x27woman_health_worker\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cu2695\x5cufe0f\x27,\x0a  \x27woman_judge\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cu2696\x5cufe0f\x27,\x0a  \x27woman_juggling\x27:\x27\x5cud83e\x5cudd39&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_mechanic\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudd27\x27,\x0a  \x27woman_office_worker\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudcbc\x27,\x0a  \x27woman_pilot\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cu2708\x5cufe0f\x27,\x0a  \x27woman_playing_handball\x27:\x27\x5cud83e\x5cudd3e&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_playing_water_polo\x27:\x27\x5cud83e\x5cudd3d&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_scientist\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudd2c\x27,\x0a  \x27woman_shrugging\x27:\x27\x5cud83e\x5cudd37&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27woman_singer\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudfa4\x27,\x0a  \x27woman_student\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudf93\x27,\x0a  \x27woman_teacher\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83c\x5cudfeb\x27,\x0a  \x27woman_technologist\x27:\x27\x5cud83d\x5cudc69&zwj;\x5cud83d\x5cudcbb\x27,\x0a  \x27woman_with_turban\x27:\x27\x5cud83d\x5cudc73&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27womans_clothes\x27:\x27\x5cud83d\x5cudc5a\x27,\x0a  \x27womans_hat\x27:\x27\x5cud83d\x5cudc52\x27,\x0a  \x27women_wrestling\x27:\x27\x5cud83e\x5cudd3c&zwj;\x5cu2640\x5cufe0f\x27,\x0a  \x27womens\x27:\x27\x5cud83d\x5cudeba\x27,\x0a  \x27world_map\x27:\x27\x5cud83d\x5cuddfa\x27,\x0a  \x27worried\x27:\x27\x5cud83d\x5cude1f\x27,\x0a  \x27wrench\x27:\x27\x5cud83d\x5cudd27\x27,\x0a  \x27writing_hand\x27:\x27\x5cu270d\x5cufe0f\x27,\x0a  \x27x\x27:\x27\x5cu274c\x27,\x0a  \x27yellow_heart\x27:\x27\x5cud83d\x5cudc9b\x27,\x0a  \x27yen\x27:\x27\x5cud83d\x5cudcb4\x27,\x0a  \x27yin_yang\x27:\x27\x5cu262f\x5cufe0f\x27,\x0a  \x27yum\x27:\x27\x5cud83d\x5cude0b\x27,\x0a  \x27zap\x27:\x27\x5cu26a1\x5cufe0f\x27,\x0a  \x27zipper_mouth_face\x27:\x27\x5cud83e\x5cudd10\x27,\x0a  \x27zzz\x27:\x27\x5cud83d\x5cudca4\x27,\x0a\x0a  /* special emojis :P */\x0a  \x27octocat\x27:  \x27\x3cimg alt=\x22:octocat:\x22 height=\x2220\x22 width=\x2220\x22 align=\x22absmiddle\x22 src=\x22https://assets-cdn.github.com/images/icons/emoji/octocat.png\x22\x3e\x27,\x0a  \x27showdown\x27: \x27\x3cspan style=\x22font-family: \x5c\x27Anonymous Pro\x5c\x27, monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\x22\x3eS\x3c/span\x3e\x27\x0a};\x0a\x0d\x0a/**\x0a * Created by Estevao on 31-05-2015.\x0a */\x0a\x0a/**\x0a * Showdown Converter class\x0a * @class\x0a * @param {object} [converterOptions]\x0a * @returns {Converter}\x0a */\x0ashowdown.Converter = function (converterOptions) {\x0a  \x27use strict\x27;\x0a\x0a  var\x0a      /**\x0a       * Options used by this converter\x0a       * @private\x0a       * @type {{}}\x0a       */\x0a      options = {},\x0a\x0a      /**\x0a       * Language extensions used by this converter\x0a       * @private\x0a       * @type {Array}\x0a       */\x0a      langExtensions = [],\x0a\x0a      /**\x0a       * Output modifiers extensions used by this converter\x0a       * @private\x0a       * @type {Array}\x0a       */\x0a      outputModifiers = [],\x0a\x0a      /**\x0a       * Event listeners\x0a       * @private\x0a       * @type {{}}\x0a       */\x0a      listeners = {},\x0a\x0a      /**\x0a       * The flavor set in this converter\x0a       */\x0a      setConvFlavor = setFlavor,\x0a\x0a    /**\x0a     * Metadata of the document\x0a     * @type {{parsed: {}, raw: string, format: string}}\x0a     */\x0a      metadata = {\x0a        parsed: {},\x0a        raw: \x27\x27,\x0a        format: \x27\x27\x0a      };\x0a\x0a  _constructor();\x0a\x0a  /**\x0a   * Converter constructor\x0a   * @private\x0a   */\x0a  function _constructor () {\x0a    converterOptions = converterOptions || {};\x0a\x0a    for (var gOpt in globalOptions) {\x0a      if (globalOptions.hasOwnProperty(gOpt)) {\x0a        options[gOpt] = globalOptions[gOpt];\x0a      }\x0a    }\x0a\x0a    // Merge options\x0a    if (typeof converterOptions === \x27object\x27) {\x0a      for (var opt in converterOptions) {\x0a        if (converterOptions.hasOwnProperty(opt)) {\x0a          options[opt] = converterOptions[opt];\x0a        }\x0a      }\x0a    } else {\x0a      throw Error(\x27Converter expects the passed parameter to be an object, but \x27 + typeof converterOptions +\x0a      \x27 was passed instead.\x27);\x0a    }\x0a\x0a    if (options.extensions) {\x0a      showdown.helper.forEach(options.extensions, _parseExtension);\x0a    }\x0a  }\x0a\x0a  /**\x0a   * Parse extension\x0a   * @param {*} ext\x0a   * @param {string} [name=\x27\x27]\x0a   * @private\x0a   */\x0a  function _parseExtension (ext, name) {\x0a\x0a    name = name || null;\x0a    // If it\x27s a string, the extension was previously loaded\x0a    if (showdown.helper.isString(ext)) {\x0a      ext = showdown.helper.stdExtName(ext);\x0a      name = ext;\x0a\x0a      // LEGACY_SUPPORT CODE\x0a      if (showdown.extensions[ext]) {\x0a        console.warn(\x27DEPRECATION WARNING: \x27 + ext + \x27 is an old extension that uses a deprecated loading method.\x27 +\x0a          \x27Please inform the developer that the extension should be updated!\x27);\x0a        legacyExtensionLoading(showdown.extensions[ext], ext);\x0a        return;\x0a      // END LEGACY SUPPORT CODE\x0a\x0a      } else if (!showdown.helper.isUndefined(extensions[ext])) {\x0a        ext = extensions[ext];\x0a\x0a      } else {\x0a        throw Error(\x27Extension \x22\x27 + ext + \x27\x22 could not be loaded. It was either not found or is not a valid extension.\x27);\x0a      }\x0a    }\x0a\x0a    if (typeof ext === \x27function\x27) {\x0a      ext = ext();\x0a    }\x0a\x0a    if (!showdown.helper.isArray(ext)) {\x0a      ext = [ext];\x0a    }\x0a\x0a    var validExt = validate(ext, name);\x0a    if (!validExt.valid) {\x0a      throw Error(validExt.error);\x0a    }\x0a\x0a    for (var i = 0; i \x3c ext.length; ++i) {\x0a      switch (ext[i].type) {\x0a\x0a        case \x27lang\x27:\x0a          langExtensions.push(ext[i]);\x0a          break;\x0a\x0a        case \x27output\x27:\x0a          outputModifiers.push(ext[i]);\x0a          break;\x0a      }\x0a      if (ext[i].hasOwnProperty(\x27listeners\x27)) {\x0a        for (var ln in ext[i].listeners) {\x0a          if (ext[i].listeners.hasOwnProperty(ln)) {\x0a            listen(ln, ext[i].listeners[ln]);\x0a          }\x0a        }\x0a      }\x0a    }\x0a\x0a  }\x0a\x0a  /**\x0a   * LEGACY_SUPPORT\x0a   * @param {*} ext\x0a   * @param {string} name\x0a   */\x0a  function legacyExtensionLoading (ext, name) {\x0a    if (typeof ext === \x27function\x27) {\x0a      ext = ext(new showdown.Converter());\x0a    }\x0a    if (!showdown.helper.isArray(ext)) {\x0a      ext = [ext];\x0a    }\x0a    var valid = validate(ext, name);\x0a\x0a    if (!valid.valid) {\x0a      throw Error(valid.error);\x0a    }\x0a\x0a    for (var i = 0; i \x3c ext.length; ++i) {\x0a      switch (ext[i].type) {\x0a        case \x27lang\x27:\x0a          langExtensions.push(ext[i]);\x0a          break;\x0a        case \x27output\x27:\x0a          outputModifiers.push(ext[i]);\x0a          break;\x0a        default:// should never reach here\x0a          throw Error(\x27Extension loader error: Type unrecognized!!!\x27);\x0a      }\x0a    }\x0a  }\x0a\x0a  /**\x0a   * Listen to an event\x0a   * @param {string} name\x0a   * @param {function} callback\x0a   */\x0a  function listen (name, callback) {\x0a    if (!showdown.helper.isString(name)) {\x0a      throw Error(\x27Invalid argument in converter.listen() method: name must be a string, but \x27 + typeof name + \x27 given\x27);\x0a    }\x0a\x0a    if (typeof callback !== \x27function\x27) {\x0a      throw Error(\x27Invalid argument in converter.listen() method: callback must be a function, but \x27 + typeof callback + \x27 given\x27);\x0a    }\x0a\x0a    if (!listeners.hasOwnProperty(name)) {\x0a      listeners[name] = [];\x0a    }\x0a    listeners[name].push(callback);\x0a  }\x0a\x0a  function rTrimInputText (text) {\x0a    var rsp = text.match(/^\x5cs*/)[0].length,\x0a        rgx = new RegExp(\x27^\x5c\x5cs{0,\x27 + rsp + \x27}\x27, \x27gm\x27);\x0a    return text.replace(rgx, \x27\x27);\x0a  }\x0a\x0a  /**\x0a   * Dispatch an event\x0a   * @private\x0a   * @param {string} evtName Event name\x0a   * @param {string} text Text\x0a   * @param {{}} options Converter Options\x0a   * @param {{}} globals\x0a   * @returns {string}\x0a   */\x0a  this._dispatch = function dispatch (evtName, text, options, globals) {\x0a    if (listeners.hasOwnProperty(evtName)) {\x0a      for (var ei = 0; ei \x3c listeners[evtName].length; ++ei) {\x0a        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\x0a        if (nText && typeof nText !== \x27undefined\x27) {\x0a          text = nText;\x0a        }\x0a      }\x0a    }\x0a    return text;\x0a  };\x0a\x0a  /**\x0a   * Listen to an event\x0a   * @param {string} name\x0a   * @param {function} callback\x0a   * @returns {showdown.Converter}\x0a   */\x0a  this.listen = function (name, callback) {\x0a    listen(name, callback);\x0a    return this;\x0a  };\x0a\x0a  /**\x0a   * Converts a markdown string into HTML\x0a   * @param {string} text\x0a   * @returns {*}\x0a   */\x0a  this.makeHtml = function (text) {\x0a    //check if text is not falsy\x0a    if (!text) {\x0a      return text;\x0a    }\x0a\x0a    var globals = {\x0a      gHtmlBlocks:     [],\x0a      gHtmlMdBlocks:   [],\x0a      gHtmlSpans:      [],\x0a      gUrls:           {},\x0a      gTitles:         {},\x0a      gDimensions:     {},\x0a      gListLevel:      0,\x0a      hashLinkCounts:  {},\x0a      langExtensions:  langExtensions,\x0a      outputModifiers: outputModifiers,\x0a      converter:       this,\x0a      ghCodeBlocks:    [],\x0a      metadata: {\x0a        parsed: {},\x0a        raw: \x27\x27,\x0a        format: \x27\x27\x0a      }\x0a    };\x0a\x0a    // This lets us use \xc2\xa8 trema as an escape char to avoid md5 hashes\x0a    // The choice of character is arbitrary; anything that isn\x27t\x0a    // magic in Markdown will work.\x0a    text = text.replace(/\xc2\xa8/g, \x27\xc2\xa8T\x27);\x0a\x0a    // Replace $ with \xc2\xa8D\x0a    // RegExp interprets $ as a special character\x0a    // when it\x27s in a replacement string\x0a    text = text.replace(/\x5c$/g, \x27\xc2\xa8D\x27);\x0a\x0a    // Standardize line endings\x0a    text = text.replace(/\x5cr\x5cn/g, \x27\x5cn\x27); // DOS to Unix\x0a    text = text.replace(/\x5cr/g, \x27\x5cn\x27); // Mac to Unix\x0a\x0a    // Stardardize line spaces\x0a    text = text.replace(/\x5cu00A0/g, \x27&nbsp;\x27);\x0a\x0a    if (options.smartIndentationFix) {\x0a      text = rTrimInputText(text);\x0a    }\x0a\x0a    // Make sure text begins and ends with a couple of newlines:\x0a    text = \x27\x5cn\x5cn\x27 + text + \x27\x5cn\x5cn\x27;\x0a\x0a    // detab\x0a    text = showdown.subParser(\x27detab\x27)(text, options, globals);\x0a\x0a    /**\x0a     * Strip any lines consisting only of spaces and tabs.\x0a     * This makes subsequent regexs easier to write, because we can\x0a     * match consecutive blank lines with /\x5cn+/ instead of something\x0a     * contorted like /[ \x5ct]*\x5cn+/\x0a     */\x0a    text = text.replace(/^[ \x5ct]+$/mg, \x27\x27);\x0a\x0a    //run languageExtensions\x0a    showdown.helper.forEach(langExtensions, function (ext) {\x0a      text = showdown.subParser(\x27runExtension\x27)(ext, text, options, globals);\x0a    });\x0a\x0a    // run the sub parsers\x0a    text = showdown.subParser(\x27metadata\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27hashPreCodeTags\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27githubCodeBlocks\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27hashHTMLBlocks\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27hashCodeTags\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27stripLinkDefinitions\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27blockGamut\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27unhashHTMLSpans\x27)(text, options, globals);\x0a    text = showdown.subParser(\x27unescapeSpecialChars\x27)(text, options, globals);\x0a\x0a    // attacklab: Restore dollar signs\x0a    text = text.replace(/\xc2\xa8D/g, \x27$$\x27);\x0a\x0a    // attacklab: Restore tremas\x0a    text = text.replace(/\xc2\xa8T/g, \x27\xc2\xa8\x27);\x0a\x0a    // render a complete html document instead of a partial if the option is enabled\x0a    text = showdown.subParser(\x27completeHTMLDocument\x27)(text, options, globals);\x0a\x0a    // Run output modifiers\x0a    showdown.helper.forEach(outputModifiers, function (ext) {\x0a      text = showdown.subParser(\x27runExtension\x27)(ext, text, options, globals);\x0a    });\x0a\x0a    // update metadata\x0a    metadata = globals.metadata;\x0a    return text;\x0a  };\x0a\x0a  /**\x0a   * Converts an HTML string into a markdown string\x0a   * @param src\x0a   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.\x0a   * @returns {string}\x0a   */\x0a  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {\x0a\x0a    // replace \x5cr\x5cn with \x5cn\x0a    src = src.replace(/\x5cr\x5cn/g, \x27\x5cn\x27);\x0a    src = src.replace(/\x5cr/g, \x27\x5cn\x27); // old macs\x0a\x0a    // due to an edge case, we need to find this: \x3e \x3c\x0a    // to prevent removing of non silent white spaces\x0a    // ex: \x3cem\x3ethis is\x3c/em\x3e \x3cstrong\x3esparta\x3c/strong\x3e\x0a    src = src.replace(/\x3e[ \x5ct]+\x3c/, \x27\x3e\xc2\xa8NBSP;\x3c\x27);\x0a\x0a    if (!HTMLParser) {\x0a      if (window && window.document) {\x0a        HTMLParser = window.document;\x0a      } else {\x0a        throw new Error(\x27HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM\x27);\x0a      }\x0a    }\x0a\x0a    var doc = HTMLParser.createElement(\x27div\x27);\x0a    doc.innerHTML = src;\x0a\x0a    var globals = {\x0a      preList: substitutePreCodeTags(doc)\x0a    };\x0a\x0a    // remove all newlines and collapse spaces\x0a    clean(doc);\x0a\x0a    // some stuff, like accidental reference links must now be escaped\x0a    // TODO\x0a    // doc.innerHTML = doc.innerHTML.replace(/\x5c[[\x5cS\x5ct ]]/);\x0a\x0a    var nodes = doc.childNodes,\x0a        mdDoc = \x27\x27;\x0a\x0a    for (var i = 0; i \x3c nodes.length; i++) {\x0a      mdDoc += showdown.subParser(\x27makeMarkdown.node\x27)(nodes[i], globals);\x0a    }\x0a\x0a    function clean (node) {\x0a      for (var n = 0; n \x3c node.childNodes.length; ++n) {\x0a        var child = node.childNodes[n];\x0a        if (child.nodeType === 3) {\x0a          if (!/\x5cS/.test(child.nodeValue)) {\x0a            node.removeChild(child);\x0a            --n;\x0a          } else {\x0a            child.nodeValue = child.nodeValue.split(\x27\x5cn\x27).join(\x27 \x27);\x0a            child.nodeValue = child.nodeValue.replace(/(\x5cs)+/g, \x27$1\x27);\x0a          }\x0a        } else if (child.nodeType === 1) {\x0a          clean(child);\x0a        }\x0a      }\x0a    }\x0a\x0a    // find all pre tags and replace contents with placeholder\x0a    // we need this so that we can remove all indentation from html\x0a    // to ease up parsing\x0a    function substitutePreCodeTags (doc) {\x0a\x0a      var pres = doc.querySelectorAll(\x27pre\x27),\x0a          presPH = [];\x0a\x0a      for (var i = 0; i \x3c pres.length; ++i) {\x0a\x0a        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === \x27code\x27) {\x0a          var content = pres[i].firstChild.innerHTML.trim(),\x0a              language = pres[i].firstChild.getAttribute(\x27data-language\x27) || \x27\x27;\x0a\x0a          // if data-language attribute is not defined, then we look for class language-*\x0a          if (language === \x27\x27) {\x0a            var classes = pres[i].firstChild.className.split(\x27 \x27);\x0a            for (var c = 0; c \x3c classes.length; ++c) {\x0a              var matches = classes[c].match(/^language-(.+)$/);\x0a              if (matches !== null) {\x0a                language = matches[1];\x0a                break;\x0a              }\x0a            }\x0a          }\x0a\x0a          // unescape html entities in content\x0a          content = showdown.helper.unescapeHTMLEntities(content);\x0a\x0a          presPH.push(content);\x0a          pres[i].outerHTML = \x27\x3cprecode language=\x22\x27 + language + \x27\x22 precodenum=\x22\x27 + i.toString() + \x27\x22\x3e\x3c/precode\x3e\x27;\x0a        } else {\x0a          presPH.push(pres[i].innerHTML);\x0a          pres[i].innerHTML = \x27\x27;\x0a          pres[i].setAttribute(\x27prenum\x27, i.toString());\x0a        }\x0a      }\x0a      return presPH;\x0a    }\x0a\x0a    return mdDoc;\x0a  };\x0a\x0a  /**\x0a   * Set an option of this Converter instance\x0a   * @param {string} key\x0a   * @param {*} value\x0a   */\x0a  this.setOption = function (key, value) {\x0a    options[key] = value;\x0a  };\x0a\x0a  /**\x0a   * Get the option of this Converter instance\x0a   * @param {string} key\x0a   * @returns {*}\x0a   */\x0a  this.getOption = function (key) {\x0a    return options[key];\x0a  };\x0a\x0a  /**\x0a   * Get the options of this Converter instance\x0a   * @returns {{}}\x0a   */\x0a  this.getOptions = function () {\x0a    return options;\x0a  };\x0a\x0a  /**\x0a   * Add extension to THIS converter\x0a   * @param {{}} extension\x0a   * @param {string} [name=null]\x0a   */\x0a  this.addExtension = function (extension, name) {\x0a    name = name || null;\x0a    _parseExtension(extension, name);\x0a  };\x0a\x0a  /**\x0a   * Use a global registered extension with THIS converter\x0a   * @param {string} extensionName Name of the previously registered extension\x0a   */\x0a  this.useExtension = function (extensionName) {\x0a    _parseExtension(extensionName);\x0a  };\x0a\x0a  /**\x0a   * Set the flavor THIS converter should use\x0a   * @param {string} name\x0a   */\x0a  this.setFlavor = function (name) {\x0a    if (!flavor.hasOwnProperty(name)) {\x0a      throw Error(name + \x27 flavor was not found\x27);\x0a    }\x0a    var preset = flavor[name];\x0a    setConvFlavor = name;\x0a    for (var option in preset) {\x0a      if (preset.hasOwnProperty(option)) {\x0a        options[option] = preset[option];\x0a      }\x0a    }\x0a  };\x0a\x0a  /**\x0a   * Get the currently set flavor of this converter\x0a   * @returns {string}\x0a   */\x0a  this.getFlavor = function () {\x0a    return setConvFlavor;\x0a  };\x0a\x0a  /**\x0a   * Remove an extension from THIS converter.\x0a   * Note: This is a costly operation. It\x27s better to initialize a new converter\x0a   * and specify the extensions you wish to use\x0a   * @param {Array} extension\x0a   */\x0a  this.removeExtension = function (extension) {\x0a    if (!showdown.helper.isArray(extension)) {\x0a      extension = [extension];\x0a    }\x0a    for (var a = 0; a \x3c extension.length; ++a) {\x0a      var ext = extension[a];\x0a      for (var i = 0; i \x3c langExtensions.length; ++i) {\x0a        if (langExtensions[i] === ext) {\x0a          langExtensions[i].splice(i, 1);\x0a        }\x0a      }\x0a      for (var ii = 0; ii \x3c outputModifiers.length; ++i) {\x0a        if (outputModifiers[ii] === ext) {\x0a          outputModifiers[ii].splice(i, 1);\x0a        }\x0a      }\x0a    }\x0a  };\x0a\x0a  /**\x0a   * Get all extension of THIS converter\x0a   * @returns {{language: Array, output: Array}}\x0a   */\x0a  this.getAllExtensions = function () {\x0a    return {\x0a      language: langExtensions,\x0a      output: outputModifiers\x0a    };\x0a  };\x0a\x0a  /**\x0a   * Get the metadata of the previously parsed document\x0a   * @param raw\x0a   * @returns {string|{}}\x0a   */\x0a  this.getMetadata = function (raw) {\x0a    if (raw) {\x0a      return metadata.raw;\x0a    } else {\x0a      return metadata.parsed;\x0a    }\x0a  };\x0a\x0a  /**\x0a   * Get the metadata format of the previously parsed document\x0a   * @returns {string}\x0a   */\x0a  this.getMetadataFormat = function () {\x0a    return metadata.format;\x0a  };\x0a\x0a  /**\x0a   * Private: set a single key, value metadata pair\x0a   * @param {string} key\x0a   * @param {string} value\x0a   */\x0a  this._setMetadataPair = function (key, value) {\x0a    metadata.parsed[key] = value;\x0a  };\x0a\x0a  /**\x0a   * Private: set metadata format\x0a   * @param {string} format\x0a   */\x0a  this._setMetadataFormat = function (format) {\x0a    metadata.format = format;\x0a  };\x0a\x0a  /**\x0a   * Private: set metadata raw text\x0a   * @param {string} raw\x0a   */\x0a  this._setMetadataRaw = function (raw) {\x0a    metadata.raw = raw;\x0a  };\x0a};\x0a\x0d\x0a/**\x0a * Turn Markdown link shortcuts into XHTML \x3ca\x3e tags.\x0a */\x0ashowdown.subParser(\x27anchors\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27anchors.before\x27, text, options, globals);\x0a\x0a  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\x0a    if (showdown.helper.isUndefined(title)) {\x0a      title = \x27\x27;\x0a    }\x0a    linkId = linkId.toLowerCase();\x0a\x0a    // Special case for explicit empty url\x0a    if (wholeMatch.search(/\x5c(\x3c?\x5cs*\x3e? ?([\x27\x22].*[\x27\x22])?\x5c)$/m) \x3e -1) {\x0a      url = \x27\x27;\x0a    } else if (!url) {\x0a      if (!linkId) {\x0a        // lower-case and turn embedded newlines into spaces\x0a        linkId = linkText.toLowerCase().replace(/ ?\x5cn/g, \x27 \x27);\x0a      }\x0a      url = \x27#\x27 + linkId;\x0a\x0a      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\x0a        url = globals.gUrls[linkId];\x0a        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\x0a          title = globals.gTitles[linkId];\x0a        }\x0a      } else {\x0a        return wholeMatch;\x0a      }\x0a    }\x0a\x0a    //url = showdown.helper.escapeCharacters(url, \x27*_\x27, false); // replaced line to improve performance\x0a    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a\x0a    var result = \x27\x3ca href=\x22\x27 + url + \x27\x22\x27;\x0a\x0a    if (title !== \x27\x27 && title !== null) {\x0a      title = title.replace(/\x22/g, \x27&quot;\x27);\x0a      //title = showdown.helper.escapeCharacters(title, \x27*_\x27, false); // replaced line to improve performance\x0a      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a      result += \x27 title=\x22\x27 + title + \x27\x22\x27;\x0a    }\x0a\x0a    // optionLinksInNewWindow only applies\x0a    // to external links. Hash links (#) open in same page\x0a    if (options.openLinksInNewWindow && !/^#/.test(url)) {\x0a      // escaped _\x0a      result += \x27 target=\x22\xc2\xa8E95Eblank\x22\x27;\x0a    }\x0a\x0a    result += \x27\x3e\x27 + linkText + \x27\x3c/a\x3e\x27;\x0a\x0a    return result;\x0a  };\x0a\x0a  // First, handle reference-style links: [link text] [id]\x0a  text = text.replace(/\x5c[((?:\x5c[[^\x5c]]*]|[^\x5c[\x5c]])*)] ?(?:\x5cn *)?\x5c[(.*?)]()()()()/g, writeAnchorTag);\x0a\x0a  // Next, inline-style links: [link text](url \x22optional title\x22)\x0a  // cases with crazy urls like ./image/cat1).png\x0a  text = text.replace(/\x5c[((?:\x5c[[^\x5c]]*]|[^\x5c[\x5c]])*)]()[ \x5ct]*\x5c([ \x5ct]?\x3c([^\x3e]*)\x3e(?:[ \x5ct]*(([\x22\x27])([^\x22]*?)\x5c5))?[ \x5ct]?\x5c)/g,\x0a    writeAnchorTag);\x0a\x0a  // normal cases\x0a  text = text.replace(/\x5c[((?:\x5c[[^\x5c]]*]|[^\x5c[\x5c]])*)]()[ \x5ct]*\x5c([ \x5ct]?\x3c?([\x5cS]+?(?:\x5c([\x5cS]*?\x5c)[\x5cS]*?)?)\x3e?(?:[ \x5ct]*(([\x22\x27])([^\x22]*?)\x5c5))?[ \x5ct]?\x5c)/g,\x0a                      writeAnchorTag);\x0a\x0a  // handle reference-style shortcuts: [link text]\x0a  // These must come last in case you\x27ve also got [link test][1]\x0a  // or [link test](/foo)\x0a  text = text.replace(/\x5c[([^\x5c[\x5c]]+)]()()()()()/g, writeAnchorTag);\x0a\x0a  // Lastly handle GithubMentions if option is enabled\x0a  if (options.ghMentions) {\x0a    text = text.replace(/(^|\x5cs)(\x5c\x5c)?(@([a-z\x5cd]+(?:[a-z\x5cd.-]+?[a-z\x5cd]+)*))/gmi, function (wm, st, escape, mentions, username) {\x0a      if (escape === \x27\x5c\x5c\x27) {\x0a        return st + mentions;\x0a      }\x0a\x0a      //check if options.ghMentionsLink is a string\x0a      if (!showdown.helper.isString(options.ghMentionsLink)) {\x0a        throw new Error(\x27ghMentionsLink option must be a string\x27);\x0a      }\x0a      var lnk = options.ghMentionsLink.replace(/\x5c{u}/g, username),\x0a          target = \x27\x27;\x0a      if (options.openLinksInNewWindow) {\x0a        target = \x27 target=\x22\xc2\xa8E95Eblank\x22\x27;\x0a      }\x0a      return st + \x27\x3ca href=\x22\x27 + lnk + \x27\x22\x27 + target + \x27\x3e\x27 + mentions + \x27\x3c/a\x3e\x27;\x0a    });\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27anchors.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a// url allowed chars [a-z\x5cd_.~:/?#[]@!$&\x27()*+,;=-]\x0a\x0avar simpleURLRegex  = /([*~_]+|\x5cb)(((https?|ftp|dict):\x5c/\x5c/|www\x5c.)[^\x27\x22\x3e\x5cs]+?\x5c.[^\x27\x22\x3e\x5cs]+?)()(\x5c1)?(?=\x5cs|$)(?![\x22\x3c\x3e])/gi,\x0a    simpleURLRegex2 = /([*~_]+|\x5cb)(((https?|ftp|dict):\x5c/\x5c/|www\x5c.)[^\x27\x22\x3e\x5cs]+\x5c.[^\x27\x22\x3e\x5cs]+?)([.!?,()\x5c[\x5c]])?(\x5c1)?(?=\x5cs|$)(?![\x22\x3c\x3e])/gi,\x0a    delimUrlRegex   = /()\x3c(((https?|ftp|dict):\x5c/\x5c/|www\x5c.)[^\x27\x22\x3e\x5cs]+)()\x3e()/gi,\x0a    simpleMailRegex = /(^|\x5cs)(?:mailto:)?([A-Za-z0-9!#$%&\x27*+-/=?^_`{|}~.]+@[-a-z0-9]+(\x5c.[-a-z0-9]+)*\x5c.[a-z]+)(?=$|\x5cs)/gmi,\x0a    delimMailRegex  = /\x3c()(?:mailto:)?([-.\x5cw]+@[-a-z0-9]+(\x5c.[-a-z0-9]+)*\x5c.[a-z]+)\x3e/gi,\x0a\x0a    replaceLink = function (options) {\x0a      \x27use strict\x27;\x0a      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {\x0a        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a        var lnkTxt = link,\x0a            append = \x27\x27,\x0a            target = \x27\x27,\x0a            lmc    = leadingMagicChars || \x27\x27,\x0a            tmc    = trailingMagicChars || \x27\x27;\x0a        if (/^www\x5c./i.test(link)) {\x0a          link = link.replace(/^www\x5c./i, \x27http://www.\x27);\x0a        }\x0a        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\x0a          append = trailingPunctuation;\x0a        }\x0a        if (options.openLinksInNewWindow) {\x0a          target = \x27 target=\x22\xc2\xa8E95Eblank\x22\x27;\x0a        }\x0a        return lmc + \x27\x3ca href=\x22\x27 + link + \x27\x22\x27 + target + \x27\x3e\x27 + lnkTxt + \x27\x3c/a\x3e\x27 + append + tmc;\x0a      };\x0a    },\x0a\x0a    replaceMail = function (options, globals) {\x0a      \x27use strict\x27;\x0a      return function (wholeMatch, b, mail) {\x0a        var href = \x27mailto:\x27;\x0a        b = b || \x27\x27;\x0a        mail = showdown.subParser(\x27unescapeSpecialChars\x27)(mail, options, globals);\x0a        if (options.encodeEmails) {\x0a          href = showdown.helper.encodeEmailAddress(href + mail);\x0a          mail = showdown.helper.encodeEmailAddress(mail);\x0a        } else {\x0a          href = href + mail;\x0a        }\x0a        return b + \x27\x3ca href=\x22\x27 + href + \x27\x22\x3e\x27 + mail + \x27\x3c/a\x3e\x27;\x0a      };\x0a    };\x0a\x0ashowdown.subParser(\x27autoLinks\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27autoLinks.before\x27, text, options, globals);\x0a\x0a  text = text.replace(delimUrlRegex, replaceLink(options));\x0a  text = text.replace(delimMailRegex, replaceMail(options, globals));\x0a\x0a  text = globals.converter._dispatch(\x27autoLinks.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0ashowdown.subParser(\x27simplifiedAutoLinks\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.simplifiedAutoLink) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27simplifiedAutoLinks.before\x27, text, options, globals);\x0a\x0a  if (options.excludeTrailingPunctuationFromURLs) {\x0a    text = text.replace(simpleURLRegex2, replaceLink(options));\x0a  } else {\x0a    text = text.replace(simpleURLRegex, replaceLink(options));\x0a  }\x0a  text = text.replace(simpleMailRegex, replaceMail(options, globals));\x0a\x0a  text = globals.converter._dispatch(\x27simplifiedAutoLinks.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * These are all the transformations that form block-level\x0a * tags like paragraphs, headers, and list items.\x0a */\x0ashowdown.subParser(\x27blockGamut\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27blockGamut.before\x27, text, options, globals);\x0a\x0a  // we parse blockquotes first so that we can have headings and hrs\x0a  // inside blockquotes\x0a  text = showdown.subParser(\x27blockQuotes\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27headers\x27)(text, options, globals);\x0a\x0a  // Do Horizontal Rules:\x0a  text = showdown.subParser(\x27horizontalRule\x27)(text, options, globals);\x0a\x0a  text = showdown.subParser(\x27lists\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27codeBlocks\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27tables\x27)(text, options, globals);\x0a\x0a  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\x0a  // was to escape raw HTML in the original Markdown source. This time,\x0a  // we\x27re escaping the markup we\x27ve just created, so that we don\x27t wrap\x0a  // \x3cp\x3e tags around block-level tags.\x0a  text = showdown.subParser(\x27hashHTMLBlocks\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27paragraphs\x27)(text, options, globals);\x0a\x0a  text = globals.converter._dispatch(\x27blockGamut.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27blockQuotes\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27blockQuotes.before\x27, text, options, globals);\x0a\x0a  // add a couple extra lines after the text and endtext mark\x0a  text = text + \x27\x5cn\x5cn\x27;\x0a\x0a  var rgx = /(^ {0,3}\x3e[ \x5ct]?.+\x5cn(.+\x5cn)*\x5cn*)+/gm;\x0a\x0a  if (options.splitAdjacentBlockquotes) {\x0a    rgx = /^ {0,3}\x3e[\x5cs\x5cS]*?(?:\x5cn\x5cn)/gm;\x0a  }\x0a\x0a  text = text.replace(rgx, function (bq) {\x0a    // attacklab: hack around Konqueror 3.5.4 bug:\x0a    // \x22----------bug\x22.replace(/^-/g,\x22\x22) == \x22bug\x22\x0a    bq = bq.replace(/^[ \x5ct]*\x3e[ \x5ct]?/gm, \x27\x27); // trim one level of quoting\x0a\x0a    // attacklab: clean up hack\x0a    bq = bq.replace(/\xc2\xa80/g, \x27\x27);\x0a\x0a    bq = bq.replace(/^[ \x5ct]+$/gm, \x27\x27); // trim whitespace-only lines\x0a    bq = showdown.subParser(\x27githubCodeBlocks\x27)(bq, options, globals);\x0a    bq = showdown.subParser(\x27blockGamut\x27)(bq, options, globals); // recurse\x0a\x0a    bq = bq.replace(/(^|\x5cn)/g, \x27$1  \x27);\x0a    // These leading spaces screw with \x3cpre\x3e content, so we need to fix that:\x0a    bq = bq.replace(/(\x5cs*\x3cpre\x3e[^\x5cr]+?\x3c\x5c/pre\x3e)/gm, function (wholeMatch, m1) {\x0a      var pre = m1;\x0a      // attacklab: hack around Konqueror 3.5.4 bug:\x0a      pre = pre.replace(/^  /mg, \x27\xc2\xa80\x27);\x0a      pre = pre.replace(/\xc2\xa80/g, \x27\x27);\x0a      return pre;\x0a    });\x0a\x0a    return showdown.subParser(\x27hashBlock\x27)(\x27\x3cblockquote\x3e\x5cn\x27 + bq + \x27\x5cn\x3c/blockquote\x3e\x27, options, globals);\x0a  });\x0a\x0a  text = globals.converter._dispatch(\x27blockQuotes.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Process Markdown `\x3cpre\x3e\x3ccode\x3e` blocks.\x0a */\x0ashowdown.subParser(\x27codeBlocks\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27codeBlocks.before\x27, text, options, globals);\x0a\x0a  // sentinel workarounds for lack of \x5cA and \x5cZ, safari\x5ckhtml bug\x0a  text += \x27\xc2\xa80\x27;\x0a\x0a  var pattern = /(?:\x5cn\x5cn|^)((?:(?:[ ]{4}|\x5ct).*\x5cn+)+)(\x5cn*[ ]{0,3}[^ \x5ct\x5cn]|(?=\xc2\xa80))/g;\x0a  text = text.replace(pattern, function (wholeMatch, m1, m2) {\x0a    var codeblock = m1,\x0a        nextChar = m2,\x0a        end = \x27\x5cn\x27;\x0a\x0a    codeblock = showdown.subParser(\x27outdent\x27)(codeblock, options, globals);\x0a    codeblock = showdown.subParser(\x27encodeCode\x27)(codeblock, options, globals);\x0a    codeblock = showdown.subParser(\x27detab\x27)(codeblock, options, globals);\x0a    codeblock = codeblock.replace(/^\x5cn+/g, \x27\x27); // trim leading newlines\x0a    codeblock = codeblock.replace(/\x5cn+$/g, \x27\x27); // trim trailing newlines\x0a\x0a    if (options.omitExtraWLInCodeBlocks) {\x0a      end = \x27\x27;\x0a    }\x0a\x0a    codeblock = \x27\x3cpre\x3e\x3ccode\x3e\x27 + codeblock + end + \x27\x3c/code\x3e\x3c/pre\x3e\x27;\x0a\x0a    return showdown.subParser(\x27hashBlock\x27)(codeblock, options, globals) + nextChar;\x0a  });\x0a\x0a  // strip sentinel\x0a  text = text.replace(/\xc2\xa80/, \x27\x27);\x0a\x0a  text = globals.converter._dispatch(\x27codeBlocks.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a *\x0a *   *  Backtick quotes are used for \x3ccode\x3e\x3c/code\x3e spans.\x0a *\x0a *   *  You can use multiple backticks as the delimiters if you want to\x0a *     include literal backticks in the code span. So, this input:\x0a *\x0a *         Just type ``foo `bar` baz`` at the prompt.\x0a *\x0a *       Will translate to:\x0a *\x0a *         \x3cp\x3eJust type \x3ccode\x3efoo `bar` baz\x3c/code\x3e at the prompt.\x3c/p\x3e\x0a *\x0a *    There\x27s no arbitrary limit to the number of backticks you\x0a *    can use as delimters. If you need three consecutive backticks\x0a *    in your code, use four for delimiters, etc.\x0a *\x0a *  *  You can use spaces to get literal backticks at the edges:\x0a *\x0a *         ... type `` `bar` `` ...\x0a *\x0a *       Turns to:\x0a *\x0a *         ... type \x3ccode\x3e`bar`\x3c/code\x3e ...\x0a */\x0ashowdown.subParser(\x27codeSpans\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27codeSpans.before\x27, text, options, globals);\x0a\x0a  if (typeof(text) === \x27undefined\x27) {\x0a    text = \x27\x27;\x0a  }\x0a  text = text.replace(/(^|[^\x5c\x5c])(`+)([^\x5cr]*?[^`])\x5c2(?!`)/gm,\x0a    function (wholeMatch, m1, m2, m3) {\x0a      var c = m3;\x0a      c = c.replace(/^([ \x5ct]*)/g, \x27\x27);\x09// leading whitespace\x0a      c = c.replace(/[ \x5ct]*$/g, \x27\x27);\x09// trailing whitespace\x0a      c = showdown.subParser(\x27encodeCode\x27)(c, options, globals);\x0a      c = m1 + \x27\x3ccode\x3e\x27 + c + \x27\x3c/code\x3e\x27;\x0a      c = showdown.subParser(\x27hashHTMLSpans\x27)(c, options, globals);\x0a      return c;\x0a    }\x0a  );\x0a\x0a  text = globals.converter._dispatch(\x27codeSpans.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Create a full HTML document from the processed markdown\x0a */\x0ashowdown.subParser(\x27completeHTMLDocument\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.completeHTMLDocument) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27completeHTMLDocument.before\x27, text, options, globals);\x0a\x0a  var doctype = \x27html\x27,\x0a      doctypeParsed = \x27\x3c!DOCTYPE HTML\x3e\x5cn\x27,\x0a      title = \x27\x27,\x0a      charset = \x27\x3cmeta charset=\x22utf-8\x22\x3e\x5cn\x27,\x0a      lang = \x27\x27,\x0a      metadata = \x27\x27;\x0a\x0a  if (typeof globals.metadata.parsed.doctype !== \x27undefined\x27) {\x0a    doctypeParsed = \x27\x3c!DOCTYPE \x27 +  globals.metadata.parsed.doctype + \x27\x3e\x5cn\x27;\x0a    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();\x0a    if (doctype === \x27html\x27 || doctype === \x27html5\x27) {\x0a      charset = \x27\x3cmeta charset=\x22utf-8\x22\x3e\x27;\x0a    }\x0a  }\x0a\x0a  for (var meta in globals.metadata.parsed) {\x0a    if (globals.metadata.parsed.hasOwnProperty(meta)) {\x0a      switch (meta.toLowerCase()) {\x0a        case \x27doctype\x27:\x0a          break;\x0a\x0a        case \x27title\x27:\x0a          title = \x27\x3ctitle\x3e\x27 +  globals.metadata.parsed.title + \x27\x3c/title\x3e\x5cn\x27;\x0a          break;\x0a\x0a        case \x27charset\x27:\x0a          if (doctype === \x27html\x27 || doctype === \x27html5\x27) {\x0a            charset = \x27\x3cmeta charset=\x22\x27 + globals.metadata.parsed.charset + \x27\x22\x3e\x5cn\x27;\x0a          } else {\x0a            charset = \x27\x3cmeta name=\x22charset\x22 content=\x22\x27 + globals.metadata.parsed.charset + \x27\x22\x3e\x5cn\x27;\x0a          }\x0a          break;\x0a\x0a        case \x27language\x27:\x0a        case \x27lang\x27:\x0a          lang = \x27 lang=\x22\x27 + globals.metadata.parsed[meta] + \x27\x22\x27;\x0a          metadata += \x27\x3cmeta name=\x22\x27 + meta + \x27\x22 content=\x22\x27 + globals.metadata.parsed[meta] + \x27\x22\x3e\x5cn\x27;\x0a          break;\x0a\x0a        default:\x0a          metadata += \x27\x3cmeta name=\x22\x27 + meta + \x27\x22 content=\x22\x27 + globals.metadata.parsed[meta] + \x27\x22\x3e\x5cn\x27;\x0a      }\x0a    }\x0a  }\x0a\x0a  text = doctypeParsed + \x27\x3chtml\x27 + lang + \x27\x3e\x5cn\x3chead\x3e\x5cn\x27 + title + charset + metadata + \x27\x3c/head\x3e\x5cn\x3cbody\x3e\x5cn\x27 + text.trim() + \x27\x5cn\x3c/body\x3e\x5cn\x3c/html\x3e\x27;\x0a\x0a  text = globals.converter._dispatch(\x27completeHTMLDocument.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Convert all tabs to spaces\x0a */\x0ashowdown.subParser(\x27detab\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27detab.before\x27, text, options, globals);\x0a\x0a  // expand first n-1 tabs\x0a  text = text.replace(/\x5ct(?=\x5ct)/g, \x27    \x27); // g_tab_width\x0a\x0a  // replace the nth with two sentinels\x0a  text = text.replace(/\x5ct/g, \x27\xc2\xa8A\xc2\xa8B\x27);\x0a\x0a  // use the sentinel to anchor our regex so it doesn\x27t explode\x0a  text = text.replace(/\xc2\xa8B(.+?)\xc2\xa8A/g, function (wholeMatch, m1) {\x0a    var leadingText = m1,\x0a        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\x0a\x0a    // there *must* be a better way to do this:\x0a    for (var i = 0; i \x3c numSpaces; i++) {\x0a      leadingText += \x27 \x27;\x0a    }\x0a\x0a    return leadingText;\x0a  });\x0a\x0a  // clean up sentinels\x0a  text = text.replace(/\xc2\xa8A/g, \x27    \x27);  // g_tab_width\x0a  text = text.replace(/\xc2\xa8B/g, \x27\x27);\x0a\x0a  text = globals.converter._dispatch(\x27detab.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27ellipsis\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27ellipsis.before\x27, text, options, globals);\x0a\x0a  text = text.replace(/\x5c.\x5c.\x5c./g, \x27\xe2\x80\xa6\x27);\x0a\x0a  text = globals.converter._dispatch(\x27ellipsis.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Turn emoji codes into emojis\x0a *\x0a * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis\x0a */\x0ashowdown.subParser(\x27emoji\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.emoji) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27emoji.before\x27, text, options, globals);\x0a\x0a  var emojiRgx = /:([\x5cS]+?):/g;\x0a\x0a  text = text.replace(emojiRgx, function (wm, emojiCode) {\x0a    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {\x0a      return showdown.helper.emojis[emojiCode];\x0a    }\x0a    return wm;\x0a  });\x0a\x0a  text = globals.converter._dispatch(\x27emoji.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Smart processing for ampersands and angle brackets that need to be encoded.\x0a */\x0ashowdown.subParser(\x27encodeAmpsAndAngles\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27encodeAmpsAndAngles.before\x27, text, options, globals);\x0a\x0a  // Ampersand-encoding based entirely on Nat Irons\x27s Amputator MT plugin:\x0a  // http://bumppo.net/projects/amputator/\x0a  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\x5cw+);)/g, \x27&amp;\x27);\x0a\x0a  // Encode naked \x3c\x27s\x0a  text = text.replace(/\x3c(?![a-z\x5c/?$!])/gi, \x27&lt;\x27);\x0a\x0a  // Encode \x3c\x0a  text = text.replace(/\x3c/g, \x27&lt;\x27);\x0a\x0a  // Encode \x3e\x0a  text = text.replace(/\x3e/g, \x27&gt;\x27);\x0a\x0a  text = globals.converter._dispatch(\x27encodeAmpsAndAngles.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Returns the string, with after processing the following backslash escape sequences.\x0a *\x0a * attacklab: The polite way to do this is with the new escapeCharacters() function:\x0a *\x0a *    text = escapeCharacters(text,\x22\x5c\x5c\x22,true);\x0a *    text = escapeCharacters(text,\x22`*_{}[]()\x3e#+-.!\x22,true);\x0a *\x0a * ...but we\x27re sidestepping its use of the (slow) RegExp constructor\x0a * as an optimization for Firefox.  This function gets called a LOT.\x0a */\x0ashowdown.subParser(\x27encodeBackslashEscapes\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27encodeBackslashEscapes.before\x27, text, options, globals);\x0a\x0a  text = text.replace(/\x5c\x5c(\x5c\x5c)/g, showdown.helper.escapeCharactersCallback);\x0a  text = text.replace(/\x5c\x5c([`*_{}\x5c[\x5c]()\x3e#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\x0a\x0a  text = globals.converter._dispatch(\x27encodeBackslashEscapes.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Encode/escape certain characters inside Markdown code runs.\x0a * The point is that in code, these characters are literals,\x0a * and lose their special Markdown meanings.\x0a */\x0ashowdown.subParser(\x27encodeCode\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27encodeCode.before\x27, text, options, globals);\x0a\x0a  // Encode all ampersands; HTML entities are not\x0a  // entities within a Markdown code span.\x0a  text = text\x0a    .replace(/&/g, \x27&amp;\x27)\x0a  // Do the angle bracket song and dance:\x0a    .replace(/\x3c/g, \x27&lt;\x27)\x0a    .replace(/\x3e/g, \x27&gt;\x27)\x0a  // Now, escape characters that are magic in Markdown:\x0a    .replace(/([*_{}\x5c[\x5c]\x5c\x5c=~-])/g, showdown.helper.escapeCharactersCallback);\x0a\x0a  text = globals.converter._dispatch(\x27encodeCode.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Within tags -- meaning between \x3c and \x3e -- encode [\x5c ` * _ ~ =] so they\x0a * don\x27t conflict with their use in Markdown for code, italics and strong.\x0a */\x0ashowdown.subParser(\x27escapeSpecialCharsWithinTagAttributes\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27escapeSpecialCharsWithinTagAttributes.before\x27, text, options, globals);\x0a\x0a  // Build a regex to find HTML tags.\x0a  var tags     = /\x3c\x5c/?[a-z\x5cd_:-]+(?:[\x5cs]+[\x5cs\x5cS]+?)?\x3e/gi,\x0a      comments = /\x3c!(--(?:(?:[^\x3e-]|-[^\x3e])(?:[^-]|-[^-])*)--)\x3e/gi;\x0a\x0a  text = text.replace(tags, function (wholeMatch) {\x0a    return wholeMatch\x0a      .replace(/(.)\x3c\x5c/?code\x3e(?=.)/g, \x27$1`\x27)\x0a      .replace(/([\x5c\x5c`*_~=|])/g, showdown.helper.escapeCharactersCallback);\x0a  });\x0a\x0a  text = text.replace(comments, function (wholeMatch) {\x0a    return wholeMatch\x0a      .replace(/([\x5c\x5c`*_~=|])/g, showdown.helper.escapeCharactersCallback);\x0a  });\x0a\x0a  text = globals.converter._dispatch(\x27escapeSpecialCharsWithinTagAttributes.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Handle github codeblocks prior to running HashHTML so that\x0a * HTML contained within the codeblock gets escaped properly\x0a * Example:\x0a * ```ruby\x0a *     def hello_world(x)\x0a *       puts \x22Hello, #{x}\x22\x0a *     end\x0a * ```\x0a */\x0ashowdown.subParser(\x27githubCodeBlocks\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  // early exit if option is not enabled\x0a  if (!options.ghCodeBlocks) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27githubCodeBlocks.before\x27, text, options, globals);\x0a\x0a  text += \x27\xc2\xa80\x27;\x0a\x0a  text = text.replace(/(?:^|\x5cn)(?: {0,3})(```+|~~~+)(?: *)([^\x5cs`~]*)\x5cn([\x5cs\x5cS]*?)\x5cn(?: {0,3})\x5c1/g, function (wholeMatch, delim, language, codeblock) {\x0a    var end = (options.omitExtraWLInCodeBlocks) ? \x27\x27 : \x27\x5cn\x27;\x0a\x0a    // First parse the github code block\x0a    codeblock = showdown.subParser(\x27encodeCode\x27)(codeblock, options, globals);\x0a    codeblock = showdown.subParser(\x27detab\x27)(codeblock, options, globals);\x0a    codeblock = codeblock.replace(/^\x5cn+/g, \x27\x27); // trim leading newlines\x0a    codeblock = codeblock.replace(/\x5cn+$/g, \x27\x27); // trim trailing whitespace\x0a\x0a    codeblock = \x27\x3cpre\x3e\x3ccode\x27 + (language ? \x27 class=\x22\x27 + language + \x27 language-\x27 + language + \x27\x22\x27 : \x27\x27) + \x27\x3e\x27 + codeblock + end + \x27\x3c/code\x3e\x3c/pre\x3e\x27;\x0a\x0a    codeblock = showdown.subParser(\x27hashBlock\x27)(codeblock, options, globals);\x0a\x0a    // Since GHCodeblocks can be false positives, we need to\x0a    // store the primitive text and the parsed text in a global var,\x0a    // and then return a token\x0a    return \x27\x5cn\x5cn\xc2\xa8G\x27 + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + \x27G\x5cn\x5cn\x27;\x0a  });\x0a\x0a  // attacklab: strip sentinel\x0a  text = text.replace(/\xc2\xa80/, \x27\x27);\x0a\x0a  return globals.converter._dispatch(\x27githubCodeBlocks.after\x27, text, options, globals);\x0a});\x0a\x0d\x0ashowdown.subParser(\x27hashBlock\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27hashBlock.before\x27, text, options, globals);\x0a  text = text.replace(/(^\x5cn+|\x5cn+$)/g, \x27\x27);\x0a  text = \x27\x5cn\x5cn\xc2\xa8K\x27 + (globals.gHtmlBlocks.push(text) - 1) + \x27K\x5cn\x5cn\x27;\x0a  text = globals.converter._dispatch(\x27hashBlock.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Hash and escape \x3ccode\x3e elements that should not be parsed as markdown\x0a */\x0ashowdown.subParser(\x27hashCodeTags\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27hashCodeTags.before\x27, text, options, globals);\x0a\x0a  var repFunc = function (wholeMatch, match, left, right) {\x0a    var codeblock = left + showdown.subParser(\x27encodeCode\x27)(match, options, globals) + right;\x0a    return \x27\xc2\xa8C\x27 + (globals.gHtmlSpans.push(codeblock) - 1) + \x27C\x27;\x0a  };\x0a\x0a  // Hash naked \x3ccode\x3e\x0a  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, \x27\x3ccode\x5c\x5cb[^\x3e]*\x3e\x27, \x27\x3c/code\x3e\x27, \x27gim\x27);\x0a\x0a  text = globals.converter._dispatch(\x27hashCodeTags.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27hashElement\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  return function (wholeMatch, m1) {\x0a    var blockText = m1;\x0a\x0a    // Undo double lines\x0a    blockText = blockText.replace(/\x5cn\x5cn/g, \x27\x5cn\x27);\x0a    blockText = blockText.replace(/^\x5cn/, \x27\x27);\x0a\x0a    // strip trailing blank lines\x0a    blockText = blockText.replace(/\x5cn+$/g, \x27\x27);\x0a\x0a    // Replace the element text with a marker (\x22\xc2\xa8KxK\x22 where x is its key)\x0a    blockText = \x27\x5cn\x5cn\xc2\xa8K\x27 + (globals.gHtmlBlocks.push(blockText) - 1) + \x27K\x5cn\x5cn\x27;\x0a\x0a    return blockText;\x0a  };\x0a});\x0a\x0d\x0ashowdown.subParser(\x27hashHTMLBlocks\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27hashHTMLBlocks.before\x27, text, options, globals);\x0a\x0a  var blockTags = [\x0a        \x27pre\x27,\x0a        \x27div\x27,\x0a        \x27h1\x27,\x0a        \x27h2\x27,\x0a        \x27h3\x27,\x0a        \x27h4\x27,\x0a        \x27h5\x27,\x0a        \x27h6\x27,\x0a        \x27blockquote\x27,\x0a        \x27table\x27,\x0a        \x27dl\x27,\x0a        \x27ol\x27,\x0a        \x27ul\x27,\x0a        \x27script\x27,\x0a        \x27noscript\x27,\x0a        \x27form\x27,\x0a        \x27fieldset\x27,\x0a        \x27iframe\x27,\x0a        \x27math\x27,\x0a        \x27style\x27,\x0a        \x27section\x27,\x0a        \x27header\x27,\x0a        \x27footer\x27,\x0a        \x27nav\x27,\x0a        \x27article\x27,\x0a        \x27aside\x27,\x0a        \x27address\x27,\x0a        \x27audio\x27,\x0a        \x27canvas\x27,\x0a        \x27figure\x27,\x0a        \x27hgroup\x27,\x0a        \x27output\x27,\x0a        \x27video\x27,\x0a        \x27p\x27\x0a      ],\x0a      repFunc = function (wholeMatch, match, left, right) {\x0a        var txt = wholeMatch;\x0a        // check if this html element is marked as markdown\x0a        // if so, it\x27s contents should be parsed as markdown\x0a        if (left.search(/\x5cbmarkdown\x5cb/) !== -1) {\x0a          txt = left + globals.converter.makeHtml(match) + right;\x0a        }\x0a        return \x27\x5cn\x5cn\xc2\xa8K\x27 + (globals.gHtmlBlocks.push(txt) - 1) + \x27K\x5cn\x5cn\x27;\x0a      };\x0a\x0a  if (options.backslashEscapesHTMLTags) {\x0a    // encode backslash escaped HTML tags\x0a    text = text.replace(/\x5c\x5c\x3c(\x5c/?[^\x3e]+?)\x3e/g, function (wm, inside) {\x0a      return \x27&lt;\x27 + inside + \x27&gt;\x27;\x0a    });\x0a  }\x0a\x0a  // hash HTML Blocks\x0a  for (var i = 0; i \x3c blockTags.length; ++i) {\x0a\x0a    var opTagPos,\x0a        rgx1     = new RegExp(\x27^ {0,3}(\x3c\x27 + blockTags[i] + \x27\x5c\x5cb[^\x3e]*\x3e)\x27, \x27im\x27),\x0a        patLeft  = \x27\x3c\x27 + blockTags[i] + \x27\x5c\x5cb[^\x3e]*\x3e\x27,\x0a        patRight = \x27\x3c/\x27 + blockTags[i] + \x27\x3e\x27;\x0a    // 1. Look for the first position of the first opening HTML tag in the text\x0a    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\x0a\x0a      // if the HTML tag is \x5c escaped, we need to escape it and break\x0a\x0a\x0a      //2. Split the text in that position\x0a      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\x0a      //3. Match recursively\x0a          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, \x27im\x27);\x0a\x0a      // prevent an infinite loop\x0a      if (newSubText1 === subTexts[1]) {\x0a        break;\x0a      }\x0a      text = subTexts[0].concat(newSubText1);\x0a    }\x0a  }\x0a  // HR SPECIAL CASE\x0a  text = text.replace(/(\x5cn {0,3}(\x3c(hr)\x5cb([^\x3c\x3e])*?\x5c/?\x3e)[ \x5ct]*(?=\x5cn{2,}))/g,\x0a    showdown.subParser(\x27hashElement\x27)(text, options, globals));\x0a\x0a  // Special case for standalone HTML comments\x0a  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\x0a    return \x27\x5cn\x5cn\xc2\xa8K\x27 + (globals.gHtmlBlocks.push(txt) - 1) + \x27K\x5cn\x5cn\x27;\x0a  }, \x27^ {0,3}\x3c!--\x27, \x27--\x3e\x27, \x27gm\x27);\x0a\x0a  // PHP and ASP-style processor instructions (\x3c?...?\x3e and \x3c%...%\x3e)\x0a  text = text.replace(/(?:\x5cn\x5cn)( {0,3}(?:\x3c([?%])[^\x5cr]*?\x5c2\x3e)[ \x5ct]*(?=\x5cn{2,}))/g,\x0a    showdown.subParser(\x27hashElement\x27)(text, options, globals));\x0a\x0a  text = globals.converter._dispatch(\x27hashHTMLBlocks.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Hash span elements that should not be parsed as markdown\x0a */\x0ashowdown.subParser(\x27hashHTMLSpans\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27hashHTMLSpans.before\x27, text, options, globals);\x0a\x0a  function hashHTMLSpan (html) {\x0a    return \x27\xc2\xa8C\x27 + (globals.gHtmlSpans.push(html) - 1) + \x27C\x27;\x0a  }\x0a\x0a  // Hash Self Closing tags\x0a  text = text.replace(/\x3c[^\x3e]+?\x5c/\x3e/gi, function (wm) {\x0a    return hashHTMLSpan(wm);\x0a  });\x0a\x0a  // Hash tags without properties\x0a  text = text.replace(/\x3c([^\x3e]+?)\x3e[\x5cs\x5cS]*?\x3c\x5c/\x5c1\x3e/g, function (wm) {\x0a    return hashHTMLSpan(wm);\x0a  });\x0a\x0a  // Hash tags with properties\x0a  text = text.replace(/\x3c([^\x3e]+?)\x5cs[^\x3e]+?\x3e[\x5cs\x5cS]*?\x3c\x5c/\x5c1\x3e/g, function (wm) {\x0a    return hashHTMLSpan(wm);\x0a  });\x0a\x0a  // Hash self closing tags without /\x3e\x0a  text = text.replace(/\x3c[^\x3e]+?\x3e/gi, function (wm) {\x0a    return hashHTMLSpan(wm);\x0a  });\x0a\x0a  /*showdown.helper.matchRecursiveRegExp(text, \x27\x3ccode\x5c\x5cb[^\x3e]*\x3e\x27, \x27\x3c/code\x3e\x27, \x27gi\x27);*/\x0a\x0a  text = globals.converter._dispatch(\x27hashHTMLSpans.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0a/**\x0a * Unhash HTML spans\x0a */\x0ashowdown.subParser(\x27unhashHTMLSpans\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27unhashHTMLSpans.before\x27, text, options, globals);\x0a\x0a  for (var i = 0; i \x3c globals.gHtmlSpans.length; ++i) {\x0a    var repText = globals.gHtmlSpans[i],\x0a        // limiter to prevent infinite loop (assume 10 as limit for recurse)\x0a        limit = 0;\x0a\x0a    while (/\xc2\xa8C(\x5cd+)C/.test(repText)) {\x0a      var num = RegExp.$1;\x0a      repText = repText.replace(\x27\xc2\xa8C\x27 + num + \x27C\x27, globals.gHtmlSpans[num]);\x0a      if (limit === 10) {\x0a        console.error(\x27maximum nesting of 10 spans reached!!!\x27);\x0a        break;\x0a      }\x0a      ++limit;\x0a    }\x0a    text = text.replace(\x27\xc2\xa8C\x27 + i + \x27C\x27, repText);\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27unhashHTMLSpans.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Hash and escape \x3cpre\x3e\x3ccode\x3e elements that should not be parsed as markdown\x0a */\x0ashowdown.subParser(\x27hashPreCodeTags\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27hashPreCodeTags.before\x27, text, options, globals);\x0a\x0a  var repFunc = function (wholeMatch, match, left, right) {\x0a    // encode html entities\x0a    var codeblock = left + showdown.subParser(\x27encodeCode\x27)(match, options, globals) + right;\x0a    return \x27\x5cn\x5cn\xc2\xa8G\x27 + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + \x27G\x5cn\x5cn\x27;\x0a  };\x0a\x0a  // Hash \x3cpre\x3e\x3ccode\x3e\x0a  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, \x27^ {0,3}\x3cpre\x5c\x5cb[^\x3e]*\x3e\x5c\x5cs*\x3ccode\x5c\x5cb[^\x3e]*\x3e\x27, \x27^ {0,3}\x3c/code\x3e\x5c\x5cs*\x3c/pre\x3e\x27, \x27gim\x27);\x0a\x0a  text = globals.converter._dispatch(\x27hashPreCodeTags.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27headers\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27headers.before\x27, text, options, globals);\x0a\x0a  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\x0a\x0a  // Set text-style headers:\x0a  //\x09Header 1\x0a  //\x09========\x0a  //\x0a  //\x09Header 2\x0a  //\x09--------\x0a  //\x0a      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \x5ct]*\x5cn={2,}[ \x5ct]*\x5cn+/gm : /^(.+)[ \x5ct]*\x5cn=+[ \x5ct]*\x5cn+/gm,\x0a      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \x5ct]*\x5cn-{2,}[ \x5ct]*\x5cn+/gm : /^(.+)[ \x5ct]*\x5cn-+[ \x5ct]*\x5cn+/gm;\x0a\x0a  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\x0a\x0a    var spanGamut = showdown.subParser(\x27spanGamut\x27)(m1, options, globals),\x0a        hID = (options.noHeaderId) ? \x27\x27 : \x27 id=\x22\x27 + headerId(m1) + \x27\x22\x27,\x0a        hLevel = headerLevelStart,\x0a        hashBlock = \x27\x3ch\x27 + hLevel + hID + \x27\x3e\x27 + spanGamut + \x27\x3c/h\x27 + hLevel + \x27\x3e\x27;\x0a    return showdown.subParser(\x27hashBlock\x27)(hashBlock, options, globals);\x0a  });\x0a\x0a  text = text.replace(setextRegexH2, function (matchFound, m1) {\x0a    var spanGamut = showdown.subParser(\x27spanGamut\x27)(m1, options, globals),\x0a        hID = (options.noHeaderId) ? \x27\x27 : \x27 id=\x22\x27 + headerId(m1) + \x27\x22\x27,\x0a        hLevel = headerLevelStart + 1,\x0a        hashBlock = \x27\x3ch\x27 + hLevel + hID + \x27\x3e\x27 + spanGamut + \x27\x3c/h\x27 + hLevel + \x27\x3e\x27;\x0a    return showdown.subParser(\x27hashBlock\x27)(hashBlock, options, globals);\x0a  });\x0a\x0a  // atx-style headers:\x0a  //  # Header 1\x0a  //  ## Header 2\x0a  //  ## Header 2 with closing hashes ##\x0a  //  ...\x0a  //  ###### Header 6\x0a  //\x0a  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \x5ct]+(.+?)[ \x5ct]*#*\x5cn+/gm : /^(#{1,6})[ \x5ct]*(.+?)[ \x5ct]*#*\x5cn+/gm;\x0a\x0a  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\x0a    var hText = m2;\x0a    if (options.customizedHeaderId) {\x0a      hText = m2.replace(/\x5cs?\x5c{([^{]+?)}\x5cs*$/, \x27\x27);\x0a    }\x0a\x0a    var span = showdown.subParser(\x27spanGamut\x27)(hText, options, globals),\x0a        hID = (options.noHeaderId) ? \x27\x27 : \x27 id=\x22\x27 + headerId(m2) + \x27\x22\x27,\x0a        hLevel = headerLevelStart - 1 + m1.length,\x0a        header = \x27\x3ch\x27 + hLevel + hID + \x27\x3e\x27 + span + \x27\x3c/h\x27 + hLevel + \x27\x3e\x27;\x0a\x0a    return showdown.subParser(\x27hashBlock\x27)(header, options, globals);\x0a  });\x0a\x0a  function headerId (m) {\x0a    var title,\x0a        prefix;\x0a\x0a    // It is separate from other options to allow combining prefix and customized\x0a    if (options.customizedHeaderId) {\x0a      var match = m.match(/\x5c{([^{]+?)}\x5cs*$/);\x0a      if (match && match[1]) {\x0a        m = match[1];\x0a      }\x0a    }\x0a\x0a    title = m;\x0a\x0a    // Prefix id to prevent causing inadvertent pre-existing style matches.\x0a    if (showdown.helper.isString(options.prefixHeaderId)) {\x0a      prefix = options.prefixHeaderId;\x0a    } else if (options.prefixHeaderId === true) {\x0a      prefix = \x27section-\x27;\x0a    } else {\x0a      prefix = \x27\x27;\x0a    }\x0a\x0a    if (!options.rawPrefixHeaderId) {\x0a      title = prefix + title;\x0a    }\x0a\x0a    if (options.ghCompatibleHeaderId) {\x0a      title = title\x0a        .replace(/ /g, \x27-\x27)\x0a        // replace previously escaped chars (&, \xc2\xa8 and $)\x0a        .replace(/&amp;/g, \x27\x27)\x0a        .replace(/\xc2\xa8T/g, \x27\x27)\x0a        .replace(/\xc2\xa8D/g, \x27\x27)\x0a        // replace rest of the chars (&~$ are repeated as they might have been escaped)\x0a        // borrowed from github\x27s redcarpet (some they should produce similar results)\x0a        .replace(/[&+$,\x5c/:;=?@\x22#{}|^\xc2\xa8~\x5c[\x5c]`\x5c\x5c*)(%.!\x27\x3c\x3e]/g, \x27\x27)\x0a        .toLowerCase();\x0a    } else if (options.rawHeaderId) {\x0a      title = title\x0a        .replace(/ /g, \x27-\x27)\x0a        // replace previously escaped chars (&, \xc2\xa8 and $)\x0a        .replace(/&amp;/g, \x27&\x27)\x0a        .replace(/\xc2\xa8T/g, \x27\xc2\xa8\x27)\x0a        .replace(/\xc2\xa8D/g, \x27$\x27)\x0a        // replace \x22 and \x27\x0a        .replace(/[\x22\x27]/g, \x27-\x27)\x0a        .toLowerCase();\x0a    } else {\x0a      title = title\x0a        .replace(/[^\x5cw]/g, \x27\x27)\x0a        .toLowerCase();\x0a    }\x0a\x0a    if (options.rawPrefixHeaderId) {\x0a      title = prefix + title;\x0a    }\x0a\x0a    if (globals.hashLinkCounts[title]) {\x0a      title = title + \x27-\x27 + (globals.hashLinkCounts[title]++);\x0a    } else {\x0a      globals.hashLinkCounts[title] = 1;\x0a    }\x0a    return title;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27headers.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Turn Markdown link shortcuts into XHTML \x3ca\x3e tags.\x0a */\x0ashowdown.subParser(\x27horizontalRule\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27horizontalRule.before\x27, text, options, globals);\x0a\x0a  var key = showdown.subParser(\x27hashBlock\x27)(\x27\x3chr /\x3e\x27, options, globals);\x0a  text = text.replace(/^ {0,2}( ?-){3,}[ \x5ct]*$/gm, key);\x0a  text = text.replace(/^ {0,2}( ?\x5c*){3,}[ \x5ct]*$/gm, key);\x0a  text = text.replace(/^ {0,2}( ?_){3,}[ \x5ct]*$/gm, key);\x0a\x0a  text = globals.converter._dispatch(\x27horizontalRule.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Turn Markdown image shortcuts into \x3cimg\x3e tags.\x0a */\x0ashowdown.subParser(\x27images\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27images.before\x27, text, options, globals);\x0a\x0a  var inlineRegExp      = /!\x5c[([^\x5c]]*?)][ \x5ct]*()\x5c([ \x5ct]?\x3c?([\x5cS]+?(?:\x5c([\x5cS]*?\x5c)[\x5cS]*?)?)\x3e?(?: =([*\x5cd]+[A-Za-z%]{0,4})x([*\x5cd]+[A-Za-z%]{0,4}))?[ \x5ct]*(?:([\x22\x27])([^\x22]*?)\x5c6)?[ \x5ct]?\x5c)/g,\x0a      crazyRegExp       = /!\x5c[([^\x5c]]*?)][ \x5ct]*()\x5c([ \x5ct]?\x3c([^\x3e]*)\x3e(?: =([*\x5cd]+[A-Za-z%]{0,4})x([*\x5cd]+[A-Za-z%]{0,4}))?[ \x5ct]*(?:(?:([\x22\x27])([^\x22]*?)\x5c6))?[ \x5ct]?\x5c)/g,\x0a      base64RegExp      = /!\x5c[([^\x5c]]*?)][ \x5ct]*()\x5c([ \x5ct]?\x3c?(data:.+?\x5c/.+?;base64,[A-Za-z0-9+/=\x5cn]+?)\x3e?(?: =([*\x5cd]+[A-Za-z%]{0,4})x([*\x5cd]+[A-Za-z%]{0,4}))?[ \x5ct]*(?:([\x22\x27])([^\x22]*?)\x5c6)?[ \x5ct]?\x5c)/g,\x0a      referenceRegExp   = /!\x5c[([^\x5c]]*?)] ?(?:\x5cn *)?\x5c[([\x5cs\x5cS]*?)]()()()()()/g,\x0a      refShortcutRegExp = /!\x5c[([^\x5c[\x5c]]+)]()()()()()/g;\x0a\x0a  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {\x0a    url = url.replace(/\x5cs/g, \x27\x27);\x0a    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);\x0a  }\x0a\x0a  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\x0a\x0a    var gUrls   = globals.gUrls,\x0a        gTitles = globals.gTitles,\x0a        gDims   = globals.gDimensions;\x0a\x0a    linkId = linkId.toLowerCase();\x0a\x0a    if (!title) {\x0a      title = \x27\x27;\x0a    }\x0a    // Special case for explicit empty url\x0a    if (wholeMatch.search(/\x5c(\x3c?\x5cs*\x3e? ?([\x27\x22].*[\x27\x22])?\x5c)$/m) \x3e -1) {\x0a      url = \x27\x27;\x0a\x0a    } else if (url === \x27\x27 || url === null) {\x0a      if (linkId === \x27\x27 || linkId === null) {\x0a        // lower-case and turn embedded newlines into spaces\x0a        linkId = altText.toLowerCase().replace(/ ?\x5cn/g, \x27 \x27);\x0a      }\x0a      url = \x27#\x27 + linkId;\x0a\x0a      if (!showdown.helper.isUndefined(gUrls[linkId])) {\x0a        url = gUrls[linkId];\x0a        if (!showdown.helper.isUndefined(gTitles[linkId])) {\x0a          title = gTitles[linkId];\x0a        }\x0a        if (!showdown.helper.isUndefined(gDims[linkId])) {\x0a          width = gDims[linkId].width;\x0a          height = gDims[linkId].height;\x0a        }\x0a      } else {\x0a        return wholeMatch;\x0a      }\x0a    }\x0a\x0a    altText = altText\x0a      .replace(/\x22/g, \x27&quot;\x27)\x0a    //altText = showdown.helper.escapeCharacters(altText, \x27*_\x27, false);\x0a      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a    //url = showdown.helper.escapeCharacters(url, \x27*_\x27, false);\x0a    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a    var result = \x27\x3cimg src=\x22\x27 + url + \x27\x22 alt=\x22\x27 + altText + \x27\x22\x27;\x0a\x0a    if (title && showdown.helper.isString(title)) {\x0a      title = title\x0a        .replace(/\x22/g, \x27&quot;\x27)\x0a      //title = showdown.helper.escapeCharacters(title, \x27*_\x27, false);\x0a        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\x0a      result += \x27 title=\x22\x27 + title + \x27\x22\x27;\x0a    }\x0a\x0a    if (width && height) {\x0a      width  = (width === \x27*\x27) ? \x27auto\x27 : width;\x0a      height = (height === \x27*\x27) ? \x27auto\x27 : height;\x0a\x0a      result += \x27 width=\x22\x27 + width + \x27\x22\x27;\x0a      result += \x27 height=\x22\x27 + height + \x27\x22\x27;\x0a    }\x0a\x0a    result += \x27 /\x3e\x27;\x0a\x0a    return result;\x0a  }\x0a\x0a  // First, handle reference-style labeled images: ![alt text][id]\x0a  text = text.replace(referenceRegExp, writeImageTag);\x0a\x0a  // Next, handle inline images:  ![alt text](url =\x3cwidth\x3ex\x3cheight\x3e \x22optional title\x22)\x0a\x0a  // base64 encoded images\x0a  text = text.replace(base64RegExp, writeImageTagBase64);\x0a\x0a  // cases with crazy urls like ./image/cat1).png\x0a  text = text.replace(crazyRegExp, writeImageTag);\x0a\x0a  // normal cases\x0a  text = text.replace(inlineRegExp, writeImageTag);\x0a\x0a  // handle reference-style shortcuts: ![img text]\x0a  text = text.replace(refShortcutRegExp, writeImageTag);\x0a\x0a  text = globals.converter._dispatch(\x27images.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27italicsAndBold\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27italicsAndBold.before\x27, text, options, globals);\x0a\x0a  // it\x27s faster to have 3 separate regexes for each case than have just one\x0a  // because of backtracing, in some cases, it could lead to an exponential effect\x0a  // called \x22catastrophic backtrace\x22. Ominous!\x0a\x0a  function parseInside (txt, left, right) {\x0a    /*\x0a    if (options.simplifiedAutoLink) {\x0a      txt = showdown.subParser(\x27simplifiedAutoLinks\x27)(txt, options, globals);\x0a    }\x0a    */\x0a    return left + txt + right;\x0a  }\x0a\x0a  // Parse underscores\x0a  if (options.literalMidWordUnderscores) {\x0a    text = text.replace(/\x5cb___(\x5cS[\x5cs\x5cS]*?)___\x5cb/g, function (wm, txt) {\x0a      return parseInside (txt, \x27\x3cstrong\x3e\x3cem\x3e\x27, \x27\x3c/em\x3e\x3c/strong\x3e\x27);\x0a    });\x0a    text = text.replace(/\x5cb__(\x5cS[\x5cs\x5cS]*?)__\x5cb/g, function (wm, txt) {\x0a      return parseInside (txt, \x27\x3cstrong\x3e\x27, \x27\x3c/strong\x3e\x27);\x0a    });\x0a    text = text.replace(/\x5cb_(\x5cS[\x5cs\x5cS]*?)_\x5cb/g, function (wm, txt) {\x0a      return parseInside (txt, \x27\x3cem\x3e\x27, \x27\x3c/em\x3e\x27);\x0a    });\x0a  } else {\x0a    text = text.replace(/___(\x5cS[\x5cs\x5cS]*?)___/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cstrong\x3e\x3cem\x3e\x27, \x27\x3c/em\x3e\x3c/strong\x3e\x27) : wm;\x0a    });\x0a    text = text.replace(/__(\x5cS[\x5cs\x5cS]*?)__/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cstrong\x3e\x27, \x27\x3c/strong\x3e\x27) : wm;\x0a    });\x0a    text = text.replace(/_([^\x5cs_][\x5cs\x5cS]*?)_/g, function (wm, m) {\x0a      // !/^_[^_]/.test(m) - test if it doesn\x27t start with __ (since it seems redundant, we removed it)\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cem\x3e\x27, \x27\x3c/em\x3e\x27) : wm;\x0a    });\x0a  }\x0a\x0a  // Now parse asterisks\x0a  if (options.literalMidWordAsterisks) {\x0a    text = text.replace(/([^*]|^)\x5cB\x5c*\x5c*\x5c*(\x5cS[\x5cs\x5cS]*?)\x5c*\x5c*\x5c*\x5cB(?!\x5c*)/g, function (wm, lead, txt) {\x0a      return parseInside (txt, lead + \x27\x3cstrong\x3e\x3cem\x3e\x27, \x27\x3c/em\x3e\x3c/strong\x3e\x27);\x0a    });\x0a    text = text.replace(/([^*]|^)\x5cB\x5c*\x5c*(\x5cS[\x5cs\x5cS]*?)\x5c*\x5c*\x5cB(?!\x5c*)/g, function (wm, lead, txt) {\x0a      return parseInside (txt, lead + \x27\x3cstrong\x3e\x27, \x27\x3c/strong\x3e\x27);\x0a    });\x0a    text = text.replace(/([^*]|^)\x5cB\x5c*(\x5cS[\x5cs\x5cS]*?)\x5c*\x5cB(?!\x5c*)/g, function (wm, lead, txt) {\x0a      return parseInside (txt, lead + \x27\x3cem\x3e\x27, \x27\x3c/em\x3e\x27);\x0a    });\x0a  } else {\x0a    text = text.replace(/\x5c*\x5c*\x5c*(\x5cS[\x5cs\x5cS]*?)\x5c*\x5c*\x5c*/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cstrong\x3e\x3cem\x3e\x27, \x27\x3c/em\x3e\x3c/strong\x3e\x27) : wm;\x0a    });\x0a    text = text.replace(/\x5c*\x5c*(\x5cS[\x5cs\x5cS]*?)\x5c*\x5c*/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cstrong\x3e\x27, \x27\x3c/strong\x3e\x27) : wm;\x0a    });\x0a    text = text.replace(/\x5c*([^\x5cs*][\x5cs\x5cS]*?)\x5c*/g, function (wm, m) {\x0a      // !/^\x5c*[^*]/.test(m) - test if it doesn\x27t start with ** (since it seems redundant, we removed it)\x0a      return (/\x5cS$/.test(m)) ? parseInside (m, \x27\x3cem\x3e\x27, \x27\x3c/em\x3e\x27) : wm;\x0a    });\x0a  }\x0a\x0a\x0a  text = globals.converter._dispatch(\x27italicsAndBold.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Form HTML ordered (numbered) and unordered (bulleted) lists.\x0a */\x0ashowdown.subParser(\x27lists\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  /**\x0a   * Process the contents of a single ordered or unordered list, splitting it\x0a   * into individual list items.\x0a   * @param {string} listStr\x0a   * @param {boolean} trimTrailing\x0a   * @returns {string}\x0a   */\x0a  function processListItems (listStr, trimTrailing) {\x0a    // The $g_list_level global keeps track of when we\x27re inside a list.\x0a    // Each time we enter a list, we increment it; when we leave a list,\x0a    // we decrement. If it\x27s zero, we\x27re not in a list anymore.\x0a    //\x0a    // We do this because when we\x27re not inside a list, we want to treat\x0a    // something like this:\x0a    //\x0a    //    I recommend upgrading to version\x0a    //    8. Oops, now this line is treated\x0a    //    as a sub-list.\x0a    //\x0a    // As a single paragraph, despite the fact that the second line starts\x0a    // with a digit-period-space sequence.\x0a    //\x0a    // Whereas when we\x27re inside a list (or sub-list), that line will be\x0a    // treated as the start of a sub-list. What a kludge, huh? This is\x0a    // an aspect of Markdown\x27s syntax that\x27s hard to parse perfectly\x0a    // without resorting to mind-reading. Perhaps the solution is to\x0a    // change the syntax rules such that sub-lists must start with a\x0a    // starting cardinal number; e.g. \x221.\x22 or \x22a.\x22.\x0a    globals.gListLevel++;\x0a\x0a    // trim trailing blank lines:\x0a    listStr = listStr.replace(/\x5cn{2,}$/, \x27\x5cn\x27);\x0a\x0a    // attacklab: add sentinel to emulate \x5cz\x0a    listStr += \x27\xc2\xa80\x27;\x0a\x0a    var rgx = /(\x5cn)?(^ {0,3})([*+-]|\x5cd+[.])[ \x5ct]+((\x5c[(x|X| )?])?[ \x5ct]*[^\x5cr]+?(\x5cn{1,2}))(?=\x5cn*(\xc2\xa80| {0,3}([*+-]|\x5cd+[.])[ \x5ct]+))/gm,\x0a        isParagraphed = (/\x5cn[ \x5ct]*\x5cn(?!\xc2\xa80)/.test(listStr));\x0a\x0a    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\x0a    // which is a syntax breaking change\x0a    // activating this option reverts to old behavior\x0a    if (options.disableForced4SpacesIndentedSublists) {\x0a      rgx = /(\x5cn)?(^ {0,3})([*+-]|\x5cd+[.])[ \x5ct]+((\x5c[(x|X| )?])?[ \x5ct]*[^\x5cr]+?(\x5cn{1,2}))(?=\x5cn*(\xc2\xa80|\x5c2([*+-]|\x5cd+[.])[ \x5ct]+))/gm;\x0a    }\x0a\x0a    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\x0a      checked = (checked && checked.trim() !== \x27\x27);\x0a\x0a      var item = showdown.subParser(\x27outdent\x27)(m4, options, globals),\x0a          bulletStyle = \x27\x27;\x0a\x0a      // Support for github tasklists\x0a      if (taskbtn && options.tasklists) {\x0a        bulletStyle = \x27 class=\x22task-list-item\x22 style=\x22list-style-type: none;\x22\x27;\x0a        item = item.replace(/^[ \x5ct]*\x5c[(x|X| )?]/m, function () {\x0a          var otp = \x27\x3cinput type=\x22checkbox\x22 disabled style=\x22margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\x22\x27;\x0a          if (checked) {\x0a            otp += \x27 checked\x27;\x0a          }\x0a          otp += \x27\x3e\x27;\x0a          return otp;\x0a        });\x0a      }\x0a\x0a      // ISSUE #312\x0a      // This input: - - - a\x0a      // causes trouble to the parser, since it interprets it as:\x0a      // \x3cul\x3e\x3cli\x3e\x3cli\x3e\x3cli\x3ea\x3c/li\x3e\x3c/li\x3e\x3c/li\x3e\x3c/ul\x3e\x0a      // instead of:\x0a      // \x3cul\x3e\x3cli\x3e- - a\x3c/li\x3e\x3c/ul\x3e\x0a      // So, to prevent it, we will put a marker (\xc2\xa8A)in the beginning of the line\x0a      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\x0a      item = item.replace(/^([-*+]|\x5cd\x5c.)[ \x5ct]+[\x5cS\x5cn ]*/g, function (wm2) {\x0a        return \x27\xc2\xa8A\x27 + wm2;\x0a      });\x0a\x0a      // m1 - Leading line or\x0a      // Has a double return (multi paragraph) or\x0a      // Has sublist\x0a      if (m1 || (item.search(/\x5cn{2,}/) \x3e -1)) {\x0a        item = showdown.subParser(\x27githubCodeBlocks\x27)(item, options, globals);\x0a        item = showdown.subParser(\x27blockGamut\x27)(item, options, globals);\x0a      } else {\x0a        // Recursion for sub-lists:\x0a        item = showdown.subParser(\x27lists\x27)(item, options, globals);\x0a        item = item.replace(/\x5cn$/, \x27\x27); // chomp(item)\x0a        item = showdown.subParser(\x27hashHTMLBlocks\x27)(item, options, globals);\x0a\x0a        // Colapse double linebreaks\x0a        item = item.replace(/\x5cn\x5cn+/g, \x27\x5cn\x5cn\x27);\x0a        if (isParagraphed) {\x0a          item = showdown.subParser(\x27paragraphs\x27)(item, options, globals);\x0a        } else {\x0a          item = showdown.subParser(\x27spanGamut\x27)(item, options, globals);\x0a        }\x0a      }\x0a\x0a      // now we need to remove the marker (\xc2\xa8A)\x0a      item = item.replace(\x27\xc2\xa8A\x27, \x27\x27);\x0a      // we can finally wrap the line in list item tags\x0a      item =  \x27\x3cli\x27 + bulletStyle + \x27\x3e\x27 + item + \x27\x3c/li\x3e\x5cn\x27;\x0a\x0a      return item;\x0a    });\x0a\x0a    // attacklab: strip sentinel\x0a    listStr = listStr.replace(/\xc2\xa80/g, \x27\x27);\x0a\x0a    globals.gListLevel--;\x0a\x0a    if (trimTrailing) {\x0a      listStr = listStr.replace(/\x5cs+$/, \x27\x27);\x0a    }\x0a\x0a    return listStr;\x0a  }\x0a\x0a  function styleStartNumber (list, listType) {\x0a    // check if ol and starts by a number different than 1\x0a    if (listType === \x27ol\x27) {\x0a      var res = list.match(/^ *(\x5cd+)\x5c./);\x0a      if (res && res[1] !== \x271\x27) {\x0a        return \x27 start=\x22\x27 + res[1] + \x27\x22\x27;\x0a      }\x0a    }\x0a    return \x27\x27;\x0a  }\x0a\x0a  /**\x0a   * Check and parse consecutive lists (better fix for issue #142)\x0a   * @param {string} list\x0a   * @param {string} listType\x0a   * @param {boolean} trimTrailing\x0a   * @returns {string}\x0a   */\x0a  function parseConsecutiveLists (list, listType, trimTrailing) {\x0a    // check if we caught 2 or more consecutive lists by mistake\x0a    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\x0a    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\x5cd+\x5c.[ \x5ct]/gm : /^ {0,3}\x5cd+\x5c.[ \x5ct]/gm,\x0a        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \x5ct]/gm : /^ {0,3}[*+-][ \x5ct]/gm,\x0a        counterRxg = (listType === \x27ul\x27) ? olRgx : ulRgx,\x0a        result = \x27\x27;\x0a\x0a    if (list.search(counterRxg) !== -1) {\x0a      (function parseCL (txt) {\x0a        var pos = txt.search(counterRxg),\x0a            style = styleStartNumber(list, listType);\x0a        if (pos !== -1) {\x0a          // slice\x0a          result += \x27\x5cn\x5cn\x3c\x27 + listType + style + \x27\x3e\x5cn\x27 + processListItems(txt.slice(0, pos), !!trimTrailing) + \x27\x3c/\x27 + listType + \x27\x3e\x5cn\x27;\x0a\x0a          // invert counterType and listType\x0a          listType = (listType === \x27ul\x27) ? \x27ol\x27 : \x27ul\x27;\x0a          counterRxg = (listType === \x27ul\x27) ? olRgx : ulRgx;\x0a\x0a          //recurse\x0a          parseCL(txt.slice(pos));\x0a        } else {\x0a          result += \x27\x5cn\x5cn\x3c\x27 + listType + style + \x27\x3e\x5cn\x27 + processListItems(txt, !!trimTrailing) + \x27\x3c/\x27 + listType + \x27\x3e\x5cn\x27;\x0a        }\x0a      })(list);\x0a    } else {\x0a      var style = styleStartNumber(list, listType);\x0a      result = \x27\x5cn\x5cn\x3c\x27 + listType + style + \x27\x3e\x5cn\x27 + processListItems(list, !!trimTrailing) + \x27\x3c/\x27 + listType + \x27\x3e\x5cn\x27;\x0a    }\x0a\x0a    return result;\x0a  }\x0a\x0a  /** Start of list parsing **/\x0a  text = globals.converter._dispatch(\x27lists.before\x27, text, options, globals);\x0a  // add sentinel to hack around khtml/safari bug:\x0a  // http://bugs.webkit.org/show_bug.cgi?id=11231\x0a  text += \x27\xc2\xa80\x27;\x0a\x0a  if (globals.gListLevel) {\x0a    text = text.replace(/^(( {0,3}([*+-]|\x5cd+[.])[ \x5ct]+)[^\x5cr]+?(\xc2\xa80|\x5cn{2,}(?=\x5cS)(?![ \x5ct]*(?:[*+-]|\x5cd+[.])[ \x5ct]+)))/gm,\x0a      function (wholeMatch, list, m2) {\x0a        var listType = (m2.search(/[*+-]/g) \x3e -1) ? \x27ul\x27 : \x27ol\x27;\x0a        return parseConsecutiveLists(list, listType, true);\x0a      }\x0a    );\x0a  } else {\x0a    text = text.replace(/(\x5cn\x5cn|^\x5cn?)(( {0,3}([*+-]|\x5cd+[.])[ \x5ct]+)[^\x5cr]+?(\xc2\xa80|\x5cn{2,}(?=\x5cS)(?![ \x5ct]*(?:[*+-]|\x5cd+[.])[ \x5ct]+)))/gm,\x0a      function (wholeMatch, m1, list, m3) {\x0a        var listType = (m3.search(/[*+-]/g) \x3e -1) ? \x27ul\x27 : \x27ol\x27;\x0a        return parseConsecutiveLists(list, listType, false);\x0a      }\x0a    );\x0a  }\x0a\x0a  // strip sentinel\x0a  text = text.replace(/\xc2\xa80/, \x27\x27);\x0a  text = globals.converter._dispatch(\x27lists.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Parse metadata at the top of the document\x0a */\x0ashowdown.subParser(\x27metadata\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.metadata) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27metadata.before\x27, text, options, globals);\x0a\x0a  function parseMetadataContents (content) {\x0a    // raw is raw so it\x27s not changed in any way\x0a    globals.metadata.raw = content;\x0a\x0a    // escape chars forbidden in html attributes\x0a    // double quotes\x0a    content = content\x0a      // ampersand first\x0a      .replace(/&/g, \x27&amp;\x27)\x0a      // double quotes\x0a      .replace(/\x22/g, \x27&quot;\x27);\x0a\x0a    content = content.replace(/\x5cn {4}/g, \x27 \x27);\x0a    content.replace(/^([\x5cS ]+): +([\x5cs\x5cS]+?)$/gm, function (wm, key, value) {\x0a      globals.metadata.parsed[key] = value;\x0a      return \x27\x27;\x0a    });\x0a  }\x0a\x0a  text = text.replace(/^\x5cs*\xc2\xab\xc2\xab\xc2\xab+(\x5cS*?)\x5cn([\x5cs\x5cS]+?)\x5cn\xc2\xbb\xc2\xbb\xc2\xbb+\x5cn/, function (wholematch, format, content) {\x0a    parseMetadataContents(content);\x0a    return \x27\xc2\xa8M\x27;\x0a  });\x0a\x0a  text = text.replace(/^\x5cs*---+(\x5cS*?)\x5cn([\x5cs\x5cS]+?)\x5cn---+\x5cn/, function (wholematch, format, content) {\x0a    if (format) {\x0a      globals.metadata.format = format;\x0a    }\x0a    parseMetadataContents(content);\x0a    return \x27\xc2\xa8M\x27;\x0a  });\x0a\x0a  text = text.replace(/\xc2\xa8M/g, \x27\x27);\x0a\x0a  text = globals.converter._dispatch(\x27metadata.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Remove one level of line-leading tabs or spaces\x0a */\x0ashowdown.subParser(\x27outdent\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27outdent.before\x27, text, options, globals);\x0a\x0a  // attacklab: hack around Konqueror 3.5.4 bug:\x0a  // \x22----------bug\x22.replace(/^-/g,\x22\x22) == \x22bug\x22\x0a  text = text.replace(/^(\x5ct|[ ]{1,4})/gm, \x27\xc2\xa80\x27); // attacklab: g_tab_width\x0a\x0a  // attacklab: clean up hack\x0a  text = text.replace(/\xc2\xa80/g, \x27\x27);\x0a\x0a  text = globals.converter._dispatch(\x27outdent.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a *\x0a */\x0ashowdown.subParser(\x27paragraphs\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27paragraphs.before\x27, text, options, globals);\x0a  // Strip leading and trailing lines:\x0a  text = text.replace(/^\x5cn+/g, \x27\x27);\x0a  text = text.replace(/\x5cn+$/g, \x27\x27);\x0a\x0a  var grafs = text.split(/\x5cn{2,}/g),\x0a      grafsOut = [],\x0a      end = grafs.length; // Wrap \x3cp\x3e tags\x0a\x0a  for (var i = 0; i \x3c end; i++) {\x0a    var str = grafs[i];\x0a    // if this is an HTML marker, copy it\x0a    if (str.search(/\xc2\xa8(K|G)(\x5cd+)\x5c1/g) \x3e= 0) {\x0a      grafsOut.push(str);\x0a\x0a    // test for presence of characters to prevent empty lines being parsed\x0a    // as paragraphs (resulting in undesired extra empty paragraphs)\x0a    } else if (str.search(/\x5cS/) \x3e= 0) {\x0a      str = showdown.subParser(\x27spanGamut\x27)(str, options, globals);\x0a      str = str.replace(/^([ \x5ct]*)/g, \x27\x3cp\x3e\x27);\x0a      str += \x27\x3c/p\x3e\x27;\x0a      grafsOut.push(str);\x0a    }\x0a  }\x0a\x0a  /** Unhashify HTML blocks */\x0a  end = grafsOut.length;\x0a  for (i = 0; i \x3c end; i++) {\x0a    var blockText = \x27\x27,\x0a        grafsOutIt = grafsOut[i],\x0a        codeFlag = false;\x0a    // if this is a marker for an html block...\x0a    // use RegExp.test instead of string.search because of QML bug\x0a    while (/\xc2\xa8(K|G)(\x5cd+)\x5c1/.test(grafsOutIt)) {\x0a      var delim = RegExp.$1,\x0a          num   = RegExp.$2;\x0a\x0a      if (delim === \x27K\x27) {\x0a        blockText = globals.gHtmlBlocks[num];\x0a      } else {\x0a        // we need to check if ghBlock is a false positive\x0a        if (codeFlag) {\x0a          // use encoded version of all text\x0a          blockText = showdown.subParser(\x27encodeCode\x27)(globals.ghCodeBlocks[num].text, options, globals);\x0a        } else {\x0a          blockText = globals.ghCodeBlocks[num].codeblock;\x0a        }\x0a      }\x0a      blockText = blockText.replace(/\x5c$/g, \x27$$$$\x27); // Escape any dollar signs\x0a\x0a      grafsOutIt = grafsOutIt.replace(/(\x5cn\x5cn)?\xc2\xa8(K|G)\x5cd+\x5c2(\x5cn\x5cn)?/, blockText);\x0a      // Check if grafsOutIt is a pre-\x3ecode\x0a      if (/^\x3cpre\x5cb[^\x3e]*\x3e\x5cs*\x3ccode\x5cb[^\x3e]*\x3e/.test(grafsOutIt)) {\x0a        codeFlag = true;\x0a      }\x0a    }\x0a    grafsOut[i] = grafsOutIt;\x0a  }\x0a  text = grafsOut.join(\x27\x5cn\x27);\x0a  // Strip leading and trailing lines:\x0a  text = text.replace(/^\x5cn+/g, \x27\x27);\x0a  text = text.replace(/\x5cn+$/g, \x27\x27);\x0a  return globals.converter._dispatch(\x27paragraphs.after\x27, text, options, globals);\x0a});\x0a\x0d\x0a/**\x0a * Run extension\x0a */\x0ashowdown.subParser(\x27runExtension\x27, function (ext, text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (ext.filter) {\x0a    text = ext.filter(text, globals.converter, options);\x0a\x0a  } else if (ext.regex) {\x0a    // TODO remove this when old extension loading mechanism is deprecated\x0a    var re = ext.regex;\x0a    if (!(re instanceof RegExp)) {\x0a      re = new RegExp(re, \x27g\x27);\x0a    }\x0a    text = text.replace(re, ext.replace);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * These are all the transformations that occur *within* block-level\x0a * tags like paragraphs, headers, and list items.\x0a */\x0ashowdown.subParser(\x27spanGamut\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  text = globals.converter._dispatch(\x27spanGamut.before\x27, text, options, globals);\x0a  text = showdown.subParser(\x27codeSpans\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27escapeSpecialCharsWithinTagAttributes\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27encodeBackslashEscapes\x27)(text, options, globals);\x0a\x0a  // Process anchor and image tags. Images must come first,\x0a  // because ![foo][f] looks like an anchor.\x0a  text = showdown.subParser(\x27images\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27anchors\x27)(text, options, globals);\x0a\x0a  // Make links out of things like `\x3chttp://example.com/\x3e`\x0a  // Must come after anchors, because you can use \x3c and \x3e\x0a  // delimiters in inline links like [this](\x3curl\x3e).\x0a  text = showdown.subParser(\x27autoLinks\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27simplifiedAutoLinks\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27emoji\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27underline\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27italicsAndBold\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27strikethrough\x27)(text, options, globals);\x0a  text = showdown.subParser(\x27ellipsis\x27)(text, options, globals);\x0a\x0a  // we need to hash HTML tags inside spans\x0a  text = showdown.subParser(\x27hashHTMLSpans\x27)(text, options, globals);\x0a\x0a  // now we encode amps and angles\x0a  text = showdown.subParser(\x27encodeAmpsAndAngles\x27)(text, options, globals);\x0a\x0a  // Do hard breaks\x0a  if (options.simpleLineBreaks) {\x0a    // GFM style hard breaks\x0a    // only add line breaks if the text does not contain a block (special case for lists)\x0a    if (!/\x5cn\x5cn\xc2\xa8K/.test(text)) {\x0a      text = text.replace(/\x5cn+/g, \x27\x3cbr /\x3e\x5cn\x27);\x0a    }\x0a  } else {\x0a    // Vanilla hard breaks\x0a    text = text.replace(/  +\x5cn/g, \x27\x3cbr /\x3e\x5cn\x27);\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27spanGamut.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27strikethrough\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  function parseInside (txt) {\x0a    if (options.simplifiedAutoLink) {\x0a      txt = showdown.subParser(\x27simplifiedAutoLinks\x27)(txt, options, globals);\x0a    }\x0a    return \x27\x3cdel\x3e\x27 + txt + \x27\x3c/del\x3e\x27;\x0a  }\x0a\x0a  if (options.strikethrough) {\x0a    text = globals.converter._dispatch(\x27strikethrough.before\x27, text, options, globals);\x0a    text = text.replace(/(?:~){2}([\x5cs\x5cS]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\x0a    text = globals.converter._dispatch(\x27strikethrough.after\x27, text, options, globals);\x0a  }\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Strips link definitions from text, stores the URLs and titles in\x0a * hash references.\x0a * Link defs are in the form: ^[id]: url \x22optional title\x22\x0a */\x0ashowdown.subParser(\x27stripLinkDefinitions\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var regex       = /^ {0,3}\x5c[(.+)]:[ \x5ct]*\x5cn?[ \x5ct]*\x3c?([^\x3e\x5cs]+)\x3e?(?: =([*\x5cd]+[A-Za-z%]{0,4})x([*\x5cd]+[A-Za-z%]{0,4}))?[ \x5ct]*\x5cn?[ \x5ct]*(?:(\x5cn*)[\x22|\x27(](.+?)[\x22|\x27)][ \x5ct]*)?(?:\x5cn+|(?=\xc2\xa80))/gm,\x0a      base64Regex = /^ {0,3}\x5c[(.+)]:[ \x5ct]*\x5cn?[ \x5ct]*\x3c?(data:.+?\x5c/.+?;base64,[A-Za-z0-9+/=\x5cn]+?)\x3e?(?: =([*\x5cd]+[A-Za-z%]{0,4})x([*\x5cd]+[A-Za-z%]{0,4}))?[ \x5ct]*\x5cn?[ \x5ct]*(?:(\x5cn*)[\x22|\x27(](.+?)[\x22|\x27)][ \x5ct]*)?(?:\x5cn\x5cn|(?=\xc2\xa80)|(?=\x5cn\x5c[))/gm;\x0a\x0a  // attacklab: sentinel workarounds for lack of \x5cA and \x5cZ, safari\x5ckhtml bug\x0a  text += \x27\xc2\xa80\x27;\x0a\x0a  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {\x0a    linkId = linkId.toLowerCase();\x0a    if (url.match(/^data:.+?\x5c/.+?;base64,/)) {\x0a      // remove newlines\x0a      globals.gUrls[linkId] = url.replace(/\x5cs/g, \x27\x27);\x0a    } else {\x0a      globals.gUrls[linkId] = showdown.subParser(\x27encodeAmpsAndAngles\x27)(url, options, globals);  // Link IDs are case-insensitive\x0a    }\x0a\x0a    if (blankLines) {\x0a      // Oops, found blank lines, so it\x27s not a title.\x0a      // Put back the parenthetical statement we stole.\x0a      return blankLines + title;\x0a\x0a    } else {\x0a      if (title) {\x0a        globals.gTitles[linkId] = title.replace(/\x22|\x27/g, \x27&quot;\x27);\x0a      }\x0a      if (options.parseImgDimensions && width && height) {\x0a        globals.gDimensions[linkId] = {\x0a          width:  width,\x0a          height: height\x0a        };\x0a      }\x0a    }\x0a    // Completely remove the definition from the text\x0a    return \x27\x27;\x0a  };\x0a\x0a  // first we try to find base64 link references\x0a  text = text.replace(base64Regex, replaceFunc);\x0a\x0a  text = text.replace(regex, replaceFunc);\x0a\x0a  // attacklab: strip sentinel\x0a  text = text.replace(/\xc2\xa80/, \x27\x27);\x0a\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27tables\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.tables) {\x0a    return text;\x0a  }\x0a\x0a  var tableRgx       = /^ {0,3}\x5c|?.+\x5c|.+\x5cn {0,3}\x5c|?[ \x5ct]*:?[ \x5ct]*(?:[-=]){2,}[ \x5ct]*:?[ \x5ct]*\x5c|[ \x5ct]*:?[ \x5ct]*(?:[-=]){2,}[\x5cs\x5cS]+?(?:\x5cn\x5cn|\xc2\xa80)/gm,\x0a    //singeColTblRgx = /^ {0,3}\x5c|.+\x5c|\x5cn {0,3}\x5c|[ \x5ct]*:?[ \x5ct]*(?:[-=]){2,}[ \x5ct]*:?[ \x5ct]*\x5c|[ \x5ct]*\x5cn(?: {0,3}\x5c|.+\x5c|\x5cn)+(?:\x5cn\x5cn|\xc2\xa80)/gm;\x0a      singeColTblRgx = /^ {0,3}\x5c|.+\x5c|[ \x5ct]*\x5cn {0,3}\x5c|[ \x5ct]*:?[ \x5ct]*(?:[-=]){2,}[ \x5ct]*:?[ \x5ct]*\x5c|[ \x5ct]*\x5cn( {0,3}\x5c|.+\x5c|[ \x5ct]*\x5cn)*(?:\x5cn|\xc2\xa80)/gm;\x0a\x0a  function parseStyles (sLine) {\x0a    if (/^:[ \x5ct]*--*$/.test(sLine)) {\x0a      return \x27 style=\x22text-align:left;\x22\x27;\x0a    } else if (/^--*[ \x5ct]*:[ \x5ct]*$/.test(sLine)) {\x0a      return \x27 style=\x22text-align:right;\x22\x27;\x0a    } else if (/^:[ \x5ct]*--*[ \x5ct]*:$/.test(sLine)) {\x0a      return \x27 style=\x22text-align:center;\x22\x27;\x0a    } else {\x0a      return \x27\x27;\x0a    }\x0a  }\x0a\x0a  function parseHeaders (header, style) {\x0a    var id = \x27\x27;\x0a    header = header.trim();\x0a    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don\x27t break backwards compatibility\x0a    if (options.tablesHeaderId || options.tableHeaderId) {\x0a      id = \x27 id=\x22\x27 + header.replace(/ /g, \x27_\x27).toLowerCase() + \x27\x22\x27;\x0a    }\x0a    header = showdown.subParser(\x27spanGamut\x27)(header, options, globals);\x0a\x0a    return \x27\x3cth\x27 + id + style + \x27\x3e\x27 + header + \x27\x3c/th\x3e\x5cn\x27;\x0a  }\x0a\x0a  function parseCells (cell, style) {\x0a    var subText = showdown.subParser(\x27spanGamut\x27)(cell, options, globals);\x0a    return \x27\x3ctd\x27 + style + \x27\x3e\x27 + subText + \x27\x3c/td\x3e\x5cn\x27;\x0a  }\x0a\x0a  function buildTable (headers, cells) {\x0a    var tb = \x27\x3ctable\x3e\x5cn\x3cthead\x3e\x5cn\x3ctr\x3e\x5cn\x27,\x0a        tblLgn = headers.length;\x0a\x0a    for (var i = 0; i \x3c tblLgn; ++i) {\x0a      tb += headers[i];\x0a    }\x0a    tb += \x27\x3c/tr\x3e\x5cn\x3c/thead\x3e\x5cn\x3ctbody\x3e\x5cn\x27;\x0a\x0a    for (i = 0; i \x3c cells.length; ++i) {\x0a      tb += \x27\x3ctr\x3e\x5cn\x27;\x0a      for (var ii = 0; ii \x3c tblLgn; ++ii) {\x0a        tb += cells[i][ii];\x0a      }\x0a      tb += \x27\x3c/tr\x3e\x5cn\x27;\x0a    }\x0a    tb += \x27\x3c/tbody\x3e\x5cn\x3c/table\x3e\x5cn\x27;\x0a    return tb;\x0a  }\x0a\x0a  function parseTable (rawTable) {\x0a    var i, tableLines = rawTable.split(\x27\x5cn\x27);\x0a\x0a    for (i = 0; i \x3c tableLines.length; ++i) {\x0a      // strip wrong first and last column if wrapped tables are used\x0a      if (/^ {0,3}\x5c|/.test(tableLines[i])) {\x0a        tableLines[i] = tableLines[i].replace(/^ {0,3}\x5c|/, \x27\x27);\x0a      }\x0a      if (/\x5c|[ \x5ct]*$/.test(tableLines[i])) {\x0a        tableLines[i] = tableLines[i].replace(/\x5c|[ \x5ct]*$/, \x27\x27);\x0a      }\x0a      // parse code spans first, but we only support one line code spans\x0a      tableLines[i] = showdown.subParser(\x27codeSpans\x27)(tableLines[i], options, globals);\x0a    }\x0a\x0a    var rawHeaders = tableLines[0].split(\x27|\x27).map(function (s) { return s.trim();}),\x0a        rawStyles = tableLines[1].split(\x27|\x27).map(function (s) { return s.trim();}),\x0a        rawCells = [],\x0a        headers = [],\x0a        styles = [],\x0a        cells = [];\x0a\x0a    tableLines.shift();\x0a    tableLines.shift();\x0a\x0a    for (i = 0; i \x3c tableLines.length; ++i) {\x0a      if (tableLines[i].trim() === \x27\x27) {\x0a        continue;\x0a      }\x0a      rawCells.push(\x0a        tableLines[i]\x0a          .split(\x27|\x27)\x0a          .map(function (s) {\x0a            return s.trim();\x0a          })\x0a      );\x0a    }\x0a\x0a    if (rawHeaders.length \x3c rawStyles.length) {\x0a      return rawTable;\x0a    }\x0a\x0a    for (i = 0; i \x3c rawStyles.length; ++i) {\x0a      styles.push(parseStyles(rawStyles[i]));\x0a    }\x0a\x0a    for (i = 0; i \x3c rawHeaders.length; ++i) {\x0a      if (showdown.helper.isUndefined(styles[i])) {\x0a        styles[i] = \x27\x27;\x0a      }\x0a      headers.push(parseHeaders(rawHeaders[i], styles[i]));\x0a    }\x0a\x0a    for (i = 0; i \x3c rawCells.length; ++i) {\x0a      var row = [];\x0a      for (var ii = 0; ii \x3c headers.length; ++ii) {\x0a        if (showdown.helper.isUndefined(rawCells[i][ii])) {\x0a\x0a        }\x0a        row.push(parseCells(rawCells[i][ii], styles[ii]));\x0a      }\x0a      cells.push(row);\x0a    }\x0a\x0a    return buildTable(headers, cells);\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27tables.before\x27, text, options, globals);\x0a\x0a  // find escaped pipe characters\x0a  text = text.replace(/\x5c\x5c(\x5c|)/g, showdown.helper.escapeCharactersCallback);\x0a\x0a  // parse multi column tables\x0a  text = text.replace(tableRgx, parseTable);\x0a\x0a  // parse one column tables\x0a  text = text.replace(singeColTblRgx, parseTable);\x0a\x0a  text = globals.converter._dispatch(\x27tables.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27underline\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a\x0a  if (!options.underline) {\x0a    return text;\x0a  }\x0a\x0a  text = globals.converter._dispatch(\x27underline.before\x27, text, options, globals);\x0a\x0a  if (options.literalMidWordUnderscores) {\x0a    text = text.replace(/\x5cb___(\x5cS[\x5cs\x5cS]*?)___\x5cb/g, function (wm, txt) {\x0a      return \x27\x3cu\x3e\x27 + txt + \x27\x3c/u\x3e\x27;\x0a    });\x0a    text = text.replace(/\x5cb__(\x5cS[\x5cs\x5cS]*?)__\x5cb/g, function (wm, txt) {\x0a      return \x27\x3cu\x3e\x27 + txt + \x27\x3c/u\x3e\x27;\x0a    });\x0a  } else {\x0a    text = text.replace(/___(\x5cS[\x5cs\x5cS]*?)___/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? \x27\x3cu\x3e\x27 + m + \x27\x3c/u\x3e\x27 : wm;\x0a    });\x0a    text = text.replace(/__(\x5cS[\x5cs\x5cS]*?)__/g, function (wm, m) {\x0a      return (/\x5cS$/.test(m)) ? \x27\x3cu\x3e\x27 + m + \x27\x3c/u\x3e\x27 : wm;\x0a    });\x0a  }\x0a\x0a  // escape remaining underscores to prevent them being parsed by italic and bold\x0a  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);\x0a\x0a  text = globals.converter._dispatch(\x27underline.after\x27, text, options, globals);\x0a\x0a  return text;\x0a});\x0a\x0d\x0a/**\x0a * Swap back in all the special characters we\x27ve hidden.\x0a */\x0ashowdown.subParser(\x27unescapeSpecialChars\x27, function (text, options, globals) {\x0a  \x27use strict\x27;\x0a  text = globals.converter._dispatch(\x27unescapeSpecialChars.before\x27, text, options, globals);\x0a\x0a  text = text.replace(/\xc2\xa8E(\x5cd+)E/g, function (wholeMatch, m1) {\x0a    var charCodeToReplace = parseInt(m1);\x0a    return String.fromCharCode(charCodeToReplace);\x0a  });\x0a\x0a  text = globals.converter._dispatch(\x27unescapeSpecialChars.after\x27, text, options, globals);\x0a  return text;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.blockquote\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes()) {\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      var innerTxt = showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a\x0a      if (innerTxt === \x27\x27) {\x0a        continue;\x0a      }\x0a      txt += innerTxt;\x0a    }\x0a  }\x0a  // cleanup\x0a  txt = txt.trim();\x0a  txt = \x27\x3e \x27 + txt.split(\x27\x5cn\x27).join(\x27\x5cn\x3e \x27);\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.codeBlock\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var lang = node.getAttribute(\x27language\x27),\x0a      num  = node.getAttribute(\x27precodenum\x27);\x0a  return \x27```\x27 + lang + \x27\x5cn\x27 + globals.preList[num] + \x27\x5cn```\x27;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.codeSpan\x27, function (node) {\x0a  \x27use strict\x27;\x0a\x0a  return \x27`\x27 + node.innerHTML + \x27`\x27;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.emphasis\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes()) {\x0a    txt += \x27*\x27;\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a    txt += \x27*\x27;\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.header\x27, function (node, globals, headerLevel) {\x0a  \x27use strict\x27;\x0a\x0a  var headerMark = new Array(headerLevel + 1).join(\x27#\x27),\x0a      txt = \x27\x27;\x0a\x0a  if (node.hasChildNodes()) {\x0a    txt = headerMark + \x27 \x27;\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.hr\x27, function () {\x0a  \x27use strict\x27;\x0a\x0a  return \x27---\x27;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.image\x27, function (node) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasAttribute(\x27src\x27)) {\x0a    txt += \x27![\x27 + node.getAttribute(\x27alt\x27) + \x27](\x27;\x0a    txt += \x27\x3c\x27 + node.getAttribute(\x27src\x27) + \x27\x3e\x27;\x0a    if (node.hasAttribute(\x27width\x27) && node.hasAttribute(\x27height\x27)) {\x0a      txt += \x27 =\x27 + node.getAttribute(\x27width\x27) + \x27x\x27 + node.getAttribute(\x27height\x27);\x0a    }\x0a\x0a    if (node.hasAttribute(\x27title\x27)) {\x0a      txt += \x27 \x22\x27 + node.getAttribute(\x27title\x27) + \x27\x22\x27;\x0a    }\x0a    txt += \x27)\x27;\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.links\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes() && node.hasAttribute(\x27href\x27)) {\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a    txt = \x27[\x27;\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a    txt += \x27](\x27;\x0a    txt += \x27\x3c\x27 + node.getAttribute(\x27href\x27) + \x27\x3e\x27;\x0a    if (node.hasAttribute(\x27title\x27)) {\x0a      txt += \x27 \x22\x27 + node.getAttribute(\x27title\x27) + \x27\x22\x27;\x0a    }\x0a    txt += \x27)\x27;\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.list\x27, function (node, globals, type) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (!node.hasChildNodes()) {\x0a    return \x27\x27;\x0a  }\x0a  var listItems       = node.childNodes,\x0a      listItemsLenght = listItems.length,\x0a      listNum = node.getAttribute(\x27start\x27) || 1;\x0a\x0a  for (var i = 0; i \x3c listItemsLenght; ++i) {\x0a    if (typeof listItems[i].tagName === \x27undefined\x27 || listItems[i].tagName.toLowerCase() !== \x27li\x27) {\x0a      continue;\x0a    }\x0a\x0a    // define the bullet to use in list\x0a    var bullet = \x27\x27;\x0a    if (type === \x27ol\x27) {\x0a      bullet = listNum.toString() + \x27. \x27;\x0a    } else {\x0a      bullet = \x27- \x27;\x0a    }\x0a\x0a    // parse list item\x0a    txt += bullet + showdown.subParser(\x27makeMarkdown.listItem\x27)(listItems[i], globals);\x0a    ++listNum;\x0a  }\x0a\x0a  // add comment at the end to prevent consecutive lists to be parsed as one\x0a  txt += \x27\x5cn\x3c!-- --\x3e\x5cn\x27;\x0a  return txt.trim();\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.listItem\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var listItemTxt = \x27\x27;\x0a\x0a  var children = node.childNodes,\x0a      childrenLenght = children.length;\x0a\x0a  for (var i = 0; i \x3c childrenLenght; ++i) {\x0a    listItemTxt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a  }\x0a  // if it\x27s only one liner, we need to add a newline at the end\x0a  if (!/\x5cn$/.test(listItemTxt)) {\x0a    listItemTxt += \x27\x5cn\x27;\x0a  } else {\x0a    // it\x27s multiparagraph, so we need to indent\x0a    listItemTxt = listItemTxt\x0a      .split(\x27\x5cn\x27)\x0a      .join(\x27\x5cn    \x27)\x0a      .replace(/^ {4}$/gm, \x27\x27)\x0a      .replace(/\x5cn\x5cn+/g, \x27\x5cn\x5cn\x27);\x0a  }\x0a\x0a  return listItemTxt;\x0a});\x0a\x0d\x0a\x0a\x0ashowdown.subParser(\x27makeMarkdown.node\x27, function (node, globals, spansOnly) {\x0a  \x27use strict\x27;\x0a\x0a  spansOnly = spansOnly || false;\x0a\x0a  var txt = \x27\x27;\x0a\x0a  // edge case of text without wrapper paragraph\x0a  if (node.nodeType === 3) {\x0a    return showdown.subParser(\x27makeMarkdown.txt\x27)(node, globals);\x0a  }\x0a\x0a  // HTML comment\x0a  if (node.nodeType === 8) {\x0a    return \x27\x3c!--\x27 + node.data + \x27--\x3e\x5cn\x5cn\x27;\x0a  }\x0a\x0a  // process only node elements\x0a  if (node.nodeType !== 1) {\x0a    return \x27\x27;\x0a  }\x0a\x0a  var tagName = node.tagName.toLowerCase();\x0a\x0a  switch (tagName) {\x0a\x0a    //\x0a    // BLOCKS\x0a    //\x0a    case \x27h1\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 1) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a    case \x27h2\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 2) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a    case \x27h3\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 3) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a    case \x27h4\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 4) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a    case \x27h5\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 5) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a    case \x27h6\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.header\x27)(node, globals, 6) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27p\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.paragraph\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27blockquote\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.blockquote\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27hr\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.hr\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27ol\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.list\x27)(node, globals, \x27ol\x27) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27ul\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.list\x27)(node, globals, \x27ul\x27) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27precode\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.codeBlock\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27pre\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.pre\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    case \x27table\x27:\x0a      if (!spansOnly) { txt = showdown.subParser(\x27makeMarkdown.table\x27)(node, globals) + \x27\x5cn\x5cn\x27; }\x0a      break;\x0a\x0a    //\x0a    // SPANS\x0a    //\x0a    case \x27code\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.codeSpan\x27)(node, globals);\x0a      break;\x0a\x0a    case \x27em\x27:\x0a    case \x27i\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.emphasis\x27)(node, globals);\x0a      break;\x0a\x0a    case \x27strong\x27:\x0a    case \x27b\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.strong\x27)(node, globals);\x0a      break;\x0a\x0a    case \x27del\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.strikethrough\x27)(node, globals);\x0a      break;\x0a\x0a    case \x27a\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.links\x27)(node, globals);\x0a      break;\x0a\x0a    case \x27img\x27:\x0a      txt = showdown.subParser(\x27makeMarkdown.image\x27)(node, globals);\x0a      break;\x0a\x0a    default:\x0a      txt = node.outerHTML + \x27\x5cn\x5cn\x27;\x0a  }\x0a\x0a  // common normalization\x0a  // TODO eventually\x0a\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.paragraph\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes()) {\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a  }\x0a\x0a  // some text normalization\x0a  txt = txt.trim();\x0a\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.pre\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var num  = node.getAttribute(\x27prenum\x27);\x0a  return \x27\x3cpre\x3e\x27 + globals.preList[num] + \x27\x3c/pre\x3e\x27;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.strikethrough\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes()) {\x0a    txt += \x27~~\x27;\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a    txt += \x27~~\x27;\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.strong\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (node.hasChildNodes()) {\x0a    txt += \x27**\x27;\x0a    var children = node.childNodes,\x0a        childrenLength = children.length;\x0a    for (var i = 0; i \x3c childrenLength; ++i) {\x0a      txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals);\x0a    }\x0a    txt += \x27**\x27;\x0a  }\x0a  return txt;\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.table\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27,\x0a      tableArray = [[], []],\x0a      headings   = node.querySelectorAll(\x27thead\x3etr\x3eth\x27),\x0a      rows       = node.querySelectorAll(\x27tbody\x3etr\x27),\x0a      i, ii;\x0a  for (i = 0; i \x3c headings.length; ++i) {\x0a    var headContent = showdown.subParser(\x27makeMarkdown.tableCell\x27)(headings[i], globals),\x0a        allign = \x27---\x27;\x0a\x0a    if (headings[i].hasAttribute(\x27style\x27)) {\x0a      var style = headings[i].getAttribute(\x27style\x27).toLowerCase().replace(/\x5cs/g, \x27\x27);\x0a      switch (style) {\x0a        case \x27text-align:left;\x27:\x0a          allign = \x27:---\x27;\x0a          break;\x0a        case \x27text-align:right;\x27:\x0a          allign = \x27---:\x27;\x0a          break;\x0a        case \x27text-align:center;\x27:\x0a          allign = \x27:---:\x27;\x0a          break;\x0a      }\x0a    }\x0a    tableArray[0][i] = headContent.trim();\x0a    tableArray[1][i] = allign;\x0a  }\x0a\x0a  for (i = 0; i \x3c rows.length; ++i) {\x0a    var r = tableArray.push([]) - 1,\x0a        cols = rows[i].getElementsByTagName(\x27td\x27);\x0a\x0a    for (ii = 0; ii \x3c headings.length; ++ii) {\x0a      var cellContent = \x27 \x27;\x0a      if (typeof cols[ii] !== \x27undefined\x27) {\x0a        cellContent = showdown.subParser(\x27makeMarkdown.tableCell\x27)(cols[ii], globals);\x0a      }\x0a      tableArray[r].push(cellContent);\x0a    }\x0a  }\x0a\x0a  var cellSpacesCount = 3;\x0a  for (i = 0; i \x3c tableArray.length; ++i) {\x0a    for (ii = 0; ii \x3c tableArray[i].length; ++ii) {\x0a      var strLen = tableArray[i][ii].length;\x0a      if (strLen \x3e cellSpacesCount) {\x0a        cellSpacesCount = strLen;\x0a      }\x0a    }\x0a  }\x0a\x0a  for (i = 0; i \x3c tableArray.length; ++i) {\x0a    for (ii = 0; ii \x3c tableArray[i].length; ++ii) {\x0a      if (i === 1) {\x0a        if (tableArray[i][ii].slice(-1) === \x27:\x27) {\x0a          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, \x27-\x27) + \x27:\x27;\x0a        } else {\x0a          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, \x27-\x27);\x0a        }\x0a      } else {\x0a        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);\x0a      }\x0a    }\x0a    txt += \x27| \x27 + tableArray[i].join(\x27 | \x27) + \x27 |\x5cn\x27;\x0a  }\x0a\x0a  return txt.trim();\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.tableCell\x27, function (node, globals) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = \x27\x27;\x0a  if (!node.hasChildNodes()) {\x0a    return \x27\x27;\x0a  }\x0a  var children = node.childNodes,\x0a      childrenLength = children.length;\x0a\x0a  for (var i = 0; i \x3c childrenLength; ++i) {\x0a    txt += showdown.subParser(\x27makeMarkdown.node\x27)(children[i], globals, true);\x0a  }\x0a  return txt.trim();\x0a});\x0a\x0d\x0ashowdown.subParser(\x27makeMarkdown.txt\x27, function (node) {\x0a  \x27use strict\x27;\x0a\x0a  var txt = node.nodeValue;\x0a\x0a  // multiple spaces are collapsed\x0a  txt = txt.replace(/ +/g, \x27 \x27);\x0a\x0a  // replace the custom \xc2\xa8NBSP; with a space\x0a  txt = txt.replace(/\xc2\xa8NBSP;/g, \x27 \x27);\x0a\x0a  // \x22, \x3c, \x3e and & should replace escaped html entities\x0a  txt = showdown.helper.unescapeHTMLEntities(txt);\x0a\x0a  // escape markdown magic characters\x0a  // emphasis, strong and strikethrough - can appear everywhere\x0a  // we also escape pipe (|) because of tables\x0a  // and escape ` because of code blocks and spans\x0a  txt = txt.replace(/([*_~|`])/g, \x27\x5c\x5c$1\x27);\x0a\x0a  // escape \x3e because of blockquotes\x0a  txt = txt.replace(/^(\x5cs*)\x3e/g, \x27\x5c\x5c$1\x3e\x27);\x0a\x0a  // hash character, only troublesome at the beginning of a line because of headers\x0a  txt = txt.replace(/^#/gm, \x27\x5c\x5c#\x27);\x0a\x0a  // horizontal rules\x0a  txt = txt.replace(/^(\x5cs*)([-=]{3,})(\x5cs*)$/, \x27$1\x5c\x5c$2$3\x27);\x0a\x0a  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer\x0a  txt = txt.replace(/^( {0,3}\x5cd+)\x5c./gm, \x27$1\x5c\x5c.\x27);\x0a\x0a  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)\x0a  txt = txt.replace(/^( {0,3})([+-])/gm, \x27$1\x5c\x5c$2\x27);\x0a\x0a  // images and links, ] followed by ( is problematic, so we escape it\x0a  txt = txt.replace(/]([\x5cs]*)\x5c(/g, \x27\x5c\x5c]$1\x5c\x5c(\x27);\x0a\x0a  // reference URIs must also be escaped\x0a  txt = txt.replace(/^ {0,3}\x5c[([\x5cS \x5ct]*?)]:/gm, \x27\x5c\x5c[$1]:\x27);\x0a\x0a  return txt;\x0a});\x0a\x0d\x0avar root = this;\x0a\x0a// AMD Loader\x0aif (true) {\x0a  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\x0a    \x27use strict\x27;\x0a    return showdown;\x0a  }).call(exports, __webpack_require__, exports, module),\x0a\x09\x09\x09\x09__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\x0a\x0a// CommonJS/nodeJS Loader\x0a} else {}\x0a}).call(this);\x0d\x0a\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 24:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22dom\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 26:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22hooks\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 28:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\x0avar arrayWithHoles = __webpack_require__(37);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\x0afunction _iterableToArrayLimit(arr, i) {\x0a  var _arr = [];\x0a  var _n = true;\x0a  var _d = false;\x0a  var _e = undefined;\x0a\x0a  try {\x0a    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\x0a      _arr.push(_s.value);\x0a\x0a      if (i && _arr.length === i) break;\x0a    }\x0a  } catch (err) {\x0a    _d = true;\x0a    _e = err;\x0a  } finally {\x0a    try {\x0a      if (!_n && _i[\x22return\x22] != null) _i[\x22return\x22]();\x0a    } finally {\x0a      if (_d) throw _e;\x0a    }\x0a  }\x0a\x0a  return _arr;\x0a}\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\x0avar nonIterableRest = __webpack_require__(38);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _slicedToArray; });\x0a\x0a\x0a\x0afunction _slicedToArray(arr, i) {\x0a  return Object(arrayWithHoles[\x22a\x22 /* default */])(arr) || _iterableToArrayLimit(arr, i) || Object(nonIterableRest[\x22a\x22 /* default */])();\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 30:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a\x0a\x0avar LEAF_KEY, hasWeakMap;\x0a\x0a/**\x0a * Arbitrary value used as key for referencing cache object in WeakMap tree.\x0a *\x0a * @type {Object}\x0a */\x0aLEAF_KEY = {};\x0a\x0a/**\x0a * Whether environment supports WeakMap.\x0a *\x0a * @type {boolean}\x0a */\x0ahasWeakMap = typeof WeakMap !== \x27undefined\x27;\x0a\x0a/**\x0a * Returns the first argument as the sole entry in an array.\x0a *\x0a * @param {*} value Value to return.\x0a *\x0a * @return {Array} Value returned as entry in array.\x0a */\x0afunction arrayOf( value ) {\x0a\x09return [ value ];\x0a}\x0a\x0a/**\x0a * Returns true if the value passed is object-like, or false otherwise. A value\x0a * is object-like if it can support property assignment, e.g. object or array.\x0a *\x0a * @param {*} value Value to test.\x0a *\x0a * @return {boolean} Whether value is object-like.\x0a */\x0afunction isObjectLike( value ) {\x0a\x09return !! value && \x27object\x27 === typeof value;\x0a}\x0a\x0a/**\x0a * Creates and returns a new cache object.\x0a *\x0a * @return {Object} Cache object.\x0a */\x0afunction createCache() {\x0a\x09var cache = {\x0a\x09\x09clear: function() {\x0a\x09\x09\x09cache.head = null;\x0a\x09\x09},\x0a\x09};\x0a\x0a\x09return cache;\x0a}\x0a\x0a/**\x0a * Returns true if entries within the two arrays are strictly equal by\x0a * reference from a starting index.\x0a *\x0a * @param {Array}  a         First array.\x0a * @param {Array}  b         Second array.\x0a * @param {number} fromIndex Index from which to start comparison.\x0a *\x0a * @return {boolean} Whether arrays are shallowly equal.\x0a */\x0afunction isShallowEqual( a, b, fromIndex ) {\x0a\x09var i;\x0a\x0a\x09if ( a.length !== b.length ) {\x0a\x09\x09return false;\x0a\x09}\x0a\x0a\x09for ( i = fromIndex; i \x3c a.length; i++ ) {\x0a\x09\x09if ( a[ i ] !== b[ i ] ) {\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x09}\x0a\x0a\x09return true;\x0a}\x0a\x0a/**\x0a * Returns a memoized selector function. The getDependants function argument is\x0a * called before the memoized selector and is expected to return an immutable\x0a * reference or array of references on which the selector depends for computing\x0a * its own return value. The memoize cache is preserved only as long as those\x0a * dependant references remain the same. If getDependants returns a different\x0a * reference(s), the cache is cleared and the selector value regenerated.\x0a *\x0a * @param {Function} selector      Selector function.\x0a * @param {Function} getDependants Dependant getter returning an immutable\x0a *                                 reference or array of reference used in\x0a *                                 cache bust consideration.\x0a *\x0a * @return {Function} Memoized selector.\x0a */\x0a/* harmony default export */ __webpack_exports__[\x22a\x22] = (function( selector, getDependants ) {\x0a\x09var rootCache, getCache;\x0a\x0a\x09// Use object source as dependant if getter not provided\x0a\x09if ( ! getDependants ) {\x0a\x09\x09getDependants = arrayOf;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Returns the root cache. If WeakMap is supported, this is assigned to the\x0a\x09 * root WeakMap cache set, otherwise it is a shared instance of the default\x0a\x09 * cache object.\x0a\x09 *\x0a\x09 * @return {(WeakMap|Object)} Root cache object.\x0a\x09 */\x0a\x09function getRootCache() {\x0a\x09\x09return rootCache;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Returns the cache for a given dependants array. When possible, a WeakMap\x0a\x09 * will be used to create a unique cache for each set of dependants. This\x0a\x09 * is feasible due to the nature of WeakMap in allowing garbage collection\x0a\x09 * to occur on entries where the key object is no longer referenced. Since\x0a\x09 * WeakMap requires the key to be an object, this is only possible when the\x0a\x09 * dependant is object-like. The root cache is created as a hierarchy where\x0a\x09 * each top-level key is the first entry in a dependants set, the value a\x0a\x09 * WeakMap where each key is the next dependant, and so on. This continues\x0a\x09 * so long as the dependants are object-like. If no dependants are object-\x0a\x09 * like, then the cache is shared across all invocations.\x0a\x09 *\x0a\x09 * @see isObjectLike\x0a\x09 *\x0a\x09 * @param {Array} dependants Selector dependants.\x0a\x09 *\x0a\x09 * @return {Object} Cache object.\x0a\x09 */\x0a\x09function getWeakMapCache( dependants ) {\x0a\x09\x09var caches = rootCache,\x0a\x09\x09\x09isUniqueByDependants = true,\x0a\x09\x09\x09i, dependant, map, cache;\x0a\x0a\x09\x09for ( i = 0; i \x3c dependants.length; i++ ) {\x0a\x09\x09\x09dependant = dependants[ i ];\x0a\x0a\x09\x09\x09// Can only compose WeakMap from object-like key.\x0a\x09\x09\x09if ( ! isObjectLike( dependant ) ) {\x0a\x09\x09\x09\x09isUniqueByDependants = false;\x0a\x09\x09\x09\x09break;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Does current segment of cache already have a WeakMap?\x0a\x09\x09\x09if ( caches.has( dependant ) ) {\x0a\x09\x09\x09\x09// Traverse into nested WeakMap.\x0a\x09\x09\x09\x09caches = caches.get( dependant );\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09// Create, set, and traverse into a new one.\x0a\x09\x09\x09\x09map = new WeakMap();\x0a\x09\x09\x09\x09caches.set( dependant, map );\x0a\x09\x09\x09\x09caches = map;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09// We use an arbitrary (but consistent) object as key for the last item\x0a\x09\x09// in the WeakMap to serve as our running cache.\x0a\x09\x09if ( ! caches.has( LEAF_KEY ) ) {\x0a\x09\x09\x09cache = createCache();\x0a\x09\x09\x09cache.isUniqueByDependants = isUniqueByDependants;\x0a\x09\x09\x09caches.set( LEAF_KEY, cache );\x0a\x09\x09}\x0a\x0a\x09\x09return caches.get( LEAF_KEY );\x0a\x09}\x0a\x0a\x09// Assign cache handler by availability of WeakMap\x0a\x09getCache = hasWeakMap ? getWeakMapCache : getRootCache;\x0a\x0a\x09/**\x0a\x09 * Resets root memoization cache.\x0a\x09 */\x0a\x09function clear() {\x0a\x09\x09rootCache = hasWeakMap ? new WeakMap() : createCache();\x0a\x09}\x0a\x0a\x09// eslint-disable-next-line jsdoc/check-param-names\x0a\x09/**\x0a\x09 * The augmented selector call, considering first whether dependants have\x0a\x09 * changed before passing it to underlying memoize function.\x0a\x09 *\x0a\x09 * @param {Object} source    Source object for derivation.\x0a\x09 * @param {...*}   extraArgs Additional arguments to pass to selector.\x0a\x09 *\x0a\x09 * @return {*} Selector result.\x0a\x09 */\x0a\x09function callSelector( /* source, ...extraArgs */ ) {\x0a\x09\x09var len = arguments.length,\x0a\x09\x09\x09cache, node, i, args, dependants;\x0a\x0a\x09\x09// Create copy of arguments (avoid leaking deoptimization).\x0a\x09\x09args = new Array( len );\x0a\x09\x09for ( i = 0; i \x3c len; i++ ) {\x0a\x09\x09\x09args[ i ] = arguments[ i ];\x0a\x09\x09}\x0a\x0a\x09\x09dependants = getDependants.apply( null, args );\x0a\x09\x09cache = getCache( dependants );\x0a\x0a\x09\x09// If not guaranteed uniqueness by dependants (primitive type or lack\x0a\x09\x09// of WeakMap support), shallow compare against last dependants and, if\x0a\x09\x09// references have changed, destroy cache to recalculate result.\x0a\x09\x09if ( ! cache.isUniqueByDependants ) {\x0a\x09\x09\x09if ( cache.lastDependants && ! isShallowEqual( dependants, cache.lastDependants, 0 ) ) {\x0a\x09\x09\x09\x09cache.clear();\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09cache.lastDependants = dependants;\x0a\x09\x09}\x0a\x0a\x09\x09node = cache.head;\x0a\x09\x09while ( node ) {\x0a\x09\x09\x09// Check whether node arguments match arguments\x0a\x09\x09\x09if ( ! isShallowEqual( node.args, args, 1 ) ) {\x0a\x09\x09\x09\x09node = node.next;\x0a\x09\x09\x09\x09continue;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// At this point we can assume we\x27ve found a match\x0a\x0a\x09\x09\x09// Surface matched node to head if not already\x0a\x09\x09\x09if ( node !== cache.head ) {\x0a\x09\x09\x09\x09// Adjust siblings to point to each other.\x0a\x09\x09\x09\x09node.prev.next = node.next;\x0a\x09\x09\x09\x09if ( node.next ) {\x0a\x09\x09\x09\x09\x09node.next.prev = node.prev;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09node.next = cache.head;\x0a\x09\x09\x09\x09node.prev = null;\x0a\x09\x09\x09\x09cache.head.prev = node;\x0a\x09\x09\x09\x09cache.head = node;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Return immediately\x0a\x09\x09\x09return node.val;\x0a\x09\x09}\x0a\x0a\x09\x09// No cached value found. Continue to insertion phase:\x0a\x0a\x09\x09node = {\x0a\x09\x09\x09// Generate the result from original function\x0a\x09\x09\x09val: selector.apply( null, args ),\x0a\x09\x09};\x0a\x0a\x09\x09// Avoid including the source object in the cache.\x0a\x09\x09args[ 0 ] = null;\x0a\x09\x09node.args = args;\x0a\x0a\x09\x09// Don\x27t need to check whether node is already head, since it would\x0a\x09\x09// have been returned above already if it was\x0a\x0a\x09\x09// Shift existing head down list\x0a\x09\x09if ( cache.head ) {\x0a\x09\x09\x09cache.head.prev = node;\x0a\x09\x09\x09node.next = cache.head;\x0a\x09\x09}\x0a\x0a\x09\x09cache.head = node;\x0a\x0a\x09\x09return node.val;\x0a\x09}\x0a\x0a\x09callSelector.getDependants = getDependants;\x0a\x09callSelector.clear = clear;\x0a\x09clear();\x0a\x0a\x09return callSelector;\x0a});\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 34:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _iterableToArray; });\x0afunction _iterableToArray(iter) {\x0a  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \x22[object Arguments]\x22) return Array.from(iter);\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 35:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22blob\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 362:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a__webpack_require__.r(__webpack_exports__);\x0avar selectors_namespaceObject = {};\x0a__webpack_require__.r(selectors_namespaceObject);\x0a__webpack_require__.d(selectors_namespaceObject, \x22getBlockTypes\x22, function() { return getBlockTypes; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getBlockType\x22, function() { return getBlockType; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getBlockStyles\x22, function() { return getBlockStyles; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getCategories\x22, function() { return getCategories; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getDefaultBlockName\x22, function() { return getDefaultBlockName; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getFreeformFallbackBlockName\x22, function() { return getFreeformFallbackBlockName; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getUnregisteredFallbackBlockName\x22, function() { return getUnregisteredFallbackBlockName; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getChildBlockNames\x22, function() { return selectors_getChildBlockNames; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22getBlockSupport\x22, function() { return selectors_getBlockSupport; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22hasBlockSupport\x22, function() { return hasBlockSupport; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22isMatchingSearchTerm\x22, function() { return isMatchingSearchTerm; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22hasChildBlocks\x22, function() { return selectors_hasChildBlocks; });\x0a__webpack_require__.d(selectors_namespaceObject, \x22hasChildBlocksWithInserterSupport\x22, function() { return selectors_hasChildBlocksWithInserterSupport; });\x0avar actions_namespaceObject = {};\x0a__webpack_require__.r(actions_namespaceObject);\x0a__webpack_require__.d(actions_namespaceObject, \x22addBlockTypes\x22, function() { return addBlockTypes; });\x0a__webpack_require__.d(actions_namespaceObject, \x22removeBlockTypes\x22, function() { return removeBlockTypes; });\x0a__webpack_require__.d(actions_namespaceObject, \x22addBlockStyles\x22, function() { return addBlockStyles; });\x0a__webpack_require__.d(actions_namespaceObject, \x22removeBlockStyles\x22, function() { return removeBlockStyles; });\x0a__webpack_require__.d(actions_namespaceObject, \x22setDefaultBlockName\x22, function() { return setDefaultBlockName; });\x0a__webpack_require__.d(actions_namespaceObject, \x22setFreeformFallbackBlockName\x22, function() { return setFreeformFallbackBlockName; });\x0a__webpack_require__.d(actions_namespaceObject, \x22setUnregisteredFallbackBlockName\x22, function() { return setUnregisteredFallbackBlockName; });\x0a__webpack_require__.d(actions_namespaceObject, \x22setCategories\x22, function() { return setCategories; });\x0a__webpack_require__.d(actions_namespaceObject, \x22updateCategory\x22, function() { return updateCategory; });\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22data\x22]}\x0avar external_this_wp_data_ = __webpack_require__(5);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\x0avar defineProperty = __webpack_require__(15);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\x0avar toConsumableArray = __webpack_require__(17);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread.js\x0avar objectSpread = __webpack_require__(7);\x0a\x0a// EXTERNAL MODULE: external \x22lodash\x22\x0avar external_lodash_ = __webpack_require__(2);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22i18n\x22]}\x0avar external_this_wp_i18n_ = __webpack_require__(1);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/store/reducer.js\x0a\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Module Constants\x0a */\x0a\x0avar DEFAULT_CATEGORIES = [{\x0a  slug: \x27common\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Common Blocks\x27)\x0a}, {\x0a  slug: \x27formatting\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Formatting\x27)\x0a}, {\x0a  slug: \x27layout\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Layout Elements\x27)\x0a}, {\x0a  slug: \x27widgets\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Widgets\x27)\x0a}, {\x0a  slug: \x27embed\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Embeds\x27)\x0a}, {\x0a  slug: \x27reusable\x27,\x0a  title: Object(external_this_wp_i18n_[\x22__\x22])(\x27Reusable Blocks\x27)\x0a}];\x0a/**\x0a * Reducer managing the block types\x0a *\x0a * @param {Object} state  Current state.\x0a * @param {Object} action Dispatched action.\x0a *\x0a * @return {Object} Updated state.\x0a */\x0a\x0afunction reducer_blockTypes() {\x0a  var state = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : {};\x0a  var action = arguments.length \x3e 1 ? arguments[1] : undefined;\x0a\x0a  switch (action.type) {\x0a    case \x27ADD_BLOCK_TYPES\x27:\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, state, Object(external_lodash_[\x22keyBy\x22])(Object(external_lodash_[\x22map\x22])(action.blockTypes, function (blockType) {\x0a        return Object(external_lodash_[\x22omit\x22])(blockType, \x27styles \x27);\x0a      }), \x27name\x27));\x0a\x0a    case \x27REMOVE_BLOCK_TYPES\x27:\x0a      return Object(external_lodash_[\x22omit\x22])(state, action.names);\x0a  }\x0a\x0a  return state;\x0a}\x0a/**\x0a * Reducer managing the block style variations.\x0a *\x0a * @param {Object} state  Current state.\x0a * @param {Object} action Dispatched action.\x0a *\x0a * @return {Object} Updated state.\x0a */\x0a\x0afunction blockStyles() {\x0a  var state = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : {};\x0a  var action = arguments.length \x3e 1 ? arguments[1] : undefined;\x0a\x0a  switch (action.type) {\x0a    case \x27ADD_BLOCK_TYPES\x27:\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, state, Object(external_lodash_[\x22mapValues\x22])(Object(external_lodash_[\x22keyBy\x22])(action.blockTypes, \x27name\x27), function (blockType) {\x0a        return Object(external_lodash_[\x22uniqBy\x22])([].concat(Object(toConsumableArray[\x22a\x22 /* default */])(Object(external_lodash_[\x22get\x22])(blockType, [\x27styles\x27], [])), Object(toConsumableArray[\x22a\x22 /* default */])(Object(external_lodash_[\x22get\x22])(state, [blockType.name], []))), function (style) {\x0a          return style.name;\x0a        });\x0a      }));\x0a\x0a    case \x27ADD_BLOCK_STYLES\x27:\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, state, Object(defineProperty[\x22a\x22 /* default */])({}, action.blockName, Object(external_lodash_[\x22uniqBy\x22])([].concat(Object(toConsumableArray[\x22a\x22 /* default */])(Object(external_lodash_[\x22get\x22])(state, [action.blockName], [])), Object(toConsumableArray[\x22a\x22 /* default */])(action.styles)), function (style) {\x0a        return style.name;\x0a      })));\x0a\x0a    case \x27REMOVE_BLOCK_STYLES\x27:\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, state, Object(defineProperty[\x22a\x22 /* default */])({}, action.blockName, Object(external_lodash_[\x22filter\x22])(Object(external_lodash_[\x22get\x22])(state, [action.blockName], []), function (style) {\x0a        return action.styleNames.indexOf(style.name) === -1;\x0a      })));\x0a  }\x0a\x0a  return state;\x0a}\x0a/**\x0a * Higher-order Reducer creating a reducer keeping track of given block name.\x0a *\x0a * @param {string} setActionType  Action type.\x0a *\x0a * @return {function} Reducer.\x0a */\x0a\x0afunction createBlockNameSetterReducer(setActionType) {\x0a  return function () {\x0a    var state = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : null;\x0a    var action = arguments.length \x3e 1 ? arguments[1] : undefined;\x0a\x0a    switch (action.type) {\x0a      case \x27REMOVE_BLOCK_TYPES\x27:\x0a        if (action.names.indexOf(state) !== -1) {\x0a          return null;\x0a        }\x0a\x0a        return state;\x0a\x0a      case setActionType:\x0a        return action.name || null;\x0a    }\x0a\x0a    return state;\x0a  };\x0a}\x0avar reducer_defaultBlockName = createBlockNameSetterReducer(\x27SET_DEFAULT_BLOCK_NAME\x27);\x0avar freeformFallbackBlockName = createBlockNameSetterReducer(\x27SET_FREEFORM_FALLBACK_BLOCK_NAME\x27);\x0avar unregisteredFallbackBlockName = createBlockNameSetterReducer(\x27SET_UNREGISTERED_FALLBACK_BLOCK_NAME\x27);\x0a/**\x0a * Reducer managing the categories\x0a *\x0a * @param {Object} state  Current state.\x0a * @param {Object} action Dispatched action.\x0a *\x0a * @return {Object} Updated state.\x0a */\x0a\x0afunction reducer_categories() {\x0a  var state = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CATEGORIES;\x0a  var action = arguments.length \x3e 1 ? arguments[1] : undefined;\x0a\x0a  switch (action.type) {\x0a    case \x27SET_CATEGORIES\x27:\x0a      return action.categories || [];\x0a\x0a    case \x27UPDATE_CATEGORY\x27:\x0a      {\x0a        if (!action.category || Object(external_lodash_[\x22isEmpty\x22])(action.category)) {\x0a          return state;\x0a        }\x0a\x0a        var categoryToChange = Object(external_lodash_[\x22find\x22])(state, [\x27slug\x27, action.slug]);\x0a\x0a        if (categoryToChange) {\x0a          return Object(external_lodash_[\x22map\x22])(state, function (category) {\x0a            if (category.slug === action.slug) {\x0a              return Object(objectSpread[\x22a\x22 /* default */])({}, category, action.category);\x0a            }\x0a\x0a            return category;\x0a          });\x0a        }\x0a      }\x0a  }\x0a\x0a  return state;\x0a}\x0a/* harmony default export */ var reducer = (Object(external_this_wp_data_[\x22combineReducers\x22])({\x0a  blockTypes: reducer_blockTypes,\x0a  blockStyles: blockStyles,\x0a  defaultBlockName: reducer_defaultBlockName,\x0a  freeformFallbackBlockName: freeformFallbackBlockName,\x0a  unregisteredFallbackBlockName: unregisteredFallbackBlockName,\x0a  categories: reducer_categories\x0a}));\x0a\x0a// EXTERNAL MODULE: ./node_modules/rememo/es/rememo.js\x0avar rememo = __webpack_require__(30);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/store/selectors.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a\x0a/**\x0a * Given a block name or block type object, returns the corresponding\x0a * normalized block type object.\x0a *\x0a * @param {Object}          state      Blocks state.\x0a * @param {(string|Object)} nameOrType Block name or type object\x0a *\x0a * @return {Object} Block type object.\x0a */\x0a\x0avar getNormalizedBlockType = function getNormalizedBlockType(state, nameOrType) {\x0a  return \x27string\x27 === typeof nameOrType ? getBlockType(state, nameOrType) : nameOrType;\x0a};\x0a/**\x0a * Returns all the available block types.\x0a *\x0a * @param {Object} state Data state.\x0a *\x0a * @return {Array} Block Types.\x0a */\x0a\x0a\x0avar getBlockTypes = Object(rememo[\x22a\x22 /* default */])(function (state) {\x0a  return Object.values(state.blockTypes);\x0a}, function (state) {\x0a  return [state.blockTypes];\x0a});\x0a/**\x0a * Returns a block type by name.\x0a *\x0a * @param {Object} state Data state.\x0a * @param {string} name Block type name.\x0a *\x0a * @return {Object?} Block Type.\x0a */\x0a\x0afunction getBlockType(state, name) {\x0a  return state.blockTypes[name];\x0a}\x0a/**\x0a * Returns block styles by block name.\x0a *\x0a * @param {Object} state Data state.\x0a * @param {string} name  Block type name.\x0a *\x0a * @return {Array?} Block Styles.\x0a */\x0a\x0afunction getBlockStyles(state, name) {\x0a  return state.blockStyles[name];\x0a}\x0a/**\x0a * Returns all the available categories.\x0a *\x0a * @param {Object} state Data state.\x0a *\x0a * @return {Array} Categories list.\x0a */\x0a\x0afunction getCategories(state) {\x0a  return state.categories;\x0a}\x0a/**\x0a * Returns the name of the default block name.\x0a *\x0a * @param {Object} state Data state.\x0a *\x0a * @return {string?} Default block name.\x0a */\x0a\x0afunction getDefaultBlockName(state) {\x0a  return state.defaultBlockName;\x0a}\x0a/**\x0a * Returns the name of the block for handling non-block content.\x0a *\x0a * @param {Object} state Data state.\x0a *\x0a * @return {string?} Name of the block for handling non-block content.\x0a */\x0a\x0afunction getFreeformFallbackBlockName(state) {\x0a  return state.freeformFallbackBlockName;\x0a}\x0a/**\x0a * Returns the name of the block for handling unregistered blocks.\x0a *\x0a * @param {Object} state Data state.\x0a *\x0a * @return {string?} Name of the block for handling unregistered blocks.\x0a */\x0a\x0afunction getUnregisteredFallbackBlockName(state) {\x0a  return state.unregisteredFallbackBlockName;\x0a}\x0a/**\x0a * Returns an array with the child blocks of a given block.\x0a *\x0a * @param {Object} state     Data state.\x0a * @param {string} blockName Block type name.\x0a *\x0a * @return {Array} Array of child block names.\x0a */\x0a\x0avar selectors_getChildBlockNames = Object(rememo[\x22a\x22 /* default */])(function (state, blockName) {\x0a  return Object(external_lodash_[\x22map\x22])(Object(external_lodash_[\x22filter\x22])(state.blockTypes, function (blockType) {\x0a    return Object(external_lodash_[\x22includes\x22])(blockType.parent, blockName);\x0a  }), function (_ref) {\x0a    var name = _ref.name;\x0a    return name;\x0a  });\x0a}, function (state) {\x0a  return [state.blockTypes];\x0a});\x0a/**\x0a * Returns the block support value for a feature, if defined.\x0a *\x0a * @param  {Object}          state           Data state.\x0a * @param  {(string|Object)} nameOrType      Block name or type object\x0a * @param  {string}          feature         Feature to retrieve\x0a * @param  {*}               defaultSupports Default value to return if not\x0a *                                           explicitly defined\x0a *\x0a * @return {?*} Block support value\x0a */\x0a\x0avar selectors_getBlockSupport = function getBlockSupport(state, nameOrType, feature, defaultSupports) {\x0a  var blockType = getNormalizedBlockType(state, nameOrType);\x0a  return Object(external_lodash_[\x22get\x22])(blockType, [\x27supports\x27, feature], defaultSupports);\x0a};\x0a/**\x0a * Returns true if the block defines support for a feature, or false otherwise.\x0a *\x0a * @param  {Object}         state           Data state.\x0a * @param {(string|Object)} nameOrType      Block name or type object.\x0a * @param {string}          feature         Feature to test.\x0a * @param {boolean}         defaultSupports Whether feature is supported by\x0a *                                          default if not explicitly defined.\x0a *\x0a * @return {boolean} Whether block supports feature.\x0a */\x0a\x0afunction hasBlockSupport(state, nameOrType, feature, defaultSupports) {\x0a  return !!selectors_getBlockSupport(state, nameOrType, feature, defaultSupports);\x0a}\x0a/**\x0a * Returns true if the block type by the given name or object value matches a\x0a * search term, or false otherwise.\x0a *\x0a * @param {Object}          state      Blocks state.\x0a * @param {(string|Object)} nameOrType Block name or type object.\x0a * @param {string}          searchTerm Search term by which to filter.\x0a *\x0a * @return {Object[]} Wheter block type matches search term.\x0a */\x0a\x0afunction isMatchingSearchTerm(state, nameOrType, searchTerm) {\x0a  var blockType = getNormalizedBlockType(state, nameOrType);\x0a  var getNormalizedSearchTerm = Object(external_lodash_[\x22flow\x22])([// Disregard diacritics.\x0a  //  Input: \x22m\xc3\xa9dia\x22\x0a  external_lodash_[\x22deburr\x22], // Lowercase.\x0a  //  Input: \x22MEDIA\x22\x0a  function (term) {\x0a    return term.toLowerCase();\x0a  }, // Strip leading and trailing whitespace.\x0a  //  Input: \x22 media \x22\x0a  function (term) {\x0a    return term.trim();\x0a  }]);\x0a  var normalizedSearchTerm = getNormalizedSearchTerm(searchTerm);\x0a  var isSearchMatch = Object(external_lodash_[\x22flow\x22])([getNormalizedSearchTerm, function (normalizedCandidate) {\x0a    return Object(external_lodash_[\x22includes\x22])(normalizedCandidate, normalizedSearchTerm);\x0a  }]);\x0a  return isSearchMatch(blockType.title) || Object(external_lodash_[\x22some\x22])(blockType.keywords, isSearchMatch) || isSearchMatch(blockType.category);\x0a}\x0a/**\x0a * Returns a boolean indicating if a block has child blocks or not.\x0a *\x0a * @param {Object} state     Data state.\x0a * @param {string} blockName Block type name.\x0a *\x0a * @return {boolean} True if a block contains child blocks and false otherwise.\x0a */\x0a\x0avar selectors_hasChildBlocks = function hasChildBlocks(state, blockName) {\x0a  return selectors_getChildBlockNames(state, blockName).length \x3e 0;\x0a};\x0a/**\x0a * Returns a boolean indicating if a block has at least one child block with inserter support.\x0a *\x0a * @param {Object} state     Data state.\x0a * @param {string} blockName Block type name.\x0a *\x0a * @return {boolean} True if a block contains at least one child blocks with inserter support\x0a *                   and false otherwise.\x0a */\x0a\x0avar selectors_hasChildBlocksWithInserterSupport = function hasChildBlocksWithInserterSupport(state, blockName) {\x0a  return Object(external_lodash_[\x22some\x22])(selectors_getChildBlockNames(state, blockName), function (childBlockName) {\x0a    return hasBlockSupport(state, childBlockName, \x27inserter\x27, true);\x0a  });\x0a};\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/store/actions.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Returns an action object used in signalling that block types have been added.\x0a *\x0a * @param {Array|Object} blockTypes Block types received.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction addBlockTypes(blockTypes) {\x0a  return {\x0a    type: \x27ADD_BLOCK_TYPES\x27,\x0a    blockTypes: Object(external_lodash_[\x22castArray\x22])(blockTypes)\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to remove a registered block type.\x0a *\x0a * @param {string|Array} names Block name.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction removeBlockTypes(names) {\x0a  return {\x0a    type: \x27REMOVE_BLOCK_TYPES\x27,\x0a    names: Object(external_lodash_[\x22castArray\x22])(names)\x0a  };\x0a}\x0a/**\x0a * Returns an action object used in signalling that new block styles have been added.\x0a *\x0a * @param {string}       blockName  Block name.\x0a * @param {Array|Object} styles     Block styles.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction addBlockStyles(blockName, styles) {\x0a  return {\x0a    type: \x27ADD_BLOCK_STYLES\x27,\x0a    styles: Object(external_lodash_[\x22castArray\x22])(styles),\x0a    blockName: blockName\x0a  };\x0a}\x0a/**\x0a * Returns an action object used in signalling that block styles have been removed.\x0a *\x0a * @param {string}       blockName  Block name.\x0a * @param {Array|string} styleNames Block style names.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction removeBlockStyles(blockName, styleNames) {\x0a  return {\x0a    type: \x27REMOVE_BLOCK_STYLES\x27,\x0a    styleNames: Object(external_lodash_[\x22castArray\x22])(styleNames),\x0a    blockName: blockName\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to set the default block name.\x0a *\x0a * @param {string} name Block name.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction setDefaultBlockName(name) {\x0a  return {\x0a    type: \x27SET_DEFAULT_BLOCK_NAME\x27,\x0a    name: name\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to set the name of the block used as a fallback\x0a * for non-block content.\x0a *\x0a * @param {string} name Block name.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction setFreeformFallbackBlockName(name) {\x0a  return {\x0a    type: \x27SET_FREEFORM_FALLBACK_BLOCK_NAME\x27,\x0a    name: name\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to set the name of the block used as a fallback\x0a * for unregistered blocks.\x0a *\x0a * @param {string} name Block name.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction setUnregisteredFallbackBlockName(name) {\x0a  return {\x0a    type: \x27SET_UNREGISTERED_FALLBACK_BLOCK_NAME\x27,\x0a    name: name\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to set block categories.\x0a *\x0a * @param {Object[]} categories Block categories.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction setCategories(categories) {\x0a  return {\x0a    type: \x27SET_CATEGORIES\x27,\x0a    categories: categories\x0a  };\x0a}\x0a/**\x0a * Returns an action object used to update a category.\x0a *\x0a * @param {string} slug     Block category slug.\x0a * @param {Object} category Object containing the category properties that should be updated.\x0a *\x0a * @return {Object} Action object.\x0a */\x0a\x0afunction updateCategory(slug, category) {\x0a  return {\x0a    type: \x27UPDATE_CATEGORY\x27,\x0a    slug: slug,\x0a    category: category\x0a  };\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/store/index.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0aObject(external_this_wp_data_[\x22registerStore\x22])(\x27core/blocks\x27, {\x0a  reducer: reducer,\x0a  selectors: selectors_namespaceObject,\x0a  actions: actions_namespaceObject\x0a});\x0a\x0a// EXTERNAL MODULE: ./node_modules/uuid/v4.js\x0avar v4 = __webpack_require__(65);\x0avar v4_default = /*#__PURE__*/__webpack_require__.n(v4);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22hooks\x22]}\x0avar external_this_wp_hooks_ = __webpack_require__(26);\x0a\x0a// EXTERNAL MODULE: ./node_modules/tinycolor2/tinycolor.js\x0avar tinycolor = __webpack_require__(45);\x0avar tinycolor_default = /*#__PURE__*/__webpack_require__.n(tinycolor);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22element\x22]}\x0avar external_this_wp_element_ = __webpack_require__(0);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/utils.js\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Array of icon colors containing a color to be used if the icon color\x0a * was not explicitly set but the icon background color was.\x0a *\x0a * @type {Object}\x0a */\x0a\x0avar ICON_COLORS = [\x27#191e23\x27, \x27#f8f9f9\x27];\x0a/**\x0a * Determines whether the block is a default block\x0a * and its attributes are equal to the default attributes\x0a * which means the block is unmodified.\x0a *\x0a * @param  {WPBlock} block Block Object\x0a *\x0a * @return {boolean}       Whether the block is an unmodified default block\x0a */\x0a\x0afunction isUnmodifiedDefaultBlock(block) {\x0a  var defaultBlockName = registration_getDefaultBlockName();\x0a\x0a  if (block.name !== defaultBlockName) {\x0a    return false;\x0a  } // Cache a created default block if no cache exists or the default block\x0a  // name changed.\x0a\x0a\x0a  if (!isUnmodifiedDefaultBlock.block || isUnmodifiedDefaultBlock.block.name !== defaultBlockName) {\x0a    isUnmodifiedDefaultBlock.block = createBlock(defaultBlockName);\x0a  }\x0a\x0a  var newDefaultBlock = isUnmodifiedDefaultBlock.block;\x0a  var blockType = registration_getBlockType(defaultBlockName);\x0a  return Object(external_lodash_[\x22every\x22])(blockType.attributes, function (value, key) {\x0a    return newDefaultBlock.attributes[key] === block.attributes[key];\x0a  });\x0a}\x0a/**\x0a * Function that checks if the parameter is a valid icon.\x0a *\x0a * @param {*} icon  Parameter to be checked.\x0a *\x0a * @return {boolean} True if the parameter is a valid icon and false otherwise.\x0a */\x0a\x0afunction isValidIcon(icon) {\x0a  return !!icon && (Object(external_lodash_[\x22isString\x22])(icon) || Object(external_this_wp_element_[\x22isValidElement\x22])(icon) || Object(external_lodash_[\x22isFunction\x22])(icon) || icon instanceof external_this_wp_element_[\x22Component\x22]);\x0a}\x0a/**\x0a * Function that receives an icon as set by the blocks during the registration\x0a * and returns a new icon object that is normalized so we can rely on just on possible icon structure\x0a * in the codebase.\x0a *\x0a * @param {(Object|string|WPElement)} icon  Slug of the Dashicon to be shown\x0a *                                          as the icon for the block in the\x0a *                                          inserter, or element or an object describing the icon.\x0a *\x0a * @return {Object} Object describing the icon.\x0a */\x0a\x0afunction normalizeIconObject(icon) {\x0a  if (!icon) {\x0a    icon = \x27block-default\x27;\x0a  }\x0a\x0a  if (isValidIcon(icon)) {\x0a    return {\x0a      src: icon\x0a    };\x0a  }\x0a\x0a  if (Object(external_lodash_[\x22has\x22])(icon, [\x27background\x27])) {\x0a    var tinyBgColor = tinycolor_default()(icon.background);\x0a    return Object(objectSpread[\x22a\x22 /* default */])({}, icon, {\x0a      foreground: icon.foreground ? icon.foreground : Object(tinycolor[\x22mostReadable\x22])(tinyBgColor, ICON_COLORS, {\x0a        includeFallbackColors: true,\x0a        level: \x27AA\x27,\x0a        size: \x27large\x27\x0a      }).toHexString(),\x0a      shadowColor: tinyBgColor.setAlpha(0.3).toRgbString()\x0a    });\x0a  }\x0a\x0a  return icon;\x0a}\x0a/**\x0a * Normalizes block type passed as param. When string is passed then\x0a * it converts it to the matching block type object.\x0a * It passes the original object otherwise.\x0a *\x0a * @param {string|Object} blockTypeOrName  Block type or name.\x0a *\x0a * @return {?Object} Block type.\x0a */\x0a\x0afunction normalizeBlockType(blockTypeOrName) {\x0a  if (Object(external_lodash_[\x22isString\x22])(blockTypeOrName)) {\x0a    return registration_getBlockType(blockTypeOrName);\x0a  }\x0a\x0a  return blockTypeOrName;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/registration.js\x0a\x0a\x0a/* eslint no-console: [ \x27error\x27, { allow: [ \x27error\x27 ] } ] */\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a/**\x0a * Defined behavior of a block type.\x0a *\x0a * @typedef {WPBlockType}\x0a *\x0a * @property {string}                    name       Block\x27s namespaced name.\x0a * @property {string}                    title      Human-readable label for a block.\x0a *                                                  Shown in the block inserter.\x0a * @property {string}                    category   Category classification of block,\x0a *                                                  impacting where block is shown in\x0a *                                                  inserter results.\x0a * @property {(Object|string|WPElement)} icon       Slug of the Dashicon to be shown\x0a *                                                  as the icon for the block in the\x0a *                                                  inserter, or element or an object describing the icon.\x0a * @property {?string[]}                 keywords   Additional keywords to produce\x0a *                                                  block as inserter search result.\x0a * @property {?Object}                   attributes Block attributes.\x0a * @property {Function}                  save       Serialize behavior of a block,\x0a *                                                  returning an element describing\x0a *                                                  structure of the block\x27s post\x0a *                                                  content markup.\x0a * @property {WPComponent}               edit       Component rendering element to be\x0a *                                                  interacted with in an editor.\x0a */\x0a\x0avar serverSideBlockDefinitions = {};\x0a/**\x0a * Set the server side block definition of blocks.\x0a *\x0a * @param {Object} definitions Server-side block definitions\x0a */\x0a\x0afunction unstable__bootstrapServerSideBlockDefinitions(definitions) {\x0a  // eslint-disable-line camelcase\x0a  serverSideBlockDefinitions = definitions;\x0a}\x0a/**\x0a * Registers a new block provided a unique name and an object defining its\x0a * behavior. Once registered, the block is made available as an option to any\x0a * editor interface where blocks are implemented.\x0a *\x0a * @param {string} name     Block name.\x0a * @param {Object} settings Block settings.\x0a *\x0a * @return {?WPBlock} The block, if it has been successfully registered;\x0a *                     otherwise `undefined`.\x0a */\x0a\x0afunction registerBlockType(name, settings) {\x0a  settings = Object(objectSpread[\x22a\x22 /* default */])({\x0a    name: name\x0a  }, Object(external_lodash_[\x22get\x22])(serverSideBlockDefinitions, name), settings);\x0a\x0a  if (typeof name !== \x27string\x27) {\x0a    console.error(\x27Block names must be strings.\x27);\x0a    return;\x0a  }\x0a\x0a  if (!/^[a-z][a-z0-9-]*\x5c/[a-z][a-z0-9-]*$/.test(name)) {\x0a    console.error(\x27Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block\x27);\x0a    return;\x0a  }\x0a\x0a  if (Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getBlockType(name)) {\x0a    console.error(\x27Block \x22\x27 + name + \x27\x22 is already registered.\x27);\x0a    return;\x0a  }\x0a\x0a  settings = Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.registerBlockType\x27, settings, name);\x0a\x0a  if (!settings || !Object(external_lodash_[\x22isFunction\x22])(settings.save)) {\x0a    console.error(\x27The \x22save\x22 property must be specified and must be a valid function.\x27);\x0a    return;\x0a  }\x0a\x0a  if (\x27edit\x27 in settings && !Object(external_lodash_[\x22isFunction\x22])(settings.edit)) {\x0a    console.error(\x27The \x22edit\x22 property must be a valid function.\x27);\x0a    return;\x0a  }\x0a\x0a  if (!(\x27category\x27 in settings)) {\x0a    console.error(\x27The block \x22\x27 + name + \x27\x22 must have a category.\x27);\x0a    return;\x0a  }\x0a\x0a  if (\x27category\x27 in settings && !Object(external_lodash_[\x22some\x22])(Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getCategories(), {\x0a    slug: settings.category\x0a  })) {\x0a    console.error(\x27The block \x22\x27 + name + \x27\x22 must have a registered category.\x27);\x0a    return;\x0a  }\x0a\x0a  if (!(\x27title\x27 in settings) || settings.title === \x27\x27) {\x0a    console.error(\x27The block \x22\x27 + name + \x27\x22 must have a title.\x27);\x0a    return;\x0a  }\x0a\x0a  if (typeof settings.title !== \x27string\x27) {\x0a    console.error(\x27Block titles must be strings.\x27);\x0a    return;\x0a  }\x0a\x0a  settings.icon = normalizeIconObject(settings.icon);\x0a\x0a  if (!isValidIcon(settings.icon.src)) {\x0a    console.error(\x27The icon passed is invalid. \x27 + \x27The icon should be a string, an element, a function, or an object following the specifications documented in https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-registration/#icon-optional\x27);\x0a    return;\x0a  }\x0a\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).addBlockTypes(settings);\x0a  return settings;\x0a}\x0a/**\x0a * Unregisters a block.\x0a *\x0a * @param {string} name Block name.\x0a *\x0a * @return {?WPBlock} The previous block value, if it has been successfully\x0a *                     unregistered; otherwise `undefined`.\x0a */\x0a\x0afunction unregisterBlockType(name) {\x0a  var oldBlock = Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getBlockType(name);\x0a\x0a  if (!oldBlock) {\x0a    console.error(\x27Block \x22\x27 + name + \x27\x22 is not registered.\x27);\x0a    return;\x0a  }\x0a\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).removeBlockTypes(name);\x0a  return oldBlock;\x0a}\x0a/**\x0a * Assigns name of block for handling non-block content.\x0a *\x0a * @param {string} blockName Block name.\x0a */\x0a\x0afunction setFreeformContentHandlerName(blockName) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).setFreeformFallbackBlockName(blockName);\x0a}\x0a/**\x0a * Retrieves name of block handling non-block content, or undefined if no\x0a * handler has been defined.\x0a *\x0a * @return {?string} Blog name.\x0a */\x0a\x0afunction getFreeformContentHandlerName() {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getFreeformFallbackBlockName();\x0a}\x0a/**\x0a * Assigns name of block handling unregistered block types.\x0a *\x0a * @param {string} blockName Block name.\x0a */\x0a\x0afunction setUnregisteredTypeHandlerName(blockName) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).setUnregisteredFallbackBlockName(blockName);\x0a}\x0a/**\x0a * Retrieves name of block handling unregistered block types, or undefined if no\x0a * handler has been defined.\x0a *\x0a * @return {?string} Blog name.\x0a */\x0a\x0afunction getUnregisteredTypeHandlerName() {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getUnregisteredFallbackBlockName();\x0a}\x0a/**\x0a * Assigns the default block name.\x0a *\x0a * @param {string} name Block name.\x0a */\x0a\x0afunction registration_setDefaultBlockName(name) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).setDefaultBlockName(name);\x0a}\x0a/**\x0a * Retrieves the default block name.\x0a *\x0a * @return {?string} Block name.\x0a */\x0a\x0afunction registration_getDefaultBlockName() {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getDefaultBlockName();\x0a}\x0a/**\x0a * Returns a registered block type.\x0a *\x0a * @param {string} name Block name.\x0a *\x0a * @return {?Object} Block type.\x0a */\x0a\x0afunction registration_getBlockType(name) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getBlockType(name);\x0a}\x0a/**\x0a * Returns all registered blocks.\x0a *\x0a * @return {Array} Block settings.\x0a */\x0a\x0afunction registration_getBlockTypes() {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getBlockTypes();\x0a}\x0a/**\x0a * Returns the block support value for a feature, if defined.\x0a *\x0a * @param  {(string|Object)} nameOrType      Block name or type object\x0a * @param  {string}          feature         Feature to retrieve\x0a * @param  {*}               defaultSupports Default value to return if not\x0a *                                           explicitly defined\x0a *\x0a * @return {?*} Block support value\x0a */\x0a\x0afunction registration_getBlockSupport(nameOrType, feature, defaultSupports) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getBlockSupport(nameOrType, feature, defaultSupports);\x0a}\x0a/**\x0a * Returns true if the block defines support for a feature, or false otherwise.\x0a *\x0a * @param {(string|Object)} nameOrType      Block name or type object.\x0a * @param {string}          feature         Feature to test.\x0a * @param {boolean}         defaultSupports Whether feature is supported by\x0a *                                          default if not explicitly defined.\x0a *\x0a * @return {boolean} Whether block supports feature.\x0a */\x0a\x0afunction registration_hasBlockSupport(nameOrType, feature, defaultSupports) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).hasBlockSupport(nameOrType, feature, defaultSupports);\x0a}\x0a/**\x0a * Determines whether or not the given block is a reusable block. This is a\x0a * special block type that is used to point to a global block stored via the\x0a * API.\x0a *\x0a * @param {Object} blockOrType Block or Block Type to test.\x0a *\x0a * @return {boolean} Whether the given block is a reusable block.\x0a */\x0a\x0afunction isReusableBlock(blockOrType) {\x0a  return blockOrType.name === \x27core/block\x27;\x0a}\x0a/**\x0a * Returns an array with the child blocks of a given block.\x0a *\x0a * @param {string} blockName Name of block (example: \xe2\x80\x9clatest-posts\xe2\x80\x9d).\x0a *\x0a * @return {Array} Array of child block names.\x0a */\x0a\x0avar registration_getChildBlockNames = function getChildBlockNames(blockName) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getChildBlockNames(blockName);\x0a};\x0a/**\x0a * Returns a boolean indicating if a block has child blocks or not.\x0a *\x0a * @param {string} blockName Name of block (example: \xe2\x80\x9clatest-posts\xe2\x80\x9d).\x0a *\x0a * @return {boolean} True if a block contains child blocks and false otherwise.\x0a */\x0a\x0avar registration_hasChildBlocks = function hasChildBlocks(blockName) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).hasChildBlocks(blockName);\x0a};\x0a/**\x0a * Returns a boolean indicating if a block has at least one child block with inserter support.\x0a *\x0a * @param {string} blockName Block type name.\x0a *\x0a * @return {boolean} True if a block contains at least one child blocks with inserter support\x0a *                   and false otherwise.\x0a */\x0a\x0avar registration_hasChildBlocksWithInserterSupport = function hasChildBlocksWithInserterSupport(blockName) {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).hasChildBlocksWithInserterSupport(blockName);\x0a};\x0a/**\x0a * Registers a new block style variation for the given block.\x0a *\x0a * @param {string} blockName      Name of block (example: \xe2\x80\x9ccore/latest-posts\xe2\x80\x9d).\x0a * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\x0a */\x0a\x0avar registration_registerBlockStyle = function registerBlockStyle(blockName, styleVariation) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).addBlockStyles(blockName, styleVariation);\x0a};\x0a/**\x0a * Unregisters a block style variation for the given block.\x0a *\x0a * @param {string} blockName          Name of block (example: \xe2\x80\x9ccore/latest-posts\xe2\x80\x9d).\x0a * @param {string} styleVariationName Name of class applied to the block.\x0a */\x0a\x0avar registration_unregisterBlockStyle = function unregisterBlockStyle(blockName, styleVariationName) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).removeBlockStyles(blockName, styleVariationName);\x0a};\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/factory.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Returns a block object given its type and attributes.\x0a *\x0a * @param {string} name        Block name.\x0a * @param {Object} attributes  Block attributes.\x0a * @param {?Array} innerBlocks Nested blocks.\x0a *\x0a * @return {Object} Block object.\x0a */\x0a\x0afunction createBlock(name) {\x0a  var attributes = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : {};\x0a  var innerBlocks = arguments.length \x3e 2 && arguments[2] !== undefined ? arguments[2] : [];\x0a  // Get the type definition associated with a registered block.\x0a  var blockType = registration_getBlockType(name); // Ensure attributes contains only values defined by block type, and merge\x0a  // default values for missing attributes.\x0a\x0a  var sanitizedAttributes = Object(external_lodash_[\x22reduce\x22])(blockType.attributes, function (result, schema, key) {\x0a    var value = attributes[key];\x0a\x0a    if (undefined !== value) {\x0a      result[key] = value;\x0a    } else if (schema.hasOwnProperty(\x27default\x27)) {\x0a      result[key] = schema.default;\x0a    }\x0a\x0a    if ([\x27node\x27, \x27children\x27].indexOf(schema.source) !== -1) {\x0a      // Ensure value passed is always an array, which we\x27re expecting in\x0a      // the RichText component to handle the deprecated value.\x0a      if (typeof result[key] === \x27string\x27) {\x0a        result[key] = [result[key]];\x0a      } else if (!Array.isArray(result[key])) {\x0a        result[key] = [];\x0a      }\x0a    }\x0a\x0a    return result;\x0a  }, {});\x0a  var clientId = v4_default()(); // Blocks are stored with a unique ID, the assigned type name, the block\x0a  // attributes, and their inner blocks.\x0a\x0a  return {\x0a    clientId: clientId,\x0a    name: name,\x0a    isValid: true,\x0a    attributes: sanitizedAttributes,\x0a    innerBlocks: innerBlocks\x0a  };\x0a}\x0a/**\x0a * Given a block object, returns a copy of the block object, optionally merging\x0a * new attributes and/or replacing its inner blocks.\x0a *\x0a * @param {Object} block              Block instance.\x0a * @param {Object} mergeAttributes    Block attributes.\x0a * @param {?Array} newInnerBlocks     Nested blocks.\x0a *\x0a * @return {Object} A cloned block.\x0a */\x0a\x0afunction cloneBlock(block) {\x0a  var mergeAttributes = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : {};\x0a  var newInnerBlocks = arguments.length \x3e 2 ? arguments[2] : undefined;\x0a  var clientId = v4_default()();\x0a  return Object(objectSpread[\x22a\x22 /* default */])({}, block, {\x0a    clientId: clientId,\x0a    attributes: Object(objectSpread[\x22a\x22 /* default */])({}, block.attributes, mergeAttributes),\x0a    innerBlocks: newInnerBlocks || block.innerBlocks.map(function (innerBlock) {\x0a      return cloneBlock(innerBlock);\x0a    })\x0a  });\x0a}\x0a/**\x0a * Returns a boolean indicating whether a transform is possible based on\x0a * various bits of context.\x0a *\x0a * @param {Object} transform The transform object to validate.\x0a * @param {string} direction Is this a \x27from\x27 or \x27to\x27 transform.\x0a * @param {Array} blocks The blocks to transform from.\x0a *\x0a * @return {boolean} Is the transform possible?\x0a */\x0a\x0avar factory_isPossibleTransformForSource = function isPossibleTransformForSource(transform, direction, blocks) {\x0a  if (Object(external_lodash_[\x22isEmpty\x22])(blocks)) {\x0a    return false;\x0a  } // If multiple blocks are selected, only multi block transforms are allowed.\x0a\x0a\x0a  var isMultiBlock = blocks.length \x3e 1;\x0a  var isValidForMultiBlocks = !isMultiBlock || transform.isMultiBlock;\x0a\x0a  if (!isValidForMultiBlocks) {\x0a    return false;\x0a  } // Only consider \x27block\x27 type transforms as valid.\x0a\x0a\x0a  var isBlockType = transform.type === \x27block\x27;\x0a\x0a  if (!isBlockType) {\x0a    return false;\x0a  } // Check if the transform\x27s block name matches the source block only if this is a transform \x27from\x27.\x0a\x0a\x0a  var sourceBlock = Object(external_lodash_[\x22first\x22])(blocks);\x0a  var hasMatchingName = direction !== \x27from\x27 || transform.blocks.indexOf(sourceBlock.name) !== -1;\x0a\x0a  if (!hasMatchingName) {\x0a    return false;\x0a  } // If the transform has a `isMatch` function specified, check that it returns true.\x0a\x0a\x0a  if (Object(external_lodash_[\x22isFunction\x22])(transform.isMatch)) {\x0a    var attributes = transform.isMultiBlock ? blocks.map(function (block) {\x0a      return block.attributes;\x0a    }) : sourceBlock.attributes;\x0a\x0a    if (!transform.isMatch(attributes)) {\x0a      return false;\x0a    }\x0a  }\x0a\x0a  return true;\x0a};\x0a/**\x0a * Returns block types that the \x27blocks\x27 can be transformed into, based on\x0a * \x27from\x27 transforms on other blocks.\x0a *\x0a * @param {Array}  blocks  The blocks to transform from.\x0a *\x0a * @return {Array} Block types that the blocks can be transformed into.\x0a */\x0a\x0a\x0avar factory_getBlockTypesForPossibleFromTransforms = function getBlockTypesForPossibleFromTransforms(blocks) {\x0a  if (Object(external_lodash_[\x22isEmpty\x22])(blocks)) {\x0a    return [];\x0a  }\x0a\x0a  var allBlockTypes = registration_getBlockTypes(); // filter all blocks to find those with a \x27from\x27 transform.\x0a\x0a  var blockTypesWithPossibleFromTransforms = Object(external_lodash_[\x22filter\x22])(allBlockTypes, function (blockType) {\x0a    var fromTransforms = getBlockTransforms(\x27from\x27, blockType.name);\x0a    return !!findTransform(fromTransforms, function (transform) {\x0a      return factory_isPossibleTransformForSource(transform, \x27from\x27, blocks);\x0a    });\x0a  });\x0a  return blockTypesWithPossibleFromTransforms;\x0a};\x0a/**\x0a * Returns block types that the \x27blocks\x27 can be transformed into, based on\x0a * the source block\x27s own \x27to\x27 transforms.\x0a *\x0a * @param {Array} blocks The blocks to transform from.\x0a *\x0a * @return {Array} Block types that the source can be transformed into.\x0a */\x0a\x0a\x0avar factory_getBlockTypesForPossibleToTransforms = function getBlockTypesForPossibleToTransforms(blocks) {\x0a  if (Object(external_lodash_[\x22isEmpty\x22])(blocks)) {\x0a    return [];\x0a  }\x0a\x0a  var sourceBlock = Object(external_lodash_[\x22first\x22])(blocks);\x0a  var blockType = registration_getBlockType(sourceBlock.name);\x0a  var transformsTo = getBlockTransforms(\x27to\x27, blockType.name); // filter all \x27to\x27 transforms to find those that are possible.\x0a\x0a  var possibleTransforms = Object(external_lodash_[\x22filter\x22])(transformsTo, function (transform) {\x0a    return factory_isPossibleTransformForSource(transform, \x27to\x27, blocks);\x0a  }); // Build a list of block names using the possible \x27to\x27 transforms.\x0a\x0a  var blockNames = Object(external_lodash_[\x22flatMap\x22])(possibleTransforms, function (transformation) {\x0a    return transformation.blocks;\x0a  }); // Map block names to block types.\x0a\x0a  return blockNames.map(function (name) {\x0a    return registration_getBlockType(name);\x0a  });\x0a};\x0a/**\x0a * Returns an array of block types that the set of blocks received as argument\x0a * can be transformed into.\x0a *\x0a * @param {Array} blocks Blocks array.\x0a *\x0a * @return {Array} Block types that the blocks argument can be transformed to.\x0a */\x0a\x0a\x0afunction getPossibleBlockTransformations(blocks) {\x0a  if (Object(external_lodash_[\x22isEmpty\x22])(blocks)) {\x0a    return [];\x0a  }\x0a\x0a  var sourceBlock = Object(external_lodash_[\x22first\x22])(blocks);\x0a  var isMultiBlock = blocks.length \x3e 1;\x0a\x0a  if (isMultiBlock && !Object(external_lodash_[\x22every\x22])(blocks, {\x0a    name: sourceBlock.name\x0a  })) {\x0a    return [];\x0a  }\x0a\x0a  var blockTypesForFromTransforms = factory_getBlockTypesForPossibleFromTransforms(blocks);\x0a  var blockTypesForToTransforms = factory_getBlockTypesForPossibleToTransforms(blocks);\x0a  return Object(external_lodash_[\x22uniq\x22])([].concat(Object(toConsumableArray[\x22a\x22 /* default */])(blockTypesForFromTransforms), Object(toConsumableArray[\x22a\x22 /* default */])(blockTypesForToTransforms)));\x0a}\x0a/**\x0a * Given an array of transforms, returns the highest-priority transform where\x0a * the predicate function returns a truthy value. A higher-priority transform\x0a * is one with a lower priority value (i.e. first in priority order). Returns\x0a * null if the transforms set is empty or the predicate function returns a\x0a * falsey value for all entries.\x0a *\x0a * @param {Object[]} transforms Transforms to search.\x0a * @param {Function} predicate  Function returning true on matching transform.\x0a *\x0a * @return {?Object} Highest-priority transform candidate.\x0a */\x0a\x0afunction findTransform(transforms, predicate) {\x0a  // The hooks library already has built-in mechanisms for managing priority\x0a  // queue, so leverage via locally-defined instance.\x0a  var hooks = Object(external_this_wp_hooks_[\x22createHooks\x22])();\x0a\x0a  var _loop = function _loop(i) {\x0a    var candidate = transforms[i];\x0a\x0a    if (predicate(candidate)) {\x0a      hooks.addFilter(\x27transform\x27, \x27transform/\x27 + i.toString(), function (result) {\x0a        return result ? result : candidate;\x0a      }, candidate.priority);\x0a    }\x0a  };\x0a\x0a  for (var i = 0; i \x3c transforms.length; i++) {\x0a    _loop(i);\x0a  } // Filter name is arbitrarily chosen but consistent with above aggregation.\x0a\x0a\x0a  return hooks.applyFilters(\x27transform\x27, null);\x0a}\x0a/**\x0a * Returns normal block transforms for a given transform direction, optionally\x0a * for a specific block by name, or an empty array if there are no transforms.\x0a * If no block name is provided, returns transforms for all blocks. A normal\x0a * transform object includes `blockName` as a property.\x0a *\x0a * @param {string}  direction Transform direction (\x22to\x22, \x22from\x22).\x0a * @param {string|Object} blockTypeOrName  Block type or name.\x0a *\x0a * @return {Array} Block transforms for direction.\x0a */\x0a\x0afunction getBlockTransforms(direction, blockTypeOrName) {\x0a  // When retrieving transforms for all block types, recurse into self.\x0a  if (blockTypeOrName === undefined) {\x0a    return Object(external_lodash_[\x22flatMap\x22])(registration_getBlockTypes(), function (_ref) {\x0a      var name = _ref.name;\x0a      return getBlockTransforms(direction, name);\x0a    });\x0a  } // Validate that block type exists and has array of direction.\x0a\x0a\x0a  var blockType = normalizeBlockType(blockTypeOrName);\x0a\x0a  var _ref2 = blockType || {},\x0a      blockName = _ref2.name,\x0a      transforms = _ref2.transforms;\x0a\x0a  if (!transforms || !Array.isArray(transforms[direction])) {\x0a    return [];\x0a  } // Map transforms to normal form.\x0a\x0a\x0a  return transforms[direction].map(function (transform) {\x0a    return Object(objectSpread[\x22a\x22 /* default */])({}, transform, {\x0a      blockName: blockName\x0a    });\x0a  });\x0a}\x0a/**\x0a * Switch one or more blocks into one or more blocks of the new block type.\x0a *\x0a * @param {Array|Object} blocks Blocks array or block object.\x0a * @param {string}       name   Block name.\x0a *\x0a * @return {Array} Array of blocks.\x0a */\x0a\x0afunction switchToBlockType(blocks, name) {\x0a  var blocksArray = Object(external_lodash_[\x22castArray\x22])(blocks);\x0a  var isMultiBlock = blocksArray.length \x3e 1;\x0a  var firstBlock = blocksArray[0];\x0a  var sourceName = firstBlock.name;\x0a\x0a  if (isMultiBlock && !Object(external_lodash_[\x22every\x22])(blocksArray, function (block) {\x0a    return block.name === sourceName;\x0a  })) {\x0a    return null;\x0a  } // Find the right transformation by giving priority to the \x22to\x22\x0a  // transformation.\x0a\x0a\x0a  var transformationsFrom = getBlockTransforms(\x27from\x27, name);\x0a  var transformationsTo = getBlockTransforms(\x27to\x27, sourceName);\x0a  var transformation = findTransform(transformationsTo, function (t) {\x0a    return t.type === \x27block\x27 && t.blocks.indexOf(name) !== -1 && (!isMultiBlock || t.isMultiBlock);\x0a  }) || findTransform(transformationsFrom, function (t) {\x0a    return t.type === \x27block\x27 && t.blocks.indexOf(sourceName) !== -1 && (!isMultiBlock || t.isMultiBlock);\x0a  }); // Stop if there is no valid transformation.\x0a\x0a  if (!transformation) {\x0a    return null;\x0a  }\x0a\x0a  var transformationResults;\x0a\x0a  if (transformation.isMultiBlock) {\x0a    transformationResults = transformation.transform(blocksArray.map(function (currentBlock) {\x0a      return currentBlock.attributes;\x0a    }), blocksArray.map(function (currentBlock) {\x0a      return currentBlock.innerBlocks;\x0a    }));\x0a  } else {\x0a    transformationResults = transformation.transform(firstBlock.attributes, firstBlock.innerBlocks);\x0a  } // Ensure that the transformation function returned an object or an array\x0a  // of objects.\x0a\x0a\x0a  if (!Object(external_lodash_[\x22isObjectLike\x22])(transformationResults)) {\x0a    return null;\x0a  } // If the transformation function returned a single object, we want to work\x0a  // with an array instead.\x0a\x0a\x0a  transformationResults = Object(external_lodash_[\x22castArray\x22])(transformationResults); // Ensure that every block object returned by the transformation has a\x0a  // valid block type.\x0a\x0a  if (transformationResults.some(function (result) {\x0a    return !registration_getBlockType(result.name);\x0a  })) {\x0a    return null;\x0a  }\x0a\x0a  var firstSwitchedBlock = Object(external_lodash_[\x22findIndex\x22])(transformationResults, function (result) {\x0a    return result.name === name;\x0a  }); // Ensure that at least one block object returned by the transformation has\x0a  // the expected \x22destination\x22 block type.\x0a\x0a  if (firstSwitchedBlock \x3c 0) {\x0a    return null;\x0a  }\x0a\x0a  return transformationResults.map(function (result, index) {\x0a    var transformedBlock = Object(objectSpread[\x22a\x22 /* default */])({}, result, {\x0a      // The first transformed block whose type matches the \x22destination\x22\x0a      // type gets to keep the existing client ID of the first block.\x0a      clientId: index === firstSwitchedBlock ? firstBlock.clientId : result.clientId\x0a    });\x0a    /**\x0a     * Filters an individual transform result from block transformation.\x0a     * All of the original blocks are passed, since transformations are\x0a     * many-to-many, not one-to-one.\x0a     *\x0a     * @param {Object}   transformedBlock The transformed block.\x0a     * @param {Object[]} blocks           Original blocks transformed.\x0a     */\x0a\x0a\x0a    return Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.switchToBlockType.transformedBlock\x27, transformedBlock, blocks);\x0a  });\x0a}\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\x0avar slicedToArray = __webpack_require__(28);\x0a\x0a// CONCATENATED MODULE: ./node_modules/hpq/es/get-path.js\x0a/**\x0a * Given object and string of dot-delimited path segments, returns value at\x0a * path or undefined if path cannot be resolved.\x0a *\x0a * @param  {Object} object Lookup object\x0a * @param  {string} path   Path to resolve\x0a * @return {?*}            Resolved value\x0a */\x0afunction getPath(object, path) {\x0a  var segments = path.split(\x27.\x27);\x0a  var segment;\x0a\x0a  while (segment = segments.shift()) {\x0a    if (!(segment in object)) {\x0a      return;\x0a    }\x0a\x0a    object = object[segment];\x0a  }\x0a\x0a  return object;\x0a}\x0a// CONCATENATED MODULE: ./node_modules/hpq/es/index.js\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a/**\x0a * Function returning a DOM document created by `createHTMLDocument`. The same\x0a * document is returned between invocations.\x0a *\x0a * @return {Document} DOM document.\x0a */\x0a\x0avar getDocument = function () {\x0a  var doc;\x0a  return function () {\x0a    if (!doc) {\x0a      doc = document.implementation.createHTMLDocument(\x27\x27);\x0a    }\x0a\x0a    return doc;\x0a  };\x0a}();\x0a/**\x0a * Given a markup string or DOM element, creates an object aligning with the\x0a * shape of the matchers object, or the value returned by the matcher.\x0a *\x0a * @param  {(string|Element)}  source   Source content\x0a * @param  {(Object|Function)} matchers Matcher function or object of matchers\x0a * @return {(Object|*)}                 Matched value(s), shaped by object\x0a */\x0a\x0a\x0afunction es_parse(source, matchers) {\x0a  if (!matchers) {\x0a    return;\x0a  } // Coerce to element\x0a\x0a\x0a  if (\x27string\x27 === typeof source) {\x0a    var doc = getDocument();\x0a    doc.body.innerHTML = source;\x0a    source = doc.body;\x0a  } // Return singular value\x0a\x0a\x0a  if (\x27function\x27 === typeof matchers) {\x0a    return matchers(source);\x0a  } // Bail if we can\x27t handle matchers\x0a\x0a\x0a  if (Object !== matchers.constructor) {\x0a    return;\x0a  } // Shape result by matcher object\x0a\x0a\x0a  return Object.keys(matchers).reduce(function (memo, key) {\x0a    memo[key] = es_parse(source, matchers[key]);\x0a    return memo;\x0a  }, {});\x0a}\x0a/**\x0a * Generates a function which matches node of type selector, returning an\x0a * attribute by property if the attribute exists. If no selector is passed,\x0a * returns property of the query element.\x0a *\x0a * @param  {?string} selector Optional selector\x0a * @param  {string}  name     Property name\x0a * @return {*}                Property value\x0a */\x0a\x0afunction prop(selector, name) {\x0a  if (1 === arguments.length) {\x0a    name = selector;\x0a    selector = undefined;\x0a  }\x0a\x0a  return function (node) {\x0a    var match = node;\x0a\x0a    if (selector) {\x0a      match = node.querySelector(selector);\x0a    }\x0a\x0a    if (match) {\x0a      return getPath(match, name);\x0a    }\x0a  };\x0a}\x0a/**\x0a * Generates a function which matches node of type selector, returning an\x0a * attribute by name if the attribute exists. If no selector is passed,\x0a * returns attribute of the query element.\x0a *\x0a * @param  {?string} selector Optional selector\x0a * @param  {string}  name     Attribute name\x0a * @return {?string}          Attribute value\x0a */\x0a\x0afunction attr(selector, name) {\x0a  if (1 === arguments.length) {\x0a    name = selector;\x0a    selector = undefined;\x0a  }\x0a\x0a  return function (node) {\x0a    var attributes = prop(selector, \x27attributes\x27)(node);\x0a\x0a    if (attributes && attributes.hasOwnProperty(name)) {\x0a      return attributes[name].value;\x0a    }\x0a  };\x0a}\x0a/**\x0a * Convenience for `prop( selector, \x27innerHTML\x27 )`.\x0a *\x0a * @see prop()\x0a *\x0a * @param  {?string} selector Optional selector\x0a * @return {string}           Inner HTML\x0a */\x0a\x0afunction es_html(selector) {\x0a  return prop(selector, \x27innerHTML\x27);\x0a}\x0a/**\x0a * Convenience for `prop( selector, \x27textContent\x27 )`.\x0a *\x0a * @see prop()\x0a *\x0a * @param  {?string} selector Optional selector\x0a * @return {string}           Text content\x0a */\x0a\x0afunction es_text(selector) {\x0a  return prop(selector, \x27textContent\x27);\x0a}\x0a/**\x0a * Creates a new matching context by first finding elements matching selector\x0a * using querySelectorAll before then running another `parse` on `matchers`\x0a * scoped to the matched elements.\x0a *\x0a * @see parse()\x0a *\x0a * @param  {string}            selector Selector to match\x0a * @param  {(Object|Function)} matchers Matcher function or object of matchers\x0a * @return {Array.\x3c*,Object\x3e}           Array of matched value(s)\x0a */\x0a\x0afunction query(selector, matchers) {\x0a  return function (node) {\x0a    var matches = node.querySelectorAll(selector);\x0a    return [].map.call(matches, function (match) {\x0a      return es_parse(match, matchers);\x0a    });\x0a  };\x0a}\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22autop\x22]}\x0avar external_this_wp_autop_ = __webpack_require__(66);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22blockSerializationDefaultParser\x22]}\x0avar external_this_wp_blockSerializationDefaultParser_ = __webpack_require__(205);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\x0avar arrayWithHoles = __webpack_require__(37);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\x0avar iterableToArray = __webpack_require__(34);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\x0avar nonIterableRest = __webpack_require__(38);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js\x0a\x0a\x0a\x0afunction _toArray(arr) {\x0a  return Object(arrayWithHoles[\x22a\x22 /* default */])(arr) || Object(iterableToArray[\x22a\x22 /* default */])(arr) || Object(nonIterableRest[\x22a\x22 /* default */])();\x0a}\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\x0avar classCallCheck = __webpack_require__(10);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\x0avar createClass = __webpack_require__(9);\x0a\x0a// CONCATENATED MODULE: ./node_modules/simple-html-tokenizer/dist/es6/utils.js\x0avar WSP = /[\x5ct\x5cn\x5cf ]/;\x0avar ALPHA = /[A-Za-z]/;\x0avar CRLF = /\x5cr\x5cn?/g;\x0afunction isSpace(char) {\x0a    return WSP.test(char);\x0a}\x0afunction isAlpha(char) {\x0a    return ALPHA.test(char);\x0a}\x0afunction preprocessInput(input) {\x0a    return input.replace(CRLF, \x22\x5cn\x22);\x0a}\x0afunction unwrap(maybe, msg) {\x0a    if (!maybe)\x0a        throw new Error((msg || \x27value\x27) + \x22 was null\x22);\x0a    return maybe;\x0a}\x0afunction or(maybe, otherwise) {\x0a    return maybe || otherwise;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/simple-html-tokenizer/dist/es6/evented-tokenizer.js\x0a\x0avar evented_tokenizer_EventedTokenizer = /** @class */ (function () {\x0a    function EventedTokenizer(delegate, entityParser) {\x0a        this.delegate = delegate;\x0a        this.entityParser = entityParser;\x0a        this.state = null;\x0a        this.input = null;\x0a        this.index = -1;\x0a        this.tagLine = -1;\x0a        this.tagColumn = -1;\x0a        this.line = -1;\x0a        this.column = -1;\x0a        this.states = {\x0a            beforeData: function () {\x0a                var char = this.peek();\x0a                if (char === \x22\x3c\x22) {\x0a                    this.state = \x27tagOpen\x27;\x0a                    this.markTagStart();\x0a                    this.consume();\x0a                }\x0a                else {\x0a                    this.state = \x27data\x27;\x0a                    this.delegate.beginData();\x0a                }\x0a            },\x0a            data: function () {\x0a                var char = this.peek();\x0a                if (char === \x22\x3c\x22) {\x0a                    this.delegate.finishData();\x0a                    this.state = \x27tagOpen\x27;\x0a                    this.markTagStart();\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22&\x22) {\x0a                    this.consume();\x0a                    this.delegate.appendToData(this.consumeCharRef() || \x22&\x22);\x0a                }\x0a                else {\x0a                    this.consume();\x0a                    this.delegate.appendToData(char);\x0a                }\x0a            },\x0a            tagOpen: function () {\x0a                var char = this.consume();\x0a                if (char === \x22!\x22) {\x0a                    this.state = \x27markupDeclaration\x27;\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.state = \x27endTagOpen\x27;\x0a                }\x0a                else if (isAlpha(char)) {\x0a                    this.state = \x27tagName\x27;\x0a                    this.delegate.beginStartTag();\x0a                    this.delegate.appendToTagName(char.toLowerCase());\x0a                }\x0a            },\x0a            markupDeclaration: function () {\x0a                var char = this.consume();\x0a                if (char === \x22-\x22 && this.input.charAt(this.index) === \x22-\x22) {\x0a                    this.consume();\x0a                    this.state = \x27commentStart\x27;\x0a                    this.delegate.beginComment();\x0a                }\x0a            },\x0a            commentStart: function () {\x0a                var char = this.consume();\x0a                if (char === \x22-\x22) {\x0a                    this.state = \x27commentStartDash\x27;\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.finishComment();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToCommentData(char);\x0a                    this.state = \x27comment\x27;\x0a                }\x0a            },\x0a            commentStartDash: function () {\x0a                var char = this.consume();\x0a                if (char === \x22-\x22) {\x0a                    this.state = \x27commentEnd\x27;\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.finishComment();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToCommentData(\x22-\x22);\x0a                    this.state = \x27comment\x27;\x0a                }\x0a            },\x0a            comment: function () {\x0a                var char = this.consume();\x0a                if (char === \x22-\x22) {\x0a                    this.state = \x27commentEndDash\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToCommentData(char);\x0a                }\x0a            },\x0a            commentEndDash: function () {\x0a                var char = this.consume();\x0a                if (char === \x22-\x22) {\x0a                    this.state = \x27commentEnd\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToCommentData(\x22-\x22 + char);\x0a                    this.state = \x27comment\x27;\x0a                }\x0a            },\x0a            commentEnd: function () {\x0a                var char = this.consume();\x0a                if (char === \x22\x3e\x22) {\x0a                    this.delegate.finishComment();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToCommentData(\x22--\x22 + char);\x0a                    this.state = \x27comment\x27;\x0a                }\x0a            },\x0a            tagName: function () {\x0a                var char = this.consume();\x0a                if (isSpace(char)) {\x0a                    this.state = \x27beforeAttributeName\x27;\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.state = \x27selfClosingStartTag\x27;\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.delegate.appendToTagName(char);\x0a                }\x0a            },\x0a            beforeAttributeName: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.consume();\x0a                    return;\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.state = \x27selfClosingStartTag\x27;\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else if (char === \x27=\x27) {\x0a                    this.delegate.reportSyntaxError(\x22attribute name cannot start with equals sign\x22);\x0a                    this.state = \x27attributeName\x27;\x0a                    this.delegate.beginAttribute();\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeName(char);\x0a                }\x0a                else {\x0a                    this.state = \x27attributeName\x27;\x0a                    this.delegate.beginAttribute();\x0a                }\x0a            },\x0a            attributeName: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.state = \x27afterAttributeName\x27;\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.state = \x27selfClosingStartTag\x27;\x0a                }\x0a                else if (char === \x22=\x22) {\x0a                    this.state = \x27beforeAttributeValue\x27;\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else if (char === \x27\x22\x27 || char === \x22\x27\x22 || char === \x27\x3c\x27) {\x0a                    this.delegate.reportSyntaxError(char + \x22 is not a valid character within attribute names\x22);\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeName(char);\x0a                }\x0a                else {\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeName(char);\x0a                }\x0a            },\x0a            afterAttributeName: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.consume();\x0a                    return;\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.state = \x27selfClosingStartTag\x27;\x0a                }\x0a                else if (char === \x22=\x22) {\x0a                    this.consume();\x0a                    this.state = \x27beforeAttributeValue\x27;\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.state = \x27attributeName\x27;\x0a                    this.delegate.beginAttribute();\x0a                    this.delegate.appendToAttributeName(char);\x0a                }\x0a            },\x0a            beforeAttributeValue: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.consume();\x0a                }\x0a                else if (char === \x27\x22\x27) {\x0a                    this.state = \x27attributeValueDoubleQuoted\x27;\x0a                    this.delegate.beginAttributeValue(true);\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22\x27\x22) {\x0a                    this.state = \x27attributeValueSingleQuoted\x27;\x0a                    this.delegate.beginAttributeValue(true);\x0a                    this.consume();\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.state = \x27attributeValueUnquoted\x27;\x0a                    this.delegate.beginAttributeValue(false);\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeValue(char);\x0a                }\x0a            },\x0a            attributeValueDoubleQuoted: function () {\x0a                var char = this.consume();\x0a                if (char === \x27\x22\x27) {\x0a                    this.delegate.finishAttributeValue();\x0a                    this.state = \x27afterAttributeValueQuoted\x27;\x0a                }\x0a                else if (char === \x22&\x22) {\x0a                    this.delegate.appendToAttributeValue(this.consumeCharRef(\x27\x22\x27) || \x22&\x22);\x0a                }\x0a                else {\x0a                    this.delegate.appendToAttributeValue(char);\x0a                }\x0a            },\x0a            attributeValueSingleQuoted: function () {\x0a                var char = this.consume();\x0a                if (char === \x22\x27\x22) {\x0a                    this.delegate.finishAttributeValue();\x0a                    this.state = \x27afterAttributeValueQuoted\x27;\x0a                }\x0a                else if (char === \x22&\x22) {\x0a                    this.delegate.appendToAttributeValue(this.consumeCharRef(\x22\x27\x22) || \x22&\x22);\x0a                }\x0a                else {\x0a                    this.delegate.appendToAttributeValue(char);\x0a                }\x0a            },\x0a            attributeValueUnquoted: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.state = \x27beforeAttributeName\x27;\x0a                }\x0a                else if (char === \x22&\x22) {\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeValue(this.consumeCharRef(\x22\x3e\x22) || \x22&\x22);\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.delegate.finishAttributeValue();\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.consume();\x0a                    this.delegate.appendToAttributeValue(char);\x0a                }\x0a            },\x0a            afterAttributeValueQuoted: function () {\x0a                var char = this.peek();\x0a                if (isSpace(char)) {\x0a                    this.consume();\x0a                    this.state = \x27beforeAttributeName\x27;\x0a                }\x0a                else if (char === \x22/\x22) {\x0a                    this.consume();\x0a                    this.state = \x27selfClosingStartTag\x27;\x0a                }\x0a                else if (char === \x22\x3e\x22) {\x0a                    this.consume();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.state = \x27beforeAttributeName\x27;\x0a                }\x0a            },\x0a            selfClosingStartTag: function () {\x0a                var char = this.peek();\x0a                if (char === \x22\x3e\x22) {\x0a                    this.consume();\x0a                    this.delegate.markTagAsSelfClosing();\x0a                    this.delegate.finishTag();\x0a                    this.state = \x27beforeData\x27;\x0a                }\x0a                else {\x0a                    this.state = \x27beforeAttributeName\x27;\x0a                }\x0a            },\x0a            endTagOpen: function () {\x0a                var char = this.consume();\x0a                if (isAlpha(char)) {\x0a                    this.state = \x27tagName\x27;\x0a                    this.delegate.beginEndTag();\x0a                    this.delegate.appendToTagName(char.toLowerCase());\x0a                }\x0a            }\x0a        };\x0a        this.reset();\x0a    }\x0a    EventedTokenizer.prototype.reset = function () {\x0a        this.state = \x27beforeData\x27;\x0a        this.input = \x27\x27;\x0a        this.index = 0;\x0a        this.line = 1;\x0a        this.column = 0;\x0a        this.tagLine = -1;\x0a        this.tagColumn = -1;\x0a        this.delegate.reset();\x0a    };\x0a    EventedTokenizer.prototype.tokenize = function (input) {\x0a        this.reset();\x0a        this.tokenizePart(input);\x0a        this.tokenizeEOF();\x0a    };\x0a    EventedTokenizer.prototype.tokenizePart = function (input) {\x0a        this.input += preprocessInput(input);\x0a        while (this.index \x3c this.input.length) {\x0a            this.states[this.state].call(this);\x0a        }\x0a    };\x0a    EventedTokenizer.prototype.tokenizeEOF = function () {\x0a        this.flushData();\x0a    };\x0a    EventedTokenizer.prototype.flushData = function () {\x0a        if (this.state === \x27data\x27) {\x0a            this.delegate.finishData();\x0a            this.state = \x27beforeData\x27;\x0a        }\x0a    };\x0a    EventedTokenizer.prototype.peek = function () {\x0a        return this.input.charAt(this.index);\x0a    };\x0a    EventedTokenizer.prototype.consume = function () {\x0a        var char = this.peek();\x0a        this.index++;\x0a        if (char === \x22\x5cn\x22) {\x0a            this.line++;\x0a            this.column = 0;\x0a        }\x0a        else {\x0a            this.column++;\x0a        }\x0a        return char;\x0a    };\x0a    EventedTokenizer.prototype.consumeCharRef = function () {\x0a        var endIndex = this.input.indexOf(\x27;\x27, this.index);\x0a        if (endIndex === -1) {\x0a            return;\x0a        }\x0a        var entity = this.input.slice(this.index, endIndex);\x0a        var chars = this.entityParser.parse(entity);\x0a        if (chars) {\x0a            var count = entity.length;\x0a            // consume the entity chars\x0a            while (count) {\x0a                this.consume();\x0a                count--;\x0a            }\x0a            // consume the `;`\x0a            this.consume();\x0a            return chars;\x0a        }\x0a    };\x0a    EventedTokenizer.prototype.markTagStart = function () {\x0a        // these properties to be removed in next major bump\x0a        this.tagLine = this.line;\x0a        this.tagColumn = this.column;\x0a        if (this.delegate.tagOpen) {\x0a            this.delegate.tagOpen();\x0a        }\x0a    };\x0a    return EventedTokenizer;\x0a}());\x0a/* harmony default export */ var evented_tokenizer = (evented_tokenizer_EventedTokenizer);\x0a\x0a// CONCATENATED MODULE: ./node_modules/simple-html-tokenizer/dist/es6/tokenizer.js\x0a\x0a\x0a;\x0avar tokenizer_Tokenizer = /** @class */ (function () {\x0a    function Tokenizer(entityParser, options) {\x0a        if (options === void 0) { options = {}; }\x0a        this.options = options;\x0a        this._token = null;\x0a        this.startLine = 1;\x0a        this.startColumn = 0;\x0a        this.tokens = [];\x0a        this.currentAttribute = null;\x0a        this.tokenizer = new evented_tokenizer(this, entityParser);\x0a    }\x0a    Object.defineProperty(Tokenizer.prototype, \x22token\x22, {\x0a        get: function () {\x0a            return unwrap(this._token);\x0a        },\x0a        set: function (value) {\x0a            this._token = value;\x0a        },\x0a        enumerable: true,\x0a        configurable: true\x0a    });\x0a    Tokenizer.prototype.tokenize = function (input) {\x0a        this.tokens = [];\x0a        this.tokenizer.tokenize(input);\x0a        return this.tokens;\x0a    };\x0a    Tokenizer.prototype.tokenizePart = function (input) {\x0a        this.tokens = [];\x0a        this.tokenizer.tokenizePart(input);\x0a        return this.tokens;\x0a    };\x0a    Tokenizer.prototype.tokenizeEOF = function () {\x0a        this.tokens = [];\x0a        this.tokenizer.tokenizeEOF();\x0a        return this.tokens[0];\x0a    };\x0a    Tokenizer.prototype.reset = function () {\x0a        this._token = null;\x0a        this.startLine = 1;\x0a        this.startColumn = 0;\x0a    };\x0a    Tokenizer.prototype.addLocInfo = function () {\x0a        if (this.options.loc) {\x0a            this.token.loc = {\x0a                start: {\x0a                    line: this.startLine,\x0a                    column: this.startColumn\x0a                },\x0a                end: {\x0a                    line: this.tokenizer.line,\x0a                    column: this.tokenizer.column\x0a                }\x0a            };\x0a        }\x0a        this.startLine = this.tokenizer.line;\x0a        this.startColumn = this.tokenizer.column;\x0a    };\x0a    // Data\x0a    Tokenizer.prototype.beginData = function () {\x0a        this.token = {\x0a            type: \x27Chars\x27,\x0a            chars: \x27\x27\x0a        };\x0a        this.tokens.push(this.token);\x0a    };\x0a    Tokenizer.prototype.appendToData = function (char) {\x0a        this.token.chars += char;\x0a    };\x0a    Tokenizer.prototype.finishData = function () {\x0a        this.addLocInfo();\x0a    };\x0a    // Comment\x0a    Tokenizer.prototype.beginComment = function () {\x0a        this.token = {\x0a            type: \x27Comment\x27,\x0a            chars: \x27\x27\x0a        };\x0a        this.tokens.push(this.token);\x0a    };\x0a    Tokenizer.prototype.appendToCommentData = function (char) {\x0a        this.token.chars += char;\x0a    };\x0a    Tokenizer.prototype.finishComment = function () {\x0a        this.addLocInfo();\x0a    };\x0a    // Tags - basic\x0a    Tokenizer.prototype.beginStartTag = function () {\x0a        this.token = {\x0a            type: \x27StartTag\x27,\x0a            tagName: \x27\x27,\x0a            attributes: [],\x0a            selfClosing: false\x0a        };\x0a        this.tokens.push(this.token);\x0a    };\x0a    Tokenizer.prototype.beginEndTag = function () {\x0a        this.token = {\x0a            type: \x27EndTag\x27,\x0a            tagName: \x27\x27\x0a        };\x0a        this.tokens.push(this.token);\x0a    };\x0a    Tokenizer.prototype.finishTag = function () {\x0a        this.addLocInfo();\x0a    };\x0a    Tokenizer.prototype.markTagAsSelfClosing = function () {\x0a        this.token.selfClosing = true;\x0a    };\x0a    // Tags - name\x0a    Tokenizer.prototype.appendToTagName = function (char) {\x0a        this.token.tagName += char;\x0a    };\x0a    // Tags - attributes\x0a    Tokenizer.prototype.beginAttribute = function () {\x0a        var attributes = unwrap(this.token.attributes, \x22current token\x27s attributs\x22);\x0a        this.currentAttribute = [\x22\x22, \x22\x22, false];\x0a        attributes.push(this.currentAttribute);\x0a    };\x0a    Tokenizer.prototype.appendToAttributeName = function (char) {\x0a        var currentAttribute = unwrap(this.currentAttribute);\x0a        currentAttribute[0] += char;\x0a    };\x0a    Tokenizer.prototype.beginAttributeValue = function (isQuoted) {\x0a        var currentAttribute = unwrap(this.currentAttribute);\x0a        currentAttribute[2] = isQuoted;\x0a    };\x0a    Tokenizer.prototype.appendToAttributeValue = function (char) {\x0a        var currentAttribute = unwrap(this.currentAttribute);\x0a        currentAttribute[1] = currentAttribute[1] || \x22\x22;\x0a        currentAttribute[1] += char;\x0a    };\x0a    Tokenizer.prototype.finishAttributeValue = function () {\x0a    };\x0a    Tokenizer.prototype.reportSyntaxError = function (message) {\x0a        this.token.syntaxError = message;\x0a    };\x0a    return Tokenizer;\x0a}());\x0a/* harmony default export */ var tokenizer = (tokenizer_Tokenizer);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22htmlEntities\x22]}\x0avar external_this_wp_htmlEntities_ = __webpack_require__(57);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22isShallowEqual\x22]}\x0avar external_this_wp_isShallowEqual_ = __webpack_require__(42);\x0avar external_this_wp_isShallowEqual_default = /*#__PURE__*/__webpack_require__.n(external_this_wp_isShallowEqual_);\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\x0avar esm_extends = __webpack_require__(19);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22compose\x22]}\x0avar external_this_wp_compose_ = __webpack_require__(6);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/block-content-provider/index.js\x0a\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0avar _createContext = Object(external_this_wp_element_[\x22createContext\x22])(function () {}),\x0a    Consumer = _createContext.Consumer,\x0a    Provider = _createContext.Provider;\x0a/**\x0a * An internal block component used in block content serialization to inject\x0a * nested block content within the `save` implementation of the ancestor\x0a * component in which it is nested. The component provides a pre-bound\x0a * `BlockContent` component via context, which is used by the developer-facing\x0a * `InnerBlocks.Content` component to render block content.\x0a *\x0a * @example\x0a *\x0a * ```jsx\x0a * \x3cBlockContentProvider innerBlocks={ innerBlocks }\x3e\x0a * \x09{ blockSaveElement }\x0a * \x3c/BlockContentProvider\x3e\x0a * ```\x0a *\x0a * @return {WPElement} Element with BlockContent injected via context.\x0a */\x0a\x0a\x0avar block_content_provider_BlockContentProvider = function BlockContentProvider(_ref) {\x0a  var children = _ref.children,\x0a      innerBlocks = _ref.innerBlocks;\x0a\x0a  var BlockContent = function BlockContent() {\x0a    // Value is an array of blocks, so defer to block serializer\x0a    var html = serialize(innerBlocks); // Use special-cased raw HTML tag to avoid default escaping\x0a\x0a    return Object(external_this_wp_element_[\x22createElement\x22])(external_this_wp_element_[\x22RawHTML\x22], null, html);\x0a  };\x0a\x0a  return Object(external_this_wp_element_[\x22createElement\x22])(Provider, {\x0a    value: BlockContent\x0a  }, children);\x0a};\x0a/**\x0a * A Higher Order Component used to inject BlockContent using context to the\x0a * wrapped component.\x0a *\x0a * @return {Component} Enhanced component with injected BlockContent as prop.\x0a */\x0a\x0a\x0avar withBlockContentContext = Object(external_this_wp_compose_[\x22createHigherOrderComponent\x22])(function (OriginalComponent) {\x0a  return function (props) {\x0a    return Object(external_this_wp_element_[\x22createElement\x22])(Consumer, null, function (context) {\x0a      return Object(external_this_wp_element_[\x22createElement\x22])(OriginalComponent, Object(esm_extends[\x22a\x22 /* default */])({}, props, {\x0a        BlockContent: context\x0a      }));\x0a    });\x0a  };\x0a}, \x27withBlockContentContext\x27);\x0a/* harmony default export */ var block_content_provider = (block_content_provider_BlockContentProvider);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/serializer.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a/**\x0a * Returns the block\x27s default classname from its name.\x0a *\x0a * @param {string} blockName The block name.\x0a *\x0a * @return {string} The block\x27s default class.\x0a */\x0a\x0afunction getBlockDefaultClassName(blockName) {\x0a  // Generated HTML classes for blocks follow the `wp-block-{name}` nomenclature.\x0a  // Blocks provided by WordPress drop the prefixes \x27core/\x27 or \x27core-\x27 (used in \x27core-embed/\x27).\x0a  var className = \x27wp-block-\x27 + blockName.replace(/\x5c//, \x27-\x27).replace(/^core-/, \x27\x27);\x0a  return Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.getBlockDefaultClassName\x27, className, blockName);\x0a}\x0a/**\x0a * Returns the block\x27s default menu item classname from its name.\x0a *\x0a * @param {string} blockName The block name.\x0a *\x0a * @return {string} The block\x27s default menu item class.\x0a */\x0a\x0afunction getBlockMenuDefaultClassName(blockName) {\x0a  // Generated HTML classes for blocks follow the `editor-block-list-item-{name}` nomenclature.\x0a  // Blocks provided by WordPress drop the prefixes \x27core/\x27 or \x27core-\x27 (used in \x27core-embed/\x27).\x0a  var className = \x27editor-block-list-item-\x27 + blockName.replace(/\x5c//, \x27-\x27).replace(/^core-/, \x27\x27);\x0a  return Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.getBlockMenuDefaultClassName\x27, className, blockName);\x0a}\x0a/**\x0a * Given a block type containing a save render implementation and attributes, returns the\x0a * enhanced element to be saved or string when raw HTML expected.\x0a *\x0a * @param {string|Object} blockTypeOrName   Block type or name.\x0a * @param {Object}        attributes        Block attributes.\x0a * @param {?Array}        innerBlocks       Nested blocks.\x0a *\x0a * @return {Object|string} Save element or raw HTML string.\x0a */\x0a\x0afunction getSaveElement(blockTypeOrName, attributes) {\x0a  var innerBlocks = arguments.length \x3e 2 && arguments[2] !== undefined ? arguments[2] : [];\x0a  var blockType = normalizeBlockType(blockTypeOrName);\x0a  var save = blockType.save; // Component classes are unsupported for save since serialization must\x0a  // occur synchronously. For improved interoperability with higher-order\x0a  // components which often return component class, emulate basic support.\x0a\x0a  if (save.prototype instanceof external_this_wp_element_[\x22Component\x22]) {\x0a    var instance = new save({\x0a      attributes: attributes\x0a    });\x0a    save = instance.render.bind(instance);\x0a  }\x0a\x0a  var element = save({\x0a    attributes: attributes,\x0a    innerBlocks: innerBlocks\x0a  });\x0a\x0a  if (Object(external_lodash_[\x22isObject\x22])(element) && Object(external_this_wp_hooks_[\x22hasFilter\x22])(\x27blocks.getSaveContent.extraProps\x27)) {\x0a    /**\x0a     * Filters the props applied to the block save result element.\x0a     *\x0a     * @param {Object}      props      Props applied to save element.\x0a     * @param {WPBlockType} blockType  Block type definition.\x0a     * @param {Object}      attributes Block attributes.\x0a     */\x0a    var props = Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.getSaveContent.extraProps\x27, Object(objectSpread[\x22a\x22 /* default */])({}, element.props), blockType, attributes);\x0a\x0a    if (!external_this_wp_isShallowEqual_default()(props, element.props)) {\x0a      element = Object(external_this_wp_element_[\x22cloneElement\x22])(element, props);\x0a    }\x0a  }\x0a  /**\x0a   * Filters the save result of a block during serialization.\x0a   *\x0a   * @param {WPElement}   element    Block save result.\x0a   * @param {WPBlockType} blockType  Block type definition.\x0a   * @param {Object}      attributes Block attributes.\x0a   */\x0a\x0a\x0a  element = Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.getSaveElement\x27, element, blockType, attributes);\x0a  return Object(external_this_wp_element_[\x22createElement\x22])(block_content_provider, {\x0a    innerBlocks: innerBlocks\x0a  }, element);\x0a}\x0a/**\x0a * Given a block type containing a save render implementation and attributes, returns the\x0a * static markup to be saved.\x0a *\x0a * @param {string|Object} blockTypeOrName Block type or name.\x0a * @param {Object}        attributes      Block attributes.\x0a * @param {?Array}        innerBlocks     Nested blocks.\x0a *\x0a * @return {string} Save content.\x0a */\x0a\x0afunction getSaveContent(blockTypeOrName, attributes, innerBlocks) {\x0a  var blockType = normalizeBlockType(blockTypeOrName);\x0a  return Object(external_this_wp_element_[\x22renderToString\x22])(getSaveElement(blockType, attributes, innerBlocks));\x0a}\x0a/**\x0a * Returns attributes which are to be saved and serialized into the block\x0a * comment delimiter.\x0a *\x0a * When a block exists in memory it contains as its attributes both those\x0a * parsed the block comment delimiter _and_ those which matched from the\x0a * contents of the block.\x0a *\x0a * This function returns only those attributes which are needed to persist and\x0a * which cannot be matched from the block content.\x0a *\x0a * @param {Object\x3cstring,*\x3e} blockType     Block type.\x0a * @param {Object\x3cstring,*\x3e} attributes Attributes from in-memory block data.\x0a *\x0a * @return {Object\x3cstring,*\x3e} Subset of attributes for comment serialization.\x0a */\x0a\x0afunction getCommentAttributes(blockType, attributes) {\x0a  return Object(external_lodash_[\x22reduce\x22])(blockType.attributes, function (result, attributeSchema, key) {\x0a    var value = attributes[key]; // Ignore undefined values.\x0a\x0a    if (undefined === value) {\x0a      return result;\x0a    } // Ignore all attributes but the ones with an \x22undefined\x22 source\x0a    // \x22undefined\x22 source refers to attributes saved in the block comment.\x0a\x0a\x0a    if (attributeSchema.source !== undefined) {\x0a      return result;\x0a    } // Ignore default value.\x0a\x0a\x0a    if (\x27default\x27 in attributeSchema && attributeSchema.default === value) {\x0a      return result;\x0a    } // Otherwise, include in comment set.\x0a\x0a\x0a    result[key] = value;\x0a    return result;\x0a  }, {});\x0a}\x0a/**\x0a * Given an attributes object, returns a string in the serialized attributes\x0a * format prepared for post content.\x0a *\x0a * @param {Object} attributes Attributes object.\x0a *\x0a * @return {string} Serialized attributes.\x0a */\x0a\x0afunction serializeAttributes(attributes) {\x0a  return JSON.stringify(attributes) // Don\x27t break HTML comments.\x0a  .replace(/--/g, \x22\x5c\x5cu002d\x5c\x5cu002d\x22) // Don\x27t break non-standard-compliant tools.\x0a  .replace(/\x3c/g, \x22\x5c\x5cu003c\x22).replace(/\x3e/g, \x22\x5c\x5cu003e\x22).replace(/&/g, \x22\x5c\x5cu0026\x22) // Bypass server stripslashes behavior which would unescape stringify\x27s\x0a  // escaping of quotation mark.\x0a  //\x0a  // See: https://developer.wordpress.org/reference/functions/wp_kses_stripslashes/\x0a  .replace(/\x5c\x5c\x22/g, \x22\x5c\x5cu0022\x22);\x0a}\x0a/**\x0a * Given a block object, returns the Block\x27s Inner HTML markup.\x0a *\x0a * @param {Object} block Block instance.\x0a *\x0a * @return {string} HTML.\x0a */\x0a\x0afunction getBlockContent(block) {\x0a  // @todo why not getBlockInnerHtml?\x0a  // If block was parsed as invalid or encounters an error while generating\x0a  // save content, use original content instead to avoid content loss. If a\x0a  // block contains nested content, exempt it from this condition because we\x0a  // otherwise have no access to its original content and content loss would\x0a  // still occur.\x0a  var saveContent = block.originalContent;\x0a\x0a  if (block.isValid || block.innerBlocks.length) {\x0a    try {\x0a      saveContent = getSaveContent(block.name, block.attributes, block.innerBlocks);\x0a    } catch (error) {}\x0a  }\x0a\x0a  return saveContent;\x0a}\x0a/**\x0a * Returns the content of a block, including comment delimiters.\x0a *\x0a * @param {string} rawBlockName Block name.\x0a * @param {Object} attributes   Block attributes.\x0a * @param {string} content      Block save content.\x0a *\x0a * @return {string} Comment-delimited block content.\x0a */\x0a\x0afunction getCommentDelimitedContent(rawBlockName, attributes, content) {\x0a  var serializedAttributes = !Object(external_lodash_[\x22isEmpty\x22])(attributes) ? serializeAttributes(attributes) + \x27 \x27 : \x27\x27; // Strip core blocks of their namespace prefix.\x0a\x0a  var blockName = Object(external_lodash_[\x22startsWith\x22])(rawBlockName, \x27core/\x27) ? rawBlockName.slice(5) : rawBlockName; // @todo make the `wp:` prefix potentially configurable.\x0a\x0a  if (!content) {\x0a    return \x22\x3c!-- wp:\x22.concat(blockName, \x22 \x22).concat(serializedAttributes, \x22/--\x3e\x22);\x0a  }\x0a\x0a  return \x22\x3c!-- wp:\x22.concat(blockName, \x22 \x22).concat(serializedAttributes, \x22--\x3e\x5cn\x22) + content + \x22\x5cn\x3c!-- /wp:\x22.concat(blockName, \x22 --\x3e\x22);\x0a}\x0a/**\x0a * Returns the content of a block, including comment delimiters, determining\x0a * serialized attributes and content form from the current state of the block.\x0a *\x0a * @param {Object} block Block instance.\x0a *\x0a * @return {string} Serialized block.\x0a */\x0a\x0afunction serializeBlock(block) {\x0a  var blockName = block.name;\x0a  var saveContent = getBlockContent(block);\x0a\x0a  switch (blockName) {\x0a    case getFreeformContentHandlerName():\x0a    case getUnregisteredTypeHandlerName():\x0a      return saveContent;\x0a\x0a    default:\x0a      {\x0a        var blockType = registration_getBlockType(blockName);\x0a        var saveAttributes = getCommentAttributes(blockType, block.attributes);\x0a        return getCommentDelimitedContent(blockName, saveAttributes, saveContent);\x0a      }\x0a  }\x0a}\x0a/**\x0a * Takes a block or set of blocks and returns the serialized post content.\x0a *\x0a * @param {Array} blocks Block(s) to serialize.\x0a *\x0a * @return {string} The post content.\x0a */\x0a\x0afunction serialize(blocks) {\x0a  return Object(external_lodash_[\x22castArray\x22])(blocks).map(serializeBlock).join(\x27\x5cn\x5cn\x27);\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/validation.js\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Globally matches any consecutive whitespace\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_WHITESPACE = /[\x5ct\x5cn\x5cr\x5cv\x5cf ]+/g;\x0a/**\x0a * Matches a string containing only whitespace\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_ONLY_WHITESPACE = /^[\x5ct\x5cn\x5cr\x5cv\x5cf ]*$/;\x0a/**\x0a * Matches a CSS URL type value\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_STYLE_URL_TYPE = /^url\x5cs*\x5c([\x27\x22\x5cs]*(.*?)[\x27\x22\x5cs]*\x5c)$/;\x0a/**\x0a * Boolean attributes are attributes whose presence as being assigned is\x0a * meaningful, even if only empty.\x0a *\x0a * See: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\x0a * Extracted from: https://html.spec.whatwg.org/multipage/indices.html#attributes-3\x0a *\x0a * Object.keys( [ ...document.querySelectorAll( \x27#attributes-1 \x3e tbody \x3e tr\x27 ) ]\x0a *     .filter( ( tr ) =\x3e tr.lastChild.textContent.indexOf( \x27Boolean attribute\x27 ) !== -1 )\x0a *     .reduce( ( result, tr ) =\x3e Object.assign( result, {\x0a *         [ tr.firstChild.textContent.trim() ]: true\x0a *     } ), {} ) ).sort();\x0a *\x0a * @type {Array}\x0a */\x0a\x0avar BOOLEAN_ATTRIBUTES = [\x27allowfullscreen\x27, \x27allowpaymentrequest\x27, \x27allowusermedia\x27, \x27async\x27, \x27autofocus\x27, \x27autoplay\x27, \x27checked\x27, \x27controls\x27, \x27default\x27, \x27defer\x27, \x27disabled\x27, \x27download\x27, \x27formnovalidate\x27, \x27hidden\x27, \x27ismap\x27, \x27itemscope\x27, \x27loop\x27, \x27multiple\x27, \x27muted\x27, \x27nomodule\x27, \x27novalidate\x27, \x27open\x27, \x27playsinline\x27, \x27readonly\x27, \x27required\x27, \x27reversed\x27, \x27selected\x27, \x27typemustmatch\x27];\x0a/**\x0a * Enumerated attributes are attributes which must be of a specific value form.\x0a * Like boolean attributes, these are meaningful if specified, even if not of a\x0a * valid enumerated value.\x0a *\x0a * See: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#enumerated-attribute\x0a * Extracted from: https://html.spec.whatwg.org/multipage/indices.html#attributes-3\x0a *\x0a * Object.keys( [ ...document.querySelectorAll( \x27#attributes-1 \x3e tbody \x3e tr\x27 ) ]\x0a *     .filter( ( tr ) =\x3e /^(\x22(.+?)\x22;?\x5cs*)+/.test( tr.lastChild.textContent.trim() ) )\x0a *     .reduce( ( result, tr ) =\x3e Object.assign( result, {\x0a *         [ tr.firstChild.textContent.trim() ]: true\x0a *     } ), {} ) ).sort();\x0a *\x0a * @type {Array}\x0a */\x0a\x0avar ENUMERATED_ATTRIBUTES = [\x27autocapitalize\x27, \x27autocomplete\x27, \x27charset\x27, \x27contenteditable\x27, \x27crossorigin\x27, \x27decoding\x27, \x27dir\x27, \x27draggable\x27, \x27enctype\x27, \x27formenctype\x27, \x27formmethod\x27, \x27http-equiv\x27, \x27inputmode\x27, \x27kind\x27, \x27method\x27, \x27preload\x27, \x27scope\x27, \x27shape\x27, \x27spellcheck\x27, \x27translate\x27, \x27type\x27, \x27wrap\x27];\x0a/**\x0a * Meaningful attributes are those who cannot be safely ignored when omitted in\x0a * one HTML markup string and not another.\x0a *\x0a * @type {Array}\x0a */\x0a\x0avar MEANINGFUL_ATTRIBUTES = [].concat(BOOLEAN_ATTRIBUTES, ENUMERATED_ATTRIBUTES);\x0a/**\x0a * Array of functions which receive a text string on which to apply normalizing\x0a * behavior for consideration in text token equivalence, carefully ordered from\x0a * least-to-most expensive operations.\x0a *\x0a * @type {Array}\x0a */\x0a\x0avar TEXT_NORMALIZATIONS = [external_lodash_[\x22identity\x22], getTextWithCollapsedWhitespace];\x0a/**\x0a * Regular expression matching a named character reference. In lieu of bundling\x0a * a full set of references, the pattern covers the minimal necessary to test\x0a * positively against the full set.\x0a *\x0a * \x22The ampersand must be followed by one of the names given in the named\x0a * character references section, using the same case.\x22\x0a *\x0a * Tested aginst \x2212.5 Named character references\x22:\x0a *\x0a * ```\x0a * const references = [ ...document.querySelectorAll(\x0a *     \x27#named-character-references-table tr[id^=entity-] td:first-child\x27\x0a * ) ].map( ( code ) =\x3e code.textContent )\x0a * references.every( ( reference ) =\x3e /^[\x5cda-z]+$/i.test( reference ) )\x0a * ```\x0a *\x0a * @link https://html.spec.whatwg.org/multipage/syntax.html#character-references\x0a * @link https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_NAMED_CHARACTER_REFERENCE = /^[\x5cda-z]+$/i;\x0a/**\x0a * Regular expression matching a decimal character reference.\x0a *\x0a * \x22The ampersand must be followed by a U+0023 NUMBER SIGN character (#),\x0a * followed by one or more ASCII digits, representing a base-ten integer\x22\x0a *\x0a * @link https://html.spec.whatwg.org/multipage/syntax.html#character-references\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_DECIMAL_CHARACTER_REFERENCE = /^#\x5cd+$/;\x0a/**\x0a * Regular expression matching a hexadecimal character reference.\x0a *\x0a * \x22The ampersand must be followed by a U+0023 NUMBER SIGN character (#), which\x0a * must be followed by either a U+0078 LATIN SMALL LETTER X character (x) or a\x0a * U+0058 LATIN CAPITAL LETTER X character (X), which must then be followed by\x0a * one or more ASCII hex digits, representing a hexadecimal integer\x22\x0a *\x0a * @link https://html.spec.whatwg.org/multipage/syntax.html#character-references\x0a *\x0a * @type {RegExp}\x0a */\x0a\x0avar REGEXP_HEXADECIMAL_CHARACTER_REFERENCE = /^#x[\x5cda-f]+$/i;\x0a/**\x0a * Returns true if the given string is a valid character reference segment, or\x0a * false otherwise. The text should be stripped of `&` and `;` demarcations.\x0a *\x0a * @param {string} text Text to test.\x0a *\x0a * @return {boolean} Whether text is valid character reference.\x0a */\x0a\x0afunction isValidCharacterReference(text) {\x0a  return REGEXP_NAMED_CHARACTER_REFERENCE.test(text) || REGEXP_DECIMAL_CHARACTER_REFERENCE.test(text) || REGEXP_HEXADECIMAL_CHARACTER_REFERENCE.test(text);\x0a}\x0a/**\x0a * Subsitute EntityParser class for `simple-html-tokenizer` which uses the\x0a * implementation of `decodeEntities` from `html-entities`, in order to avoid\x0a * bundling a massive named character reference.\x0a *\x0a * @see https://github.com/tildeio/simple-html-tokenizer/tree/master/src/entity-parser.ts\x0a */\x0a\x0avar validation_DecodeEntityParser =\x0a/*#__PURE__*/\x0afunction () {\x0a  function DecodeEntityParser() {\x0a    Object(classCallCheck[\x22a\x22 /* default */])(this, DecodeEntityParser);\x0a  }\x0a\x0a  Object(createClass[\x22a\x22 /* default */])(DecodeEntityParser, [{\x0a    key: \x22parse\x22,\x0a\x0a    /**\x0a     * Returns a substitute string for an entity string sequence between `&`\x0a     * and `;`, or undefined if no substitution should occur.\x0a     *\x0a     * @param {string} entity Entity fragment discovered in HTML.\x0a     *\x0a     * @return {?string} Entity substitute value.\x0a     */\x0a    value: function parse(entity) {\x0a      if (isValidCharacterReference(entity)) {\x0a        return Object(external_this_wp_htmlEntities_[\x22decodeEntities\x22])(\x27&\x27 + entity + \x27;\x27);\x0a      }\x0a    }\x0a  }]);\x0a\x0a  return DecodeEntityParser;\x0a}();\x0a/**\x0a * Object of logger functions.\x0a */\x0a\x0avar log = function () {\x0a  /**\x0a   * Creates a logger with block validation prefix.\x0a   *\x0a   * @param {Function} logger Original logger function.\x0a   *\x0a   * @return {Function} Augmented logger function.\x0a   */\x0a  function createLogger(logger) {\x0a    // In test environments, pre-process the sprintf message to improve\x0a    // readability of error messages. We\x27d prefer to avoid pulling in this\x0a    // dependency in runtime environments, and it can be dropped by a combo\x0a    // of Webpack env substitution + UglifyJS dead code elimination.\x0a    if (false) {}\x0a\x0a    return function (message) {\x0a      for (var _len = arguments.length, args = new Array(_len \x3e 1 ? _len - 1 : 0), _key = 1; _key \x3c _len; _key++) {\x0a        args[_key - 1] = arguments[_key];\x0a      }\x0a\x0a      return logger.apply(void 0, [\x27Block validation: \x27 + message].concat(args));\x0a    };\x0a  }\x0a\x0a  return {\x0a    /* eslint-disable no-console */\x0a    error: createLogger(console.error),\x0a    warning: createLogger(console.warn)\x0a    /* eslint-enable no-console */\x0a\x0a  };\x0a}();\x0a/**\x0a * Given a specified string, returns an array of strings split by consecutive\x0a * whitespace, ignoring leading or trailing whitespace.\x0a *\x0a * @param {string} text Original text.\x0a *\x0a * @return {string[]} Text pieces split on whitespace.\x0a */\x0a\x0a\x0afunction getTextPiecesSplitOnWhitespace(text) {\x0a  return text.trim().split(REGEXP_WHITESPACE);\x0a}\x0a/**\x0a * Given a specified string, returns a new trimmed string where all consecutive\x0a * whitespace is collapsed to a single space.\x0a *\x0a * @param {string} text Original text.\x0a *\x0a * @return {string} Trimmed text with consecutive whitespace collapsed.\x0a */\x0a\x0afunction getTextWithCollapsedWhitespace(text) {\x0a  // This is an overly simplified whitespace comparison. The specification is\x0a  // more prescriptive of whitespace behavior in inline and block contexts.\x0a  //\x0a  // See: https://medium.com/@patrickbrosset/when-does-white-space-matter-in-html-b90e8a7cdd33\x0a  return getTextPiecesSplitOnWhitespace(text).join(\x27 \x27);\x0a}\x0a/**\x0a * Returns attribute pairs of the given StartTag token, including only pairs\x0a * where the value is non-empty or the attribute is a boolean attribute, an\x0a * enumerated attribute, or a custom data- attribute.\x0a *\x0a * @see MEANINGFUL_ATTRIBUTES\x0a *\x0a * @param {Object} token StartTag token.\x0a *\x0a * @return {Array[]} Attribute pairs.\x0a */\x0a\x0afunction getMeaningfulAttributePairs(token) {\x0a  return token.attributes.filter(function (pair) {\x0a    var _pair = Object(slicedToArray[\x22a\x22 /* default */])(pair, 2),\x0a        key = _pair[0],\x0a        value = _pair[1];\x0a\x0a    return value || key.indexOf(\x27data-\x27) === 0 || Object(external_lodash_[\x22includes\x22])(MEANINGFUL_ATTRIBUTES, key);\x0a  });\x0a}\x0a/**\x0a * Returns true if two text tokens (with `chars` property) are equivalent, or\x0a * false otherwise.\x0a *\x0a * @param {Object} actual   Actual token.\x0a * @param {Object} expected Expected token.\x0a *\x0a * @return {boolean} Whether two text tokens are equivalent.\x0a */\x0a\x0afunction isEquivalentTextTokens(actual, expected) {\x0a  // This function is intentionally written as syntactically \x22ugly\x22 as a hot\x0a  // path optimization. Text is progressively normalized in order from least-\x0a  // to-most operationally expensive, until the earliest point at which text\x0a  // can be confidently inferred as being equal.\x0a  var actualChars = actual.chars;\x0a  var expectedChars = expected.chars;\x0a\x0a  for (var i = 0; i \x3c TEXT_NORMALIZATIONS.length; i++) {\x0a    var normalize = TEXT_NORMALIZATIONS[i];\x0a    actualChars = normalize(actualChars);\x0a    expectedChars = normalize(expectedChars);\x0a\x0a    if (actualChars === expectedChars) {\x0a      return true;\x0a    }\x0a  }\x0a\x0a  log.warning(\x27Expected text `%s`, saw `%s`.\x27, expected.chars, actual.chars);\x0a  return false;\x0a}\x0a/**\x0a * Given a style value, returns a normalized style value for strict equality\x0a * comparison.\x0a *\x0a * @param {string} value Style value.\x0a *\x0a * @return {string} Normalized style value.\x0a */\x0a\x0afunction getNormalizedStyleValue(value) {\x0a  return value // Normalize URL type to omit whitespace or quotes\x0a  .replace(REGEXP_STYLE_URL_TYPE, \x27url($1)\x27);\x0a}\x0a/**\x0a * Given a style attribute string, returns an object of style properties.\x0a *\x0a * @param {string} text Style attribute.\x0a *\x0a * @return {Object} Style properties.\x0a */\x0a\x0afunction getStyleProperties(text) {\x0a  var pairs = text // Trim ending semicolon (avoid including in split)\x0a  .replace(/;?\x5cs*$/, \x27\x27) // Split on property assignment\x0a  .split(\x27;\x27) // For each property assignment...\x0a  .map(function (style) {\x0a    // ...split further into key-value pairs\x0a    var _style$split = style.split(\x27:\x27),\x0a        _style$split2 = _toArray(_style$split),\x0a        key = _style$split2[0],\x0a        valueParts = _style$split2.slice(1);\x0a\x0a    var value = valueParts.join(\x27:\x27);\x0a    return [key.trim(), getNormalizedStyleValue(value.trim())];\x0a  });\x0a  return Object(external_lodash_[\x22fromPairs\x22])(pairs);\x0a}\x0a/**\x0a * Attribute-specific equality handlers\x0a *\x0a * @type {Object}\x0a */\x0a\x0avar isEqualAttributesOfName = Object(objectSpread[\x22a\x22 /* default */])({\x0a  class: function _class(actual, expected) {\x0a    // Class matches if members are the same, even if out of order or\x0a    // superfluous whitespace between.\x0a    return !external_lodash_[\x22xor\x22].apply(void 0, Object(toConsumableArray[\x22a\x22 /* default */])([actual, expected].map(getTextPiecesSplitOnWhitespace))).length;\x0a  },\x0a  style: function style(actual, expected) {\x0a    return external_lodash_[\x22isEqual\x22].apply(void 0, Object(toConsumableArray[\x22a\x22 /* default */])([actual, expected].map(getStyleProperties)));\x0a  }\x0a}, Object(external_lodash_[\x22fromPairs\x22])(BOOLEAN_ATTRIBUTES.map(function (attribute) {\x0a  return [attribute, external_lodash_[\x22stubTrue\x22]];\x0a})));\x0a/**\x0a * Given two sets of attribute tuples, returns true if the attribute sets are\x0a * equivalent.\x0a *\x0a * @param {Array[]} actual   Actual attributes tuples.\x0a * @param {Array[]} expected Expected attributes tuples.\x0a *\x0a * @return {boolean} Whether attributes are equivalent.\x0a */\x0a\x0afunction isEqualTagAttributePairs(actual, expected) {\x0a  // Attributes is tokenized as tuples. Their lengths should match. This also\x0a  // avoids us needing to check both attributes sets, since if A has any keys\x0a  // which do not exist in B, we know the sets to be different.\x0a  if (actual.length !== expected.length) {\x0a    log.warning(\x27Expected attributes %o, instead saw %o.\x27, expected, actual);\x0a    return false;\x0a  } // Convert tuples to object for ease of lookup\x0a\x0a\x0a  var _map = [actual, expected].map(external_lodash_[\x22fromPairs\x22]),\x0a      _map2 = Object(slicedToArray[\x22a\x22 /* default */])(_map, 2),\x0a      actualAttributes = _map2[0],\x0a      expectedAttributes = _map2[1];\x0a\x0a  for (var name in actualAttributes) {\x0a    // As noted above, if missing member in B, assume different\x0a    if (!expectedAttributes.hasOwnProperty(name)) {\x0a      log.warning(\x27Encountered unexpected attribute `%s`.\x27, name);\x0a      return false;\x0a    }\x0a\x0a    var actualValue = actualAttributes[name];\x0a    var expectedValue = expectedAttributes[name];\x0a    var isEqualAttributes = isEqualAttributesOfName[name];\x0a\x0a    if (isEqualAttributes) {\x0a      // Defer custom attribute equality handling\x0a      if (!isEqualAttributes(actualValue, expectedValue)) {\x0a        log.warning(\x27Expected attribute `%s` of value `%s`, saw `%s`.\x27, name, expectedValue, actualValue);\x0a        return false;\x0a      }\x0a    } else if (actualValue !== expectedValue) {\x0a      // Otherwise strict inequality should bail\x0a      log.warning(\x27Expected attribute `%s` of value `%s`, saw `%s`.\x27, name, expectedValue, actualValue);\x0a      return false;\x0a    }\x0a  }\x0a\x0a  return true;\x0a}\x0a/**\x0a * Token-type-specific equality handlers\x0a *\x0a * @type {Object}\x0a */\x0a\x0avar isEqualTokensOfType = {\x0a  StartTag: function StartTag(actual, expected) {\x0a    if (actual.tagName !== expected.tagName) {\x0a      log.warning(\x27Expected tag name `%s`, instead saw `%s`.\x27, expected.tagName, actual.tagName);\x0a      return false;\x0a    }\x0a\x0a    return isEqualTagAttributePairs.apply(void 0, Object(toConsumableArray[\x22a\x22 /* default */])([actual, expected].map(getMeaningfulAttributePairs)));\x0a  },\x0a  Chars: isEquivalentTextTokens,\x0a  Comment: isEquivalentTextTokens\x0a};\x0a/**\x0a * Given an array of tokens, returns the first token which is not purely\x0a * whitespace.\x0a *\x0a * Mutates the tokens array.\x0a *\x0a * @param {Object[]} tokens Set of tokens to search.\x0a *\x0a * @return {Object} Next non-whitespace token.\x0a */\x0a\x0afunction getNextNonWhitespaceToken(tokens) {\x0a  var token;\x0a\x0a  while (token = tokens.shift()) {\x0a    if (token.type !== \x27Chars\x27) {\x0a      return token;\x0a    }\x0a\x0a    if (!REGEXP_ONLY_WHITESPACE.test(token.chars)) {\x0a      return token;\x0a    }\x0a  }\x0a}\x0a/**\x0a * Tokenize an HTML string, gracefully handling any errors thrown during\x0a * underlying tokenization.\x0a *\x0a * @param {string} html HTML string to tokenize.\x0a *\x0a * @return {Object[]|null} Array of valid tokenized HTML elements, or null on error\x0a */\x0a\x0afunction getHTMLTokens(html) {\x0a  try {\x0a    return new tokenizer(new validation_DecodeEntityParser()).tokenize(html);\x0a  } catch (e) {\x0a    log.warning(\x27Malformed HTML detected: %s\x27, html);\x0a  }\x0a\x0a  return null;\x0a}\x0a/**\x0a * Returns true if the next HTML token closes the current token.\x0a *\x0a * @param {Object} currentToken Current token to compare with.\x0a * @param {Object|undefined} nextToken Next token to compare against.\x0a *\x0a * @return {boolean} true if `nextToken` closes `currentToken`, false otherwise\x0a */\x0a\x0a\x0afunction isClosedByToken(currentToken, nextToken) {\x0a  // Ensure this is a self closed token\x0a  if (!currentToken.selfClosing) {\x0a    return false;\x0a  } // Check token names and determine if nextToken is the closing tag for currentToken\x0a\x0a\x0a  if (nextToken && nextToken.tagName === currentToken.tagName && nextToken.type === \x27EndTag\x27) {\x0a    return true;\x0a  }\x0a\x0a  return false;\x0a}\x0a/**\x0a * Returns true if the given HTML strings are effectively equivalent, or\x0a * false otherwise. Invalid HTML is not considered equivalent, even if the\x0a * strings directly match.\x0a *\x0a * @param {string} actual Actual HTML string.\x0a * @param {string} expected Expected HTML string.\x0a *\x0a * @return {boolean} Whether HTML strings are equivalent.\x0a */\x0a\x0afunction isEquivalentHTML(actual, expected) {\x0a  // Tokenize input content and reserialized save content\x0a  var _map3 = [actual, expected].map(getHTMLTokens),\x0a      _map4 = Object(slicedToArray[\x22a\x22 /* default */])(_map3, 2),\x0a      actualTokens = _map4[0],\x0a      expectedTokens = _map4[1]; // If either is malformed then stop comparing - the strings are not equivalent\x0a\x0a\x0a  if (!actualTokens || !expectedTokens) {\x0a    return false;\x0a  }\x0a\x0a  var actualToken, expectedToken;\x0a\x0a  while (actualToken = getNextNonWhitespaceToken(actualTokens)) {\x0a    expectedToken = getNextNonWhitespaceToken(expectedTokens); // Inequal if exhausted all expected tokens\x0a\x0a    if (!expectedToken) {\x0a      log.warning(\x27Expected end of content, instead saw %o.\x27, actualToken);\x0a      return false;\x0a    } // Inequal if next non-whitespace token of each set are not same type\x0a\x0a\x0a    if (actualToken.type !== expectedToken.type) {\x0a      log.warning(\x27Expected token of type `%s` (%o), instead saw `%s` (%o).\x27, expectedToken.type, expectedToken, actualToken.type, actualToken);\x0a      return false;\x0a    } // Defer custom token type equality handling, otherwise continue and\x0a    // assume as equal\x0a\x0a\x0a    var isEqualTokens = isEqualTokensOfType[actualToken.type];\x0a\x0a    if (isEqualTokens && !isEqualTokens(actualToken, expectedToken)) {\x0a      return false;\x0a    } // Peek at the next tokens (actual and expected) to see if they close\x0a    // a self-closing tag\x0a\x0a\x0a    if (isClosedByToken(actualToken, expectedTokens[0])) {\x0a      // Consume the next expected token that closes the current actual\x0a      // self-closing token\x0a      getNextNonWhitespaceToken(expectedTokens);\x0a    } else if (isClosedByToken(expectedToken, actualTokens[0])) {\x0a      // Consume the next actual token that closes the current expected\x0a      // self-closing token\x0a      getNextNonWhitespaceToken(actualTokens);\x0a    }\x0a  }\x0a\x0a  if (expectedToken = getNextNonWhitespaceToken(expectedTokens)) {\x0a    // If any non-whitespace tokens remain in expected token set, this\x0a    // indicates inequality\x0a    log.warning(\x27Expected %o, instead saw end of content.\x27, expectedToken);\x0a    return false;\x0a  }\x0a\x0a  return true;\x0a}\x0a/**\x0a * Returns true if the parsed block is valid given the input content. A block\x0a * is considered valid if, when serialized with assumed attributes, the content\x0a * matches the original value.\x0a *\x0a * Logs to console in development environments when invalid.\x0a *\x0a * @param {string|Object} blockTypeOrName      Block type.\x0a * @param {Object}        attributes           Parsed block attributes.\x0a * @param {string}        originalBlockContent Original block content.\x0a *\x0a * @return {boolean} Whether block is valid.\x0a */\x0a\x0afunction isValidBlockContent(blockTypeOrName, attributes, originalBlockContent) {\x0a  var blockType = normalizeBlockType(blockTypeOrName);\x0a  var generatedBlockContent;\x0a\x0a  try {\x0a    generatedBlockContent = getSaveContent(blockType, attributes);\x0a  } catch (error) {\x0a    log.error(\x27Block validation failed because an error occurred while generating block content:\x5cn\x5cn%s\x27, error.toString());\x0a    return false;\x0a  }\x0a\x0a  var isValid = isEquivalentHTML(originalBlockContent, generatedBlockContent);\x0a\x0a  if (!isValid) {\x0a    log.error(\x27Block validation failed for `%s` (%o).\x5cn\x5cnContent generated by `save` function:\x5cn\x5cn%s\x5cn\x5cnContent retrieved from post body:\x5cn\x5cn%s\x27, blockType.name, blockType, generatedBlockContent, originalBlockContent);\x0a  }\x0a\x0a  return isValid;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/children.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a/**\x0a * A representation of a block\x27s rich text value.\x0a *\x0a * @typedef {WPBlockNode[]} WPBlockChildren\x0a */\x0a\x0a/**\x0a * Given block children, returns a serialize-capable WordPress element.\x0a *\x0a * @param {WPBlockChildren} children Block children object to convert.\x0a *\x0a * @return {WPElement} A serialize-capable element.\x0a */\x0a\x0afunction getSerializeCapableElement(children) {\x0a  // The fact that block children are compatible with the element serializer is\x0a  // merely an implementation detail that currently serves to be true, but\x0a  // should not be mistaken as being a guarantee on the external API. The\x0a  // public API only offers guarantees to work with strings (toHTML) and DOM\x0a  // elements (fromDOM), and should provide utilities to manipulate the value\x0a  // rather than expect consumers to inspect or construct its shape (concat).\x0a  return children;\x0a}\x0a/**\x0a * Given block children, returns an array of block nodes.\x0a *\x0a * @param {WPBlockChildren} children Block children object to convert.\x0a *\x0a * @return {Array\x3cWPBlockNode\x3e} An array of individual block nodes.\x0a */\x0a\x0afunction getChildrenArray(children) {\x0a  // The fact that block children are compatible with the element serializer\x0a  // is merely an implementation detail that currently serves to be true, but\x0a  // should not be mistaken as being a guarantee on the external API.\x0a  return children;\x0a}\x0a/**\x0a * Given two or more block nodes, returns a new block node representing a\x0a * concatenation of its values.\x0a *\x0a * @param {...WPBlockChildren} blockNodes Block nodes to concatenate.\x0a *\x0a * @return {WPBlockChildren} Concatenated block node.\x0a */\x0a\x0a\x0afunction concat() {\x0a  var result = [];\x0a\x0a  for (var i = 0; i \x3c arguments.length; i++) {\x0a    var blockNode = Object(external_lodash_[\x22castArray\x22])(i \x3c 0 || arguments.length \x3c= i ? undefined : arguments[i]);\x0a\x0a    for (var j = 0; j \x3c blockNode.length; j++) {\x0a      var child = blockNode[j];\x0a      var canConcatToPreviousString = typeof child === \x27string\x27 && typeof result[result.length - 1] === \x27string\x27;\x0a\x0a      if (canConcatToPreviousString) {\x0a        result[result.length - 1] += child;\x0a      } else {\x0a        result.push(child);\x0a      }\x0a    }\x0a  }\x0a\x0a  return result;\x0a}\x0a/**\x0a * Given an iterable set of DOM nodes, returns equivalent block children.\x0a * Ignores any non-element/text nodes included in set.\x0a *\x0a * @param {Iterable.\x3cNode\x3e} domNodes Iterable set of DOM nodes to convert.\x0a *\x0a * @return {WPBlockChildren} Block children equivalent to DOM nodes.\x0a */\x0a\x0afunction fromDOM(domNodes) {\x0a  var result = [];\x0a\x0a  for (var i = 0; i \x3c domNodes.length; i++) {\x0a    try {\x0a      result.push(node_fromDOM(domNodes[i]));\x0a    } catch (error) {// Simply ignore if DOM node could not be converted.\x0a    }\x0a  }\x0a\x0a  return result;\x0a}\x0a/**\x0a * Given a block node, returns its HTML string representation.\x0a *\x0a * @param {WPBlockChildren} children Block node(s) to convert to string.\x0a *\x0a * @return {string} String HTML representation of block node.\x0a */\x0a\x0afunction toHTML(children) {\x0a  var element = getSerializeCapableElement(children);\x0a  return Object(external_this_wp_element_[\x22renderToString\x22])(element);\x0a}\x0a/**\x0a * Given a selector, returns an hpq matcher generating a WPBlockChildren value\x0a * matching the selector result.\x0a *\x0a * @param {string} selector DOM selector.\x0a *\x0a * @return {Function} hpq matcher.\x0a */\x0a\x0afunction children_matcher(selector) {\x0a  return function (domNode) {\x0a    var match = domNode;\x0a\x0a    if (selector) {\x0a      match = domNode.querySelector(selector);\x0a    }\x0a\x0a    if (match) {\x0a      return fromDOM(match.childNodes);\x0a    }\x0a\x0a    return [];\x0a  };\x0a}\x0a/* harmony default export */ var api_children = ({\x0a  concat: concat,\x0a  getChildrenArray: getChildrenArray,\x0a  fromDOM: fromDOM,\x0a  toHTML: toHTML,\x0a  matcher: children_matcher\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/node.js\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar _window$Node = window.Node,\x0a    TEXT_NODE = _window$Node.TEXT_NODE,\x0a    ELEMENT_NODE = _window$Node.ELEMENT_NODE;\x0a/**\x0a * A representation of a single node within a block\x27s rich text value. If\x0a * representing a text node, the value is simply a string of the node value.\x0a * As representing an element node, it is an object of:\x0a *\x0a * 1. `type` (string): Tag name.\x0a * 2. `props` (object): Attributes and children array of WPBlockNode.\x0a *\x0a * @typedef {string|Object} WPBlockNode\x0a */\x0a\x0a/**\x0a * Given a single node and a node type (e.g. `\x27br\x27`), returns true if the node\x0a * corresponds to that type, false otherwise.\x0a *\x0a * @param {WPBlockNode} node Block node to test\x0a * @param {string} type      Node to type to test against.\x0a *\x0a * @return {boolean} Whether node is of intended type.\x0a */\x0a\x0afunction isNodeOfType(node, type) {\x0a  return node && node.type === type;\x0a}\x0a/**\x0a * Given an object implementing the NamedNodeMap interface, returns a plain\x0a * object equivalent value of name, value key-value pairs.\x0a *\x0a * @see https://dom.spec.whatwg.org/#interface-namednodemap\x0a *\x0a * @param {NamedNodeMap} nodeMap NamedNodeMap to convert to object.\x0a *\x0a * @return {Object} Object equivalent value of NamedNodeMap.\x0a */\x0a\x0a\x0afunction getNamedNodeMapAsObject(nodeMap) {\x0a  var result = {};\x0a\x0a  for (var i = 0; i \x3c nodeMap.length; i++) {\x0a    var _nodeMap$i = nodeMap[i],\x0a        name = _nodeMap$i.name,\x0a        value = _nodeMap$i.value;\x0a    result[name] = value;\x0a  }\x0a\x0a  return result;\x0a}\x0a/**\x0a * Given a DOM Element or Text node, returns an equivalent block node. Throws\x0a * if passed any node type other than element or text.\x0a *\x0a * @throws {TypeError} If non-element/text node is passed.\x0a *\x0a * @param {Node} domNode DOM node to convert.\x0a *\x0a * @return {WPBlockNode} Block node equivalent to DOM node.\x0a */\x0a\x0afunction node_fromDOM(domNode) {\x0a  if (domNode.nodeType === TEXT_NODE) {\x0a    return domNode.nodeValue;\x0a  }\x0a\x0a  if (domNode.nodeType !== ELEMENT_NODE) {\x0a    throw new TypeError(\x27A block node can only be created from a node of type text or \x27 + \x27element.\x27);\x0a  }\x0a\x0a  return {\x0a    type: domNode.nodeName.toLowerCase(),\x0a    props: Object(objectSpread[\x22a\x22 /* default */])({}, getNamedNodeMapAsObject(domNode.attributes), {\x0a      children: fromDOM(domNode.childNodes)\x0a    })\x0a  };\x0a}\x0a/**\x0a * Given a block node, returns its HTML string representation.\x0a *\x0a * @param {WPBlockNode} node Block node to convert to string.\x0a *\x0a * @return {string} String HTML representation of block node.\x0a */\x0a\x0afunction node_toHTML(node) {\x0a  return toHTML([node]);\x0a}\x0a/**\x0a * Given a selector, returns an hpq matcher generating a WPBlockNode value\x0a * matching the selector result.\x0a *\x0a * @param {string} selector DOM selector.\x0a *\x0a * @return {Function} hpq matcher.\x0a */\x0a\x0afunction node_matcher(selector) {\x0a  return function (domNode) {\x0a    var match = domNode;\x0a\x0a    if (selector) {\x0a      match = domNode.querySelector(selector);\x0a    }\x0a\x0a    try {\x0a      return node_fromDOM(match);\x0a    } catch (error) {\x0a      return null;\x0a    }\x0a  };\x0a}\x0a/* harmony default export */ var api_node = ({\x0a  isNodeOfType: isNodeOfType,\x0a  fromDOM: node_fromDOM,\x0a  toHTML: node_toHTML,\x0a  matcher: node_matcher\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/matchers.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0afunction matchers_html(selector, multilineTag) {\x0a  return function (domNode) {\x0a    var match = domNode;\x0a\x0a    if (selector) {\x0a      match = domNode.querySelector(selector);\x0a    }\x0a\x0a    if (!match) {\x0a      return \x27\x27;\x0a    }\x0a\x0a    if (multilineTag) {\x0a      var value = \x27\x27;\x0a      var length = match.children.length;\x0a\x0a      for (var index = 0; index \x3c length; index++) {\x0a        var child = match.children[index];\x0a\x0a        if (child.nodeName.toLowerCase() !== multilineTag) {\x0a          continue;\x0a        }\x0a\x0a        value += child.outerHTML;\x0a      }\x0a\x0a      return value;\x0a    }\x0a\x0a    return match.innerHTML;\x0a  };\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/parser.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a/**\x0a * Sources which are guaranteed to return a string value.\x0a *\x0a * @type {Set}\x0a */\x0a\x0avar STRING_SOURCES = new Set([\x27attribute\x27, \x27html\x27, \x27text\x27, \x27tag\x27]);\x0a/**\x0a * Higher-order hpq matcher which enhances an attribute matcher to return true\x0a * or false depending on whether the original matcher returns undefined. This\x0a * is useful for boolean attributes (e.g. disabled) whose attribute values may\x0a * be technically falsey (empty string), though their mere presence should be\x0a * enough to infer as true.\x0a *\x0a * @param {Function} matcher Original hpq matcher.\x0a *\x0a * @return {Function} Enhanced hpq matcher.\x0a */\x0a\x0avar parser_toBooleanAttributeMatcher = function toBooleanAttributeMatcher(matcher) {\x0a  return Object(external_lodash_[\x22flow\x22])([matcher, // Expected values from `attr( \x27disabled\x27 )`:\x0a  //\x0a  // \x3cinput\x3e\x0a  // - Value:       `undefined`\x0a  // - Transformed: `false`\x0a  //\x0a  // \x3cinput disabled\x3e\x0a  // - Value:       `\x27\x27`\x0a  // - Transformed: `true`\x0a  //\x0a  // \x3cinput disabled=\x22disabled\x22\x3e\x0a  // - Value:       `\x27disabled\x27`\x0a  // - Transformed: `true`\x0a  function (value) {\x0a    return value !== undefined;\x0a  }]);\x0a};\x0a/**\x0a * Returns true if value is of the given JSON schema type, or false otherwise.\x0a *\x0a * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\x0a *\x0a * @param {*}      value Value to test.\x0a * @param {string} type  Type to test.\x0a *\x0a * @return {boolean} Whether value is of type.\x0a */\x0a\x0afunction isOfType(value, type) {\x0a  switch (type) {\x0a    case \x27string\x27:\x0a      return typeof value === \x27string\x27;\x0a\x0a    case \x27boolean\x27:\x0a      return typeof value === \x27boolean\x27;\x0a\x0a    case \x27object\x27:\x0a      return !!value && value.constructor === Object;\x0a\x0a    case \x27null\x27:\x0a      return value === null;\x0a\x0a    case \x27array\x27:\x0a      return Array.isArray(value);\x0a\x0a    case \x27integer\x27:\x0a    case \x27number\x27:\x0a      return typeof value === \x27number\x27;\x0a  }\x0a\x0a  return true;\x0a}\x0a/**\x0a * Returns true if value is of an array of given JSON schema types, or false\x0a * otherwise.\x0a *\x0a * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\x0a *\x0a * @param {*}        value Value to test.\x0a * @param {string[]} types Types to test.\x0a *\x0a * @return {boolean} Whether value is of types.\x0a */\x0a\x0afunction isOfTypes(value, types) {\x0a  return types.some(function (type) {\x0a    return isOfType(value, type);\x0a  });\x0a}\x0a/**\x0a * Returns true if the given attribute schema describes a value which may be\x0a * an ambiguous string.\x0a *\x0a * Some sources are ambiguously serialized as strings, for which value casting\x0a * is enabled. This is only possible when a singular type is assigned to the\x0a * attribute schema, since the string ambiguity makes it impossible to know the\x0a * correct type of multiple to which to cast.\x0a *\x0a * @param {Object} attributeSchema Attribute\x27s schema.\x0a *\x0a * @return {boolean} Whether attribute schema defines an ambiguous string\x0a *                   source.\x0a */\x0a\x0afunction isAmbiguousStringSource(attributeSchema) {\x0a  var source = attributeSchema.source,\x0a      type = attributeSchema.type;\x0a  var isStringSource = STRING_SOURCES.has(source);\x0a  var isSingleType = typeof type === \x27string\x27;\x0a  return isStringSource && isSingleType;\x0a}\x0a/**\x0a * Returns value coerced to the specified JSON schema type string.\x0a *\x0a * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\x0a *\x0a * @param {*}      value Original value.\x0a * @param {string} type  Type to coerce.\x0a *\x0a * @return {*} Coerced value.\x0a */\x0a\x0afunction asType(value, type) {\x0a  switch (type) {\x0a    case \x27string\x27:\x0a      return String(value);\x0a\x0a    case \x27boolean\x27:\x0a      return Boolean(value);\x0a\x0a    case \x27object\x27:\x0a      return Object(value);\x0a\x0a    case \x27null\x27:\x0a      return null;\x0a\x0a    case \x27array\x27:\x0a      if (Array.isArray(value)) {\x0a        return value;\x0a      }\x0a\x0a      return Array.from(value);\x0a\x0a    case \x27integer\x27:\x0a    case \x27number\x27:\x0a      return Number(value);\x0a  }\x0a\x0a  return value;\x0a}\x0a/**\x0a * Returns an hpq matcher given a source object.\x0a *\x0a * @param {Object} sourceConfig Attribute Source object.\x0a *\x0a * @return {Function} A hpq Matcher.\x0a */\x0a\x0afunction matcherFromSource(sourceConfig) {\x0a  switch (sourceConfig.source) {\x0a    case \x27attribute\x27:\x0a      var matcher = attr(sourceConfig.selector, sourceConfig.attribute);\x0a\x0a      if (sourceConfig.type === \x27boolean\x27) {\x0a        matcher = parser_toBooleanAttributeMatcher(matcher);\x0a      }\x0a\x0a      return matcher;\x0a\x0a    case \x27html\x27:\x0a      return matchers_html(sourceConfig.selector, sourceConfig.multiline);\x0a\x0a    case \x27text\x27:\x0a      return es_text(sourceConfig.selector);\x0a\x0a    case \x27children\x27:\x0a      return children_matcher(sourceConfig.selector);\x0a\x0a    case \x27node\x27:\x0a      return node_matcher(sourceConfig.selector);\x0a\x0a    case \x27query\x27:\x0a      var subMatchers = Object(external_lodash_[\x22mapValues\x22])(sourceConfig.query, matcherFromSource);\x0a      return query(sourceConfig.selector, subMatchers);\x0a\x0a    case \x27tag\x27:\x0a      return Object(external_lodash_[\x22flow\x22])([prop(sourceConfig.selector, \x27nodeName\x27), function (value) {\x0a        return value.toLowerCase();\x0a      }]);\x0a\x0a    default:\x0a      // eslint-disable-next-line no-console\x0a      console.error(\x22Unknown source type \x5c\x22\x22.concat(sourceConfig.source, \x22\x5c\x22\x22));\x0a  }\x0a}\x0a/**\x0a * Given a block\x27s raw content and an attribute\x27s schema returns the attribute\x27s\x0a * value depending on its source.\x0a *\x0a * @param {string} innerHTML         Block\x27s raw content.\x0a * @param {Object} attributeSchema   Attribute\x27s schema.\x0a *\x0a * @return {*} Attribute value.\x0a */\x0a\x0afunction parseWithAttributeSchema(innerHTML, attributeSchema) {\x0a  return es_parse(innerHTML, matcherFromSource(attributeSchema));\x0a}\x0a/**\x0a * Given an attribute key, an attribute\x27s schema, a block\x27s raw content and the\x0a * commentAttributes returns the attribute value depending on its source\x0a * definition of the given attribute key.\x0a *\x0a * @param {string} attributeKey      Attribute key.\x0a * @param {Object} attributeSchema   Attribute\x27s schema.\x0a * @param {string} innerHTML         Block\x27s raw content.\x0a * @param {Object} commentAttributes Block\x27s comment attributes.\x0a *\x0a * @return {*} Attribute value.\x0a */\x0a\x0afunction getBlockAttribute(attributeKey, attributeSchema, innerHTML, commentAttributes) {\x0a  var type = attributeSchema.type;\x0a  var value;\x0a\x0a  switch (attributeSchema.source) {\x0a    // undefined source means that it\x27s an attribute serialized to the block\x27s \x22comment\x22\x0a    case undefined:\x0a      value = commentAttributes ? commentAttributes[attributeKey] : undefined;\x0a      break;\x0a\x0a    case \x27attribute\x27:\x0a    case \x27property\x27:\x0a    case \x27html\x27:\x0a    case \x27text\x27:\x0a    case \x27children\x27:\x0a    case \x27node\x27:\x0a    case \x27query\x27:\x0a    case \x27tag\x27:\x0a      value = parseWithAttributeSchema(innerHTML, attributeSchema);\x0a      break;\x0a  }\x0a\x0a  if (type !== undefined && !isOfTypes(value, Object(external_lodash_[\x22castArray\x22])(type))) {\x0a    // Reject the value if it is not valid of type. Reverting to the\x0a    // undefined value ensures the default is restored, if applicable.\x0a    value = undefined;\x0a  }\x0a\x0a  if (value === undefined) {\x0a    return attributeSchema.default;\x0a  }\x0a\x0a  return value;\x0a}\x0a/**\x0a * Returns the block attributes of a registered block node given its type.\x0a *\x0a * @param {string|Object} blockTypeOrName Block type or name.\x0a * @param {string}        innerHTML       Raw block content.\x0a * @param {?Object}       attributes      Known block attributes (from delimiters).\x0a *\x0a * @return {Object} All block attributes.\x0a */\x0a\x0afunction getBlockAttributes(blockTypeOrName, innerHTML) {\x0a  var attributes = arguments.length \x3e 2 && arguments[2] !== undefined ? arguments[2] : {};\x0a  var blockType = normalizeBlockType(blockTypeOrName);\x0a  var blockAttributes = Object(external_lodash_[\x22mapValues\x22])(blockType.attributes, function (attributeSchema, attributeKey) {\x0a    return getBlockAttribute(attributeKey, attributeSchema, innerHTML, attributes);\x0a  });\x0a  return Object(external_this_wp_hooks_[\x22applyFilters\x22])(\x27blocks.getBlockAttributes\x27, blockAttributes, blockType, innerHTML, attributes);\x0a}\x0a/**\x0a * Given a block object, returns a new copy of the block with any applicable\x0a * deprecated migrations applied, or the original block if it was both valid\x0a * and no eligible migrations exist.\x0a *\x0a * @param {WPBlock} block            Original block object.\x0a * @param {Object}  parsedAttributes Attributes as parsed from the initial\x0a *                                   block markup.\x0a *\x0a * @return {WPBlock} Migrated block object.\x0a */\x0a\x0afunction getMigratedBlock(block, parsedAttributes) {\x0a  var blockType = registration_getBlockType(block.name);\x0a  var deprecatedDefinitions = blockType.deprecated;\x0a\x0a  if (!deprecatedDefinitions || !deprecatedDefinitions.length) {\x0a    return block;\x0a  }\x0a\x0a  var _block = block,\x0a      originalContent = _block.originalContent,\x0a      innerBlocks = _block.innerBlocks;\x0a\x0a  for (var i = 0; i \x3c deprecatedDefinitions.length; i++) {\x0a    // A block can opt into a migration even if the block is valid by\x0a    // defining isEligible on its deprecation. If the block is both valid\x0a    // and does not opt to migrate, skip.\x0a    var _deprecatedDefinition = deprecatedDefinitions[i].isEligible,\x0a        isEligible = _deprecatedDefinition === void 0 ? external_lodash_[\x22stubFalse\x22] : _deprecatedDefinition;\x0a\x0a    if (block.isValid && !isEligible(parsedAttributes, innerBlocks)) {\x0a      continue;\x0a    } // Block type properties which could impact either serialization or\x0a    // parsing are not considered in the deprecated block type by default,\x0a    // and must be explicitly provided.\x0a\x0a\x0a    var deprecatedBlockType = Object.assign(Object(external_lodash_[\x22omit\x22])(blockType, [\x27attributes\x27, \x27save\x27, \x27supports\x27]), deprecatedDefinitions[i]);\x0a    var migratedAttributes = getBlockAttributes(deprecatedBlockType, originalContent, parsedAttributes); // Ignore the deprecation if it produces a block which is not valid.\x0a\x0a    var isValid = isValidBlockContent(deprecatedBlockType, migratedAttributes, originalContent);\x0a\x0a    if (!isValid) {\x0a      continue;\x0a    }\x0a\x0a    block = Object(objectSpread[\x22a\x22 /* default */])({}, block, {\x0a      isValid: true\x0a    });\x0a    var migratedInnerBlocks = innerBlocks; // A block may provide custom behavior to assign new attributes and/or\x0a    // inner blocks.\x0a\x0a    var migrate = deprecatedBlockType.migrate;\x0a\x0a    if (migrate) {\x0a      var _castArray = Object(external_lodash_[\x22castArray\x22])(migrate(migratedAttributes, innerBlocks));\x0a\x0a      var _castArray2 = Object(slicedToArray[\x22a\x22 /* default */])(_castArray, 2);\x0a\x0a      var _castArray2$ = _castArray2[0];\x0a      migratedAttributes = _castArray2$ === void 0 ? parsedAttributes : _castArray2$;\x0a      var _castArray2$2 = _castArray2[1];\x0a      migratedInnerBlocks = _castArray2$2 === void 0 ? innerBlocks : _castArray2$2;\x0a    }\x0a\x0a    block.attributes = migratedAttributes;\x0a    block.innerBlocks = migratedInnerBlocks;\x0a  }\x0a\x0a  return block;\x0a}\x0a/**\x0a * Creates a block with fallback to the unknown type handler.\x0a *\x0a * @param {Object} blockNode Parsed block node.\x0a *\x0a * @return {?Object} An initialized block object (if possible).\x0a */\x0a\x0afunction createBlockWithFallback(blockNode) {\x0a  var originalName = blockNode.blockName;\x0a  var attributes = blockNode.attrs,\x0a      _blockNode$innerBlock = blockNode.innerBlocks,\x0a      innerBlocks = _blockNode$innerBlock === void 0 ? [] : _blockNode$innerBlock,\x0a      innerHTML = blockNode.innerHTML;\x0a  var freeformContentFallbackBlock = getFreeformContentHandlerName();\x0a  var unregisteredFallbackBlock = getUnregisteredTypeHandlerName() || freeformContentFallbackBlock;\x0a  attributes = attributes || {}; // Trim content to avoid creation of intermediary freeform segments.\x0a\x0a  innerHTML = innerHTML.trim(); // Use type from block content if available. Otherwise, default to the\x0a  // freeform content fallback.\x0a\x0a  var name = originalName || freeformContentFallbackBlock; // Convert \x27core/cover-image\x27 block in existing content to \x27core/cover\x27.\x0a\x0a  if (\x27core/cover-image\x27 === name) {\x0a    name = \x27core/cover\x27;\x0a  } // Convert \x27core/text\x27 blocks in existing content to \x27core/paragraph\x27.\x0a\x0a\x0a  if (\x27core/text\x27 === name || \x27core/cover-text\x27 === name) {\x0a    name = \x27core/paragraph\x27;\x0a  } // Fallback content may be upgraded from classic editor expecting implicit\x0a  // automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\x0a  // meaning there are no negative consequences to repeated autop calls.\x0a\x0a\x0a  if (name === freeformContentFallbackBlock) {\x0a    innerHTML = Object(external_this_wp_autop_[\x22autop\x22])(innerHTML).trim();\x0a  } // Try finding the type for known block name, else fall back again.\x0a\x0a\x0a  var blockType = registration_getBlockType(name);\x0a\x0a  if (!blockType) {\x0a    // Preserve undelimited content for use by the unregistered type handler.\x0a    var originalUndelimitedContent = innerHTML; // If detected as a block which is not registered, preserve comment\x0a    // delimiters in content of unregistered type handler.\x0a\x0a    if (name) {\x0a      innerHTML = getCommentDelimitedContent(name, attributes, innerHTML);\x0a    }\x0a\x0a    name = unregisteredFallbackBlock;\x0a    attributes = {\x0a      originalName: originalName,\x0a      originalUndelimitedContent: originalUndelimitedContent\x0a    };\x0a    blockType = registration_getBlockType(name);\x0a  } // Coerce inner blocks from parsed form to canonical form.\x0a\x0a\x0a  innerBlocks = innerBlocks.map(createBlockWithFallback);\x0a  var isFallbackBlock = name === freeformContentFallbackBlock || name === unregisteredFallbackBlock; // Include in set only if type was determined.\x0a\x0a  if (!blockType || !innerHTML && isFallbackBlock) {\x0a    return;\x0a  }\x0a\x0a  var block = createBlock(name, getBlockAttributes(blockType, innerHTML, attributes), innerBlocks); // Block validation assumes an idempotent operation from source block to serialized block\x0a  // provided there are no changes in attributes. The validation procedure thus compares the\x0a  // provided source value with the serialized output before there are any modifications to\x0a  // the block. When both match, the block is marked as valid.\x0a\x0a  if (!isFallbackBlock) {\x0a    block.isValid = isValidBlockContent(blockType, block.attributes, innerHTML);\x0a  } // Preserve original content for future use in case the block is parsed as\x0a  // invalid, or future serialization attempt results in an error.\x0a\x0a\x0a  block.originalContent = innerHTML;\x0a  block = getMigratedBlock(block, attributes);\x0a  return block;\x0a}\x0a/**\x0a * Creates a parse implementation for the post content which returns a list of blocks.\x0a *\x0a * @param {Function} parseImplementation Parse implementation.\x0a *\x0a * @return {Function} An implementation which parses the post content.\x0a */\x0a\x0avar createParse = function createParse(parseImplementation) {\x0a  return function (content) {\x0a    return parseImplementation(content).reduce(function (memo, blockNode) {\x0a      var block = createBlockWithFallback(blockNode);\x0a\x0a      if (block) {\x0a        memo.push(block);\x0a      }\x0a\x0a      return memo;\x0a    }, []);\x0a  };\x0a};\x0a/**\x0a * Parses the post content with a PegJS grammar and returns a list of blocks.\x0a *\x0a * @param {string} content The post content.\x0a *\x0a * @return {Array} Block list.\x0a */\x0a\x0a\x0avar parseWithGrammar = createParse(external_this_wp_blockSerializationDefaultParser_[\x22parse\x22]);\x0a/* harmony default export */ var parser = (parseWithGrammar);\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22dom\x22]}\x0avar external_this_wp_dom_ = __webpack_require__(24);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/phrasing-content.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0avar phrasing_content_phrasingContentSchema = {\x0a  strong: {},\x0a  em: {},\x0a  s: {},\x0a  del: {},\x0a  ins: {},\x0a  a: {\x0a    attributes: [\x27href\x27, \x27target\x27, \x27rel\x27]\x0a  },\x0a  code: {},\x0a  abbr: {\x0a    attributes: [\x27title\x27]\x0a  },\x0a  sub: {},\x0a  sup: {},\x0a  br: {},\x0a  \x27#text\x27: {}\x0a}; // Recursion is needed.\x0a// Possible: strong \x3e em \x3e strong.\x0a// Impossible: strong \x3e strong.\x0a\x0a[\x27strong\x27, \x27em\x27, \x27s\x27, \x27del\x27, \x27ins\x27, \x27a\x27, \x27code\x27, \x27abbr\x27, \x27sub\x27, \x27sup\x27].forEach(function (tag) {\x0a  phrasing_content_phrasingContentSchema[tag].children = Object(external_lodash_[\x22omit\x22])(phrasing_content_phrasingContentSchema, tag);\x0a});\x0a/**\x0a * Get schema of possible paths for phrasing content.\x0a *\x0a * @see https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content\x0a *\x0a * @return {Object} Schema.\x0a */\x0a\x0afunction getPhrasingContentSchema() {\x0a  return phrasing_content_phrasingContentSchema;\x0a}\x0a/**\x0a * Find out whether or not the given node is phrasing content.\x0a *\x0a * @see https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content\x0a *\x0a * @param {Element} node The node to test.\x0a *\x0a * @return {boolean} True if phrasing content, false if not.\x0a */\x0a\x0afunction isPhrasingContent(node) {\x0a  var tag = node.nodeName.toLowerCase();\x0a  return getPhrasingContentSchema().hasOwnProperty(tag) || tag === \x27span\x27;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/utils.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar utils_window$Node = window.Node,\x0a    utils_ELEMENT_NODE = utils_window$Node.ELEMENT_NODE,\x0a    utils_TEXT_NODE = utils_window$Node.TEXT_NODE;\x0a/**\x0a * Given raw transforms from blocks, merges all schemas into one.\x0a *\x0a * @param {Array} transforms Block transforms, of the `raw` type.\x0a *\x0a * @return {Object} A complete block content schema.\x0a */\x0a\x0afunction getBlockContentSchema(transforms) {\x0a  var schemas = transforms.map(function (_ref) {\x0a    var isMatch = _ref.isMatch,\x0a        blockName = _ref.blockName,\x0a        schema = _ref.schema;\x0a    var hasAnchorSupport = registration_hasBlockSupport(blockName, \x27anchor\x27); // If the block does not has anchor support and the transform does not\x0a    // provides an isMatch we can return the schema right away.\x0a\x0a    if (!hasAnchorSupport && !isMatch) {\x0a      return schema;\x0a    }\x0a\x0a    return Object(external_lodash_[\x22mapValues\x22])(schema, function (value) {\x0a      var attributes = value.attributes || []; // If the block supports the \x22anchor\x22 functionality, it needs to keep its ID attribute.\x0a\x0a      if (hasAnchorSupport) {\x0a        attributes = [].concat(Object(toConsumableArray[\x22a\x22 /* default */])(attributes), [\x27id\x27]);\x0a      }\x0a\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, value, {\x0a        attributes: attributes,\x0a        isMatch: isMatch ? isMatch : undefined\x0a      });\x0a    });\x0a  });\x0a  return external_lodash_[\x22mergeWith\x22].apply(void 0, [{}].concat(Object(toConsumableArray[\x22a\x22 /* default */])(schemas), [function (objValue, srcValue, key) {\x0a    switch (key) {\x0a      case \x27children\x27:\x0a        {\x0a          if (objValue === \x27*\x27 || srcValue === \x27*\x27) {\x0a            return \x27*\x27;\x0a          }\x0a\x0a          return Object(objectSpread[\x22a\x22 /* default */])({}, objValue, srcValue);\x0a        }\x0a\x0a      case \x27attributes\x27:\x0a      case \x27require\x27:\x0a        {\x0a          return [].concat(Object(toConsumableArray[\x22a\x22 /* default */])(objValue || []), Object(toConsumableArray[\x22a\x22 /* default */])(srcValue || []));\x0a        }\x0a\x0a      case \x27isMatch\x27:\x0a        {\x0a          // If one of the values being merge is undefined (matches everything),\x0a          // the result of the merge will be undefined.\x0a          if (!objValue || !srcValue) {\x0a            return undefined;\x0a          } // When merging two isMatch functions, the result is a new function\x0a          // that returns if one of the source functions returns true.\x0a\x0a\x0a          return function () {\x0a            return objValue.apply(void 0, arguments) || srcValue.apply(void 0, arguments);\x0a          };\x0a        }\x0a    }\x0a  }]));\x0a}\x0a/**\x0a * Recursively checks if an element is empty. An element is not empty if it\x0a * contains text or contains elements with attributes such as images.\x0a *\x0a * @param {Element} element The element to check.\x0a *\x0a * @return {boolean} Wether or not the element is empty.\x0a */\x0a\x0afunction isEmpty(element) {\x0a  if (!element.hasChildNodes()) {\x0a    return true;\x0a  }\x0a\x0a  return Array.from(element.childNodes).every(function (node) {\x0a    if (node.nodeType === utils_TEXT_NODE) {\x0a      return !node.nodeValue.trim();\x0a    }\x0a\x0a    if (node.nodeType === utils_ELEMENT_NODE) {\x0a      if (node.nodeName === \x27BR\x27) {\x0a        return true;\x0a      } else if (node.hasAttributes()) {\x0a        return false;\x0a      }\x0a\x0a      return isEmpty(node);\x0a    }\x0a\x0a    return true;\x0a  });\x0a}\x0a/**\x0a * Checks wether HTML can be considered plain text. That is, it does not contain\x0a * any elements that are not line breaks.\x0a *\x0a * @param {string} HTML The HTML to check.\x0a *\x0a * @return {boolean} Wether the HTML can be considered plain text.\x0a */\x0a\x0afunction isPlain(HTML) {\x0a  return !/\x3c(?!br[ /\x3e])/i.test(HTML);\x0a}\x0a/**\x0a * Given node filters, deeply filters and mutates a NodeList.\x0a *\x0a * @param {NodeList} nodeList The nodeList to filter.\x0a * @param {Array}    filters  An array of functions that can mutate with the provided node.\x0a * @param {Document} doc      The document of the nodeList.\x0a * @param {Object}   schema   The schema to use.\x0a */\x0a\x0afunction deepFilterNodeList(nodeList, filters, doc, schema) {\x0a  Array.from(nodeList).forEach(function (node) {\x0a    deepFilterNodeList(node.childNodes, filters, doc, schema);\x0a    filters.forEach(function (item) {\x0a      // Make sure the node is still attached to the document.\x0a      if (!doc.contains(node)) {\x0a        return;\x0a      }\x0a\x0a      item(node, doc, schema);\x0a    });\x0a  });\x0a}\x0a/**\x0a * Given node filters, deeply filters HTML tags.\x0a * Filters from the deepest nodes to the top.\x0a *\x0a * @param {string} HTML    The HTML to filter.\x0a * @param {Array}  filters An array of functions that can mutate with the provided node.\x0a * @param {Object} schema  The schema to use.\x0a *\x0a * @return {string} The filtered HTML.\x0a */\x0a\x0afunction deepFilterHTML(HTML) {\x0a  var filters = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : [];\x0a  var schema = arguments.length \x3e 2 ? arguments[2] : undefined;\x0a  var doc = document.implementation.createHTMLDocument(\x27\x27);\x0a  doc.body.innerHTML = HTML;\x0a  deepFilterNodeList(doc.body.childNodes, filters, doc, schema);\x0a  return doc.body.innerHTML;\x0a}\x0a/**\x0a * Given a schema, unwraps or removes nodes, attributes and classes on a node\x0a * list.\x0a *\x0a * @param {NodeList} nodeList The nodeList to filter.\x0a * @param {Document} doc      The document of the nodeList.\x0a * @param {Object}   schema   An array of functions that can mutate with the provided node.\x0a * @param {Object}   inline   Whether to clean for inline mode.\x0a */\x0a\x0afunction cleanNodeList(nodeList, doc, schema, inline) {\x0a  Array.from(nodeList).forEach(function (node) {\x0a    var tag = node.nodeName.toLowerCase(); // It\x27s a valid child, if the tag exists in the schema without an isMatch\x0a    // function, or with an isMatch function that matches the node.\x0a\x0a    if (schema.hasOwnProperty(tag) && (!schema[tag].isMatch || schema[tag].isMatch(node))) {\x0a      if (node.nodeType === utils_ELEMENT_NODE) {\x0a        var _schema$tag = schema[tag],\x0a            _schema$tag$attribute = _schema$tag.attributes,\x0a            attributes = _schema$tag$attribute === void 0 ? [] : _schema$tag$attribute,\x0a            _schema$tag$classes = _schema$tag.classes,\x0a            classes = _schema$tag$classes === void 0 ? [] : _schema$tag$classes,\x0a            children = _schema$tag.children,\x0a            _schema$tag$require = _schema$tag.require,\x0a            require = _schema$tag$require === void 0 ? [] : _schema$tag$require,\x0a            allowEmpty = _schema$tag.allowEmpty; // If the node is empty and it\x27s supposed to have children,\x0a        // remove the node.\x0a\x0a\x0a        if (children && !allowEmpty && isEmpty(node)) {\x0a          Object(external_this_wp_dom_[\x22remove\x22])(node);\x0a          return;\x0a        }\x0a\x0a        if (node.hasAttributes()) {\x0a          // Strip invalid attributes.\x0a          Array.from(node.attributes).forEach(function (_ref2) {\x0a            var name = _ref2.name;\x0a\x0a            if (name !== \x27class\x27 && !Object(external_lodash_[\x22includes\x22])(attributes, name)) {\x0a              node.removeAttribute(name);\x0a            }\x0a          }); // Strip invalid classes.\x0a          // In jsdom-jscore, \x27node.classList\x27 can be undefined.\x0a          // TODO: Explore patching this in jsdom-jscore.\x0a\x0a          if (node.classList && node.classList.length) {\x0a            var mattchers = classes.map(function (item) {\x0a              if (typeof item === \x27string\x27) {\x0a                return function (className) {\x0a                  return className === item;\x0a                };\x0a              } else if (item instanceof RegExp) {\x0a                return function (className) {\x0a                  return item.test(className);\x0a                };\x0a              }\x0a\x0a              return external_lodash_[\x22noop\x22];\x0a            });\x0a            Array.from(node.classList).forEach(function (name) {\x0a              if (!mattchers.some(function (isMatch) {\x0a                return isMatch(name);\x0a              })) {\x0a                node.classList.remove(name);\x0a              }\x0a            });\x0a\x0a            if (!node.classList.length) {\x0a              node.removeAttribute(\x27class\x27);\x0a            }\x0a          }\x0a        }\x0a\x0a        if (node.hasChildNodes()) {\x0a          // Do not filter any content.\x0a          if (children === \x27*\x27) {\x0a            return;\x0a          } // Continue if the node is supposed to have children.\x0a\x0a\x0a          if (children) {\x0a            // If a parent requires certain children, but it does\x0a            // not have them, drop the parent and continue.\x0a            if (require.length && !node.querySelector(require.join(\x27,\x27))) {\x0a              cleanNodeList(node.childNodes, doc, schema, inline);\x0a              Object(external_this_wp_dom_[\x22unwrap\x22])(node); // If the node is at the top, phrasing content, and\x0a              // contains children that are block content, unwrap\x0a              // the node because it is invalid.\x0a            } else if (node.parentNode.nodeName === \x27BODY\x27 && isPhrasingContent(node)) {\x0a              cleanNodeList(node.childNodes, doc, schema, inline);\x0a\x0a              if (Array.from(node.childNodes).some(function (child) {\x0a                return !isPhrasingContent(child);\x0a              })) {\x0a                Object(external_this_wp_dom_[\x22unwrap\x22])(node);\x0a              }\x0a            } else {\x0a              cleanNodeList(node.childNodes, doc, children, inline);\x0a            } // Remove children if the node is not supposed to have any.\x0a\x0a          } else {\x0a            while (node.firstChild) {\x0a              Object(external_this_wp_dom_[\x22remove\x22])(node.firstChild);\x0a            }\x0a          }\x0a        }\x0a      } // Invalid child. Continue with schema at the same place and unwrap.\x0a\x0a    } else {\x0a      cleanNodeList(node.childNodes, doc, schema, inline); // For inline mode, insert a line break when unwrapping nodes that\x0a      // are not phrasing content.\x0a\x0a      if (inline && !isPhrasingContent(node) && node.nextElementSibling) {\x0a        Object(external_this_wp_dom_[\x22insertAfter\x22])(doc.createElement(\x27br\x27), node);\x0a      }\x0a\x0a      Object(external_this_wp_dom_[\x22unwrap\x22])(node);\x0a    }\x0a  });\x0a}\x0a/**\x0a * Given a schema, unwraps or removes nodes, attributes and classes on HTML.\x0a *\x0a * @param {string} HTML   The HTML to clean up.\x0a * @param {Object} schema Schema for the HTML.\x0a * @param {Object} inline Whether to clean for inline mode.\x0a *\x0a * @return {string} The cleaned up HTML.\x0a */\x0a\x0a\x0afunction removeInvalidHTML(HTML, schema, inline) {\x0a  var doc = document.implementation.createHTMLDocument(\x27\x27);\x0a  doc.body.innerHTML = HTML;\x0a  cleanNodeList(doc.body.childNodes, doc, schema, inline);\x0a  return doc.body.innerHTML;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/normalise-blocks.js\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar normalise_blocks_window$Node = window.Node,\x0a    normalise_blocks_ELEMENT_NODE = normalise_blocks_window$Node.ELEMENT_NODE,\x0a    normalise_blocks_TEXT_NODE = normalise_blocks_window$Node.TEXT_NODE;\x0a/* harmony default export */ var normalise_blocks = (function (HTML) {\x0a  var decuDoc = document.implementation.createHTMLDocument(\x27\x27);\x0a  var accuDoc = document.implementation.createHTMLDocument(\x27\x27);\x0a  var decu = decuDoc.body;\x0a  var accu = accuDoc.body;\x0a  decu.innerHTML = HTML;\x0a\x0a  while (decu.firstChild) {\x0a    var node = decu.firstChild; // Text nodes: wrap in a paragraph, or append to previous.\x0a\x0a    if (node.nodeType === normalise_blocks_TEXT_NODE) {\x0a      if (!node.nodeValue.trim()) {\x0a        decu.removeChild(node);\x0a      } else {\x0a        if (!accu.lastChild || accu.lastChild.nodeName !== \x27P\x27) {\x0a          accu.appendChild(accuDoc.createElement(\x27P\x27));\x0a        }\x0a\x0a        accu.lastChild.appendChild(node);\x0a      } // Element nodes.\x0a\x0a    } else if (node.nodeType === normalise_blocks_ELEMENT_NODE) {\x0a      // BR nodes: create a new paragraph on double, or append to previous.\x0a      if (node.nodeName === \x27BR\x27) {\x0a        if (node.nextSibling && node.nextSibling.nodeName === \x27BR\x27) {\x0a          accu.appendChild(accuDoc.createElement(\x27P\x27));\x0a          decu.removeChild(node.nextSibling);\x0a        } // Don\x27t append to an empty paragraph.\x0a\x0a\x0a        if (accu.lastChild && accu.lastChild.nodeName === \x27P\x27 && accu.lastChild.hasChildNodes()) {\x0a          accu.lastChild.appendChild(node);\x0a        } else {\x0a          decu.removeChild(node);\x0a        }\x0a      } else if (node.nodeName === \x27P\x27) {\x0a        // Only append non-empty paragraph nodes.\x0a        if (isEmpty(node)) {\x0a          decu.removeChild(node);\x0a        } else {\x0a          accu.appendChild(node);\x0a        }\x0a      } else if (isPhrasingContent(node)) {\x0a        if (!accu.lastChild || accu.lastChild.nodeName !== \x27P\x27) {\x0a          accu.appendChild(accuDoc.createElement(\x27P\x27));\x0a        }\x0a\x0a        accu.lastChild.appendChild(node);\x0a      } else {\x0a        accu.appendChild(node);\x0a      }\x0a    } else {\x0a      decu.removeChild(node);\x0a    }\x0a  }\x0a\x0a  return accu.innerHTML;\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/special-comment-converter.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar COMMENT_NODE = window.Node.COMMENT_NODE;\x0a/**\x0a * Looks for `\x3c!--nextpage--\x3e` and `\x3c!--more--\x3e` comments, as well as the\x0a * `\x3c!--more Some text--\x3e` variant and its `\x3c!--noteaser--\x3e` companion,\x0a * and replaces them with a custom element representing a future block.\x0a *\x0a * The custom element is a way to bypass the rest of the `raw-handling`\x0a * transforms, which would eliminate other kinds of node with which to carry\x0a * `\x3c!--more--\x3e`\x27s data: nodes with `data` attributes, empty paragraphs, etc.\x0a *\x0a * The custom element is then expected to be recognized by any registered\x0a * block\x27s `raw` transform.\x0a *\x0a * @param {Node}     node The node to be processed.\x0a * @param {Document} doc  The document of the node.\x0a * @return {void}\x0a */\x0a\x0a/* harmony default export */ var special_comment_converter = (function (node, doc) {\x0a  if (node.nodeType !== COMMENT_NODE) {\x0a    return;\x0a  }\x0a\x0a  if (node.nodeValue === \x27nextpage\x27) {\x0a    Object(external_this_wp_dom_[\x22replace\x22])(node, createNextpage(doc));\x0a    return;\x0a  }\x0a\x0a  if (node.nodeValue.indexOf(\x27more\x27) === 0) {\x0a    // Grab any custom text in the comment.\x0a    var customText = node.nodeValue.slice(4).trim();\x0a    /*\x0a     * When a `\x3c!--more--\x3e` comment is found, we need to look for any\x0a     * `\x3c!--noteaser--\x3e` sibling, but it may not be a direct sibling\x0a     * (whitespace typically lies in between)\x0a     */\x0a\x0a    var sibling = node;\x0a    var noTeaser = false;\x0a\x0a    while (sibling = sibling.nextSibling) {\x0a      if (sibling.nodeType === COMMENT_NODE && sibling.nodeValue === \x27noteaser\x27) {\x0a        noTeaser = true;\x0a        Object(external_this_wp_dom_[\x22remove\x22])(sibling);\x0a        break;\x0a      }\x0a    }\x0a\x0a    Object(external_this_wp_dom_[\x22replace\x22])(node, createMore(customText, noTeaser, doc));\x0a  }\x0a});\x0a\x0afunction createMore(customText, noTeaser, doc) {\x0a  var node = doc.createElement(\x27wp-block\x27);\x0a  node.dataset.block = \x27core/more\x27;\x0a\x0a  if (customText) {\x0a    node.dataset.customText = customText;\x0a  }\x0a\x0a  if (noTeaser) {\x0a    // \x22Boolean\x22 data attribute\x0a    node.dataset.noTeaser = \x27\x27;\x0a  }\x0a\x0a  return node;\x0a}\x0a\x0afunction createNextpage(doc) {\x0a  var node = doc.createElement(\x27wp-block\x27);\x0a  node.dataset.block = \x27core/nextpage\x27;\x0a  return node;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/list-reducer.js\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0afunction isList(node) {\x0a  return node.nodeName === \x27OL\x27 || node.nodeName === \x27UL\x27;\x0a}\x0a\x0afunction shallowTextContent(element) {\x0a  return Object(toConsumableArray[\x22a\x22 /* default */])(element.childNodes).map(function (_ref) {\x0a    var _ref$nodeValue = _ref.nodeValue,\x0a        nodeValue = _ref$nodeValue === void 0 ? \x27\x27 : _ref$nodeValue;\x0a    return nodeValue;\x0a  }).join(\x27\x27);\x0a}\x0a\x0a/* harmony default export */ var list_reducer = (function (node) {\x0a  if (!isList(node)) {\x0a    return;\x0a  }\x0a\x0a  var list = node;\x0a  var prevElement = node.previousElementSibling; // Merge with previous list if:\x0a  // * There is a previous list of the same type.\x0a  // * There is only one list item.\x0a\x0a  if (prevElement && prevElement.nodeName === node.nodeName && list.children.length === 1) {\x0a    // Move all child nodes, including any text nodes, if any.\x0a    while (list.firstChild) {\x0a      prevElement.appendChild(list.firstChild);\x0a    }\x0a\x0a    list.parentNode.removeChild(list);\x0a  }\x0a\x0a  var parentElement = node.parentNode; // Nested list with empty parent item.\x0a\x0a  if (parentElement && parentElement.nodeName === \x27LI\x27 && parentElement.children.length === 1 && !/\x5cS/.test(shallowTextContent(parentElement))) {\x0a    var parentListItem = parentElement;\x0a    var prevListItem = parentListItem.previousElementSibling;\x0a    var parentList = parentListItem.parentNode;\x0a\x0a    if (prevListItem) {\x0a      prevListItem.appendChild(list);\x0a      parentList.removeChild(parentListItem);\x0a    } else {\x0a      parentList.parentNode.insertBefore(list, parentList);\x0a      parentList.parentNode.removeChild(parentList);\x0a    }\x0a  } // Invalid: OL/UL \x3e OL/UL.\x0a\x0a\x0a  if (parentElement && isList(parentElement)) {\x0a    var _prevListItem = node.previousElementSibling;\x0a\x0a    if (_prevListItem) {\x0a      _prevListItem.appendChild(node);\x0a    } else {\x0a      Object(external_this_wp_dom_[\x22unwrap\x22])(node);\x0a    }\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/blockquote-normaliser.js\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a/* harmony default export */ var blockquote_normaliser = (function (node) {\x0a  if (node.nodeName !== \x27BLOCKQUOTE\x27) {\x0a    return;\x0a  }\x0a\x0a  node.innerHTML = normalise_blocks(node.innerHTML);\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/figure-content-reducer.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a/**\x0a * Whether or not the given node is figure content.\x0a *\x0a * @param {Node}   node   The node to check.\x0a * @param {Object} schema The schema to use.\x0a *\x0a * @return {boolean} True if figure content, false if not.\x0a */\x0a\x0afunction isFigureContent(node, schema) {\x0a  var tag = node.nodeName.toLowerCase(); // We are looking for tags that can be a child of the figure tag, excluding\x0a  // `figcaption` and any phrasing content.\x0a\x0a  if (tag === \x27figcaption\x27 || isPhrasingContent(node)) {\x0a    return false;\x0a  }\x0a\x0a  return Object(external_lodash_[\x22has\x22])(schema, [\x27figure\x27, \x27children\x27, tag]);\x0a}\x0a/**\x0a * Whether or not the given node can have an anchor.\x0a *\x0a * @param {Node}   node   The node to check.\x0a * @param {Object} schema The schema to use.\x0a *\x0a * @return {boolean} True if it can, false if not.\x0a */\x0a\x0a\x0afunction canHaveAnchor(node, schema) {\x0a  var tag = node.nodeName.toLowerCase();\x0a  return Object(external_lodash_[\x22has\x22])(schema, [\x27figure\x27, \x27children\x27, \x27a\x27, \x27children\x27, tag]);\x0a}\x0a/**\x0a * This filter takes figure content out of paragraphs, wraps it in a figure\x0a * element, and moves any anchors with it if needed.\x0a *\x0a * @param {Node}     node   The node to filter.\x0a * @param {Document} doc    The document of the node.\x0a * @param {Object}   schema The schema to use.\x0a *\x0a * @return {void}\x0a */\x0a\x0a\x0a/* harmony default export */ var figure_content_reducer = (function (node, doc, schema) {\x0a  if (!isFigureContent(node, schema)) {\x0a    return;\x0a  }\x0a\x0a  var nodeToInsert = node;\x0a  var parentNode = node.parentNode; // If the figure content can have an anchor and its parent is an anchor with\x0a  // only the figure content, take the anchor out instead of just the content.\x0a\x0a  if (canHaveAnchor(node, schema) && parentNode.nodeName === \x27A\x27 && parentNode.childNodes.length === 1) {\x0a    nodeToInsert = node.parentNode;\x0a  }\x0a\x0a  var wrapper = nodeToInsert;\x0a\x0a  while (wrapper && wrapper.nodeName !== \x27P\x27) {\x0a    wrapper = wrapper.parentElement;\x0a  }\x0a\x0a  var figure = doc.createElement(\x27figure\x27);\x0a\x0a  if (wrapper) {\x0a    wrapper.parentNode.insertBefore(figure, wrapper);\x0a  } else {\x0a    nodeToInsert.parentNode.insertBefore(figure, nodeToInsert);\x0a  }\x0a\x0a  figure.appendChild(nodeToInsert);\x0a});\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22shortcode\x22]}\x0avar external_this_wp_shortcode_ = __webpack_require__(134);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/shortcode-converter.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0afunction segmentHTMLToShortcodeBlock(HTML) {\x0a  var lastIndex = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : 0;\x0a  // Get all matches.\x0a  var transformsFrom = getBlockTransforms(\x27from\x27);\x0a  var transformation = findTransform(transformsFrom, function (transform) {\x0a    return transform.type === \x27shortcode\x27 && Object(external_lodash_[\x22some\x22])(Object(external_lodash_[\x22castArray\x22])(transform.tag), function (tag) {\x0a      return Object(external_this_wp_shortcode_[\x22regexp\x22])(tag).test(HTML);\x0a    });\x0a  });\x0a\x0a  if (!transformation) {\x0a    return [HTML];\x0a  }\x0a\x0a  var transformTags = Object(external_lodash_[\x22castArray\x22])(transformation.tag);\x0a  var transformTag = Object(external_lodash_[\x22first\x22])(transformTags);\x0a  var match;\x0a\x0a  if (match = Object(external_this_wp_shortcode_[\x22next\x22])(transformTag, HTML, lastIndex)) {\x0a    var beforeHTML = HTML.substr(0, match.index);\x0a    lastIndex = match.index + match.content.length; // If the shortcode content does not contain HTML and the shortcode is\x0a    // not on a new line (or in paragraph from Markdown converter),\x0a    // consider the shortcode as inline text, and thus skip conversion for\x0a    // this segment.\x0a\x0a    if (!Object(external_lodash_[\x22includes\x22])(match.shortcode.content || \x27\x27, \x27\x3c\x27) && !/(\x5cn|\x3cp\x3e)\x5cs*$/.test(beforeHTML)) {\x0a      return segmentHTMLToShortcodeBlock(HTML, lastIndex);\x0a    }\x0a\x0a    var attributes = Object(external_lodash_[\x22mapValues\x22])(Object(external_lodash_[\x22pickBy\x22])(transformation.attributes, function (schema) {\x0a      return schema.shortcode;\x0a    }), // Passing all of `match` as second argument is intentionally broad\x0a    // but shouldn\x27t be too relied upon.\x0a    //\x0a    // See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\x0a    function (schema) {\x0a      return schema.shortcode(match.shortcode.attrs, match);\x0a    });\x0a    var block = createBlock(transformation.blockName, getBlockAttributes(Object(objectSpread[\x22a\x22 /* default */])({}, registration_getBlockType(transformation.blockName), {\x0a      attributes: transformation.attributes\x0a    }), match.shortcode.content, attributes));\x0a    return [beforeHTML, block].concat(Object(toConsumableArray[\x22a\x22 /* default */])(segmentHTMLToShortcodeBlock(HTML.substr(lastIndex))));\x0a  }\x0a\x0a  return [HTML];\x0a}\x0a\x0a/* harmony default export */ var shortcode_converter = (segmentHTMLToShortcodeBlock);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/comment-remover.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar comment_remover_COMMENT_NODE = window.Node.COMMENT_NODE;\x0a/**\x0a * Looks for comments, and removes them.\x0a *\x0a * @param {Node} node The node to be processed.\x0a * @return {void}\x0a */\x0a\x0a/* harmony default export */ var comment_remover = (function (node) {\x0a  if (node.nodeType === comment_remover_COMMENT_NODE) {\x0a    Object(external_this_wp_dom_[\x22remove\x22])(node);\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/is-inline-content.js\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a/**\x0a * Checks if the given node should be considered inline content, optionally\x0a * depending on a context tag.\x0a *\x0a * @param {Node}   node       Node name.\x0a * @param {string} contextTag Tag name.\x0a *\x0a * @return {boolean} True if the node is inline content, false if nohe.\x0a */\x0a\x0afunction isInline(node, contextTag) {\x0a  if (isPhrasingContent(node)) {\x0a    return true;\x0a  }\x0a\x0a  if (!contextTag) {\x0a    return false;\x0a  }\x0a\x0a  var tag = node.nodeName.toLowerCase();\x0a  var inlineWhitelistTagGroups = [[\x27ul\x27, \x27li\x27, \x27ol\x27], [\x27h1\x27, \x27h2\x27, \x27h3\x27, \x27h4\x27, \x27h5\x27, \x27h6\x27]];\x0a  return inlineWhitelistTagGroups.some(function (tagGroup) {\x0a    return Object(external_lodash_[\x22difference\x22])([tag, contextTag], tagGroup).length === 0;\x0a  });\x0a}\x0a\x0afunction deepCheck(nodes, contextTag) {\x0a  return nodes.every(function (node) {\x0a    return isInline(node, contextTag) && deepCheck(Array.from(node.children), contextTag);\x0a  });\x0a}\x0a\x0afunction isDoubleBR(node) {\x0a  return node.nodeName === \x27BR\x27 && node.previousSibling && node.previousSibling.nodeName === \x27BR\x27;\x0a}\x0a\x0a/* harmony default export */ var is_inline_content = (function (HTML, contextTag) {\x0a  var doc = document.implementation.createHTMLDocument(\x27\x27);\x0a  doc.body.innerHTML = HTML;\x0a  var nodes = Array.from(doc.body.children);\x0a  return !nodes.some(isDoubleBR) && deepCheck(nodes, contextTag);\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/phrasing-content-reducer.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/* harmony default export */ var phrasing_content_reducer = (function (node, doc) {\x0a  // In jsdom-jscore, \x27node.style\x27 can be null.\x0a  // TODO: Explore fixing this by patching jsdom-jscore.\x0a  if (node.nodeName === \x27SPAN\x27 && node.style) {\x0a    var _node$style = node.style,\x0a        fontWeight = _node$style.fontWeight,\x0a        fontStyle = _node$style.fontStyle,\x0a        textDecorationLine = _node$style.textDecorationLine,\x0a        verticalAlign = _node$style.verticalAlign;\x0a\x0a    if (fontWeight === \x27bold\x27 || fontWeight === \x27700\x27) {\x0a      Object(external_this_wp_dom_[\x22wrap\x22])(doc.createElement(\x27strong\x27), node);\x0a    }\x0a\x0a    if (fontStyle === \x27italic\x27) {\x0a      Object(external_this_wp_dom_[\x22wrap\x22])(doc.createElement(\x27em\x27), node);\x0a    }\x0a\x0a    if (textDecorationLine === \x27line-through\x27) {\x0a      Object(external_this_wp_dom_[\x22wrap\x22])(doc.createElement(\x27s\x27), node);\x0a    }\x0a\x0a    if (verticalAlign === \x27super\x27) {\x0a      Object(external_this_wp_dom_[\x22wrap\x22])(doc.createElement(\x27sup\x27), node);\x0a    } else if (verticalAlign === \x27sub\x27) {\x0a      Object(external_this_wp_dom_[\x22wrap\x22])(doc.createElement(\x27sub\x27), node);\x0a    }\x0a  } else if (node.nodeName === \x27B\x27) {\x0a    node = Object(external_this_wp_dom_[\x22replaceTag\x22])(node, \x27strong\x27);\x0a  } else if (node.nodeName === \x27I\x27) {\x0a    node = Object(external_this_wp_dom_[\x22replaceTag\x22])(node, \x27em\x27);\x0a  } else if (node.nodeName === \x27A\x27) {\x0a    // In jsdom-jscore, \x27node.target\x27 can be null.\x0a    // TODO: Explore fixing this by patching jsdom-jscore.\x0a    if (node.target && node.target.toLowerCase() === \x27_blank\x27) {\x0a      node.rel = \x27noreferrer noopener\x27;\x0a    } else {\x0a      node.removeAttribute(\x27target\x27);\x0a      node.removeAttribute(\x27rel\x27);\x0a    }\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/head-remover.js\x0a/* harmony default export */ var head_remover = (function (node) {\x0a  if (node.nodeName !== \x27SCRIPT\x27 && node.nodeName !== \x27NOSCRIPT\x27 && node.nodeName !== \x27TEMPLATE\x27 && node.nodeName !== \x27STYLE\x27) {\x0a    return;\x0a  }\x0a\x0a  node.parentNode.removeChild(node);\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/ms-list-converter.js\x0a/**\x0a * Browser dependencies\x0a */\x0avar _window = window,\x0a    ms_list_converter_parseInt = _window.parseInt;\x0a\x0afunction ms_list_converter_isList(node) {\x0a  return node.nodeName === \x27OL\x27 || node.nodeName === \x27UL\x27;\x0a}\x0a\x0a/* harmony default export */ var ms_list_converter = (function (node, doc) {\x0a  if (node.nodeName !== \x27P\x27) {\x0a    return;\x0a  }\x0a\x0a  var style = node.getAttribute(\x27style\x27);\x0a\x0a  if (!style) {\x0a    return;\x0a  } // Quick check.\x0a\x0a\x0a  if (style.indexOf(\x27mso-list\x27) === -1) {\x0a    return;\x0a  }\x0a\x0a  var matches = /mso-list\x5cs*:[^;]+level([0-9]+)/i.exec(style);\x0a\x0a  if (!matches) {\x0a    return;\x0a  }\x0a\x0a  var level = ms_list_converter_parseInt(matches[1], 10) - 1 || 0;\x0a  var prevNode = node.previousElementSibling; // Add new list if no previous.\x0a\x0a  if (!prevNode || !ms_list_converter_isList(prevNode)) {\x0a    // See https://html.spec.whatwg.org/multipage/grouping-content.html#attr-ol-type.\x0a    var type = node.textContent.trim().slice(0, 1);\x0a    var isNumeric = /[1iIaA]/.test(type);\x0a    var newListNode = doc.createElement(isNumeric ? \x27ol\x27 : \x27ul\x27);\x0a\x0a    if (isNumeric) {\x0a      newListNode.setAttribute(\x27type\x27, type);\x0a    }\x0a\x0a    node.parentNode.insertBefore(newListNode, node);\x0a  }\x0a\x0a  var listNode = node.previousElementSibling;\x0a  var listType = listNode.nodeName;\x0a  var listItem = doc.createElement(\x27li\x27);\x0a  var receivingNode = listNode; // Remove the first span with list info.\x0a\x0a  node.removeChild(node.firstElementChild); // Add content.\x0a\x0a  while (node.firstChild) {\x0a    listItem.appendChild(node.firstChild);\x0a  } // Change pointer depending on indentation level.\x0a\x0a\x0a  while (level--) {\x0a    receivingNode = receivingNode.lastElementChild || receivingNode; // If it\x27s a list, move pointer to the last item.\x0a\x0a    if (ms_list_converter_isList(receivingNode)) {\x0a      receivingNode = receivingNode.lastElementChild || receivingNode;\x0a    }\x0a  } // Make sure we append to a list.\x0a\x0a\x0a  if (!ms_list_converter_isList(receivingNode)) {\x0a    receivingNode = receivingNode.appendChild(doc.createElement(listType));\x0a  } // Append the list item to the list.\x0a\x0a\x0a  receivingNode.appendChild(listItem); // Remove the wrapper paragraph.\x0a\x0a  node.parentNode.removeChild(node);\x0a});\x0a\x0a// EXTERNAL MODULE: external {\x22this\x22:[\x22wp\x22,\x22blob\x22]}\x0avar external_this_wp_blob_ = __webpack_require__(35);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/image-corrector.js\x0a\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar image_corrector_window = window,\x0a    atob = image_corrector_window.atob,\x0a    File = image_corrector_window.File;\x0a/* harmony default export */ var image_corrector = (function (node) {\x0a  if (node.nodeName !== \x27IMG\x27) {\x0a    return;\x0a  }\x0a\x0a  if (node.src.indexOf(\x27file:\x27) === 0) {\x0a    node.src = \x27\x27;\x0a  } // This piece cannot be tested outside a browser env.\x0a\x0a\x0a  if (node.src.indexOf(\x27data:\x27) === 0) {\x0a    var _node$src$split = node.src.split(\x27,\x27),\x0a        _node$src$split2 = Object(slicedToArray[\x22a\x22 /* default */])(_node$src$split, 2),\x0a        properties = _node$src$split2[0],\x0a        data = _node$src$split2[1];\x0a\x0a    var _properties$slice$spl = properties.slice(5).split(\x27;\x27),\x0a        _properties$slice$spl2 = Object(slicedToArray[\x22a\x22 /* default */])(_properties$slice$spl, 1),\x0a        type = _properties$slice$spl2[0];\x0a\x0a    if (!data || !type) {\x0a      node.src = \x27\x27;\x0a      return;\x0a    }\x0a\x0a    var decoded; // Can throw DOMException!\x0a\x0a    try {\x0a      decoded = atob(data);\x0a    } catch (e) {\x0a      node.src = \x27\x27;\x0a      return;\x0a    }\x0a\x0a    var uint8Array = new Uint8Array(decoded.length);\x0a\x0a    for (var i = 0; i \x3c uint8Array.length; i++) {\x0a      uint8Array[i] = decoded.charCodeAt(i);\x0a    }\x0a\x0a    var name = type.replace(\x27/\x27, \x27.\x27);\x0a    var file = new File([uint8Array], name, {\x0a      type: type\x0a    });\x0a    node.src = Object(external_this_wp_blob_[\x22createBlobURL\x22])(file);\x0a  } // Remove trackers and hardly visible images.\x0a\x0a\x0a  if (node.height === 1 || node.width === 1) {\x0a    node.parentNode.removeChild(node);\x0a  }\x0a});\x0a\x0a// EXTERNAL MODULE: ./node_modules/showdown/dist/showdown.js\x0avar showdown = __webpack_require__(206);\x0avar showdown_default = /*#__PURE__*/__webpack_require__.n(showdown);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/markdown-converter.js\x0a/**\x0a * External dependencies\x0a */\x0a // Reuse the same showdown converter.\x0a\x0avar converter = new showdown_default.a.Converter({\x0a  noHeaderId: true,\x0a  tables: true,\x0a  literalMidWordUnderscores: true,\x0a  omitExtraWLInCodeBlocks: true,\x0a  simpleLineBreaks: true,\x0a  strikethrough: true\x0a});\x0a/**\x0a * Corrects the Slack Markdown variant of the code block.\x0a * If uncorrected, it will be converted to inline code.\x0a *\x0a * @see https://get.slack.help/hc/en-us/articles/202288908-how-can-i-add-formatting-to-my-messages-#code-blocks\x0a *\x0a * @param {string} text The potential Markdown text to correct.\x0a *\x0a * @return {string} The corrected Markdown.\x0a */\x0a\x0afunction slackMarkdownVariantCorrector(text) {\x0a  return text.replace(/((?:^|\x5cn)```)([^\x5cn`]+)(```(?:$|\x5cn))/, function (match, p1, p2, p3) {\x0a    return \x22\x22.concat(p1, \x22\x5cn\x22).concat(p2, \x22\x5cn\x22).concat(p3);\x0a  });\x0a}\x0a/**\x0a * Converts a piece of text into HTML based on any Markdown present.\x0a * Also decodes any encoded HTML.\x0a *\x0a * @param {string} text The plain text to convert.\x0a *\x0a * @return {string} HTML.\x0a */\x0a\x0a\x0a/* harmony default export */ var markdown_converter = (function (text) {\x0a  return converter.makeHtml(slackMarkdownVariantCorrector(text));\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/iframe-remover.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Removes iframes.\x0a *\x0a * @param {Node} node The node to check.\x0a *\x0a * @return {void}\x0a */\x0a\x0a/* harmony default export */ var iframe_remover = (function (node) {\x0a  if (node.nodeName === \x27IFRAME\x27) {\x0a    Object(external_this_wp_dom_[\x22remove\x22])(node);\x0a  }\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/google-docs-uid-remover.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/* harmony default export */ var google_docs_uid_remover = (function (node) {\x0a  if (!node.id || node.id.indexOf(\x27docs-internal-guid-\x27) !== 0) {\x0a    return;\x0a  }\x0a\x0a  Object(external_this_wp_dom_[\x22unwrap\x22])(node);\x0a});\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/paste-handler.js\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a/**\x0a * Browser dependencies\x0a */\x0a\x0avar paste_handler_window = window,\x0a    paste_handler_console = paste_handler_window.console;\x0a/**\x0a * Filters HTML to only contain phrasing content.\x0a *\x0a * @param {string} HTML The HTML to filter.\x0a *\x0a * @return {string} HTML only containing phrasing content.\x0a */\x0a\x0afunction filterInlineHTML(HTML) {\x0a  HTML = deepFilterHTML(HTML, [google_docs_uid_remover, phrasing_content_reducer, comment_remover]);\x0a  HTML = removeInvalidHTML(HTML, getPhrasingContentSchema(), {\x0a    inline: true\x0a  }); // Allows us to ask for this information when we get a report.\x0a\x0a  paste_handler_console.log(\x27Processed inline HTML:\x5cn\x5cn\x27, HTML);\x0a  return HTML;\x0a}\x0a\x0afunction getRawTransformations() {\x0a  return Object(external_lodash_[\x22filter\x22])(getBlockTransforms(\x27from\x27), {\x0a    type: \x27raw\x27\x0a  }).map(function (transform) {\x0a    return transform.isMatch ? transform : Object(objectSpread[\x22a\x22 /* default */])({}, transform, {\x0a      isMatch: function isMatch(node) {\x0a        return transform.selector && node.matches(transform.selector);\x0a      }\x0a    });\x0a  });\x0a}\x0a/**\x0a * Converts HTML directly to blocks. Looks for a matching transform for each\x0a * top-level tag. The HTML should be filtered to not have any text between\x0a * top-level tags and formatted in a way that blocks can handle the HTML.\x0a *\x0a * @param  {Object} $1               Named parameters.\x0a * @param  {string} $1.html          HTML to convert.\x0a * @param  {Array}  $1.rawTransforms Transforms that can be used.\x0a *\x0a * @return {Array} An array of blocks.\x0a */\x0a\x0a\x0afunction htmlToBlocks(_ref) {\x0a  var html = _ref.html,\x0a      rawTransforms = _ref.rawTransforms;\x0a  var doc = document.implementation.createHTMLDocument(\x27\x27);\x0a  doc.body.innerHTML = html;\x0a  return Array.from(doc.body.children).map(function (node) {\x0a    var rawTransform = findTransform(rawTransforms, function (_ref2) {\x0a      var isMatch = _ref2.isMatch;\x0a      return isMatch(node);\x0a    });\x0a\x0a    if (!rawTransform) {\x0a      return createBlock( // Should not be hardcoded.\x0a      \x27core/html\x27, getBlockAttributes(\x27core/html\x27, node.outerHTML));\x0a    }\x0a\x0a    var transform = rawTransform.transform,\x0a        blockName = rawTransform.blockName;\x0a\x0a    if (transform) {\x0a      return transform(node);\x0a    }\x0a\x0a    return createBlock(blockName, getBlockAttributes(blockName, node.outerHTML));\x0a  });\x0a}\x0a/**\x0a * Converts an HTML string to known blocks. Strips everything else.\x0a *\x0a * @param {string}  [options.HTML]                     The HTML to convert.\x0a * @param {string}  [options.plainText]                Plain text version.\x0a * @param {string}  [options.mode]                     Handle content as blocks or inline content.\x0a *                                                     * \x27AUTO\x27: Decide based on the content passed.\x0a *                                                     * \x27INLINE\x27: Always handle as inline content, and return string.\x0a *                                                     * \x27BLOCKS\x27: Always handle as blocks, and return array of blocks.\x0a * @param {Array}   [options.tagName]                  The tag into which content will be inserted.\x0a * @param {boolean} [options.canUserUseUnfilteredHTML] Whether or not the user can use unfiltered HTML.\x0a *\x0a * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\x0a */\x0a\x0a\x0afunction pasteHandler(_ref3) {\x0a  var _ref3$HTML = _ref3.HTML,\x0a      HTML = _ref3$HTML === void 0 ? \x27\x27 : _ref3$HTML,\x0a      _ref3$plainText = _ref3.plainText,\x0a      plainText = _ref3$plainText === void 0 ? \x27\x27 : _ref3$plainText,\x0a      _ref3$mode = _ref3.mode,\x0a      mode = _ref3$mode === void 0 ? \x27AUTO\x27 : _ref3$mode,\x0a      tagName = _ref3.tagName,\x0a      _ref3$canUserUseUnfil = _ref3.canUserUseUnfilteredHTML,\x0a      canUserUseUnfilteredHTML = _ref3$canUserUseUnfil === void 0 ? false : _ref3$canUserUseUnfil;\x0a  // First of all, strip any meta tags.\x0a  HTML = HTML.replace(/\x3cmeta[^\x3e]+\x3e/, \x27\x27); // If we detect block delimiters in HTML, parse entirely as blocks.\x0a\x0a  if (mode !== \x27INLINE\x27) {\x0a    // Check plain text if there is no HTML.\x0a    var content = HTML ? HTML : plainText;\x0a\x0a    if (content.indexOf(\x27\x3c!-- wp:\x27) !== -1) {\x0a      return parseWithGrammar(content);\x0a    }\x0a  } // Normalize unicode to use composed characters.\x0a  // This is unsupported in IE 11 but it\x27s a nice-to-have feature, not mandatory.\x0a  // Not normalizing the content will only affect older browsers and won\x27t\x0a  // entirely break the app.\x0a  // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\x0a  // See: https://core.trac.wordpress.org/ticket/30130\x0a  // See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\x0a\x0a\x0a  if (String.prototype.normalize) {\x0a    HTML = HTML.normalize();\x0a  } // Parse Markdown (and encoded HTML) if:\x0a  // * There is a plain text version.\x0a  // * There is no HTML version, or it has no formatting.\x0a\x0a\x0a  if (plainText && (!HTML || isPlain(HTML))) {\x0a    HTML = markdown_converter(plainText); // Switch to inline mode if:\x0a    // * The current mode is AUTO.\x0a    // * The original plain text had no line breaks.\x0a    // * The original plain text was not an HTML paragraph.\x0a    // * The converted text is just a paragraph.\x0a\x0a    if (mode === \x27AUTO\x27 && plainText.indexOf(\x27\x5cn\x27) === -1 && plainText.indexOf(\x27\x3cp\x3e\x27) !== 0 && HTML.indexOf(\x27\x3cp\x3e\x27) === 0) {\x0a      mode = \x27INLINE\x27;\x0a    }\x0a  }\x0a\x0a  if (mode === \x27INLINE\x27) {\x0a    return filterInlineHTML(HTML);\x0a  } // An array of HTML strings and block objects. The blocks replace matched\x0a  // shortcodes.\x0a\x0a\x0a  var pieces = shortcode_converter(HTML); // The call to shortcodeConverter will always return more than one element\x0a  // if shortcodes are matched. The reason is when shortcodes are matched\x0a  // empty HTML strings are included.\x0a\x0a  var hasShortcodes = pieces.length \x3e 1;\x0a\x0a  if (mode === \x27AUTO\x27 && !hasShortcodes && is_inline_content(HTML, tagName)) {\x0a    return filterInlineHTML(HTML);\x0a  }\x0a\x0a  var rawTransforms = getRawTransformations();\x0a  var phrasingContentSchema = getPhrasingContentSchema();\x0a  var blockContentSchema = getBlockContentSchema(rawTransforms);\x0a  var blocks = Object(external_lodash_[\x22compact\x22])(Object(external_lodash_[\x22flatMap\x22])(pieces, function (piece) {\x0a    // Already a block from shortcode.\x0a    if (typeof piece !== \x27string\x27) {\x0a      return piece;\x0a    }\x0a\x0a    var filters = [google_docs_uid_remover, ms_list_converter, head_remover, list_reducer, image_corrector, phrasing_content_reducer, special_comment_converter, comment_remover, figure_content_reducer, blockquote_normaliser];\x0a\x0a    if (!canUserUseUnfilteredHTML) {\x0a      // Should run before `figureContentReducer`.\x0a      filters.unshift(iframe_remover);\x0a    }\x0a\x0a    var schema = Object(objectSpread[\x22a\x22 /* default */])({}, blockContentSchema, phrasingContentSchema);\x0a\x0a    piece = deepFilterHTML(piece, filters, blockContentSchema);\x0a    piece = removeInvalidHTML(piece, schema);\x0a    piece = normalise_blocks(piece); // Allows us to ask for this information when we get a report.\x0a\x0a    paste_handler_console.log(\x27Processed HTML piece:\x5cn\x5cn\x27, piece);\x0a    return htmlToBlocks({\x0a      html: piece,\x0a      rawTransforms: rawTransforms\x0a    });\x0a  })); // If we\x27re allowed to return inline content and there is only one block\x0a  // and the original plain text content does not have any line breaks, then\x0a  // treat it as inline paste.\x0a\x0a  if (mode === \x27AUTO\x27 && blocks.length === 1) {\x0a    var trimmedPlainText = plainText.trim();\x0a\x0a    if (trimmedPlainText !== \x27\x27 && trimmedPlainText.indexOf(\x27\x5cn\x27) === -1) {\x0a      return removeInvalidHTML(getBlockContent(blocks[0]), phrasingContentSchema);\x0a    }\x0a  }\x0a\x0a  return blocks;\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/raw-handling/index.js\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0afunction raw_handling_getRawTransformations() {\x0a  return Object(external_lodash_[\x22filter\x22])(getBlockTransforms(\x27from\x27), {\x0a    type: \x27raw\x27\x0a  }).map(function (transform) {\x0a    return transform.isMatch ? transform : Object(objectSpread[\x22a\x22 /* default */])({}, transform, {\x0a      isMatch: function isMatch(node) {\x0a        return transform.selector && node.matches(transform.selector);\x0a      }\x0a    });\x0a  });\x0a}\x0a/**\x0a * Converts HTML directly to blocks. Looks for a matching transform for each\x0a * top-level tag. The HTML should be filtered to not have any text between\x0a * top-level tags and formatted in a way that blocks can handle the HTML.\x0a *\x0a * @param  {Object} $1               Named parameters.\x0a * @param  {string} $1.html          HTML to convert.\x0a * @param  {Array}  $1.rawTransforms Transforms that can be used.\x0a *\x0a * @return {Array} An array of blocks.\x0a */\x0a\x0a\x0afunction raw_handling_htmlToBlocks(_ref) {\x0a  var html = _ref.html,\x0a      rawTransforms = _ref.rawTransforms;\x0a  var doc = document.implementation.createHTMLDocument(\x27\x27);\x0a  doc.body.innerHTML = html;\x0a  return Array.from(doc.body.children).map(function (node) {\x0a    var rawTransform = findTransform(rawTransforms, function (_ref2) {\x0a      var isMatch = _ref2.isMatch;\x0a      return isMatch(node);\x0a    });\x0a\x0a    if (!rawTransform) {\x0a      return createBlock( // Should not be hardcoded.\x0a      \x27core/html\x27, getBlockAttributes(\x27core/html\x27, node.outerHTML));\x0a    }\x0a\x0a    var transform = rawTransform.transform,\x0a        blockName = rawTransform.blockName;\x0a\x0a    if (transform) {\x0a      return transform(node);\x0a    }\x0a\x0a    return createBlock(blockName, getBlockAttributes(blockName, node.outerHTML));\x0a  });\x0a}\x0a/**\x0a * Converts an HTML string to known blocks.\x0a *\x0a * @param {string} $1.HTML The HTML to convert.\x0a *\x0a * @return {Array} A list of blocks.\x0a */\x0a\x0a\x0afunction rawHandler(_ref3) {\x0a  var _ref3$HTML = _ref3.HTML,\x0a      HTML = _ref3$HTML === void 0 ? \x27\x27 : _ref3$HTML;\x0a\x0a  // If we detect block delimiters, parse entirely as blocks.\x0a  if (HTML.indexOf(\x27\x3c!-- wp:\x27) !== -1) {\x0a    return parseWithGrammar(HTML);\x0a  } // An array of HTML strings and block objects. The blocks replace matched\x0a  // shortcodes.\x0a\x0a\x0a  var pieces = shortcode_converter(HTML);\x0a  var rawTransforms = raw_handling_getRawTransformations();\x0a  var blockContentSchema = getBlockContentSchema(rawTransforms);\x0a  return Object(external_lodash_[\x22compact\x22])(Object(external_lodash_[\x22flatMap\x22])(pieces, function (piece) {\x0a    // Already a block from shortcode.\x0a    if (typeof piece !== \x27string\x27) {\x0a      return piece;\x0a    } // These filters are essential for some blocks to be able to transform\x0a    // from raw HTML. These filters move around some content or add\x0a    // additional tags, they do not remove any content.\x0a\x0a\x0a    var filters = [// Needed to adjust invalid lists.\x0a    list_reducer, // Needed to create more and nextpage blocks.\x0a    special_comment_converter, // Needed to create media blocks.\x0a    figure_content_reducer, // Needed to create the quote block, which cannot handle text\x0a    // without wrapper paragraphs.\x0a    blockquote_normaliser];\x0a    piece = deepFilterHTML(piece, filters, blockContentSchema);\x0a    piece = normalise_blocks(piece);\x0a    return raw_handling_htmlToBlocks({\x0a      html: piece,\x0a      rawTransforms: rawTransforms\x0a    });\x0a  }));\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/categories.js\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a/**\x0a * Returns all the block categories.\x0a *\x0a * @return {Object[]} Block categories.\x0a */\x0a\x0afunction categories_getCategories() {\x0a  return Object(external_this_wp_data_[\x22select\x22])(\x27core/blocks\x27).getCategories();\x0a}\x0a/**\x0a * Sets the block categories.\x0a *\x0a * @param {Object[]} categories Block categories.\x0a */\x0a\x0afunction categories_setCategories(categories) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).setCategories(categories);\x0a}\x0a/**\x0a * Updates a category.\x0a *\x0a * @param {string} slug          Block category slug.\x0a * @param {Object} category Object containing the category properties that should be updated.\x0a */\x0a\x0afunction categories_updateCategory(slug, category) {\x0a  Object(external_this_wp_data_[\x22dispatch\x22])(\x27core/blocks\x27).updateCategory(slug, category);\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/templates.js\x0a\x0a\x0a\x0a/**\x0a * External dependencies\x0a */\x0a\x0a/**\x0a * WordPress dependencies\x0a */\x0a\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a/**\x0a * Checks whether a list of blocks matches a template by comparing the block names.\x0a *\x0a * @param {Array} blocks    Block list.\x0a * @param {Array} template  Block template.\x0a *\x0a * @return {boolean}        Whether the list of blocks matches a templates\x0a */\x0a\x0afunction doBlocksMatchTemplate() {\x0a  var blocks = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : [];\x0a  var template = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : [];\x0a  return blocks.length === template.length && Object(external_lodash_[\x22every\x22])(template, function (_ref, index) {\x0a    var _ref2 = Object(slicedToArray[\x22a\x22 /* default */])(_ref, 3),\x0a        name = _ref2[0],\x0a        innerBlocksTemplate = _ref2[2];\x0a\x0a    var block = blocks[index];\x0a    return name === block.name && doBlocksMatchTemplate(block.innerBlocks, innerBlocksTemplate);\x0a  });\x0a}\x0a/**\x0a * Synchronize a block list with a block template.\x0a *\x0a * Synchronizing a block list with a block template means that we loop over the blocks\x0a * keep the block as is if it matches the block at the same position in the template\x0a * (If it has the same name) and if doesn\x27t match, we create a new block based on the template.\x0a * Extra blocks not present in the template are removed.\x0a *\x0a * @param {Array} blocks    Block list.\x0a * @param {Array} template  Block template.\x0a *\x0a * @return {Array}          Updated Block list.\x0a */\x0a\x0afunction synchronizeBlocksWithTemplate() {\x0a  var blocks = arguments.length \x3e 0 && arguments[0] !== undefined ? arguments[0] : [];\x0a  var template = arguments.length \x3e 1 ? arguments[1] : undefined;\x0a\x0a  // If no template is provided, return blocks unmodified.\x0a  if (!template) {\x0a    return blocks;\x0a  }\x0a\x0a  return Object(external_lodash_[\x22map\x22])(template, function (_ref3, index) {\x0a    var _ref4 = Object(slicedToArray[\x22a\x22 /* default */])(_ref3, 3),\x0a        name = _ref4[0],\x0a        attributes = _ref4[1],\x0a        innerBlocksTemplate = _ref4[2];\x0a\x0a    var block = blocks[index];\x0a\x0a    if (block && block.name === name) {\x0a      var innerBlocks = synchronizeBlocksWithTemplate(block.innerBlocks, innerBlocksTemplate);\x0a      return Object(objectSpread[\x22a\x22 /* default */])({}, block, {\x0a        innerBlocks: innerBlocks\x0a      });\x0a    } // To support old templates that were using the \x22children\x22 format\x0a    // for the attributes using \x22html\x22 strings now, we normalize the template attributes\x0a    // before creating the blocks.\x0a\x0a\x0a    var blockType = registration_getBlockType(name);\x0a\x0a    var isHTMLAttribute = function isHTMLAttribute(attributeDefinition) {\x0a      return Object(external_lodash_[\x22get\x22])(attributeDefinition, [\x27source\x27]) === \x27html\x27;\x0a    };\x0a\x0a    var isQueryAttribute = function isQueryAttribute(attributeDefinition) {\x0a      return Object(external_lodash_[\x22get\x22])(attributeDefinition, [\x27source\x27]) === \x27query\x27;\x0a    };\x0a\x0a    var normalizeAttributes = function normalizeAttributes(schema, values) {\x0a      return Object(external_lodash_[\x22mapValues\x22])(values, function (value, key) {\x0a        return normalizeAttribute(schema[key], value);\x0a      });\x0a    };\x0a\x0a    var normalizeAttribute = function normalizeAttribute(definition, value) {\x0a      if (isHTMLAttribute(definition) && Object(external_lodash_[\x22isArray\x22])(value)) {\x0a        // Introduce a deprecated call at this point\x0a        // When we\x27re confident that \x22children\x22 format should be removed from the templates.\x0a        return Object(external_this_wp_element_[\x22renderToString\x22])(value);\x0a      }\x0a\x0a      if (isQueryAttribute(definition) && value) {\x0a        return value.map(function (subValues) {\x0a          return normalizeAttributes(definition.query, subValues);\x0a        });\x0a      }\x0a\x0a      return value;\x0a    };\x0a\x0a    var normalizedAttributes = normalizeAttributes(Object(external_lodash_[\x22get\x22])(blockType, [\x27attributes\x27], {}), attributes);\x0a    return createBlock(name, normalizedAttributes, synchronizeBlocksWithTemplate([], innerBlocksTemplate));\x0a  });\x0a}\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/api/index.js\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a// CONCATENATED MODULE: ./node_modules/@wordpress/blocks/build-module/index.js\x0a/* concated harmony reexport createBlock */__webpack_require__.d(__webpack_exports__, \x22createBlock\x22, function() { return createBlock; });\x0a/* concated harmony reexport cloneBlock */__webpack_require__.d(__webpack_exports__, \x22cloneBlock\x22, function() { return cloneBlock; });\x0a/* concated harmony reexport getPossibleBlockTransformations */__webpack_require__.d(__webpack_exports__, \x22getPossibleBlockTransformations\x22, function() { return getPossibleBlockTransformations; });\x0a/* concated harmony reexport switchToBlockType */__webpack_require__.d(__webpack_exports__, \x22switchToBlockType\x22, function() { return switchToBlockType; });\x0a/* concated harmony reexport getBlockTransforms */__webpack_require__.d(__webpack_exports__, \x22getBlockTransforms\x22, function() { return getBlockTransforms; });\x0a/* concated harmony reexport findTransform */__webpack_require__.d(__webpack_exports__, \x22findTransform\x22, function() { return findTransform; });\x0a/* concated harmony reexport parse */__webpack_require__.d(__webpack_exports__, \x22parse\x22, function() { return parser; });\x0a/* concated harmony reexport getBlockAttributes */__webpack_require__.d(__webpack_exports__, \x22getBlockAttributes\x22, function() { return getBlockAttributes; });\x0a/* concated harmony reexport parseWithAttributeSchema */__webpack_require__.d(__webpack_exports__, \x22parseWithAttributeSchema\x22, function() { return parseWithAttributeSchema; });\x0a/* concated harmony reexport pasteHandler */__webpack_require__.d(__webpack_exports__, \x22pasteHandler\x22, function() { return pasteHandler; });\x0a/* concated harmony reexport rawHandler */__webpack_require__.d(__webpack_exports__, \x22rawHandler\x22, function() { return rawHandler; });\x0a/* concated harmony reexport getPhrasingContentSchema */__webpack_require__.d(__webpack_exports__, \x22getPhrasingContentSchema\x22, function() { return getPhrasingContentSchema; });\x0a/* concated harmony reexport serialize */__webpack_require__.d(__webpack_exports__, \x22serialize\x22, function() { return serialize; });\x0a/* concated harmony reexport getBlockContent */__webpack_require__.d(__webpack_exports__, \x22getBlockContent\x22, function() { return getBlockContent; });\x0a/* concated harmony reexport getBlockDefaultClassName */__webpack_require__.d(__webpack_exports__, \x22getBlockDefaultClassName\x22, function() { return getBlockDefaultClassName; });\x0a/* concated harmony reexport getBlockMenuDefaultClassName */__webpack_require__.d(__webpack_exports__, \x22getBlockMenuDefaultClassName\x22, function() { return getBlockMenuDefaultClassName; });\x0a/* concated harmony reexport getSaveElement */__webpack_require__.d(__webpack_exports__, \x22getSaveElement\x22, function() { return getSaveElement; });\x0a/* concated harmony reexport getSaveContent */__webpack_require__.d(__webpack_exports__, \x22getSaveContent\x22, function() { return getSaveContent; });\x0a/* concated harmony reexport isValidBlockContent */__webpack_require__.d(__webpack_exports__, \x22isValidBlockContent\x22, function() { return isValidBlockContent; });\x0a/* concated harmony reexport getCategories */__webpack_require__.d(__webpack_exports__, \x22getCategories\x22, function() { return categories_getCategories; });\x0a/* concated harmony reexport setCategories */__webpack_require__.d(__webpack_exports__, \x22setCategories\x22, function() { return categories_setCategories; });\x0a/* concated harmony reexport updateCategory */__webpack_require__.d(__webpack_exports__, \x22updateCategory\x22, function() { return categories_updateCategory; });\x0a/* concated harmony reexport registerBlockType */__webpack_require__.d(__webpack_exports__, \x22registerBlockType\x22, function() { return registerBlockType; });\x0a/* concated harmony reexport unregisterBlockType */__webpack_require__.d(__webpack_exports__, \x22unregisterBlockType\x22, function() { return unregisterBlockType; });\x0a/* concated harmony reexport setFreeformContentHandlerName */__webpack_require__.d(__webpack_exports__, \x22setFreeformContentHandlerName\x22, function() { return setFreeformContentHandlerName; });\x0a/* concated harmony reexport getFreeformContentHandlerName */__webpack_require__.d(__webpack_exports__, \x22getFreeformContentHandlerName\x22, function() { return getFreeformContentHandlerName; });\x0a/* concated harmony reexport setUnregisteredTypeHandlerName */__webpack_require__.d(__webpack_exports__, \x22setUnregisteredTypeHandlerName\x22, function() { return setUnregisteredTypeHandlerName; });\x0a/* concated harmony reexport getUnregisteredTypeHandlerName */__webpack_require__.d(__webpack_exports__, \x22getUnregisteredTypeHandlerName\x22, function() { return getUnregisteredTypeHandlerName; });\x0a/* concated harmony reexport setDefaultBlockName */__webpack_require__.d(__webpack_exports__, \x22setDefaultBlockName\x22, function() { return registration_setDefaultBlockName; });\x0a/* concated harmony reexport getDefaultBlockName */__webpack_require__.d(__webpack_exports__, \x22getDefaultBlockName\x22, function() { return registration_getDefaultBlockName; });\x0a/* concated harmony reexport getBlockType */__webpack_require__.d(__webpack_exports__, \x22getBlockType\x22, function() { return registration_getBlockType; });\x0a/* concated harmony reexport getBlockTypes */__webpack_require__.d(__webpack_exports__, \x22getBlockTypes\x22, function() { return registration_getBlockTypes; });\x0a/* concated harmony reexport getBlockSupport */__webpack_require__.d(__webpack_exports__, \x22getBlockSupport\x22, function() { return registration_getBlockSupport; });\x0a/* concated harmony reexport hasBlockSupport */__webpack_require__.d(__webpack_exports__, \x22hasBlockSupport\x22, function() { return registration_hasBlockSupport; });\x0a/* concated harmony reexport isReusableBlock */__webpack_require__.d(__webpack_exports__, \x22isReusableBlock\x22, function() { return isReusableBlock; });\x0a/* concated harmony reexport getChildBlockNames */__webpack_require__.d(__webpack_exports__, \x22getChildBlockNames\x22, function() { return registration_getChildBlockNames; });\x0a/* concated harmony reexport hasChildBlocks */__webpack_require__.d(__webpack_exports__, \x22hasChildBlocks\x22, function() { return registration_hasChildBlocks; });\x0a/* concated harmony reexport hasChildBlocksWithInserterSupport */__webpack_require__.d(__webpack_exports__, \x22hasChildBlocksWithInserterSupport\x22, function() { return registration_hasChildBlocksWithInserterSupport; });\x0a/* concated harmony reexport unstable__bootstrapServerSideBlockDefinitions */__webpack_require__.d(__webpack_exports__, \x22unstable__bootstrapServerSideBlockDefinitions\x22, function() { return unstable__bootstrapServerSideBlockDefinitions; });\x0a/* concated harmony reexport registerBlockStyle */__webpack_require__.d(__webpack_exports__, \x22registerBlockStyle\x22, function() { return registration_registerBlockStyle; });\x0a/* concated harmony reexport unregisterBlockStyle */__webpack_require__.d(__webpack_exports__, \x22unregisterBlockStyle\x22, function() { return registration_unregisterBlockStyle; });\x0a/* concated harmony reexport isUnmodifiedDefaultBlock */__webpack_require__.d(__webpack_exports__, \x22isUnmodifiedDefaultBlock\x22, function() { return isUnmodifiedDefaultBlock; });\x0a/* concated harmony reexport normalizeIconObject */__webpack_require__.d(__webpack_exports__, \x22normalizeIconObject\x22, function() { return normalizeIconObject; });\x0a/* concated harmony reexport isValidIcon */__webpack_require__.d(__webpack_exports__, \x22isValidIcon\x22, function() { return isValidIcon; });\x0a/* concated harmony reexport doBlocksMatchTemplate */__webpack_require__.d(__webpack_exports__, \x22doBlocksMatchTemplate\x22, function() { return doBlocksMatchTemplate; });\x0a/* concated harmony reexport synchronizeBlocksWithTemplate */__webpack_require__.d(__webpack_exports__, \x22synchronizeBlocksWithTemplate\x22, function() { return synchronizeBlocksWithTemplate; });\x0a/* concated harmony reexport children */__webpack_require__.d(__webpack_exports__, \x22children\x22, function() { return api_children; });\x0a/* concated harmony reexport node */__webpack_require__.d(__webpack_exports__, \x22node\x22, function() { return api_node; });\x0a/* concated harmony reexport withBlockContentContext */__webpack_require__.d(__webpack_exports__, \x22withBlockContentContext\x22, function() { return withBlockContentContext; });\x0a// A \x22block\x22 is the abstract term used to describe units of markup that,\x0a// when composed together, form the content or layout of a page.\x0a// The API for blocks is exposed via `wp.blocks`.\x0a//\x0a// Supported blocks are registered by calling `registerBlockType`. Once registered,\x0a// the block is made available as an option to the editor interface.\x0a//\x0a// Blocks are inferred from the HTML source of a post through a parsing mechanism\x0a// and then stored as objects in state, from which it is then rendered for editing.\x0a\x0a/**\x0a * Internal dependencies\x0a */\x0a\x0a\x0a\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 37:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _arrayWithHoles; });\x0afunction _arrayWithHoles(arr) {\x0a  if (Array.isArray(arr)) return arr;\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 38:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _nonIterableRest; });\x0afunction _nonIterableRest() {\x0a  throw new TypeError(\x22Invalid attempt to destructure non-iterable instance\x22);\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 42:\x0a/***/ (function(module, exports) {\x0a\x0a(function() { module.exports = this[\x22wp\x22][\x22isShallowEqual\x22]; }());\x0a\x0a/***/ }),\x0a\x0a/***/ 45:\x0a/***/ (function(module, exports, __webpack_require__) {\x0a\x0avar __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\x0a// https://github.com/bgrins/TinyColor\x0a// Brian Grinstead, MIT License\x0a\x0a(function(Math) {\x0a\x0avar trimLeft = /^\x5cs+/,\x0a    trimRight = /\x5cs+$/,\x0a    tinyCounter = 0,\x0a    mathRound = Math.round,\x0a    mathMin = Math.min,\x0a    mathMax = Math.max,\x0a    mathRandom = Math.random;\x0a\x0afunction tinycolor (color, opts) {\x0a\x0a    color = (color) ? color : \x27\x27;\x0a    opts = opts || { };\x0a\x0a    // If input is already a tinycolor, return itself\x0a    if (color instanceof tinycolor) {\x0a       return color;\x0a    }\x0a    // If we are called as a function, call using new instead\x0a    if (!(this instanceof tinycolor)) {\x0a        return new tinycolor(color, opts);\x0a    }\x0a\x0a    var rgb = inputToRGB(color);\x0a    this._originalInput = color,\x0a    this._r = rgb.r,\x0a    this._g = rgb.g,\x0a    this._b = rgb.b,\x0a    this._a = rgb.a,\x0a    this._roundA = mathRound(100*this._a) / 100,\x0a    this._format = opts.format || rgb.format;\x0a    this._gradientType = opts.gradientType;\x0a\x0a    // Don\x27t let the range of [0,255] come back in [0,1].\x0a    // Potentially lose a little bit of precision here, but will fix issues where\x0a    // .5 gets interpreted as half of the total, instead of half of 1\x0a    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\x0a    if (this._r \x3c 1) { this._r = mathRound(this._r); }\x0a    if (this._g \x3c 1) { this._g = mathRound(this._g); }\x0a    if (this._b \x3c 1) { this._b = mathRound(this._b); }\x0a\x0a    this._ok = rgb.ok;\x0a    this._tc_id = tinyCounter++;\x0a}\x0a\x0atinycolor.prototype = {\x0a    isDark: function() {\x0a        return this.getBrightness() \x3c 128;\x0a    },\x0a    isLight: function() {\x0a        return !this.isDark();\x0a    },\x0a    isValid: function() {\x0a        return this._ok;\x0a    },\x0a    getOriginalInput: function() {\x0a      return this._originalInput;\x0a    },\x0a    getFormat: function() {\x0a        return this._format;\x0a    },\x0a    getAlpha: function() {\x0a        return this._a;\x0a    },\x0a    getBrightness: function() {\x0a        //http://www.w3.org/TR/AERT#color-contrast\x0a        var rgb = this.toRgb();\x0a        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\x0a    },\x0a    getLuminance: function() {\x0a        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\x0a        var rgb = this.toRgb();\x0a        var RsRGB, GsRGB, BsRGB, R, G, B;\x0a        RsRGB = rgb.r/255;\x0a        GsRGB = rgb.g/255;\x0a        BsRGB = rgb.b/255;\x0a\x0a        if (RsRGB \x3c= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\x0a        if (GsRGB \x3c= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\x0a        if (BsRGB \x3c= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\x0a        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\x0a    },\x0a    setAlpha: function(value) {\x0a        this._a = boundAlpha(value);\x0a        this._roundA = mathRound(100*this._a) / 100;\x0a        return this;\x0a    },\x0a    toHsv: function() {\x0a        var hsv = rgbToHsv(this._r, this._g, this._b);\x0a        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\x0a    },\x0a    toHsvString: function() {\x0a        var hsv = rgbToHsv(this._r, this._g, this._b);\x0a        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\x0a        return (this._a == 1) ?\x0a          \x22hsv(\x22  + h + \x22, \x22 + s + \x22%, \x22 + v + \x22%)\x22 :\x0a          \x22hsva(\x22 + h + \x22, \x22 + s + \x22%, \x22 + v + \x22%, \x22+ this._roundA + \x22)\x22;\x0a    },\x0a    toHsl: function() {\x0a        var hsl = rgbToHsl(this._r, this._g, this._b);\x0a        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\x0a    },\x0a    toHslString: function() {\x0a        var hsl = rgbToHsl(this._r, this._g, this._b);\x0a        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\x0a        return (this._a == 1) ?\x0a          \x22hsl(\x22  + h + \x22, \x22 + s + \x22%, \x22 + l + \x22%)\x22 :\x0a          \x22hsla(\x22 + h + \x22, \x22 + s + \x22%, \x22 + l + \x22%, \x22+ this._roundA + \x22)\x22;\x0a    },\x0a    toHex: function(allow3Char) {\x0a        return rgbToHex(this._r, this._g, this._b, allow3Char);\x0a    },\x0a    toHexString: function(allow3Char) {\x0a        return \x27#\x27 + this.toHex(allow3Char);\x0a    },\x0a    toHex8: function(allow4Char) {\x0a        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\x0a    },\x0a    toHex8String: function(allow4Char) {\x0a        return \x27#\x27 + this.toHex8(allow4Char);\x0a    },\x0a    toRgb: function() {\x0a        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\x0a    },\x0a    toRgbString: function() {\x0a        return (this._a == 1) ?\x0a          \x22rgb(\x22  + mathRound(this._r) + \x22, \x22 + mathRound(this._g) + \x22, \x22 + mathRound(this._b) + \x22)\x22 :\x0a          \x22rgba(\x22 + mathRound(this._r) + \x22, \x22 + mathRound(this._g) + \x22, \x22 + mathRound(this._b) + \x22, \x22 + this._roundA + \x22)\x22;\x0a    },\x0a    toPercentageRgb: function() {\x0a        return { r: mathRound(bound01(this._r, 255) * 100) + \x22%\x22, g: mathRound(bound01(this._g, 255) * 100) + \x22%\x22, b: mathRound(bound01(this._b, 255) * 100) + \x22%\x22, a: this._a };\x0a    },\x0a    toPercentageRgbString: function() {\x0a        return (this._a == 1) ?\x0a          \x22rgb(\x22  + mathRound(bound01(this._r, 255) * 100) + \x22%, \x22 + mathRound(bound01(this._g, 255) * 100) + \x22%, \x22 + mathRound(bound01(this._b, 255) * 100) + \x22%)\x22 :\x0a          \x22rgba(\x22 + mathRound(bound01(this._r, 255) * 100) + \x22%, \x22 + mathRound(bound01(this._g, 255) * 100) + \x22%, \x22 + mathRound(bound01(this._b, 255) * 100) + \x22%, \x22 + this._roundA + \x22)\x22;\x0a    },\x0a    toName: function() {\x0a        if (this._a === 0) {\x0a            return \x22transparent\x22;\x0a        }\x0a\x0a        if (this._a \x3c 1) {\x0a            return false;\x0a        }\x0a\x0a        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\x0a    },\x0a    toFilter: function(secondColor) {\x0a        var hex8String = \x27#\x27 + rgbaToArgbHex(this._r, this._g, this._b, this._a);\x0a        var secondHex8String = hex8String;\x0a        var gradientType = this._gradientType ? \x22GradientType = 1, \x22 : \x22\x22;\x0a\x0a        if (secondColor) {\x0a            var s = tinycolor(secondColor);\x0a            secondHex8String = \x27#\x27 + rgbaToArgbHex(s._r, s._g, s._b, s._a);\x0a        }\x0a\x0a        return \x22progid:DXImageTransform.Microsoft.gradient(\x22+gradientType+\x22startColorstr=\x22+hex8String+\x22,endColorstr=\x22+secondHex8String+\x22)\x22;\x0a    },\x0a    toString: function(format) {\x0a        var formatSet = !!format;\x0a        format = format || this._format;\x0a\x0a        var formattedString = false;\x0a        var hasAlpha = this._a \x3c 1 && this._a \x3e= 0;\x0a        var needsAlphaFormat = !formatSet && hasAlpha && (format === \x22hex\x22 || format === \x22hex6\x22 || format === \x22hex3\x22 || format === \x22hex4\x22 || format === \x22hex8\x22 || format === \x22name\x22);\x0a\x0a        if (needsAlphaFormat) {\x0a            // Special case for \x22transparent\x22, all other non-alpha formats\x0a            // will return rgba when there is transparency.\x0a            if (format === \x22name\x22 && this._a === 0) {\x0a                return this.toName();\x0a            }\x0a            return this.toRgbString();\x0a        }\x0a        if (format === \x22rgb\x22) {\x0a            formattedString = this.toRgbString();\x0a        }\x0a        if (format === \x22prgb\x22) {\x0a            formattedString = this.toPercentageRgbString();\x0a        }\x0a        if (format === \x22hex\x22 || format === \x22hex6\x22) {\x0a            formattedString = this.toHexString();\x0a        }\x0a        if (format === \x22hex3\x22) {\x0a            formattedString = this.toHexString(true);\x0a        }\x0a        if (format === \x22hex4\x22) {\x0a            formattedString = this.toHex8String(true);\x0a        }\x0a        if (format === \x22hex8\x22) {\x0a            formattedString = this.toHex8String();\x0a        }\x0a        if (format === \x22name\x22) {\x0a            formattedString = this.toName();\x0a        }\x0a        if (format === \x22hsl\x22) {\x0a            formattedString = this.toHslString();\x0a        }\x0a        if (format === \x22hsv\x22) {\x0a            formattedString = this.toHsvString();\x0a        }\x0a\x0a        return formattedString || this.toHexString();\x0a    },\x0a    clone: function() {\x0a        return tinycolor(this.toString());\x0a    },\x0a\x0a    _applyModification: function(fn, args) {\x0a        var color = fn.apply(null, [this].concat([].slice.call(args)));\x0a        this._r = color._r;\x0a        this._g = color._g;\x0a        this._b = color._b;\x0a        this.setAlpha(color._a);\x0a        return this;\x0a    },\x0a    lighten: function() {\x0a        return this._applyModification(lighten, arguments);\x0a    },\x0a    brighten: function() {\x0a        return this._applyModification(brighten, arguments);\x0a    },\x0a    darken: function() {\x0a        return this._applyModification(darken, arguments);\x0a    },\x0a    desaturate: function() {\x0a        return this._applyModification(desaturate, arguments);\x0a    },\x0a    saturate: function() {\x0a        return this._applyModification(saturate, arguments);\x0a    },\x0a    greyscale: function() {\x0a        return this._applyModification(greyscale, arguments);\x0a    },\x0a    spin: function() {\x0a        return this._applyModification(spin, arguments);\x0a    },\x0a\x0a    _applyCombination: function(fn, args) {\x0a        return fn.apply(null, [this].concat([].slice.call(args)));\x0a    },\x0a    analogous: function() {\x0a        return this._applyCombination(analogous, arguments);\x0a    },\x0a    complement: function() {\x0a        return this._applyCombination(complement, arguments);\x0a    },\x0a    monochromatic: function() {\x0a        return this._applyCombination(monochromatic, arguments);\x0a    },\x0a    splitcomplement: function() {\x0a        return this._applyCombination(splitcomplement, arguments);\x0a    },\x0a    triad: function() {\x0a        return this._applyCombination(triad, arguments);\x0a    },\x0a    tetrad: function() {\x0a        return this._applyCombination(tetrad, arguments);\x0a    }\x0a};\x0a\x0a// If input is an object, force 1 into \x221.0\x22 to handle ratios properly\x0a// String input requires \x221.0\x22 as input, so 1 will be treated as 1\x0atinycolor.fromRatio = function(color, opts) {\x0a    if (typeof color == \x22object\x22) {\x0a        var newColor = {};\x0a        for (var i in color) {\x0a            if (color.hasOwnProperty(i)) {\x0a                if (i === \x22a\x22) {\x0a                    newColor[i] = color[i];\x0a                }\x0a                else {\x0a                    newColor[i] = convertToPercentage(color[i]);\x0a                }\x0a            }\x0a        }\x0a        color = newColor;\x0a    }\x0a\x0a    return tinycolor(color, opts);\x0a};\x0a\x0a// Given a string or object, convert that input to RGB\x0a// Possible string inputs:\x0a//\x0a//     \x22red\x22\x0a//     \x22#f00\x22 or \x22f00\x22\x0a//     \x22#ff0000\x22 or \x22ff0000\x22\x0a//     \x22#ff000000\x22 or \x22ff000000\x22\x0a//     \x22rgb 255 0 0\x22 or \x22rgb (255, 0, 0)\x22\x0a//     \x22rgb 1.0 0 0\x22 or \x22rgb (1, 0, 0)\x22\x0a//     \x22rgba (255, 0, 0, 1)\x22 or \x22rgba 255, 0, 0, 1\x22\x0a//     \x22rgba (1.0, 0, 0, 1)\x22 or \x22rgba 1.0, 0, 0, 1\x22\x0a//     \x22hsl(0, 100%, 50%)\x22 or \x22hsl 0 100% 50%\x22\x0a//     \x22hsla(0, 100%, 50%, 1)\x22 or \x22hsla 0 100% 50%, 1\x22\x0a//     \x22hsv(0, 100%, 100%)\x22 or \x22hsv 0 100% 100%\x22\x0a//\x0afunction inputToRGB(color) {\x0a\x0a    var rgb = { r: 0, g: 0, b: 0 };\x0a    var a = 1;\x0a    var s = null;\x0a    var v = null;\x0a    var l = null;\x0a    var ok = false;\x0a    var format = false;\x0a\x0a    if (typeof color == \x22string\x22) {\x0a        color = stringInputToObject(color);\x0a    }\x0a\x0a    if (typeof color == \x22object\x22) {\x0a        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\x0a            rgb = rgbToRgb(color.r, color.g, color.b);\x0a            ok = true;\x0a            format = String(color.r).substr(-1) === \x22%\x22 ? \x22prgb\x22 : \x22rgb\x22;\x0a        }\x0a        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\x0a            s = convertToPercentage(color.s);\x0a            v = convertToPercentage(color.v);\x0a            rgb = hsvToRgb(color.h, s, v);\x0a            ok = true;\x0a            format = \x22hsv\x22;\x0a        }\x0a        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\x0a            s = convertToPercentage(color.s);\x0a            l = convertToPercentage(color.l);\x0a            rgb = hslToRgb(color.h, s, l);\x0a            ok = true;\x0a            format = \x22hsl\x22;\x0a        }\x0a\x0a        if (color.hasOwnProperty(\x22a\x22)) {\x0a            a = color.a;\x0a        }\x0a    }\x0a\x0a    a = boundAlpha(a);\x0a\x0a    return {\x0a        ok: ok,\x0a        format: color.format || format,\x0a        r: mathMin(255, mathMax(rgb.r, 0)),\x0a        g: mathMin(255, mathMax(rgb.g, 0)),\x0a        b: mathMin(255, mathMax(rgb.b, 0)),\x0a        a: a\x0a    };\x0a}\x0a\x0a\x0a// Conversion Functions\x0a// --------------------\x0a\x0a// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\x0a// \x3chttp://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\x3e\x0a\x0a// `rgbToRgb`\x0a// Handle bounds / percentage checking to conform to CSS color spec\x0a// \x3chttp://www.w3.org/TR/css3-color/\x3e\x0a// *Assumes:* r, g, b in [0, 255] or [0, 1]\x0a// *Returns:* { r, g, b } in [0, 255]\x0afunction rgbToRgb(r, g, b){\x0a    return {\x0a        r: bound01(r, 255) * 255,\x0a        g: bound01(g, 255) * 255,\x0a        b: bound01(b, 255) * 255\x0a    };\x0a}\x0a\x0a// `rgbToHsl`\x0a// Converts an RGB color value to HSL.\x0a// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\x0a// *Returns:* { h, s, l } in [0,1]\x0afunction rgbToHsl(r, g, b) {\x0a\x0a    r = bound01(r, 255);\x0a    g = bound01(g, 255);\x0a    b = bound01(b, 255);\x0a\x0a    var max = mathMax(r, g, b), min = mathMin(r, g, b);\x0a    var h, s, l = (max + min) / 2;\x0a\x0a    if(max == min) {\x0a        h = s = 0; // achromatic\x0a    }\x0a    else {\x0a        var d = max - min;\x0a        s = l \x3e 0.5 ? d / (2 - max - min) : d / (max + min);\x0a        switch(max) {\x0a            case r: h = (g - b) / d + (g \x3c b ? 6 : 0); break;\x0a            case g: h = (b - r) / d + 2; break;\x0a            case b: h = (r - g) / d + 4; break;\x0a        }\x0a\x0a        h /= 6;\x0a    }\x0a\x0a    return { h: h, s: s, l: l };\x0a}\x0a\x0a// `hslToRgb`\x0a// Converts an HSL color value to RGB.\x0a// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\x0a// *Returns:* { r, g, b } in the set [0, 255]\x0afunction hslToRgb(h, s, l) {\x0a    var r, g, b;\x0a\x0a    h = bound01(h, 360);\x0a    s = bound01(s, 100);\x0a    l = bound01(l, 100);\x0a\x0a    function hue2rgb(p, q, t) {\x0a        if(t \x3c 0) t += 1;\x0a        if(t \x3e 1) t -= 1;\x0a        if(t \x3c 1/6) return p + (q - p) * 6 * t;\x0a        if(t \x3c 1/2) return q;\x0a        if(t \x3c 2/3) return p + (q - p) * (2/3 - t) * 6;\x0a        return p;\x0a    }\x0a\x0a    if(s === 0) {\x0a        r = g = b = l; // achromatic\x0a    }\x0a    else {\x0a        var q = l \x3c 0.5 ? l * (1 + s) : l + s - l * s;\x0a        var p = 2 * l - q;\x0a        r = hue2rgb(p, q, h + 1/3);\x0a        g = hue2rgb(p, q, h);\x0a        b = hue2rgb(p, q, h - 1/3);\x0a    }\x0a\x0a    return { r: r * 255, g: g * 255, b: b * 255 };\x0a}\x0a\x0a// `rgbToHsv`\x0a// Converts an RGB color value to HSV\x0a// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\x0a// *Returns:* { h, s, v } in [0,1]\x0afunction rgbToHsv(r, g, b) {\x0a\x0a    r = bound01(r, 255);\x0a    g = bound01(g, 255);\x0a    b = bound01(b, 255);\x0a\x0a    var max = mathMax(r, g, b), min = mathMin(r, g, b);\x0a    var h, s, v = max;\x0a\x0a    var d = max - min;\x0a    s = max === 0 ? 0 : d / max;\x0a\x0a    if(max == min) {\x0a        h = 0; // achromatic\x0a    }\x0a    else {\x0a        switch(max) {\x0a            case r: h = (g - b) / d + (g \x3c b ? 6 : 0); break;\x0a            case g: h = (b - r) / d + 2; break;\x0a            case b: h = (r - g) / d + 4; break;\x0a        }\x0a        h /= 6;\x0a    }\x0a    return { h: h, s: s, v: v };\x0a}\x0a\x0a// `hsvToRgb`\x0a// Converts an HSV color value to RGB.\x0a// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\x0a// *Returns:* { r, g, b } in the set [0, 255]\x0a function hsvToRgb(h, s, v) {\x0a\x0a    h = bound01(h, 360) * 6;\x0a    s = bound01(s, 100);\x0a    v = bound01(v, 100);\x0a\x0a    var i = Math.floor(h),\x0a        f = h - i,\x0a        p = v * (1 - s),\x0a        q = v * (1 - f * s),\x0a        t = v * (1 - (1 - f) * s),\x0a        mod = i % 6,\x0a        r = [v, q, p, p, t, v][mod],\x0a        g = [t, v, v, q, p, p][mod],\x0a        b = [p, p, t, v, v, q][mod];\x0a\x0a    return { r: r * 255, g: g * 255, b: b * 255 };\x0a}\x0a\x0a// `rgbToHex`\x0a// Converts an RGB color to hex\x0a// Assumes r, g, and b are contained in the set [0, 255]\x0a// Returns a 3 or 6 character hex\x0afunction rgbToHex(r, g, b, allow3Char) {\x0a\x0a    var hex = [\x0a        pad2(mathRound(r).toString(16)),\x0a        pad2(mathRound(g).toString(16)),\x0a        pad2(mathRound(b).toString(16))\x0a    ];\x0a\x0a    // Return a 3 character hex if possible\x0a    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\x0a        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\x0a    }\x0a\x0a    return hex.join(\x22\x22);\x0a}\x0a\x0a// `rgbaToHex`\x0a// Converts an RGBA color plus alpha transparency to hex\x0a// Assumes r, g, b are contained in the set [0, 255] and\x0a// a in [0, 1]. Returns a 4 or 8 character rgba hex\x0afunction rgbaToHex(r, g, b, a, allow4Char) {\x0a\x0a    var hex = [\x0a        pad2(mathRound(r).toString(16)),\x0a        pad2(mathRound(g).toString(16)),\x0a        pad2(mathRound(b).toString(16)),\x0a        pad2(convertDecimalToHex(a))\x0a    ];\x0a\x0a    // Return a 4 character hex if possible\x0a    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\x0a        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\x0a    }\x0a\x0a    return hex.join(\x22\x22);\x0a}\x0a\x0a// `rgbaToArgbHex`\x0a// Converts an RGBA color to an ARGB Hex8 string\x0a// Rarely used, but required for \x22toFilter()\x22\x0afunction rgbaToArgbHex(r, g, b, a) {\x0a\x0a    var hex = [\x0a        pad2(convertDecimalToHex(a)),\x0a        pad2(mathRound(r).toString(16)),\x0a        pad2(mathRound(g).toString(16)),\x0a        pad2(mathRound(b).toString(16))\x0a    ];\x0a\x0a    return hex.join(\x22\x22);\x0a}\x0a\x0a// `equals`\x0a// Can be called with any tinycolor input\x0atinycolor.equals = function (color1, color2) {\x0a    if (!color1 || !color2) { return false; }\x0a    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\x0a};\x0a\x0atinycolor.random = function() {\x0a    return tinycolor.fromRatio({\x0a        r: mathRandom(),\x0a        g: mathRandom(),\x0a        b: mathRandom()\x0a    });\x0a};\x0a\x0a\x0a// Modification Functions\x0a// ----------------------\x0a// Thanks to less.js for some of the basics here\x0a// \x3chttps://github.com/cloudhead/less.js/blob/master/lib/less/functions.js\x3e\x0a\x0afunction desaturate(color, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 10);\x0a    var hsl = tinycolor(color).toHsl();\x0a    hsl.s -= amount / 100;\x0a    hsl.s = clamp01(hsl.s);\x0a    return tinycolor(hsl);\x0a}\x0a\x0afunction saturate(color, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 10);\x0a    var hsl = tinycolor(color).toHsl();\x0a    hsl.s += amount / 100;\x0a    hsl.s = clamp01(hsl.s);\x0a    return tinycolor(hsl);\x0a}\x0a\x0afunction greyscale(color) {\x0a    return tinycolor(color).desaturate(100);\x0a}\x0a\x0afunction lighten (color, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 10);\x0a    var hsl = tinycolor(color).toHsl();\x0a    hsl.l += amount / 100;\x0a    hsl.l = clamp01(hsl.l);\x0a    return tinycolor(hsl);\x0a}\x0a\x0afunction brighten(color, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 10);\x0a    var rgb = tinycolor(color).toRgb();\x0a    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\x0a    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\x0a    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\x0a    return tinycolor(rgb);\x0a}\x0a\x0afunction darken (color, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 10);\x0a    var hsl = tinycolor(color).toHsl();\x0a    hsl.l -= amount / 100;\x0a    hsl.l = clamp01(hsl.l);\x0a    return tinycolor(hsl);\x0a}\x0a\x0a// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\x0a// Values outside of this range will be wrapped into this range.\x0afunction spin(color, amount) {\x0a    var hsl = tinycolor(color).toHsl();\x0a    var hue = (hsl.h + amount) % 360;\x0a    hsl.h = hue \x3c 0 ? 360 + hue : hue;\x0a    return tinycolor(hsl);\x0a}\x0a\x0a// Combination Functions\x0a// ---------------------\x0a// Thanks to jQuery xColor for some of the ideas behind these\x0a// \x3chttps://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\x3e\x0a\x0afunction complement(color) {\x0a    var hsl = tinycolor(color).toHsl();\x0a    hsl.h = (hsl.h + 180) % 360;\x0a    return tinycolor(hsl);\x0a}\x0a\x0afunction triad(color) {\x0a    var hsl = tinycolor(color).toHsl();\x0a    var h = hsl.h;\x0a    return [\x0a        tinycolor(color),\x0a        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\x0a        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\x0a    ];\x0a}\x0a\x0afunction tetrad(color) {\x0a    var hsl = tinycolor(color).toHsl();\x0a    var h = hsl.h;\x0a    return [\x0a        tinycolor(color),\x0a        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\x0a        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\x0a        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\x0a    ];\x0a}\x0a\x0afunction splitcomplement(color) {\x0a    var hsl = tinycolor(color).toHsl();\x0a    var h = hsl.h;\x0a    return [\x0a        tinycolor(color),\x0a        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\x0a        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\x0a    ];\x0a}\x0a\x0afunction analogous(color, results, slices) {\x0a    results = results || 6;\x0a    slices = slices || 30;\x0a\x0a    var hsl = tinycolor(color).toHsl();\x0a    var part = 360 / slices;\x0a    var ret = [tinycolor(color)];\x0a\x0a    for (hsl.h = ((hsl.h - (part * results \x3e\x3e 1)) + 720) % 360; --results; ) {\x0a        hsl.h = (hsl.h + part) % 360;\x0a        ret.push(tinycolor(hsl));\x0a    }\x0a    return ret;\x0a}\x0a\x0afunction monochromatic(color, results) {\x0a    results = results || 6;\x0a    var hsv = tinycolor(color).toHsv();\x0a    var h = hsv.h, s = hsv.s, v = hsv.v;\x0a    var ret = [];\x0a    var modification = 1 / results;\x0a\x0a    while (results--) {\x0a        ret.push(tinycolor({ h: h, s: s, v: v}));\x0a        v = (v + modification) % 1;\x0a    }\x0a\x0a    return ret;\x0a}\x0a\x0a// Utility Functions\x0a// ---------------------\x0a\x0atinycolor.mix = function(color1, color2, amount) {\x0a    amount = (amount === 0) ? 0 : (amount || 50);\x0a\x0a    var rgb1 = tinycolor(color1).toRgb();\x0a    var rgb2 = tinycolor(color2).toRgb();\x0a\x0a    var p = amount / 100;\x0a\x0a    var rgba = {\x0a        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\x0a        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\x0a        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\x0a        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\x0a    };\x0a\x0a    return tinycolor(rgba);\x0a};\x0a\x0a\x0a// Readability Functions\x0a// ---------------------\x0a// \x3chttp://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\x0a\x0a// `contrast`\x0a// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\x0atinycolor.readability = function(color1, color2) {\x0a    var c1 = tinycolor(color1);\x0a    var c2 = tinycolor(color2);\x0a    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\x0a};\x0a\x0a// `isReadable`\x0a// Ensure that foreground and background color combinations meet WCAG2 guidelines.\x0a// The third argument is an optional Object.\x0a//      the \x27level\x27 property states \x27AA\x27 or \x27AAA\x27 - if missing or invalid, it defaults to \x27AA\x27;\x0a//      the \x27size\x27 property states \x27large\x27 or \x27small\x27 - if missing or invalid, it defaults to \x27small\x27.\x0a// If the entire object is absent, isReadable defaults to {level:\x22AA\x22,size:\x22small\x22}.\x0a\x0a// *Example*\x0a//    tinycolor.isReadable(\x22#000\x22, \x22#111\x22) =\x3e false\x0a//    tinycolor.isReadable(\x22#000\x22, \x22#111\x22,{level:\x22AA\x22,size:\x22large\x22}) =\x3e false\x0atinycolor.isReadable = function(color1, color2, wcag2) {\x0a    var readability = tinycolor.readability(color1, color2);\x0a    var wcag2Parms, out;\x0a\x0a    out = false;\x0a\x0a    wcag2Parms = validateWCAG2Parms(wcag2);\x0a    switch (wcag2Parms.level + wcag2Parms.size) {\x0a        case \x22AAsmall\x22:\x0a        case \x22AAAlarge\x22:\x0a            out = readability \x3e= 4.5;\x0a            break;\x0a        case \x22AAlarge\x22:\x0a            out = readability \x3e= 3;\x0a            break;\x0a        case \x22AAAsmall\x22:\x0a            out = readability \x3e= 7;\x0a            break;\x0a    }\x0a    return out;\x0a\x0a};\x0a\x0a// `mostReadable`\x0a// Given a base color and a list of possible foreground or background\x0a// colors for that base, returns the most readable color.\x0a// Optionally returns Black or White if the most readable color is unreadable.\x0a// *Example*\x0a//    tinycolor.mostReadable(tinycolor.mostReadable(\x22#123\x22, [\x22#124\x22, \x22#125\x22],{includeFallbackColors:false}).toHexString(); // \x22#112255\x22\x0a//    tinycolor.mostReadable(tinycolor.mostReadable(\x22#123\x22, [\x22#124\x22, \x22#125\x22],{includeFallbackColors:true}).toHexString();  // \x22#ffffff\x22\x0a//    tinycolor.mostReadable(\x22#a8015a\x22, [\x22#faf3f3\x22],{includeFallbackColors:true,level:\x22AAA\x22,size:\x22large\x22}).toHexString(); // \x22#faf3f3\x22\x0a//    tinycolor.mostReadable(\x22#a8015a\x22, [\x22#faf3f3\x22],{includeFallbackColors:true,level:\x22AAA\x22,size:\x22small\x22}).toHexString(); // \x22#ffffff\x22\x0atinycolor.mostReadable = function(baseColor, colorList, args) {\x0a    var bestColor = null;\x0a    var bestScore = 0;\x0a    var readability;\x0a    var includeFallbackColors, level, size ;\x0a    args = args || {};\x0a    includeFallbackColors = args.includeFallbackColors ;\x0a    level = args.level;\x0a    size = args.size;\x0a\x0a    for (var i= 0; i \x3c colorList.length ; i++) {\x0a        readability = tinycolor.readability(baseColor, colorList[i]);\x0a        if (readability \x3e bestScore) {\x0a            bestScore = readability;\x0a            bestColor = tinycolor(colorList[i]);\x0a        }\x0a    }\x0a\x0a    if (tinycolor.isReadable(baseColor, bestColor, {\x22level\x22:level,\x22size\x22:size}) || !includeFallbackColors) {\x0a        return bestColor;\x0a    }\x0a    else {\x0a        args.includeFallbackColors=false;\x0a        return tinycolor.mostReadable(baseColor,[\x22#fff\x22, \x22#000\x22],args);\x0a    }\x0a};\x0a\x0a\x0a// Big List of Colors\x0a// ------------------\x0a// \x3chttp://www.w3.org/TR/css3-color/#svg-color\x3e\x0avar names = tinycolor.names = {\x0a    aliceblue: \x22f0f8ff\x22,\x0a    antiquewhite: \x22faebd7\x22,\x0a    aqua: \x220ff\x22,\x0a    aquamarine: \x227fffd4\x22,\x0a    azure: \x22f0ffff\x22,\x0a    beige: \x22f5f5dc\x22,\x0a    bisque: \x22ffe4c4\x22,\x0a    black: \x22000\x22,\x0a    blanchedalmond: \x22ffebcd\x22,\x0a    blue: \x2200f\x22,\x0a    blueviolet: \x228a2be2\x22,\x0a    brown: \x22a52a2a\x22,\x0a    burlywood: \x22deb887\x22,\x0a    burntsienna: \x22ea7e5d\x22,\x0a    cadetblue: \x225f9ea0\x22,\x0a    chartreuse: \x227fff00\x22,\x0a    chocolate: \x22d2691e\x22,\x0a    coral: \x22ff7f50\x22,\x0a    cornflowerblue: \x226495ed\x22,\x0a    cornsilk: \x22fff8dc\x22,\x0a    crimson: \x22dc143c\x22,\x0a    cyan: \x220ff\x22,\x0a    darkblue: \x2200008b\x22,\x0a    darkcyan: \x22008b8b\x22,\x0a    darkgoldenrod: \x22b8860b\x22,\x0a    darkgray: \x22a9a9a9\x22,\x0a    darkgreen: \x22006400\x22,\x0a    darkgrey: \x22a9a9a9\x22,\x0a    darkkhaki: \x22bdb76b\x22,\x0a    darkmagenta: \x228b008b\x22,\x0a    darkolivegreen: \x22556b2f\x22,\x0a    darkorange: \x22ff8c00\x22,\x0a    darkorchid: \x229932cc\x22,\x0a    darkred: \x228b0000\x22,\x0a    darksalmon: \x22e9967a\x22,\x0a    darkseagreen: \x228fbc8f\x22,\x0a    darkslateblue: \x22483d8b\x22,\x0a    darkslategray: \x222f4f4f\x22,\x0a    darkslategrey: \x222f4f4f\x22,\x0a    darkturquoise: \x2200ced1\x22,\x0a    darkviolet: \x229400d3\x22,\x0a    deeppink: \x22ff1493\x22,\x0a    deepskyblue: \x2200bfff\x22,\x0a    dimgray: \x22696969\x22,\x0a    dimgrey: \x22696969\x22,\x0a    dodgerblue: \x221e90ff\x22,\x0a    firebrick: \x22b22222\x22,\x0a    floralwhite: \x22fffaf0\x22,\x0a    forestgreen: \x22228b22\x22,\x0a    fuchsia: \x22f0f\x22,\x0a    gainsboro: \x22dcdcdc\x22,\x0a    ghostwhite: \x22f8f8ff\x22,\x0a    gold: \x22ffd700\x22,\x0a    goldenrod: \x22daa520\x22,\x0a    gray: \x22808080\x22,\x0a    green: \x22008000\x22,\x0a    greenyellow: \x22adff2f\x22,\x0a    grey: \x22808080\x22,\x0a    honeydew: \x22f0fff0\x22,\x0a    hotpink: \x22ff69b4\x22,\x0a    indianred: \x22cd5c5c\x22,\x0a    indigo: \x224b0082\x22,\x0a    ivory: \x22fffff0\x22,\x0a    khaki: \x22f0e68c\x22,\x0a    lavender: \x22e6e6fa\x22,\x0a    lavenderblush: \x22fff0f5\x22,\x0a    lawngreen: \x227cfc00\x22,\x0a    lemonchiffon: \x22fffacd\x22,\x0a    lightblue: \x22add8e6\x22,\x0a    lightcoral: \x22f08080\x22,\x0a    lightcyan: \x22e0ffff\x22,\x0a    lightgoldenrodyellow: \x22fafad2\x22,\x0a    lightgray: \x22d3d3d3\x22,\x0a    lightgreen: \x2290ee90\x22,\x0a    lightgrey: \x22d3d3d3\x22,\x0a    lightpink: \x22ffb6c1\x22,\x0a    lightsalmon: \x22ffa07a\x22,\x0a    lightseagreen: \x2220b2aa\x22,\x0a    lightskyblue: \x2287cefa\x22,\x0a    lightslategray: \x22789\x22,\x0a    lightslategrey: \x22789\x22,\x0a    lightsteelblue: \x22b0c4de\x22,\x0a    lightyellow: \x22ffffe0\x22,\x0a    lime: \x220f0\x22,\x0a    limegreen: \x2232cd32\x22,\x0a    linen: \x22faf0e6\x22,\x0a    magenta: \x22f0f\x22,\x0a    maroon: \x22800000\x22,\x0a    mediumaquamarine: \x2266cdaa\x22,\x0a    mediumblue: \x220000cd\x22,\x0a    mediumorchid: \x22ba55d3\x22,\x0a    mediumpurple: \x229370db\x22,\x0a    mediumseagreen: \x223cb371\x22,\x0a    mediumslateblue: \x227b68ee\x22,\x0a    mediumspringgreen: \x2200fa9a\x22,\x0a    mediumturquoise: \x2248d1cc\x22,\x0a    mediumvioletred: \x22c71585\x22,\x0a    midnightblue: \x22191970\x22,\x0a    mintcream: \x22f5fffa\x22,\x0a    mistyrose: \x22ffe4e1\x22,\x0a    moccasin: \x22ffe4b5\x22,\x0a    navajowhite: \x22ffdead\x22,\x0a    navy: \x22000080\x22,\x0a    oldlace: \x22fdf5e6\x22,\x0a    olive: \x22808000\x22,\x0a    olivedrab: \x226b8e23\x22,\x0a    orange: \x22ffa500\x22,\x0a    orangered: \x22ff4500\x22,\x0a    orchid: \x22da70d6\x22,\x0a    palegoldenrod: \x22eee8aa\x22,\x0a    palegreen: \x2298fb98\x22,\x0a    paleturquoise: \x22afeeee\x22,\x0a    palevioletred: \x22db7093\x22,\x0a    papayawhip: \x22ffefd5\x22,\x0a    peachpuff: \x22ffdab9\x22,\x0a    peru: \x22cd853f\x22,\x0a    pink: \x22ffc0cb\x22,\x0a    plum: \x22dda0dd\x22,\x0a    powderblue: \x22b0e0e6\x22,\x0a    purple: \x22800080\x22,\x0a    rebeccapurple: \x22663399\x22,\x0a    red: \x22f00\x22,\x0a    rosybrown: \x22bc8f8f\x22,\x0a    royalblue: \x224169e1\x22,\x0a    saddlebrown: \x228b4513\x22,\x0a    salmon: \x22fa8072\x22,\x0a    sandybrown: \x22f4a460\x22,\x0a    seagreen: \x222e8b57\x22,\x0a    seashell: \x22fff5ee\x22,\x0a    sienna: \x22a0522d\x22,\x0a    silver: \x22c0c0c0\x22,\x0a    skyblue: \x2287ceeb\x22,\x0a    slateblue: \x226a5acd\x22,\x0a    slategray: \x22708090\x22,\x0a    slategrey: \x22708090\x22,\x0a    snow: \x22fffafa\x22,\x0a    springgreen: \x2200ff7f\x22,\x0a    steelblue: \x224682b4\x22,\x0a    tan: \x22d2b48c\x22,\x0a    teal: \x22008080\x22,\x0a    thistle: \x22d8bfd8\x22,\x0a    tomato: \x22ff6347\x22,\x0a    turquoise: \x2240e0d0\x22,\x0a    violet: \x22ee82ee\x22,\x0a    wheat: \x22f5deb3\x22,\x0a    white: \x22fff\x22,\x0a    whitesmoke: \x22f5f5f5\x22,\x0a    yellow: \x22ff0\x22,\x0a    yellowgreen: \x229acd32\x22\x0a};\x0a\x0a// Make it easy to access colors via `hexNames[hex]`\x0avar hexNames = tinycolor.hexNames = flip(names);\x0a\x0a\x0a// Utilities\x0a// ---------\x0a\x0a// `{ \x27name1\x27: \x27val1\x27 }` becomes `{ \x27val1\x27: \x27name1\x27 }`\x0afunction flip(o) {\x0a    var flipped = { };\x0a    for (var i in o) {\x0a        if (o.hasOwnProperty(i)) {\x0a            flipped[o[i]] = i;\x0a        }\x0a    }\x0a    return flipped;\x0a}\x0a\x0a// Return a valid alpha value [0,1] with all invalid values being set to 1\x0afunction boundAlpha(a) {\x0a    a = parseFloat(a);\x0a\x0a    if (isNaN(a) || a \x3c 0 || a \x3e 1) {\x0a        a = 1;\x0a    }\x0a\x0a    return a;\x0a}\x0a\x0a// Take input from [0, n] and return it as [0, 1]\x0afunction bound01(n, max) {\x0a    if (isOnePointZero(n)) { n = \x22100%\x22; }\x0a\x0a    var processPercent = isPercentage(n);\x0a    n = mathMin(max, mathMax(0, parseFloat(n)));\x0a\x0a    // Automatically convert percentage into number\x0a    if (processPercent) {\x0a        n = parseInt(n * max, 10) / 100;\x0a    }\x0a\x0a    // Handle floating point rounding errors\x0a    if ((Math.abs(n - max) \x3c 0.000001)) {\x0a        return 1;\x0a    }\x0a\x0a    // Convert into [0, 1] range if it isn\x27t already\x0a    return (n % max) / parseFloat(max);\x0a}\x0a\x0a// Force a number between 0 and 1\x0afunction clamp01(val) {\x0a    return mathMin(1, mathMax(0, val));\x0a}\x0a\x0a// Parse a base-16 hex value into a base-10 integer\x0afunction parseIntFromHex(val) {\x0a    return parseInt(val, 16);\x0a}\x0a\x0a// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\x0a// \x3chttp://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0\x3e\x0afunction isOnePointZero(n) {\x0a    return typeof n == \x22string\x22 && n.indexOf(\x27.\x27) != -1 && parseFloat(n) === 1;\x0a}\x0a\x0a// Check to see if string passed in is a percentage\x0afunction isPercentage(n) {\x0a    return typeof n === \x22string\x22 && n.indexOf(\x27%\x27) != -1;\x0a}\x0a\x0a// Force a hex value to have 2 characters\x0afunction pad2(c) {\x0a    return c.length == 1 ? \x270\x27 + c : \x27\x27 + c;\x0a}\x0a\x0a// Replace a decimal with it\x27s percentage value\x0afunction convertToPercentage(n) {\x0a    if (n \x3c= 1) {\x0a        n = (n * 100) + \x22%\x22;\x0a    }\x0a\x0a    return n;\x0a}\x0a\x0a// Converts a decimal to a hex value\x0afunction convertDecimalToHex(d) {\x0a    return Math.round(parseFloat(d) * 255).toString(16);\x0a}\x0a// Converts a hex value to a decimal\x0afunction convertHexToDecimal(h) {\x0a    return (parseIntFromHex(h) / 255);\x0a}\x0a\x0avar matchers = (function() {\x0a\x0a    // \x3chttp://www.w3.org/TR/css3-values/#integers\x3e\x0a    var CSS_INTEGER = \x22[-\x5c\x5c+]?\x5c\x5cd+%?\x22;\x0a\x0a    // \x3chttp://www.w3.org/TR/css3-values/#number-value\x3e\x0a    var CSS_NUMBER = \x22[-\x5c\x5c+]?\x5c\x5cd*\x5c\x5c.\x5c\x5cd+%?\x22;\x0a\x0a    // Allow positive/negative integer/number.  Don\x27t capture the either/or, just the entire outcome.\x0a    var CSS_UNIT = \x22(?:\x22 + CSS_NUMBER + \x22)|(?:\x22 + CSS_INTEGER + \x22)\x22;\x0a\x0a    // Actual matching.\x0a    // Parentheses and commas are optional, but not required.\x0a    // Whitespace can take the place of commas or opening paren\x0a    var PERMISSIVE_MATCH3 = \x22[\x5c\x5cs|\x5c\x5c(]+(\x22 + CSS_UNIT + \x22)[,|\x5c\x5cs]+(\x22 + CSS_UNIT + \x22)[,|\x5c\x5cs]+(\x22 + CSS_UNIT + \x22)\x5c\x5cs*\x5c\x5c)?\x22;\x0a    var PERMISSIVE_MATCH4 = \x22[\x5c\x5cs|\x5c\x5c(]+(\x22 + CSS_UNIT + \x22)[,|\x5c\x5cs]+(\x22 + CSS_UNIT + \x22)[,|\x5c\x5cs]+(\x22 + CSS_UNIT + \x22)[,|\x5c\x5cs]+(\x22 + CSS_UNIT + \x22)\x5c\x5cs*\x5c\x5c)?\x22;\x0a\x0a    return {\x0a        CSS_UNIT: new RegExp(CSS_UNIT),\x0a        rgb: new RegExp(\x22rgb\x22 + PERMISSIVE_MATCH3),\x0a        rgba: new RegExp(\x22rgba\x22 + PERMISSIVE_MATCH4),\x0a        hsl: new RegExp(\x22hsl\x22 + PERMISSIVE_MATCH3),\x0a        hsla: new RegExp(\x22hsla\x22 + PERMISSIVE_MATCH4),\x0a        hsv: new RegExp(\x22hsv\x22 + PERMISSIVE_MATCH3),\x0a        hsva: new RegExp(\x22hsva\x22 + PERMISSIVE_MATCH4),\x0a        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\x0a        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\x0a        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\x0a        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\x0a    };\x0a})();\x0a\x0a// `isValidCSSUnit`\x0a// Take in a single string / number and check to see if it looks like a CSS unit\x0a// (see `matchers` above for definition).\x0afunction isValidCSSUnit(color) {\x0a    return !!matchers.CSS_UNIT.exec(color);\x0a}\x0a\x0a// `stringInputToObject`\x0a// Permissive string parsing.  Take in a number of formats, and output an object\x0a// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\x0afunction stringInputToObject(color) {\x0a\x0a    color = color.replace(trimLeft,\x27\x27).replace(trimRight, \x27\x27).toLowerCase();\x0a    var named = false;\x0a    if (names[color]) {\x0a        color = names[color];\x0a        named = true;\x0a    }\x0a    else if (color == \x27transparent\x27) {\x0a        return { r: 0, g: 0, b: 0, a: 0, format: \x22name\x22 };\x0a    }\x0a\x0a    // Try to match string input using regular expressions.\x0a    // Keep most of the number bounding out oar\x91\x1a\x06'}