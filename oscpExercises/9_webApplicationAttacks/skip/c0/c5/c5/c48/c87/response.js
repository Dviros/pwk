var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:14 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Wed, 04 Sep 2019 17:23:52 GMT\x0aETag: \x22a5c-591bd78051a00-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1098/1099\x0aContent-Length: 1099\x0aKeep-Alive: timeout=5, max=12\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/wp-a11y.js\x0a */\x0a\x0a/** @namespace wp */\x0awindow.wp = window.wp || {};\x0a\x0a( function ( wp, $ ) {\x0a\x09\x27use strict\x27;\x0a\x0a\x09var $containerPolite,\x0a\x09\x09$containerAssertive,\x0a\x09\x09previousMessage = \x27\x27;\x0a\x0a\x09/**\x0a\x09 * Update the ARIA live notification area text node.\x0a\x09 *\x0a\x09 * @since 4.2.0\x0a\x09 * @since 4.3.0 Introduced the \x27ariaLive\x27 argument.\x0a\x09 *\x0a\x09 * @param {String} message    The message to be announced by Assistive Technologies.\x0a\x09 * @param {String} [ariaLive] The politeness level for aria-live. Possible values:\x0a\x09 *                            polite or assertive. Default polite.\x0a\x09 * @returns {void}\x0a\x09 */\x0a\x09function speak( message, ariaLive ) {\x0a\x09\x09// Clear previous messages to allow repeated strings being read out.\x0a\x09\x09clear();\x0a\x0a\x09\x09// Remove HTML tags, ensuring only text is sent to screen readers.\x0a\x09\x09message = wp.sanitize.stripTagsAndEncodeText( message );\x0a\x0a\x09\x09/*\x0a\x09\x09 * Safari 10+VoiceOver don\x27t announce repeated, identical strings. We use\x0a\x09\x09 * a `no-break space` to force them to think identical strings are different.\x0a\x09\x09 * See ticket #36853.\x0a\x09\x09 */\x0a\x09\x09if ( previousMessage === message ) {\x0a\x09\x09\x09message = message + \x27\x5cu00A0\x27;\x0a\x09\x09}\x0a\x0a\x09\x09previousMessage = message;\x0a\x0a\x09\x09if ( $containerAssertive && \x27assertive\x27 === ariaLive ) {\x0a\x09\x09\x09$containerAssertive.text( message );\x0a\x09\x09} else if ( $containerPolite ) {\x0a\x09\x09\x09$containerPolite.text( message );\x0a\x09\x09}\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Build the live regions markup.\x0a\x09 *\x0a\x09 * @since 4.3.0\x0a\x09 *\x0a\x09 * @param {String} ariaLive Optional. Value for the \x27aria-live\x27 attribute, default \x27polite\x27.\x0a\x09 *\x0a\x09 * @return {Object} $container The ARIA live region jQuery object.\x0a\x09 */\x0a\x09function addContainer( ariaLive ) {\x0a\x09\x09ariaLive = ariaLive || \x27polite\x27;\x0a\x0a\x09\x09var $container = $( \x27\x3cdiv\x3e\x27, {\x0a\x09\x09\x09\x27id\x27: \x27wp-a11y-speak-\x27 + ariaLive,\x0a\x09\x09\x09\x27aria-live\x27: ariaLive,\x0a\x09\x09\x09\x27aria-relevant\x27: \x27additions text\x27,\x0a\x09\x09\x09\x27aria-atomic\x27: \x27true\x27,\x0a\x09\x09\x09\x27class\x27: \x27screen-reader-text wp-a11y-speak-region\x27\x0a\x09\x09});\x0a\x0a\x09\x09$( document.body ).append( $container );\x0a\x09\x09return $container;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Clear the live regions.\x0a\x09 *\x0a\x09 * @since 4.3.0\x0a\x09 */\x0a\x09function clear() {\x0a\x09\x09$( \x27.wp-a11y-speak-region\x27 ).text( \x27\x27 );\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Initialize wp.a11y and define ARIA live notification area.\x0a\x09 *\x0a\x09 * @since 4.2.0\x0a\x09 * @since 4.3.0 Added the assertive live region.\x0a\x09 */\x0a\x09$( document ).ready( function() {\x0a\x09\x09$containerPolite = $( \x27#wp-a11y-speak-polite\x27 );\x0a\x09\x09$containerAssertive = $( \x27#wp-a11y-speak-assertive\x27 );\x0a\x0a\x09\x09if ( ! $containerPolite.length ) {\x0a\x09\x09\x09$containerPolite = addContainer( \x27polite\x27 );\x0a\x09\x09}\x0a\x0a\x09\x09if ( ! $containerAssertive.length ) {\x0a\x09\x09\x09$containerAssertive = addContainer( \x27assertive\x27 );\x0a\x09\x09}\x0a\x09});\x0a\x0a\x09/** @namespace wp.a11y */\x0a\x09wp.a11y = wp.a11y || {};\x0a\x09wp.a11y.speak = speak;\x0a\x0a}( window.wp, window.jQuery ));\x0a'}