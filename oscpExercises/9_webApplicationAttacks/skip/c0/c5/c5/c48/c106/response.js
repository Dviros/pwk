var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:10 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:35:44 GMT\x0aETag: \x2222d2-56faa96856000-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-3423/3424\x0aContent-Length: 3424\x0aKeep-Alive: timeout=5, max=78\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * wp-emoji.js is used to replace emoji with images in browsers when the browser\x0a * doesn\x27t support emoji natively.\x0a *\x0a * @output wp-includes/js/wp-emoji.js\x0a */\x0a\x0a( function( window, settings ) {\x0a\x09/**\x0a\x09 * Replaces emoji with images when browsers don\x27t support emoji.\x0a\x09 *\x0a\x09 * @since      4.2.0\x0a\x09 * @access     private\x0a\x09 *\x0a\x09 * @class\x0a\x09 *\x0a\x09 * @see  Twitter Emoji library\x0a\x09 * @link https://github.com/twitter/twemoji\x0a\x09 *\x0a\x09 * @return {Object} The wpEmoji parse and test functions.\x0a\x09 */\x0a\x09function wpEmoji() {\x0a\x09\x09var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver,\x0a\x0a\x09\x09// Compression and maintain local scope\x0a\x09\x09document = window.document,\x0a\x0a\x09\x09// Private\x0a\x09\x09twemoji, timer,\x0a\x09\x09loaded = false,\x0a\x09\x09count = 0,\x0a\x09\x09ie11 = window.navigator.userAgent.indexOf( \x27Trident/7.0\x27 ) \x3e 0;\x0a\x0a\x09\x09/**\x0a\x09\x09 * Detect if the browser supports SVG.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.6.0\x0a\x09\x09 * @private\x0a\x09\x09 *\x0a\x09\x09 * @see Modernizr\x0a\x09\x09 * @link https://github.com/Modernizr/Modernizr/blob/master/feature-detects/svg/asimg.js\x0a\x09\x09 *\x0a\x09\x09 * @return {boolean} True if the browser supports svg, false if not.\x0a\x09\x09 */\x0a\x09\x09function browserSupportsSvgAsImage() {\x0a\x09\x09\x09if ( !! document.implementation.hasFeature ) {\x0a\x09\x09\x09\x09return document.implementation.hasFeature( \x27http://www.w3.org/TR/SVG11/feature#Image\x27, \x271.1\x27 );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// document.implementation.hasFeature is deprecated. It can be presumed\x0a\x09\x09\x09// if future browsers remove it, the browser will support SVGs as images.\x0a\x09\x09\x09return true;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Runs when the document load event is fired, so we can do our first parse of\x0a\x09\x09 * the page.\x0a\x09\x09 *\x0a\x09\x09 * Listens to all the DOM mutations and checks for added nodes that contain\x0a\x09\x09 * emoji characters and replaces those with twitter emoji images.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.2.0\x0a\x09\x09 * @private\x0a\x09\x09 */\x0a\x09\x09function load() {\x0a\x09\x09\x09if ( loaded ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Ensure twemoji is available on the global window before proceeding.\x0a\x09\x09\x09if ( typeof window.twemoji === \x27undefined\x27 ) {\x0a\x09\x09\x09\x09// Break if waiting for longer than 30 sec.\x0a\x09\x09\x09\x09if ( count \x3e 600 ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Still waiting.\x0a\x09\x09\x09\x09window.clearTimeout( timer );\x0a\x09\x09\x09\x09timer = window.setTimeout( load, 50 );\x0a\x09\x09\x09\x09count++;\x0a\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09twemoji = window.twemoji;\x0a\x09\x09\x09loaded = true;\x0a\x0a\x09\x09\x09// Initialize the mutation observer, which checks all added nodes for\x0a\x09\x09\x09// replaceable emoji characters.\x0a\x09\x09\x09if ( MutationObserver ) {\x0a\x09\x09\x09\x09new MutationObserver( function( mutationRecords ) {\x0a\x09\x09\x09\x09\x09var i = mutationRecords.length,\x0a\x09\x09\x09\x09\x09\x09addedNodes, removedNodes, ii, node;\x0a\x0a\x09\x09\x09\x09\x09while ( i-- ) {\x0a\x09\x09\x09\x09\x09\x09addedNodes = mutationRecords[ i ].addedNodes;\x0a\x09\x09\x09\x09\x09\x09removedNodes = mutationRecords[ i ].removedNodes;\x0a\x09\x09\x09\x09\x09\x09ii = addedNodes.length;\x0a\x0a\x09\x09\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09\x09\x09 * Checks if an image has been replaced by a text element\x0a\x09\x09\x09\x09\x09\x09 * with the same text as the alternate description of the replaced image.\x0a\x09\x09\x09\x09\x09\x09 * (presumably because the image could not be loaded).\x0a\x09\x09\x09\x09\x09\x09 * If it is, do absolutely nothing.\x0a\x09\x09\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09\x09\x09 * Node type 3 is a TEXT_NODE.\x0a\x09\x09\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09\x09\x09 * @link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\x0a\x09\x09\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09\x09\x09if (\x0a\x09\x09\x09\x09\x09\x09\x09ii === 1 && removedNodes.length === 1 &&\x0a\x09\x09\x09\x09\x09\x09\x09addedNodes[0].nodeType === 3 &&\x0a\x09\x09\x09\x09\x09\x09\x09removedNodes[0].nodeName === \x27IMG\x27 &&\x0a\x09\x09\x09\x09\x09\x09\x09addedNodes[0].data === removedNodes[0].alt &&\x0a\x09\x09\x09\x09\x09\x09\x09\x27load-failed\x27 === removedNodes[0].getAttribute( \x27data-error\x27 )\x0a\x09\x09\x09\x09\x09\x09) {\x0a\x09\x09\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09// Loop through all the added nodes.\x0a\x09\x09\x09\x09\x09\x09while ( ii-- ) {\x0a\x09\x09\x09\x09\x09\x09\x09node = addedNodes[ ii ];\x0a\x0a\x09\x09\x09\x09\x09\x09\x09// Node type 3 is a TEXT_NODE.\x0a\x09\x09\x09\x09\x09\x09\x09if ( node.nodeType === 3 ) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09if ( ! node.parentNode ) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09continue;\x0a\x09\x09\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09\x09\x09if ( ie11 ) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 * IE 11\x27s implementation of MutationObserver is buggy.\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 * It unnecessarily splits text nodes when it encounters a HTML\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 * template interpolation symbol ( \x22{{\x22, for example ). So, we\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 * join the text nodes back together as a work-around.\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 * Node type 3 is a TEXT_NODE.\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09while( node.nextSibling && 3 === node.nextSibling.nodeType ) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09node.parentNode.removeChild( node.nextSibling );\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09\x09\x09node = node.parentNode;\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09\x09\x09\x09 * If the class name of a non-element node contains \x27wp-exclude-emoji\x27 ignore it.\x0a\x09\x09\x09\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09\x09\x09\x09 * Node type 1 is an ELEMENT_NODE.\x0a\x09\x09\x09\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09\x09\x09\x09if ( ! node || node.nodeType !== 1 ||\x0a\x09\x09\x09\x09\x09\x09\x09\x09( node.className && typeof node.className === \x27string\x27 && node.className.indexOf( \x27wp-exclude-emoji\x27 ) !== -1 ) ) {\x0a\x0a\x09\x09\x09\x09\x09\x09\x09\x09continue;\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09\x09if ( test( node.textContent ) ) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09parse( node );\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} ).observe( document.body, {\x0a\x09\x09\x09\x09\x09childList: true,\x0a\x09\x09\x09\x09\x09subtree: true\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09parse( document.body );\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Tests if a text string contains emoji characters.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.3.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.emoji\x0a\x09\x09 *\x0a\x09\x09 * @param {string} text The string to test.\x0a\x09\x09 *\x0a\x09\x09 * @return {boolean} Whether the string contains emoji characters.\x0a\x09\x09 */\x0a\x09\x09function test( text ) {\x0a\x09\x09\x09// Single char. U+20E3 to detect keycaps. U+00A9 \x22copyright sign\x22 and U+00AE \x22registered sign\x22 not included.\x0a\x09\x09\x09var single = /[\x5cu203C\x5cu2049\x5cu20E3\x5cu2122\x5cu2139\x5cu2194-\x5cu2199\x5cu21A9\x5cu21AA\x5cu2300\x5cu231A\x5cu231B\x5cu2328\x5cu2388\x5cu23CF\x5cu23E9-\x5cu23F3\x5cu23F8-\x5cu23FA\x5cu24C2\x5cu25AA\x5cu25AB\x5cu25B6\x5cu25C0\x5cu25FB-\x5cu25FE\x5cu2600-\x5cu2604\x5cu260E\x5cu2611\x5cu2614\x5cu2615\x5cu2618\x5cu261D\x5cu2620\x5cu2622\x5cu2623\x5cu2626\x5cu262A\x5cu262E\x5cu262F\x5cu2638\x5cu2639\x5cu263A\x5cu2648-\x5cu2653\x5cu2660\x5cu2663\x5cu2665\x5cu2666\x5cu2668\x5cu267B\x5cu267F\x5cu2692\x5cu2693\x5cu2694\x5cu2696\x5cu2697\x5cu2699\x5cu269B\x5cu269C\x5cu26A0\x5cu26A1\x5cu26AA\x5cu26AB\x5cu26B0\x5cu26B1\x5cu26BD\x5cu26BE\x5cu26C4\x5cu26C5\x5cu26C8\x5cu26CE\x5cu26CF\x5cu26D1\x5cu26D3\x5cu26D4\x5cu26E9\x5cu26EA\x5cu26F0-\x5cu26F5\x5cu26F7-\x5cu26FA\x5cu26FD\x5cu2702\x5cu2705\x5cu2708-\x5cu270D\x5cu270F\x5cu2712\x5cu2714\x5cu2716\x5cu271D\x5cu2721\x5cu2728\x5cu2733\x5cu2734\x5cu2744\x5cu2747\x5cu274C\x5cu274E\x5cu2753\x5cu2754\x5cu2755\x5cu2757\x5cu2763\x5cu2764\x5cu2795\x5cu2796\x5cu2797\x5cu27A1\x5cu27B0\x5cu27BF\x5cu2934\x5cu2935\x5cu2B05\x5cu2B06\x5cu2B07\x5cu2B1B\x5cu2B1C\x5cu2B50\x5cu2B55\x5cu3030\x5cu303D\x5cu3297\x5cu3299]/,\x0a\x09\x09\x09// Surrogate pair range. Only tests for the second half.\x0a\x09\x09\x09pair = /[\x5cuDC00-\x5cuDFFF]/;\x0a\x0a\x09\x09\x09if ( text ) {\x0a\x09\x09\x09\x09return  pair.test( text ) || single.test( text );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Parses any emoji characters into Twemoji images.\x0a\x09\x09 *\x0a\x09\x09 * - When passed an element the emoji characters are replaced inline.\x0a\x09\x09 * - When passed a string the emoji characters are replaced and the result is\x0a\x09\x09 *   returned.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.2.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.emoji\x0a\x09\x09 *\x0a\x09\x09 * @param {HTMLElement|string} object The element or string to parse.\x0a\x09\x09 * @param {Object}             args   Additional options for Twemoji.\x0a\x09\x09 *\x0a\x09\x09 * @return {HTMLElement|string} A string where all emoji are now image tags of\x0a\x09\x09 *                              emoji. Or the element that was passed as the first argument.\x0a\x09\x09 */\x0a\x09\x09function parse( object, args ) {\x0a\x09\x09\x09var params;\x0a\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * If the browser has full support, twemoji is not loaded or our\x0a\x09\x09\x09 * object is not what was expected, we do not parse anything.\x0a\x09\x09\x09 */\x0a\x09\x09\x09if ( settings.supports.everything || ! twemoji || ! object ||\x0a\x09\x09\x09\x09( \x27string\x27 !== typeof object && ( ! object.childNodes || ! object.childNodes.length ) ) ) {\x0a\x0a\x09\x09\x09\x09return object;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Compose the params for the twitter emoji library.\x0a\x09\x09\x09args = args || {};\x0a\x09\x09\x09params = {\x0a\x09\x09\x09\x09base: browserSupportsSvgAsImage() ? settings.svgUrl : settings.baseUrl,\x0a\x09\x09\x09\x09ext:  browserSupportsSvgAsImage() ? settings.svgExt : settings.ext,\x0a\x09\x09\x09\x09className: args.className || \x27emoji\x27,\x0a\x09\x09\x09\x09callback: function( icon, options ) {\x0a\x09\x09\x09\x09\x09// Ignore some standard characters that TinyMCE recommends in its character map.\x0a\x09\x09\x09\x09\x09switch ( icon ) {\x0a\x09\x09\x09\x09\x09\x09case \x27a9\x27:\x0a\x09\x09\x09\x09\x09\x09case \x27ae\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272122\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272194\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272660\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272663\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272665\x27:\x0a\x09\x09\x09\x09\x09\x09case \x272666\x27:\x0a\x09\x09\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if ( settings.supports.everythingExceptFlag &&\x0a\x09\x09\x09\x09\x09\x09! /^1f1(?:e[6-9a-f]|f[0-9a-f])-1f1(?:e[6-9a-f]|f[0-9a-f])$/.test( icon ) && // Country flags\x0a\x09\x09\x09\x09\x09\x09! /^(1f3f3-fe0f-200d-1f308|1f3f4-200d-2620-fe0f)$/.test( icon )             // Rainbow and pirate flags\x0a\x09\x09\x09\x09\x09) {\x0a\x09\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09return \x27\x27.concat( options.base, icon, options.ext );\x0a\x09\x09\x09\x09},\x0a\x09\x09\x09\x09onerror: function() {\x0a\x09\x09\x09\x09\x09if ( twemoji.parentNode ) {\x0a\x09\x09\x09\x09\x09\x09this.setAttribute( \x27data-error\x27, \x27load-failed\x27 );\x0a\x09\x09\x09\x09\x09\x09twemoji.parentNode.replaceChild( document.createTextNode( twemoji.alt ), twemoji );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if ( typeof args.imgAttr === \x27object\x27 ) {\x0a\x09\x09\x09\x09params.attributes = function() {\x0a\x09\x09\x09\x09\x09return args.imgAttr;\x0a\x09\x09\x09\x09};\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return twemoji.parse( object, params );\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Initialize our emoji support, and set up listeners.\x0a\x09\x09 */\x0a\x09\x09if ( settings ) {\x0a\x09\x09\x09if ( settings.DOMReady ) {\x0a\x09\x09\x09\x09load();\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09settings.readyCallback = load;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09return {\x0a\x09\x09\x09parse: parse,\x0a\x09\x09\x09test: test\x0a\x09\x09};\x0a\x09}\x0a\x0a\x09window.wp = window.wp || {};\x0a\x0a\x09/**\x0a\x09 * @namespace wp.emoji\x0a\x09 */\x0a\x09window.wp.emoji = new wpEmoji();\x0a\x0a} )( window, window._wpemojiSettings );\x0a'}