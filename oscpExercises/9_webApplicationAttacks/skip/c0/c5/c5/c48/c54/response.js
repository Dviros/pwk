var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:04:59 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Mon, 17 Dec 2018 19:28:51 GMT\x0aETag: \x225a7b-57d3cca69e2c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-6282/6283\x0aContent-Length: 6283\x0aKeep-Alive: timeout=5, max=33\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * Heartbeat API\x0a *\x0a * Heartbeat is a simple server polling API that sends XHR requests to\x0a * the server every 15 - 60 seconds and triggers events (or callbacks) upon\x0a * receiving data. Currently these \x27ticks\x27 handle transports for post locking,\x0a * login-expiration warnings, autosave, and related tasks while a user is logged in.\x0a *\x0a * Available PHP filters (in ajax-actions.php):\x0a * - heartbeat_received\x0a * - heartbeat_send\x0a * - heartbeat_tick\x0a * - heartbeat_nopriv_received\x0a * - heartbeat_nopriv_send\x0a * - heartbeat_nopriv_tick\x0a * @see wp_ajax_nopriv_heartbeat(), wp_ajax_heartbeat()\x0a *\x0a * Custom jQuery events:\x0a * - heartbeat-send\x0a * - heartbeat-tick\x0a * - heartbeat-error\x0a * - heartbeat-connection-lost\x0a * - heartbeat-connection-restored\x0a * - heartbeat-nonces-expired\x0a *\x0a * @since 3.6.0\x0a * @output wp-includes/js/heartbeat.js\x0a */\x0a\x0a( function( $, window, undefined ) {\x0a\x0a\x09/**\x0a\x09 * Constructs the Heartbeat API.\x0a\x09 *\x0a\x09 * @since 3.6.0\x0a\x09 *\x0a\x09 * @returns {Object} An instance of the Heartbeat class.\x0a\x09 * @constructor\x0a\x09 */\x0a\x09var Heartbeat = function() {\x0a\x09\x09var $document = $(document),\x0a\x09\x09\x09settings = {\x0a\x09\x09\x09\x09// Suspend/resume.\x0a\x09\x09\x09\x09suspend: false,\x0a\x0a\x09\x09\x09\x09// Whether suspending is enabled.\x0a\x09\x09\x09\x09suspendEnabled: true,\x0a\x0a\x09\x09\x09\x09// Current screen id, defaults to the JS global \x27pagenow\x27 when present\x0a\x09\x09\x09\x09// (in the admin) or \x27front\x27.\x0a\x09\x09\x09\x09screenId: \x27\x27,\x0a\x0a\x09\x09\x09\x09// XHR request URL, defaults to the JS global \x27ajaxurl\x27 when present.\x0a\x09\x09\x09\x09url: \x27\x27,\x0a\x0a\x09\x09\x09\x09// Timestamp, start of the last connection request.\x0a\x09\x09\x09\x09lastTick: 0,\x0a\x0a\x09\x09\x09\x09// Container for the enqueued items.\x0a\x09\x09\x09\x09queue: {},\x0a\x0a\x09\x09\x09\x09// Connect interval (in seconds).\x0a\x09\x09\x09\x09mainInterval: 60,\x0a\x0a\x09\x09\x09\x09// Used when the interval is set to 5 sec. temporarily.\x0a\x09\x09\x09\x09tempInterval: 0,\x0a\x0a\x09\x09\x09\x09// Used when the interval is reset.\x0a\x09\x09\x09\x09originalInterval: 0,\x0a\x0a\x09\x09\x09\x09// Used to limit the number of AJAX requests.\x0a\x09\x09\x09\x09minimalInterval: 0,\x0a\x0a\x09\x09\x09\x09// Used together with tempInterval.\x0a\x09\x09\x09\x09countdown: 0,\x0a\x0a\x09\x09\x09\x09// Whether a connection is currently in progress.\x0a\x09\x09\x09\x09connecting: false,\x0a\x0a\x09\x09\x09\x09// Whether a connection error occurred.\x0a\x09\x09\x09\x09connectionError: false,\x0a\x0a\x09\x09\x09\x09// Used to track non-critical errors.\x0a\x09\x09\x09\x09errorcount: 0,\x0a\x0a\x09\x09\x09\x09// Whether at least one connection has been completed successfully.\x0a\x09\x09\x09\x09hasConnected: false,\x0a\x0a\x09\x09\x09\x09// Whether the current browser window is in focus and the user is active.\x0a\x09\x09\x09\x09hasFocus: true,\x0a\x0a\x09\x09\x09\x09// Timestamp, last time the user was active. Checked every 30 sec.\x0a\x09\x09\x09\x09userActivity: 0,\x0a\x0a\x09\x09\x09\x09// Flag whether events tracking user activity were set.\x0a\x09\x09\x09\x09userActivityEvents: false,\x0a\x0a\x09\x09\x09\x09// Timer that keeps track of how long a user has focus.\x0a\x09\x09\x09\x09checkFocusTimer: 0,\x0a\x0a\x09\x09\x09\x09// Timer that keeps track of how long needs to be waited before connecting to\x0a\x09\x09\x09\x09// the server again.\x0a\x09\x09\x09\x09beatTimer: 0\x0a\x09\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets local variables and events, then starts the heartbeat.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function initialize() {\x0a\x09\x09\x09var options, hidden, visibilityState, visibilitychange;\x0a\x0a\x09\x09\x09if ( typeof window.pagenow === \x27string\x27 ) {\x0a\x09\x09\x09\x09settings.screenId = window.pagenow;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( typeof window.ajaxurl === \x27string\x27 ) {\x0a\x09\x09\x09\x09settings.url = window.ajaxurl;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Pull in options passed from PHP.\x0a\x09\x09\x09if ( typeof window.heartbeatSettings === \x27object\x27 ) {\x0a\x09\x09\x09\x09options = window.heartbeatSettings;\x0a\x0a\x09\x09\x09\x09// The XHR URL can be passed as option when window.ajaxurl is not set.\x0a\x09\x09\x09\x09if ( ! settings.url && options.ajaxurl ) {\x0a\x09\x09\x09\x09\x09settings.url = options.ajaxurl;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * The interval can be from 15 to 120 sec. and can be set temporarily to 5 sec.\x0a\x09\x09\x09\x09 * It can be set in the initial options or changed later through JS and/or\x0a\x09\x09\x09\x09 * through PHP.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09if ( options.interval ) {\x0a\x09\x09\x09\x09\x09settings.mainInterval = options.interval;\x0a\x0a\x09\x09\x09\x09\x09if ( settings.mainInterval \x3c 15 ) {\x0a\x09\x09\x09\x09\x09\x09settings.mainInterval = 15;\x0a\x09\x09\x09\x09\x09} else if ( settings.mainInterval \x3e 120 ) {\x0a\x09\x09\x09\x09\x09\x09settings.mainInterval = 120;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Used to limit the number of AJAX requests. Overrides all other intervals if\x0a\x09\x09\x09\x09 * they are shorter. Needed for some hosts that cannot handle frequent requests\x0a\x09\x09\x09\x09 * and the user may exceed the allocated server CPU time, etc. The minimal\x0a\x09\x09\x09\x09 * interval can be up to 600 sec. however setting it to longer than 120 sec.\x0a\x09\x09\x09\x09 * will limit or disable some of the functionality (like post locks). Once set\x0a\x09\x09\x09\x09 * at initialization, minimalInterval cannot be changed/overridden.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09if ( options.minimalInterval ) {\x0a\x09\x09\x09\x09\x09options.minimalInterval = parseInt( options.minimalInterval, 10 );\x0a\x09\x09\x09\x09\x09settings.minimalInterval = options.minimalInterval \x3e 0 && options.minimalInterval \x3c= 600 ? options.minimalInterval * 1000 : 0;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( settings.minimalInterval && settings.mainInterval \x3c settings.minimalInterval ) {\x0a\x09\x09\x09\x09\x09settings.mainInterval = settings.minimalInterval;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// \x27screenId\x27 can be added from settings on the front end where the JS global\x0a\x09\x09\x09\x09// \x27pagenow\x27 is not set.\x0a\x09\x09\x09\x09if ( ! settings.screenId ) {\x0a\x09\x09\x09\x09\x09settings.screenId = options.screenId || \x27front\x27;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( options.suspension === \x27disable\x27 ) {\x0a\x09\x09\x09\x09\x09settings.suspendEnabled = false;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Convert to milliseconds.\x0a\x09\x09\x09settings.mainInterval = settings.mainInterval * 1000;\x0a\x09\x09\x09settings.originalInterval = settings.mainInterval;\x0a\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * Switch the interval to 120 seconds by using the Page Visibility API.\x0a\x09\x09\x09 * If the browser doesn\x27t support it (Safari \x3c 7, Android \x3c 4.4, IE \x3c 10), the\x0a\x09\x09\x09 * interval will be increased to 120 seconds after 5 minutes of mouse and keyboard\x0a\x09\x09\x09 * inactivity.\x0a\x09\x09\x09 */\x0a\x09\x09\x09if ( typeof document.hidden !== \x27undefined\x27 ) {\x0a\x09\x09\x09\x09hidden = \x27hidden\x27;\x0a\x09\x09\x09\x09visibilitychange = \x27visibilitychange\x27;\x0a\x09\x09\x09\x09visibilityState = \x27visibilityState\x27;\x0a\x09\x09\x09} else if ( typeof document.msHidden !== \x27undefined\x27 ) { // IE10\x0a\x09\x09\x09\x09hidden = \x27msHidden\x27;\x0a\x09\x09\x09\x09visibilitychange = \x27msvisibilitychange\x27;\x0a\x09\x09\x09\x09visibilityState = \x27msVisibilityState\x27;\x0a\x09\x09\x09} else if ( typeof document.webkitHidden !== \x27undefined\x27 ) { // Android\x0a\x09\x09\x09\x09hidden = \x27webkitHidden\x27;\x0a\x09\x09\x09\x09visibilitychange = \x27webkitvisibilitychange\x27;\x0a\x09\x09\x09\x09visibilityState = \x27webkitVisibilityState\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( hidden ) {\x0a\x09\x09\x09\x09if ( document[hidden] ) {\x0a\x09\x09\x09\x09\x09settings.hasFocus = false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$document.on( visibilitychange + \x27.wp-heartbeat\x27, function() {\x0a\x09\x09\x09\x09\x09if ( document[visibilityState] === \x27hidden\x27 ) {\x0a\x09\x09\x09\x09\x09\x09blurred();\x0a\x09\x09\x09\x09\x09\x09window.clearInterval( settings.checkFocusTimer );\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09focused();\x0a\x09\x09\x09\x09\x09\x09if ( document.hasFocus ) {\x0a\x09\x09\x09\x09\x09\x09\x09settings.checkFocusTimer = window.setInterval( checkFocus, 10000 );\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Use document.hasFocus() if available.\x0a\x09\x09\x09if ( document.hasFocus ) {\x0a\x09\x09\x09\x09settings.checkFocusTimer = window.setInterval( checkFocus, 10000 );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09$(window).on( \x27unload.wp-heartbeat\x27, function() {\x0a\x09\x09\x09\x09// Don\x27t connect anymore.\x0a\x09\x09\x09\x09settings.suspend = true;\x0a\x0a\x09\x09\x09\x09// Abort the last request if not completed.\x0a\x09\x09\x09\x09if ( settings.xhr && settings.xhr.readyState !== 4 ) {\x0a\x09\x09\x09\x09\x09settings.xhr.abort();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09// Check for user activity every 30 seconds.\x0a\x09\x09\x09window.setInterval( checkUserActivity, 30000 );\x0a\x0a\x09\x09\x09// Start one tick after DOM ready.\x0a\x09\x09\x09$document.ready( function() {\x0a\x09\x09\x09\x09settings.lastTick = time();\x0a\x09\x09\x09\x09scheduleNextTick();\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Returns the current time according to the browser.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {number} Returns the current time.\x0a\x09\x09 */\x0a\x09\x09function time() {\x0a\x09\x09\x09return (new Date()).getTime();\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks if the iframe is from the same origin.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean} Returns whether or not the iframe is from the same origin.\x0a\x09\x09 */\x0a\x09\x09function isLocalFrame( frame ) {\x0a\x09\x09\x09var origin, src = frame.src;\x0a\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * Need to compare strings as WebKit doesn\x27t throw JS errors when iframes have\x0a\x09\x09\x09 * different origin. It throws uncatchable exceptions.\x0a\x09\x09\x09 */\x0a\x09\x09\x09if ( src && /^https?:\x5c/\x5c//.test( src ) ) {\x0a\x09\x09\x09\x09origin = window.location.origin ? window.location.origin : window.location.protocol + \x27//\x27 + window.location.host;\x0a\x0a\x09\x09\x09\x09if ( src.indexOf( origin ) !== 0 ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09try {\x0a\x09\x09\x09\x09if ( frame.contentWindow.document ) {\x0a\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} catch(e) {}\x0a\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks if the document\x27s focus has changed.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 4.1.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function checkFocus() {\x0a\x09\x09\x09if ( settings.hasFocus && ! document.hasFocus() ) {\x0a\x09\x09\x09\x09blurred();\x0a\x09\x09\x09} else if ( ! settings.hasFocus && document.hasFocus() ) {\x0a\x09\x09\x09\x09focused();\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets error state and fires an event on XHR errors or timeout.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} error  The error type passed from the XHR.\x0a\x09\x09 * @param {number} status The HTTP status code passed from jqXHR\x0a\x09\x09 *                        (200, 404, 500, etc.).\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function setErrorState( error, status ) {\x0a\x09\x09\x09var trigger;\x0a\x0a\x09\x09\x09if ( error ) {\x0a\x09\x09\x09\x09switch ( error ) {\x0a\x09\x09\x09\x09\x09case \x27abort\x27:\x0a\x09\x09\x09\x09\x09\x09// Do nothing.\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case \x27timeout\x27:\x0a\x09\x09\x09\x09\x09\x09// No response for 30 sec.\x0a\x09\x09\x09\x09\x09\x09trigger = true;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case \x27error\x27:\x0a\x09\x09\x09\x09\x09\x09if ( 503 === status && settings.hasConnected ) {\x0a\x09\x09\x09\x09\x09\x09\x09trigger = true;\x0a\x09\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09/* falls through */\x0a\x09\x09\x09\x09\x09case \x27parsererror\x27:\x0a\x09\x09\x09\x09\x09case \x27empty\x27:\x0a\x09\x09\x09\x09\x09case \x27unknown\x27:\x0a\x09\x09\x09\x09\x09\x09settings.errorcount++;\x0a\x0a\x09\x09\x09\x09\x09\x09if ( settings.errorcount \x3e 2 && settings.hasConnected ) {\x0a\x09\x09\x09\x09\x09\x09\x09trigger = true;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( trigger && ! hasConnectionError() ) {\x0a\x09\x09\x09\x09\x09settings.connectionError = true;\x0a\x09\x09\x09\x09\x09$document.trigger( \x27heartbeat-connection-lost\x27, [error, status] );\x0a\x09\x09\x09\x09\x09wp.hooks.doAction( \x27heartbeat.connection-lost\x27, error, status );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Clears the error state and fires an event if there is a connection error.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function clearErrorState() {\x0a\x09\x09\x09// Has connected successfully.\x0a\x09\x09\x09settings.hasConnected = true;\x0a\x0a\x09\x09\x09if ( hasConnectionError() ) {\x0a\x09\x09\x09\x09settings.errorcount = 0;\x0a\x09\x09\x09\x09settings.connectionError = false;\x0a\x09\x09\x09\x09$document.trigger( \x27heartbeat-connection-restored\x27 );\x0a\x09\x09\x09\x09wp.hooks.doAction( \x27heartbeat.connection-restored\x27 );\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gathers the data and connects to the server.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function connect() {\x0a\x09\x09\x09var ajaxData, heartbeatData;\x0a\x0a\x09\x09\x09// If the connection to the server is slower than the interval,\x0a\x09\x09\x09// heartbeat connects as soon as the previous connection\x27s response is received.\x0a\x09\x09\x09if ( settings.connecting || settings.suspend ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09settings.lastTick = time();\x0a\x0a\x09\x09\x09heartbeatData = $.extend( {}, settings.queue );\x0a\x09\x09\x09// Clear the data queue. Anything added after this point will be sent on the next tick.\x0a\x09\x09\x09settings.queue = {};\x0a\x0a\x09\x09\x09$document.trigger( \x27heartbeat-send\x27, [ heartbeatData ] );\x0a\x09\x09\x09wp.hooks.doAction( \x27heartbeat.send\x27, heartbeatData );\x0a\x0a\x09\x09\x09ajaxData = {\x0a\x09\x09\x09\x09data: heartbeatData,\x0a\x09\x09\x09\x09interval: settings.tempInterval ? settings.tempInterval / 1000 : settings.mainInterval / 1000,\x0a\x09\x09\x09\x09_nonce: typeof window.heartbeatSettings === \x27object\x27 ? window.heartbeatSettings.nonce : \x27\x27,\x0a\x09\x09\x09\x09action: \x27heartbeat\x27,\x0a\x09\x09\x09\x09screen_id: settings.screenId,\x0a\x09\x09\x09\x09has_focus: settings.hasFocus\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if ( \x27customize\x27 === settings.screenId  ) {\x0a\x09\x09\x09\x09ajaxData.wp_customize = \x27on\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09settings.connecting = true;\x0a\x09\x09\x09settings.xhr = $.ajax({\x0a\x09\x09\x09\x09url: settings.url,\x0a\x09\x09\x09\x09type: \x27post\x27,\x0a\x09\x09\x09\x09timeout: 30000, // throw an error if not completed after 30 sec.\x0a\x09\x09\x09\x09data: ajaxData,\x0a\x09\x09\x09\x09dataType: \x27json\x27\x0a\x09\x09\x09}).always( function() {\x0a\x09\x09\x09\x09settings.connecting = false;\x0a\x09\x09\x09\x09scheduleNextTick();\x0a\x09\x09\x09}).done( function( response, textStatus, jqXHR ) {\x0a\x09\x09\x09\x09var newInterval;\x0a\x0a\x09\x09\x09\x09if ( ! response ) {\x0a\x09\x09\x09\x09\x09setErrorState( \x27empty\x27 );\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09clearErrorState();\x0a\x0a\x09\x09\x09\x09if ( response.nonces_expired ) {\x0a\x09\x09\x09\x09\x09$document.trigger( \x27heartbeat-nonces-expired\x27 );\x0a\x09\x09\x09\x09\x09wp.hooks.doAction( \x27heartbeat.nonces-expired\x27 );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Change the interval from PHP\x0a\x09\x09\x09\x09if ( response.heartbeat_interval ) {\x0a\x09\x09\x09\x09\x09newInterval = response.heartbeat_interval;\x0a\x09\x09\x09\x09\x09delete response.heartbeat_interval;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Update the heartbeat nonce if set.\x0a\x09\x09\x09\x09if ( response.heartbeat_nonce && typeof window.heartbeatSettings === \x27object\x27 ) {\x0a\x09\x09\x09\x09\x09window.heartbeatSettings.nonce = response.heartbeat_nonce;\x0a\x09\x09\x09\x09\x09delete response.heartbeat_nonce;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Update the Rest API nonce if set and wp-api loaded.\x0a\x09\x09\x09\x09if ( response.rest_nonce && typeof window.wpApiSettings === \x27object\x27 ) {\x0a\x09\x09\x09\x09\x09window.wpApiSettings.nonce = response.rest_nonce;\x0a\x09\x09\x09\x09\x09// This nonce is required for api-fetch through heartbeat.tick.\x0a\x09\x09\x09\x09\x09// delete response.rest_nonce;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09$document.trigger( \x27heartbeat-tick\x27, [response, textStatus, jqXHR] );\x0a\x09\x09\x09\x09wp.hooks.doAction( \x27heartbeat.tick\x27, response, textStatus, jqXHR );\x0a\x0a\x09\x09\x09\x09// Do this last. Can trigger the next XHR if connection time \x3e 5 sec. and newInterval == \x27fast\x27.\x0a\x09\x09\x09\x09if ( newInterval ) {\x0a\x09\x09\x09\x09\x09interval( newInterval );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}).fail( function( jqXHR, textStatus, error ) {\x0a\x09\x09\x09\x09setErrorState( textStatus || \x27unknown\x27, jqXHR.status );\x0a\x09\x09\x09\x09$document.trigger( \x27heartbeat-error\x27, [jqXHR, textStatus, error] );\x0a\x09\x09\x09\x09wp.hooks.doAction( \x27heartbeat.error\x27, jqXHR, textStatus, error );\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Schedules the next connection.\x0a\x09\x09 *\x0a\x09\x09 * Fires immediately if the connection time is longer than the interval.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function scheduleNextTick() {\x0a\x09\x09\x09var delta = time() - settings.lastTick,\x0a\x09\x09\x09\x09interval = settings.mainInterval;\x0a\x0a\x09\x09\x09if ( settings.suspend ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( ! settings.hasFocus ) {\x0a\x09\x09\x09\x09interval = 120000; // 120 sec. Post locks expire after 150 sec.\x0a\x09\x09\x09} else if ( settings.countdown \x3e 0 && settings.tempInterval ) {\x0a\x09\x09\x09\x09interval = settings.tempInterval;\x0a\x09\x09\x09\x09settings.countdown--;\x0a\x0a\x09\x09\x09\x09if ( settings.countdown \x3c 1 ) {\x0a\x09\x09\x09\x09\x09settings.tempInterval = 0;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( settings.minimalInterval && interval \x3c settings.minimalInterval ) {\x0a\x09\x09\x09\x09interval = settings.minimalInterval;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09window.clearTimeout( settings.beatTimer );\x0a\x0a\x09\x09\x09if ( delta \x3c interval ) {\x0a\x09\x09\x09\x09settings.beatTimer = window.setTimeout(\x0a\x09\x09\x09\x09\x09function() {\x0a\x09\x09\x09\x09\x09\x09connect();\x0a\x09\x09\x09\x09\x09},\x0a\x09\x09\x09\x09\x09interval - delta\x0a\x09\x09\x09\x09);\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09connect();\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets the internal state when the browser window becomes hidden or loses focus.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function blurred() {\x0a\x09\x09\x09settings.hasFocus = false;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Sets the internal state when the browser window becomes visible or is in focus.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function focused() {\x0a\x09\x09\x09settings.userActivity = time();\x0a\x0a\x09\x09\x09// Resume if suspended\x0a\x09\x09\x09settings.suspend = false;\x0a\x0a\x09\x09\x09if ( ! settings.hasFocus ) {\x0a\x09\x09\x09\x09settings.hasFocus = true;\x0a\x09\x09\x09\x09scheduleNextTick();\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Runs when the user becomes active after a period of inactivity.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function userIsActive() {\x0a\x09\x09\x09settings.userActivityEvents = false;\x0a\x09\x09\x09$document.off( \x27.wp-heartbeat-active\x27 );\x0a\x0a\x09\x09\x09$(\x27iframe\x27).each( function( i, frame ) {\x0a\x09\x09\x09\x09if ( isLocalFrame( frame ) ) {\x0a\x09\x09\x09\x09\x09$( frame.contentWindow ).off( \x27.wp-heartbeat-active\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09focused();\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks for user activity.\x0a\x09\x09 *\x0a\x09\x09 * Runs every 30 sec. Sets \x27hasFocus = true\x27 if user is active and the window is\x0a\x09\x09 * in the background. Sets \x27hasFocus = false\x27 if the user has been inactive\x0a\x09\x09 * (no mouse or keyboard activity) for 5 min. even when the window has focus.\x0a\x09\x09 *\x0a\x09\x09 * @access private\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function checkUserActivity() {\x0a\x09\x09\x09var lastActive = settings.userActivity ? time() - settings.userActivity : 0;\x0a\x0a\x09\x09\x09// Throttle down when no mouse or keyboard activity for 5 min.\x0a\x09\x09\x09if ( lastActive \x3e 300000 && settings.hasFocus ) {\x0a\x09\x09\x09\x09blurred();\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Suspend after 10 min. of inactivity when suspending is enabled.\x0a\x09\x09\x09// Always suspend after 60 min. of inactivity. This will release the post lock, etc.\x0a\x09\x09\x09if ( ( settings.suspendEnabled && lastActive \x3e 600000 ) || lastActive \x3e 3600000 ) {\x0a\x09\x09\x09\x09settings.suspend = true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( ! settings.userActivityEvents ) {\x0a\x09\x09\x09\x09$document.on( \x27mouseover.wp-heartbeat-active keyup.wp-heartbeat-active touchend.wp-heartbeat-active\x27, function() {\x0a\x09\x09\x09\x09\x09userIsActive();\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09$(\x27iframe\x27).each( function( i, frame ) {\x0a\x09\x09\x09\x09\x09if ( isLocalFrame( frame ) ) {\x0a\x09\x09\x09\x09\x09\x09$( frame.contentWindow ).on( \x27mouseover.wp-heartbeat-active keyup.wp-heartbeat-active touchend.wp-heartbeat-active\x27, function() {\x0a\x09\x09\x09\x09\x09\x09\x09userIsActive();\x0a\x09\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09settings.userActivityEvents = true;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09// Public methods.\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks whether the window (or any local iframe in it) has focus, or the user\x0a\x09\x09 * is active.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean} True if the window or the user is active.\x0a\x09\x09 */\x0a\x09\x09function hasFocus() {\x0a\x09\x09\x09return settings.hasFocus;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks whether there is a connection error.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean} True if a connection error was found.\x0a\x09\x09 */\x0a\x09\x09function hasConnectionError() {\x0a\x09\x09\x09return settings.connectionError;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Connects as soon as possible regardless of \x27hasFocus\x27 state.\x0a\x09\x09 *\x0a\x09\x09 * Will not open two concurrent connections. If a connection is in progress,\x0a\x09\x09 * will connect again immediately after the current connection completes.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function connectNow() {\x0a\x09\x09\x09settings.lastTick = 0;\x0a\x09\x09\x09scheduleNextTick();\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Disables suspending.\x0a\x09\x09 *\x0a\x09\x09 * Should be used only when Heartbeat is performing critical tasks like\x0a\x09\x09 * autosave, post-locking, etc. Using this on many screens may overload the\x0a\x09\x09 * user\x27s hosting account if several browser windows/tabs are left open for a\x0a\x09\x09 * long time.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.8.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function disableSuspend() {\x0a\x09\x09\x09settings.suspendEnabled = false;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets/Sets the interval.\x0a\x09\x09 *\x0a\x09\x09 * When setting to \x27fast\x27 or 5, the interval is 5 seconds for the next 30 ticks\x0a\x09\x09 * (for 2 minutes and 30 seconds) by default. In this case the number of \x27ticks\x27\x0a\x09\x09 * can be passed as second argument. If the window doesn\x27t have focus, the\x0a\x09\x09 * interval slows down to 2 min.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @param {string|number} speed Interval: \x27fast\x27 or 5, 15, 30, 60, 120. Fast\x0a\x09\x09 *                              equals 5.\x0a\x09\x09 * @param {string}        ticks Tells how many ticks before the interval reverts\x0a\x09\x09 *                              back. Used with speed = \x27fast\x27 or 5.\x0a\x09\x09 *\x0a\x09\x09 * @returns {number} Current interval in seconds.\x0a\x09\x09 */\x0a\x09\x09function interval( speed, ticks ) {\x0a\x09\x09\x09var newInterval,\x0a\x09\x09\x09\x09oldInterval = settings.tempInterval ? settings.tempInterval : settings.mainInterval;\x0a\x0a\x09\x09\x09if ( speed ) {\x0a\x09\x09\x09\x09switch ( speed ) {\x0a\x09\x09\x09\x09\x09case \x27fast\x27:\x0a\x09\x09\x09\x09\x09case 5:\x0a\x09\x09\x09\x09\x09\x09newInterval = 5000;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case 15:\x0a\x09\x09\x09\x09\x09\x09newInterval = 15000;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case 30:\x0a\x09\x09\x09\x09\x09\x09newInterval = 30000;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case 60:\x0a\x09\x09\x09\x09\x09\x09newInterval = 60000;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case 120:\x0a\x09\x09\x09\x09\x09\x09newInterval = 120000;\x0a\x09\x09\x09\x09\x09\x09break;\x0a\x09\x09\x09\x09\x09case \x27long-polling\x27:\x0a\x09\x09\x09\x09\x09\x09// Allow long polling, (experimental)\x0a\x09\x09\x09\x09\x09\x09settings.mainInterval = 0;\x0a\x09\x09\x09\x09\x09\x09return 0;\x0a\x09\x09\x09\x09\x09default:\x0a\x09\x09\x09\x09\x09\x09newInterval = settings.originalInterval;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( settings.minimalInterval && newInterval \x3c settings.minimalInterval ) {\x0a\x09\x09\x09\x09\x09newInterval = settings.minimalInterval;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( 5000 === newInterval ) {\x0a\x09\x09\x09\x09\x09ticks = parseInt( ticks, 10 ) || 30;\x0a\x09\x09\x09\x09\x09ticks = ticks \x3c 1 || ticks \x3e 30 ? 30 : ticks;\x0a\x0a\x09\x09\x09\x09\x09settings.countdown = ticks;\x0a\x09\x09\x09\x09\x09settings.tempInterval = newInterval;\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09settings.countdown = 0;\x0a\x09\x09\x09\x09\x09settings.tempInterval = 0;\x0a\x09\x09\x09\x09\x09settings.mainInterval = newInterval;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// Change the next connection time if new interval has been set.\x0a\x09\x09\x09\x09// Will connect immediately if the time since the last connection\x0a\x09\x09\x09\x09// is greater than the new interval.\x0a\x09\x09\x09\x09if ( newInterval !== oldInterval ) {\x0a\x09\x09\x09\x09\x09scheduleNextTick();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return settings.tempInterval ? settings.tempInterval / 1000 : settings.mainInterval / 1000;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Enqueues data to send with the next XHR.\x0a\x09\x09 *\x0a\x09\x09 * As the data is send asynchronously, this function doesn\x27t return the XHR\x0a\x09\x09 * response. To see the response, use the custom jQuery event \x27heartbeat-tick\x27\x0a\x09\x09 * on the document, example:\x0a\x09\x09 *\x09\x09$(document).on( \x27heartbeat-tick.myname\x27, function( event, data, textStatus, jqXHR ) {\x0a\x09\x09 *\x09\x09\x09// code\x0a\x09\x09 *\x09\x09});\x0a\x09\x09 * If the same \x27handle\x27 is used more than once, the data is not overwritten when\x0a\x09\x09 * the third argument is \x27true\x27. Use `wp.heartbeat.isQueued(\x27handle\x27)` to see if\x0a\x09\x09 * any data is already queued for that handle.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @param {string}  handle      Unique handle for the data, used in PHP to\x0a\x09\x09 *                              receive the data.\x0a\x09\x09 * @param {*}       data        The data to send.\x0a\x09\x09 * @param {boolean} noOverwrite Whether to overwrite existing data in the queue.\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean} True if the data was queued.\x0a\x09\x09 */\x0a\x09\x09function enqueue( handle, data, noOverwrite ) {\x0a\x09\x09\x09if ( handle ) {\x0a\x09\x09\x09\x09if ( noOverwrite && this.isQueued( handle ) ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09settings.queue[handle] = data;\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Checks if data with a particular handle is queued.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} handle The handle for the data.\x0a\x09\x09 *\x0a\x09\x09 * @returns {boolean} True if the data is queued with this handle.\x0a\x09\x09 */\x0a\x09\x09function isQueued( handle ) {\x0a\x09\x09\x09if ( handle ) {\x0a\x09\x09\x09\x09return settings.queue.hasOwnProperty( handle );\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Removes data with a particular handle from the queue.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.7.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @param {string} handle The handle for the data.\x0a\x09\x09 *\x0a\x09\x09 * @returns {void}\x0a\x09\x09 */\x0a\x09\x09function dequeue( handle ) {\x0a\x09\x09\x09if ( handle ) {\x0a\x09\x09\x09\x09delete settings.queue[handle];\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09/**\x0a\x09\x09 * Gets data that was enqueued with a particular handle.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.7.0\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.heartbeat.prototype\x0a\x09\x09 *\x0a\x09\x09 * @param {string} handle The handle for the data.\x0a\x09\x09 *\x0a\x09\x09 * @returns {*} The data or undefined.\x0a\x09\x09 */\x0a\x09\x09function getQueuedItem( handle ) {\x0a\x09\x09\x09if ( handle ) {\x0a\x09\x09\x09\x09return this.isQueued( handle ) ? settings.queue[handle] : undefined;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09initialize();\x0a\x0a\x09\x09// Expose public methods.\x0a\x09\x09return {\x0a\x09\x09\x09hasFocus: hasFocus,\x0a\x09\x09\x09connectNow: connectNow,\x0a\x09\x09\x09disableSuspend: disableSuspend,\x0a\x09\x09\x09interval: interval,\x0a\x09\x09\x09hasConnectionError: hasConnectionError,\x0a\x09\x09\x09enqueue: enqueue,\x0a\x09\x09\x09dequeue: dequeue,\x0a\x09\x09\x09isQueued: isQueued,\x0a\x09\x09\x09getQueuedItem: getQueuedItem\x0a\x09\x09};\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Ensure the global `wp` object exists.\x0a\x09 *\x0a\x09 * @namespace wp\x0a\x09 */\x0a\x09window.wp = window.wp || {};\x0a\x0a\x09/**\x0a\x09 * Contains the Heartbeat API.\x0a\x09 *\x0a\x09 * @namespace wp.heartbeat\x0a\x09 * @type {Heartbeat}\x0a\x09 */\x0a\x09window.wp.heartbeat = new Heartbeat();\x0a\x0a}( jQuery, window ));\x0a'}