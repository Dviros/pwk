var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:00:01 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 13 Dec 2018 17:27:38 GMT\x0aETag: \x22b173-57ceaa18b3680-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-11305/11306\x0aContent-Length: 11306\x0aKeep-Alive: timeout=5, max=23\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/******/ (function(modules) { // webpackBootstrap\x0a/******/ \x09// The module cache\x0a/******/ \x09var installedModules = {};\x0a/******/\x0a/******/ \x09// The require function\x0a/******/ \x09function __webpack_require__(moduleId) {\x0a/******/\x0a/******/ \x09\x09// Check if module is in cache\x0a/******/ \x09\x09if(installedModules[moduleId]) {\x0a/******/ \x09\x09\x09return installedModules[moduleId].exports;\x0a/******/ \x09\x09}\x0a/******/ \x09\x09// Create a new module (and put it into the cache)\x0a/******/ \x09\x09var module = installedModules[moduleId] = {\x0a/******/ \x09\x09\x09i: moduleId,\x0a/******/ \x09\x09\x09l: false,\x0a/******/ \x09\x09\x09exports: {}\x0a/******/ \x09\x09};\x0a/******/\x0a/******/ \x09\x09// Execute the module function\x0a/******/ \x09\x09modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\x0a/******/\x0a/******/ \x09\x09// Flag the module as loaded\x0a/******/ \x09\x09module.l = true;\x0a/******/\x0a/******/ \x09\x09// Return the exports of the module\x0a/******/ \x09\x09return module.exports;\x0a/******/ \x09}\x0a/******/\x0a/******/\x0a/******/ \x09// expose the modules object (__webpack_modules__)\x0a/******/ \x09__webpack_require__.m = modules;\x0a/******/\x0a/******/ \x09// expose the module cache\x0a/******/ \x09__webpack_require__.c = installedModules;\x0a/******/\x0a/******/ \x09// define getter function for harmony exports\x0a/******/ \x09__webpack_require__.d = function(exports, name, getter) {\x0a/******/ \x09\x09if(!__webpack_require__.o(exports, name)) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, name, { enumerable: true, get: getter });\x0a/******/ \x09\x09}\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// define __esModule on exports\x0a/******/ \x09__webpack_require__.r = function(exports) {\x0a/******/ \x09\x09if(typeof Symbol !== \x27undefined\x27 && Symbol.toStringTag) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, Symbol.toStringTag, { value: \x27Module\x27 });\x0a/******/ \x09\x09}\x0a/******/ \x09\x09Object.defineProperty(exports, \x27__esModule\x27, { value: true });\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// create a fake namespace object\x0a/******/ \x09// mode & 1: value is a module id, require it\x0a/******/ \x09// mode & 2: merge all properties of value into the ns\x0a/******/ \x09// mode & 4: return value when already ns object\x0a/******/ \x09// mode & 8|1: behave like require\x0a/******/ \x09__webpack_require__.t = function(value, mode) {\x0a/******/ \x09\x09if(mode & 1) value = __webpack_require__(value);\x0a/******/ \x09\x09if(mode & 8) return value;\x0a/******/ \x09\x09if((mode & 4) && typeof value === \x27object\x27 && value && value.__esModule) return value;\x0a/******/ \x09\x09var ns = Object.create(null);\x0a/******/ \x09\x09__webpack_require__.r(ns);\x0a/******/ \x09\x09Object.defineProperty(ns, \x27default\x27, { enumerable: true, value: value });\x0a/******/ \x09\x09if(mode & 2 && typeof value != \x27string\x27) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\x0a/******/ \x09\x09return ns;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// getDefaultExport function for compatibility with non-harmony modules\x0a/******/ \x09__webpack_require__.n = function(module) {\x0a/******/ \x09\x09var getter = module && module.__esModule ?\x0a/******/ \x09\x09\x09function getDefault() { return module[\x27default\x27]; } :\x0a/******/ \x09\x09\x09function getModuleExports() { return module; };\x0a/******/ \x09\x09__webpack_require__.d(getter, \x27a\x27, getter);\x0a/******/ \x09\x09return getter;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// Object.prototype.hasOwnProperty.call\x0a/******/ \x09__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\x0a/******/\x0a/******/ \x09// __webpack_public_path__\x0a/******/ \x09__webpack_require__.p = \x22\x22;\x0a/******/\x0a/******/\x0a/******/ \x09// Load entry module and return exports\x0a/******/ \x09return __webpack_require__(__webpack_require__.s = 22);\x0a/******/ })\x0a/************************************************************************/\x0a/******/ ({\x0a\x0a/***/ 22:\x0a/***/ (function(module, exports, __webpack_require__) {\x0a\x0amodule.exports = __webpack_require__(23);\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 23:\x0a/***/ (function(module, exports, __webpack_require__) {\x0a\x0a/**\x0a * @output wp-includes/js/media-models.js\x0a */\x0a\x0avar $ = jQuery,\x0a\x09Attachment, Attachments, l10n, media;\x0a\x0a/** @namespace wp */\x0awindow.wp = window.wp || {};\x0a\x0a/**\x0a * Create and return a media frame.\x0a *\x0a * Handles the default media experience.\x0a *\x0a * @alias wp.media\x0a * @memberOf wp\x0a * @namespace\x0a *\x0a * @param  {object} attributes The properties passed to the main media controller.\x0a * @return {wp.media.view.MediaFrame} A media workflow.\x0a */\x0amedia = wp.media = function( attributes ) {\x0a\x09var MediaFrame = media.view.MediaFrame,\x0a\x09\x09frame;\x0a\x0a\x09if ( ! MediaFrame ) {\x0a\x09\x09return;\x0a\x09}\x0a\x0a\x09attributes = _.defaults( attributes || {}, {\x0a\x09\x09frame: \x27select\x27\x0a\x09});\x0a\x0a\x09if ( \x27select\x27 === attributes.frame && MediaFrame.Select ) {\x0a\x09\x09frame = new MediaFrame.Select( attributes );\x0a\x09} else if ( \x27post\x27 === attributes.frame && MediaFrame.Post ) {\x0a\x09\x09frame = new MediaFrame.Post( attributes );\x0a\x09} else if ( \x27manage\x27 === attributes.frame && MediaFrame.Manage ) {\x0a\x09\x09frame = new MediaFrame.Manage( attributes );\x0a\x09} else if ( \x27image\x27 === attributes.frame && MediaFrame.ImageDetails ) {\x0a\x09\x09frame = new MediaFrame.ImageDetails( attributes );\x0a\x09} else if ( \x27audio\x27 === attributes.frame && MediaFrame.AudioDetails ) {\x0a\x09\x09frame = new MediaFrame.AudioDetails( attributes );\x0a\x09} else if ( \x27video\x27 === attributes.frame && MediaFrame.VideoDetails ) {\x0a\x09\x09frame = new MediaFrame.VideoDetails( attributes );\x0a\x09} else if ( \x27edit-attachments\x27 === attributes.frame && MediaFrame.EditAttachments ) {\x0a\x09\x09frame = new MediaFrame.EditAttachments( attributes );\x0a\x09}\x0a\x0a\x09delete attributes.frame;\x0a\x0a\x09media.frame = frame;\x0a\x0a\x09return frame;\x0a};\x0a\x0a/** @namespace wp.media.model */\x0a/** @namespace wp.media.view */\x0a/** @namespace wp.media.controller */\x0a/** @namespace wp.media.frames */\x0a_.extend( media, { model: {}, view: {}, controller: {}, frames: {} });\x0a\x0a// Link any localized strings.\x0al10n = media.model.l10n = window._wpMediaModelsL10n || {};\x0a\x0a// Link any settings.\x0amedia.model.settings = l10n.settings || {};\x0adelete l10n.settings;\x0a\x0aAttachment = media.model.Attachment = __webpack_require__( 24 );\x0aAttachments = media.model.Attachments = __webpack_require__( 25 );\x0a\x0amedia.model.Query = __webpack_require__( 26 );\x0amedia.model.PostImage = __webpack_require__( 27 );\x0amedia.model.Selection = __webpack_require__( 28 );\x0a\x0a/**\x0a * ========================================================================\x0a * UTILITIES\x0a * ========================================================================\x0a */\x0a\x0a/**\x0a * A basic equality comparator for Backbone models.\x0a *\x0a * Used to order models within a collection - @see wp.media.model.Attachments.comparator().\x0a *\x0a * @param  {mixed}  a  The primary parameter to compare.\x0a * @param  {mixed}  b  The primary parameter to compare.\x0a * @param  {string} ac The fallback parameter to compare, a\x27s cid.\x0a * @param  {string} bc The fallback parameter to compare, b\x27s cid.\x0a * @return {number}    -1: a should come before b.\x0a *                      0: a and b are of the same rank.\x0a *                      1: b should come before a.\x0a */\x0amedia.compare = function( a, b, ac, bc ) {\x0a\x09if ( _.isEqual( a, b ) ) {\x0a\x09\x09return ac === bc ? 0 : (ac \x3e bc ? -1 : 1);\x0a\x09} else {\x0a\x09\x09return a \x3e b ? -1 : 1;\x0a\x09}\x0a};\x0a\x0a_.extend( media, /** @lends wp.media */{\x0a\x09/**\x0a\x09 * media.template( id )\x0a\x09 *\x0a\x09 * Fetch a JavaScript template for an id, and return a templating function for it.\x0a\x09 *\x0a\x09 * See wp.template() in `wp-includes/js/wp-util.js`.\x0a\x09 *\x0a\x09 * @borrows wp.template as template\x0a\x09 */\x0a\x09template: wp.template,\x0a\x0a\x09/**\x0a\x09 * media.post( [action], [data] )\x0a\x09 *\x0a\x09 * Sends a POST request to WordPress.\x0a\x09 * See wp.ajax.post() in `wp-includes/js/wp-util.js`.\x0a\x09 *\x0a\x09 * @borrows wp.ajax.post as post\x0a\x09 */\x0a\x09post: wp.ajax.post,\x0a\x0a\x09/**\x0a\x09 * media.ajax( [action], [options] )\x0a\x09 *\x0a\x09 * Sends an XHR request to WordPress.\x0a\x09 * See wp.ajax.send() in `wp-includes/js/wp-util.js`.\x0a\x09 *\x0a\x09 * @borrows wp.ajax.send as ajax\x0a\x09 */\x0a\x09ajax: wp.ajax.send,\x0a\x0a\x09/**\x0a\x09 * Scales a set of dimensions to fit within bounding dimensions.\x0a\x09 *\x0a\x09 * @param {Object} dimensions\x0a\x09 * @returns {Object}\x0a\x09 */\x0a\x09fit: function( dimensions ) {\x0a\x09\x09var width     = dimensions.width,\x0a\x09\x09\x09height    = dimensions.height,\x0a\x09\x09\x09maxWidth  = dimensions.maxWidth,\x0a\x09\x09\x09maxHeight = dimensions.maxHeight,\x0a\x09\x09\x09constraint;\x0a\x0a\x09\x09// Compare ratios between the two values to determine which\x0a\x09\x09// max to constrain by. If a max value doesn\x27t exist, then the\x0a\x09\x09// opposite side is the constraint.\x0a\x09\x09if ( ! _.isUndefined( maxWidth ) && ! _.isUndefined( maxHeight ) ) {\x0a\x09\x09\x09constraint = ( width / height \x3e maxWidth / maxHeight ) ? \x27width\x27 : \x27height\x27;\x0a\x09\x09} else if ( _.isUndefined( maxHeight ) ) {\x0a\x09\x09\x09constraint = \x27width\x27;\x0a\x09\x09} else if (  _.isUndefined( maxWidth ) && height \x3e maxHeight ) {\x0a\x09\x09\x09constraint = \x27height\x27;\x0a\x09\x09}\x0a\x0a\x09\x09// If the value of the constrained side is larger than the max,\x0a\x09\x09// then scale the values. Otherwise return the originals; they fit.\x0a\x09\x09if ( \x27width\x27 === constraint && width \x3e maxWidth ) {\x0a\x09\x09\x09return {\x0a\x09\x09\x09\x09width : maxWidth,\x0a\x09\x09\x09\x09height: Math.round( maxWidth * height / width )\x0a\x09\x09\x09};\x0a\x09\x09} else if ( \x27height\x27 === constraint && height \x3e maxHeight ) {\x0a\x09\x09\x09return {\x0a\x09\x09\x09\x09width : Math.round( maxHeight * width / height ),\x0a\x09\x09\x09\x09height: maxHeight\x0a\x09\x09\x09};\x0a\x09\x09} else {\x0a\x09\x09\x09return {\x0a\x09\x09\x09\x09width : width,\x0a\x09\x09\x09\x09height: height\x0a\x09\x09\x09};\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * Truncates a string by injecting an ellipsis into the middle.\x0a\x09 * Useful for filenames.\x0a\x09 *\x0a\x09 * @param {String} string\x0a\x09 * @param {Number} [length=30]\x0a\x09 * @param {String} [replacement=&hellip;]\x0a\x09 * @returns {String} The string, unless length is greater than string.length.\x0a\x09 */\x0a\x09truncate: function( string, length, replacement ) {\x0a\x09\x09length = length || 30;\x0a\x09\x09replacement = replacement || \x27&hellip;\x27;\x0a\x0a\x09\x09if ( string.length \x3c= length ) {\x0a\x09\x09\x09return string;\x0a\x09\x09}\x0a\x0a\x09\x09return string.substr( 0, length / 2 ) + replacement + string.substr( -1 * length / 2 );\x0a\x09}\x0a});\x0a\x0a/**\x0a * ========================================================================\x0a * MODELS\x0a * ========================================================================\x0a */\x0a/**\x0a * wp.media.attachment\x0a *\x0a * @static\x0a * @param {String} id A string used to identify a model.\x0a * @returns {wp.media.model.Attachment}\x0a */\x0amedia.attachment = function( id ) {\x0a\x09return Attachment.get( id );\x0a};\x0a\x0a/**\x0a * A collection of all attachments that have been fetched from the server.\x0a *\x0a * @static\x0a * @member {wp.media.model.Attachments}\x0a */\x0aAttachments.all = new Attachments();\x0a\x0a/**\x0a * wp.media.query\x0a *\x0a * Shorthand for creating a new Attachments Query.\x0a *\x0a * @param {object} [props]\x0a * @returns {wp.media.model.Attachments}\x0a */\x0amedia.query = function( props ) {\x0a\x09return new Attachments( null, {\x0a\x09\x09props: _.extend( _.defaults( props || {}, { orderby: \x27date\x27 } ), { query: true } )\x0a\x09});\x0a};\x0a\x0a// Clean up. Prevents mobile browsers caching\x0a$(window).on(\x27unload\x27, function(){\x0a\x09window.wp = null;\x0a});\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 24:\x0a/***/ (function(module, exports) {\x0a\x0avar $ = Backbone.$,\x0a\x09Attachment;\x0a\x0a/**\x0a * wp.media.model.Attachment\x0a *\x0a * @memberOf wp.media.model\x0a *\x0a * @class\x0a * @augments Backbone.Model\x0a */\x0aAttachment = Backbone.Model.extend(/** @lends wp.media.model.Attachment.prototype */{\x0a\x09/**\x0a\x09 * Triggered when attachment details change\x0a\x09 * Overrides Backbone.Model.sync\x0a\x09 *\x0a\x09 * @param {string} method\x0a\x09 * @param {wp.media.model.Attachment} model\x0a\x09 * @param {Object} [options={}]\x0a\x09 *\x0a\x09 * @returns {Promise}\x0a\x09 */\x0a\x09sync: function( method, model, options ) {\x0a\x09\x09// If the attachment does not yet have an `id`, return an instantly\x0a\x09\x09// rejected promise. Otherwise, all of our requests will fail.\x0a\x09\x09if ( _.isUndefined( this.id ) ) {\x0a\x09\x09\x09return $.Deferred().rejectWith( this ).promise();\x0a\x09\x09}\x0a\x0a\x09\x09// Overload the `read` request so Attachment.fetch() functions correctly.\x0a\x09\x09if ( \x27read\x27 === method ) {\x0a\x09\x09\x09options = options || {};\x0a\x09\x09\x09options.context = this;\x0a\x09\x09\x09options.data = _.extend( options.data || {}, {\x0a\x09\x09\x09\x09action: \x27get-attachment\x27,\x0a\x09\x09\x09\x09id: this.id\x0a\x09\x09\x09});\x0a\x09\x09\x09return wp.media.ajax( options );\x0a\x0a\x09\x09// Overload the `update` request so properties can be saved.\x0a\x09\x09} else if ( \x27update\x27 === method ) {\x0a\x09\x09\x09// If we do not have the necessary nonce, fail immeditately.\x0a\x09\x09\x09if ( ! this.get(\x27nonces\x27) || ! this.get(\x27nonces\x27).update ) {\x0a\x09\x09\x09\x09return $.Deferred().rejectWith( this ).promise();\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options = options || {};\x0a\x09\x09\x09options.context = this;\x0a\x0a\x09\x09\x09// Set the action and ID.\x0a\x09\x09\x09options.data = _.extend( options.data || {}, {\x0a\x09\x09\x09\x09action:  \x27save-attachment\x27,\x0a\x09\x09\x09\x09id:      this.id,\x0a\x09\x09\x09\x09nonce:   this.get(\x27nonces\x27).update,\x0a\x09\x09\x09\x09post_id: wp.media.model.settings.post.id\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09// Record the values of the changed attributes.\x0a\x09\x09\x09if ( model.hasChanged() ) {\x0a\x09\x09\x09\x09options.data.changes = {};\x0a\x0a\x09\x09\x09\x09_.each( model.changed, function( value, key ) {\x0a\x09\x09\x09\x09\x09options.data.changes[ key ] = this.get( key );\x0a\x09\x09\x09\x09}, this );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return wp.media.ajax( options );\x0a\x0a\x09\x09// Overload the `delete` request so attachments can be removed.\x0a\x09\x09// This will permanently delete an attachment.\x0a\x09\x09} else if ( \x27delete\x27 === method ) {\x0a\x09\x09\x09options = options || {};\x0a\x0a\x09\x09\x09if ( ! options.wait ) {\x0a\x09\x09\x09\x09this.destroyed = true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options.context = this;\x0a\x09\x09\x09options.data = _.extend( options.data || {}, {\x0a\x09\x09\x09\x09action:   \x27delete-post\x27,\x0a\x09\x09\x09\x09id:       this.id,\x0a\x09\x09\x09\x09_wpnonce: this.get(\x27nonces\x27)[\x27delete\x27]\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09return wp.media.ajax( options ).done( function() {\x0a\x09\x09\x09\x09this.destroyed = true;\x0a\x09\x09\x09}).fail( function() {\x0a\x09\x09\x09\x09this.destroyed = false;\x0a\x09\x09\x09});\x0a\x0a\x09\x09// Otherwise, fall back to `Backbone.sync()`.\x0a\x09\x09} else {\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Call `sync` directly on Backbone.Model\x0a\x09\x09\x09 */\x0a\x09\x09\x09return Backbone.Model.prototype.sync.apply( this, arguments );\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * Convert date strings into Date objects.\x0a\x09 *\x0a\x09 * @param {Object} resp The raw response object, typically returned by fetch()\x0a\x09 * @returns {Object} The modified response object, which is the attributes hash\x0a\x09 *    to be set on the model.\x0a\x09 */\x0a\x09parse: function( resp ) {\x0a\x09\x09if ( ! resp ) {\x0a\x09\x09\x09return resp;\x0a\x09\x09}\x0a\x0a\x09\x09resp.date = new Date( resp.date );\x0a\x09\x09resp.modified = new Date( resp.modified );\x0a\x09\x09return resp;\x0a\x09},\x0a\x09/**\x0a\x09 * @param {Object} data The properties to be saved.\x0a\x09 * @param {Object} options Sync options. e.g. patch, wait, success, error.\x0a\x09 *\x0a\x09 * @this Backbone.Model\x0a\x09 *\x0a\x09 * @returns {Promise}\x0a\x09 */\x0a\x09saveCompat: function( data, options ) {\x0a\x09\x09var model = this;\x0a\x0a\x09\x09// If we do not have the necessary nonce, fail immeditately.\x0a\x09\x09if ( ! this.get(\x27nonces\x27) || ! this.get(\x27nonces\x27).update ) {\x0a\x09\x09\x09return $.Deferred().rejectWith( this ).promise();\x0a\x09\x09}\x0a\x0a\x09\x09return wp.media.post( \x27save-attachment-compat\x27, _.defaults({\x0a\x09\x09\x09id:      this.id,\x0a\x09\x09\x09nonce:   this.get(\x27nonces\x27).update,\x0a\x09\x09\x09post_id: wp.media.model.settings.post.id\x0a\x09\x09}, data ) ).done( function( resp, status, xhr ) {\x0a\x09\x09\x09model.set( model.parse( resp, xhr ), options );\x0a\x09\x09});\x0a\x09}\x0a},/** @lends wp.media.model.Attachment */{\x0a\x09/**\x0a\x09 * Create a new model on the static \x27all\x27 attachments collection and return it.\x0a\x09 *\x0a\x09 * @static\x0a\x09 *\x0a\x09 * @param {Object} attrs\x0a\x09 * @returns {wp.media.model.Attachment}\x0a\x09 */\x0a\x09create: function( attrs ) {\x0a\x09\x09var Attachments = wp.media.model.Attachments;\x0a\x09\x09return Attachments.all.push( attrs );\x0a\x09},\x0a\x09/**\x0a\x09 * Create a new model on the static \x27all\x27 attachments collection and return it.\x0a\x09 *\x0a\x09 * If this function has already been called for the id,\x0a\x09 * it returns the specified attachment.\x0a\x09 *\x0a\x09 * @static\x0a\x09 * @param {string} id A string used to identify a model.\x0a\x09 * @param {Backbone.Model|undefined} attachment\x0a\x09 * @returns {wp.media.model.Attachment}\x0a\x09 */\x0a\x09get: _.memoize( function( id, attachment ) {\x0a\x09\x09var Attachments = wp.media.model.Attachments;\x0a\x09\x09return Attachments.all.push( attachment || { id: id } );\x0a\x09})\x0a});\x0a\x0amodule.exports = Attachment;\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 25:\x0a/***/ (function(module, exports) {\x0a\x0a/**\x0a * wp.media.model.Attachments\x0a *\x0a * A collection of attachments.\x0a *\x0a * This collection has no persistence with the server without supplying\x0a * \x27options.props.query = true\x27, which will mirror the collection\x0a * to an Attachments Query collection - @see wp.media.model.Attachments.mirror().\x0a *\x0a * @memberOf wp.media.model\x0a *\x0a * @class\x0a * @augments Backbone.Collection\x0a *\x0a * @param {array}  [models]                Models to initialize with the collection.\x0a * @param {object} [options]               Options hash for the collection.\x0a * @param {string} [options.props]         Options hash for the initial query properties.\x0a * @param {string} [options.props.order]   Initial order (ASC or DESC) for the collection.\x0a * @param {string} [options.props.orderby] Initial attribute key to order the collection by.\x0a * @param {string} [options.props.query]   Whether the collection is linked to an attachments query.\x0a * @param {string} [options.observe]\x0a * @param {string} [options.filters]\x0a *\x0a */\x0avar Attachments = Backbone.Collection.extend(/** @lends wp.media.model.Attachments.prototype */{\x0a\x09/**\x0a\x09 * @type {wp.media.model.Attachment}\x0a\x09 */\x0a\x09model: wp.media.model.Attachment,\x0a\x09/**\x0a\x09 * @param {Array} [models=[]] Array of models used to populate the collection.\x0a\x09 * @param {Object} [options={}]\x0a\x09 */\x0a\x09initialize: function( models, options ) {\x0a\x09\x09options = options || {};\x0a\x0a\x09\x09this.props   = new Backbone.Model();\x0a\x09\x09this.filters = options.filters || {};\x0a\x0a\x09\x09// Bind default `change` events to the `props` model.\x0a\x09\x09this.props.on( \x27change\x27, this._changeFilteredProps, this );\x0a\x0a\x09\x09this.props.on( \x27change:order\x27,   this._changeOrder,   this );\x0a\x09\x09this.props.on( \x27change:orderby\x27, this._changeOrderby, this );\x0a\x09\x09this.props.on( \x27change:query\x27,   this._changeQuery,   this );\x0a\x0a\x09\x09this.props.set( _.defaults( options.props || {} ) );\x0a\x0a\x09\x09if ( options.observe ) {\x0a\x09\x09\x09this.observe( options.observe );\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * Sort the collection when the order attribute changes.\x0a\x09 *\x0a\x09 * @access private\x0a\x09 */\x0a\x09_changeOrder: function() {\x0a\x09\x09if ( this.comparator ) {\x0a\x09\x09\x09this.sort();\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * Set the default comparator only when the `orderby` property is set.\x0a\x09 *\x0a\x09 * @access private\x0a\x09 *\x0a\x09 * @param {Backbone.Model} model\x0a\x09 * @param {string} orderby\x0a\x09 */\x0a\x09_changeOrderby: function( model, orderby ) {\x0a\x09\x09// If a different comparator is defined, bail.\x0a\x09\x09if ( this.comparator && this.comparator !== Attachments.comparator ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09if ( orderby && \x27post__in\x27 !== orderby ) {\x0a\x09\x09\x09this.comparator = Attachments.comparator;\x0a\x09\x09} else {\x0a\x09\x09\x09delete this.comparator;\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * If the `query` property is set to true, query the server using\x0a\x09 * the `props` values, and sync the results to this collection.\x0a\x09 *\x0a\x09 * @access private\x0a\x09 *\x0a\x09 * @param {Backbone.Model} model\x0a\x09 * @param {Boolean} query\x0a\x09 */\x0a\x09_changeQuery: function( model, query ) {\x0a\x09\x09if ( query ) {\x0a\x09\x09\x09this.props.on( \x27change\x27, this._requery, this );\x0a\x09\x09\x09this._requery();\x0a\x09\x09} else {\x0a\x09\x09\x09this.props.off( \x27change\x27, this._requery, this );\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * @access private\x0a\x09 *\x0a\x09 * @param {Backbone.Model} model\x0a\x09 */\x0a\x09_changeFilteredProps: function( model ) {\x0a\x09\x09// If this is a query, updating the collection will be handled by\x0a\x09\x09// `this._requery()`.\x0a\x09\x09if ( this.props.get(\x27query\x27) ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09var changed = _.chain( model.changed ).map( function( t, prop ) {\x0a\x09\x09\x09var filter = Attachments.filters[ prop ],\x0a\x09\x09\x09\x09term = model.get( prop );\x0a\x0a\x09\x09\x09if ( ! filter ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( term && ! this.filters[ prop ] ) {\x0a\x09\x09\x09\x09this.filters[ prop ] = filter;\x0a\x09\x09\x09} else if ( ! term && this.filters[ prop ] === filter ) {\x0a\x09\x09\x09\x09delete this.filters[ prop ];\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Record the change.\x0a\x09\x09\x09return true;\x0a\x09\x09}, this ).any().value();\x0a\x0a\x09\x09if ( ! changed ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09// If no `Attachments` model is provided to source the searches\x0a\x09\x09// from, then automatically generate a source from the existing\x0a\x09\x09// models.\x0a\x09\x09if ( ! this._source ) {\x0a\x09\x09\x09this._source = new Attachments( this.models );\x0a\x09\x09}\x0a\x0a\x09\x09this.reset( this._source.filter( this.validator, this ) );\x0a\x09},\x0a\x0a\x09validateDestroyed: false,\x0a\x09/**\x0a\x09 * Checks whether an attachment is valid.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09 * @returns {Boolean}\x0a\x09 */\x0a\x09validator: function( attachment ) {\x0a\x0a\x09\x09// Filter out contextually created attachments (e.g. headers, logos, etc.).\x0a\x09\x09if (\x0a\x09\x09\x09! _.isUndefined( attachment.attributes.context ) &&\x0a\x09\x09\x09\x27\x27 !== attachment.attributes.context\x0a\x09\x09) {\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x0a\x09\x09if ( ! this.validateDestroyed && attachment.destroyed ) {\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x09\x09return _.all( this.filters, function( filter ) {\x0a\x09\x09\x09return !! filter.call( this, attachment );\x0a\x09\x09}, this );\x0a\x09},\x0a\x09/**\x0a\x09 * Add or remove an attachment to the collection depending on its validity.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09 * @param {Object} options\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09validate: function( attachment, options ) {\x0a\x09\x09var valid = this.validator( attachment ),\x0a\x09\x09\x09hasAttachment = !! this.get( attachment.cid );\x0a\x0a\x09\x09if ( ! valid && hasAttachment ) {\x0a\x09\x09\x09this.remove( attachment, options );\x0a\x09\x09} else if ( valid && ! hasAttachment ) {\x0a\x09\x09\x09this.add( attachment, options );\x0a\x09\x09}\x0a\x0a\x09\x09return this;\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Add or remove all attachments from another collection depending on each one\x27s validity.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} attachments\x0a\x09 * @param {object} [options={}]\x0a\x09 *\x0a\x09 * @fires wp.media.model.Attachments#reset\x0a\x09 *\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09validateAll: function( attachments, options ) {\x0a\x09\x09options = options || {};\x0a\x0a\x09\x09_.each( attachments.models, function( attachment ) {\x0a\x09\x09\x09this.validate( attachment, { silent: true });\x0a\x09\x09}, this );\x0a\x0a\x09\x09if ( ! options.silent ) {\x0a\x09\x09\x09this.trigger( \x27reset\x27, this, options );\x0a\x09\x09}\x0a\x09\x09return this;\x0a\x09},\x0a\x09/**\x0a\x09 * Start observing another attachments collection change events\x0a\x09 * and replicate them on this collection.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} The attachments collection to observe.\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining.\x0a\x09 */\x0a\x09observe: function( attachments ) {\x0a\x09\x09this.observers = this.observers || [];\x0a\x09\x09this.observers.push( attachments );\x0a\x0a\x09\x09attachments.on( \x27add change remove\x27, this._validateHandler, this );\x0a\x09\x09attachments.on( \x27reset\x27, this._validateAllHandler, this );\x0a\x09\x09this.validateAll( attachments );\x0a\x09\x09return this;\x0a\x09},\x0a\x09/**\x0a\x09 * Stop replicating collection change events from another attachments collection.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} The attachments collection to stop observing.\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09unobserve: function( attachments ) {\x0a\x09\x09if ( attachments ) {\x0a\x09\x09\x09attachments.off( null, null, this );\x0a\x09\x09\x09this.observers = _.without( this.observers, attachments );\x0a\x0a\x09\x09} else {\x0a\x09\x09\x09_.each( this.observers, function( attachments ) {\x0a\x09\x09\x09\x09attachments.off( null, null, this );\x0a\x09\x09\x09}, this );\x0a\x09\x09\x09delete this.observers;\x0a\x09\x09}\x0a\x0a\x09\x09return this;\x0a\x09},\x0a\x09/**\x0a\x09 * @access private\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} attachment\x0a\x09 * @param {wp.media.model.Attachments} attachments\x0a\x09 * @param {Object} options\x0a\x09 *\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09_validateHandler: function( attachment, attachments, options ) {\x0a\x09\x09// If we\x27re not mirroring this `attachments` collection,\x0a\x09\x09// only retain the `silent` option.\x0a\x09\x09options = attachments === this.mirroring ? options : {\x0a\x09\x09\x09silent: options && options.silent\x0a\x09\x09};\x0a\x0a\x09\x09return this.validate( attachment, options );\x0a\x09},\x0a\x09/**\x0a\x09 * @access private\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} attachments\x0a\x09 * @param {Object} options\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09_validateAllHandler: function( attachments, options ) {\x0a\x09\x09return this.validateAll( attachments, options );\x0a\x09},\x0a\x09/**\x0a\x09 * Start mirroring another attachments collection, clearing out any models already\x0a\x09 * in the collection.\x0a\x09 *\x0a\x09 * @param {wp.media.model.Attachments} The attachments collection to mirror.\x0a\x09 * @returns {wp.media.model.Attachments} Returns itself to allow chaining\x0a\x09 */\x0a\x09mirror: function( attachments ) {\x0a\x09\x09if ( this.mirroring && this.mirroring === attachments ) {\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09this.unmirror();\x0a\x09\x09this.mirroring = attachments;\x0a\x0a\x09\x09// Clear the collection silently. A `reset` event will be fired\x0a\x09\x09// when `observe()` calls `validateAll()`.\x0a\x09\x09this.reset( [], { silent: true } );\x0a\x09\x09this.observe( attachments );\x0a\x0a\x09\x09return this;\x0a\x09},\x0a\x09/**\x0a\x09 * Stop mirroring another attachments collection.\x0a\x09 */\x0a\x09unmirror: function() {\x0a\x09\x09if ( ! this.mirroring ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09this.unobserve( this.mirroring );\x0a\x09\x09delete this.mirroring;\x0a\x09},\x0a\x09/**\x0a\x09 * Retrieve more attachments from the server for the collection.\x0a\x09 *\x0a\x09 * Only works if the collection is mirroring a Query Attachments collection,\x0a\x09 * and forwards to its `more` method. This collection class doesn\x27t have\x0a\x09 * server persistence by itself.\x0a\x09 *\x0a\x09 * @param {object} options\x0a\x09 * @returns {Promise}\x0a\x09 */\x0a\x09more: function( options ) {\x0a\x09\x09var deferred = jQuery.Deferred(),\x0a\x09\x09\x09mirroring = this.mirroring,\x0a\x09\x09\x09attachments = this;\x0a\x0a\x09\x09if ( ! mirroring || ! mirroring.more ) {\x0a\x09\x09\x09return deferred.resolveWith( this ).promise();\x0a\x09\x09}\x0a\x09\x09// If we\x27re mirroring another collection, forward `more` to\x0a\x09\x09// the mirrored collection. Account for a race condition by\x0a\x09\x09// checking if we\x27re still mirroring that collection when\x0a\x09\x09// the request resolves.\x0a\x09\x09mirroring.more( options ).done( function() {\x0a\x09\x09\x09if ( this === attachments.mirroring ) {\x0a\x09\x09\x09\x09deferred.resolveWith( this );\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x0a\x09\x09return deferred.promise();\x0a\x09},\x0a\x09/**\x0a\x09 * Whether there are more attachments that haven\x27t been sync\x27d from the server\x0a\x09 * that match the collection\x27s query.\x0a\x09 *\x0a\x09 * Only works if the collection is mirroring a Query Attachments collection,\x0a\x09 * and forwards to its `hasMore` method. This collection class doesn\x27t have\x0a\x09 * server persistence by itself.\x0a\x09 *\x0a\x09 * @returns {boolean}\x0a\x09 */\x0a\x09hasMore: function() {\x0a\x09\x09return this.mirroring ? this.mirroring.hasMore() : false;\x0a\x09},\x0a\x09/**\x0a\x09 * A custom AJAX-response parser.\x0a\x09 *\x0a\x09 * See trac ticket #24753\x0a\x09 *\x0a\x09 * @param {Object|Array} resp The raw response Object/Array.\x0a\x09 * @param {Object} xhr\x0a\x09 * @returns {Array} The array of model attributes to be added to the collection\x0a\x09 */\x0a\x09parse: function( resp, xhr ) {\x0a\x09\x09if ( ! _.isArray( resp ) ) {\x0a\x09\x09\x09resp = [resp];\x0a\x09\x09}\x0a\x0a\x09\x09return _.map( resp, function( attrs ) {\x0a\x09\x09\x09var id, attachment, newAttributes;\x0a\x0a\x09\x09\x09if ( attrs instanceof Backbone.Model ) {\x0a\x09\x09\x09\x09id = attrs.get( \x27id\x27 );\x0a\x09\x09\x09\x09attrs = attrs.attributes;\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09id = attrs.id;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09attachment = wp.media.model.Attachment.get( id );\x0a\x09\x09\x09newAttributes = attachment.parse( attrs, xhr );\x0a\x0a\x09\x09\x09if ( ! _.isEqual( attachment.attributes, newAttributes ) ) {\x0a\x09\x09\x09\x09attachment.set( newAttributes );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return attachment;\x0a\x09\x09});\x0a\x09},\x0a\x09/**\x0a\x09 * If the collection is a query, create and mirror an Attachments Query collection.\x0a\x09 *\x0a\x09 * @access private\x0a\x09 */\x0a\x09_requery: function( refresh ) {\x0a\x09\x09var props;\x0a\x09\x09if ( this.props.get(\x27query\x27) ) {\x0a\x09\x09\x09props = this.props.toJSON();\x0a\x09\x09\x09props.cache = ( true !== refresh );\x0a\x09\x09\x09this.mirror( wp.media.model.Query.get( props ) );\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * If this collection is sorted by `menuOrder`, recalculates and saves\x0a\x09 * the menu order to the database.\x0a\x09 *\x0a\x09 * @returns {undefined|Promise}\x0a\x09 */\x0a\x09saveMenuOrder: function() {\x0a\x09\x09if ( \x27menuOrder\x27 !== this.props.get(\x27orderby\x27) ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09// Removes any uploading attachments, updates each attachment\x27s\x0a\x09\x09// menu order, and returns an object with an { id: menuOrder }\x0a\x09\x09// mapping to pass to the request.\x0a\x09\x09var attachments = this.chain().filter( function( attachment ) {\x0a\x09\x09\x09return ! _.isUndefined( attachment.id );\x0a\x09\x09}).map( function( attachment, index ) {\x0a\x09\x09\x09// Indices start at 1.\x0a\x09\x09\x09index = index + 1;\x0a\x09\x09\x09attachment.set( \x27menuOrder\x27, index );\x0a\x09\x09\x09return [ attachment.id, index ];\x0a\x09\x09}).object().value();\x0a\x0a\x09\x09if ( _.isEmpty( attachments ) ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09return wp.media.post( \x27save-attachment-order\x27, {\x0a\x09\x09\x09nonce:       wp.media.model.settings.post.nonce,\x0a\x09\x09\x09post_id:     wp.media.model.settings.post.id,\x0a\x09\x09\x09attachments: attachments\x0a\x09\x09});\x0a\x09}\x0a},/** @lends wp.media.model.Attachments */{\x0a\x09/**\x0a\x09 * A function to compare two attachment models in an attachments collection.\x0a\x09 *\x0a\x09 * Used as the default comparator for instances of wp.media.model.Attachments\x0a\x09 * and its subclasses. @see wp.media.model.Attachments._changeOrderby().\x0a\x09 *\x0a\x09 * @param {Backbone.Model} a\x0a\x09 * @param {Backbone.Model} b\x0a\x09 * @param {Object} options\x0a\x09 * @returns {Number} -1 if the first model should come before the second,\x0a\x09 *    0 if they are of the same rank and\x0a\x09 *    1 if the first model should come after.\x0a\x09 */\x0a\x09comparator: function( a, b, options ) {\x0a\x09\x09var key   = this.props.get(\x27orderby\x27),\x0a\x09\x09\x09order = this.props.get(\x27order\x27) || \x27DESC\x27,\x0a\x09\x09\x09ac    = a.cid,\x0a\x09\x09\x09bc    = b.cid;\x0a\x0a\x09\x09a = a.get( key );\x0a\x09\x09b = b.get( key );\x0a\x0a\x09\x09if ( \x27date\x27 === key || \x27modified\x27 === key ) {\x0a\x09\x09\x09a = a || new Date();\x0a\x09\x09\x09b = b || new Date();\x0a\x09\x09}\x0a\x0a\x09\x09// If `options.ties` is set, don\x27t enforce the `cid` tiebreaker.\x0a\x09\x09if ( options && options.ties ) {\x0a\x09\x09\x09ac = bc = null;\x0a\x09\x09}\x0a\x0a\x09\x09return ( \x27DESC\x27 === order ) ? wp.media.compare( a, b, ac, bc ) : wp.media.compare( b, a, bc, ac );\x0a\x09},\x0a\x09/** @namespace wp.media.model.Attachments.filters */\x0a\x09filters: {\x0a\x09\x09/**\x0a\x09\x09 * @static\x0a\x09\x09 * Note that this client-side searching is *not* equivalent\x0a\x09\x09 * to our server-side searching.\x0a\x09\x09 *\x0a\x09\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.model.Attachments\x0a\x09\x09 *\x0a\x09\x09 * @returns {Boolean}\x0a\x09\x09 */\x0a\x09\x09search: function( attachment ) {\x0a\x09\x09\x09if ( ! this.props.get(\x27search\x27) ) {\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return _.any([\x27title\x27,\x27filename\x27,\x27description\x27,\x27caption\x27,\x27name\x27], function( key ) {\x0a\x09\x09\x09\x09var value = attachment.get( key );\x0a\x09\x09\x09\x09return value && -1 !== value.search( this.props.get(\x27search\x27) );\x0a\x09\x09\x09}, this );\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * @static\x0a\x09\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.model.Attachments\x0a\x09\x09 *\x0a\x09\x09 * @returns {Boolean}\x0a\x09\x09 */\x0a\x09\x09type: function( attachment ) {\x0a\x09\x09\x09var type = this.props.get(\x27type\x27), atts = attachment.toJSON(), mime, found;\x0a\x0a\x09\x09\x09if ( ! type || ( _.isArray( type ) && ! type.length ) ) {\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09mime = atts.mime || ( atts.file && atts.file.type ) || \x27\x27;\x0a\x0a\x09\x09\x09if ( _.isArray( type ) ) {\x0a\x09\x09\x09\x09found = _.find( type, function (t) {\x0a\x09\x09\x09\x09\x09return -1 !== mime.indexOf( t );\x0a\x09\x09\x09\x09} );\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09found = -1 !== mime.indexOf( type );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return found;\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * @static\x0a\x09\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.model.Attachments\x0a\x09\x09 *\x0a\x09\x09 * @returns {Boolean}\x0a\x09\x09 */\x0a\x09\x09uploadedTo: function( attachment ) {\x0a\x09\x09\x09var uploadedTo = this.props.get(\x27uploadedTo\x27);\x0a\x09\x09\x09if ( _.isUndefined( uploadedTo ) ) {\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return uploadedTo === attachment.get(\x27uploadedTo\x27);\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * @static\x0a\x09\x09 * @param {wp.media.model.Attachment} attachment\x0a\x09\x09 *\x0a\x09\x09 * @this wp.media.model.Attachments\x0a\x09\x09 *\x0a\x09\x09 * @returns {Boolean}\x0a\x09\x09 */\x0a\x09\x09status: function( attachment ) {\x0a\x09\x09\x09var status = this.props.get(\x27status\x27);\x0a\x09\x09\x09if ( _.isUndefined( status ) ) {\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return status === attachment.get(\x27status\x27);\x0a\x09\x09}\x0a\x09}\x0a});\x0a\x0amodule.exports = Attachments;\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 26:\x0a/***/ (function(module, exports) {\x0a\x0avar Attachments = wp.media.model.Attachments,\x0a\x09Query;\x0a\x0a/**\x0a * wp.media.model.Query\x0a *\x0a * A collection of attachments that match the supplied query arguments.\x0a *\x0a * Note: Do NOT change this.args after the query has been initialized.\x0a *       Things will break.\x0a *\x0a * @memberOf wp.media.model\x0a *\x0a * @class\x0a * @augments wp.media.model.Attachments\x0a * @augments Backbone.Collection\x0a *\x0a * @param {array}  [models]                      Models to initialize with the collection.\x0a * @param {object} [options]                     Options hash.\x0a * @param {object} [options.args]                Attachments query arguments.\x0a * @param {object} [options.args.posts_per_page]\x0a */\x0aQuery = Attachments.extend(/** @lends wp.media.model.Query.prototype */{\x0a\x09/**\x0a\x09 * @param {array}  [models=[]]  Array of initial models to populate the collection.\x0a\x09 * @param {object} [options={}]\x0a\x09 */\x0a\x09initialize: function( models, options ) {\x0a\x09\x09var allowed;\x0a\x0a\x09\x09options = options || {};\x0a\x09\x09Attachments.prototype.initialize.apply( this, arguments );\x0a\x0a\x09\x09this.args     = options.args;\x0a\x09\x09this._hasMore = true;\x0a\x09\x09this.created  = new Date();\x0a\x0a\x09\x09this.filters.order = function( attachment ) {\x0a\x09\x09\x09var orderby = this.props.get(\x27orderby\x27),\x0a\x09\x09\x09\x09order = this.props.get(\x27order\x27);\x0a\x0a\x09\x09\x09if ( ! this.comparator ) {\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// We want any items that can be placed before the last\x0a\x09\x09\x09// item in the set. If we add any items after the last\x0a\x09\x09\x09// item, then we can\x27t guarantee the set is complete.\x0a\x09\x09\x09if ( this.length ) {\x0a\x09\x09\x09\x09return 1 !== this.comparator( attachment, this.last(), { ties: true });\x0a\x0a\x09\x09\x09// Handle the case where there are no items yet and\x0a\x09\x09\x09// we\x27re sorting for recent items. In that case, we want\x0a\x09\x09\x09// changes that occurred after we created the query.\x0a\x09\x09\x09} else if ( \x27DESC\x27 === order && ( \x27date\x27 === orderby || \x27modified\x27 === orderby ) ) {\x0a\x09\x09\x09\x09return attachment.get( orderby ) \x3e= this.created;\x0a\x0a\x09\x09\x09// If we\x27re sorting by menu order and we have no items,\x0a\x09\x09\x09// accept any items that have the default menu order (0).\x0a\x09\x09\x09} else if ( \x27ASC\x27 === order && \x27menuOrder\x27 === orderby ) {\x0a\x09\x09\x09\x09return attachment.get( orderby ) === 0;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Otherwise, we don\x27t want any items yet.\x0a\x09\x09\x09return false;\x0a\x09\x09};\x0a\x0a\x09\x09// Observe the central `wp.Uploader.queue` collection to watch for\x0a\x09\x09// new matches for the query.\x0a\x09\x09//\x0a\x09\x09// Only observe when a limited number of query args are set. There\x0a\x09\x09// are no filters for other properties, so observing will result in\x0a\x09\x09// false positives in those queries.\x0a\x09\x09allowed = [ \x27s\x27, \x27order\x27, \x27orderby\x27, \x27posts_per_page\x27, \x27post_mime_type\x27, \x27post_parent\x27, \x27author\x27 ];\x0a\x09\x09if ( wp.Uploader && _( this.args ).chain().keys().difference( allowed ).isEmpty().value() ) {\x0a\x09\x09\x09this.observe( wp.Uploader.queue );\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * Whether there are more attachments that haven\x27t been sync\x27d from the server\x0a\x09 * that match the collection\x27s query.\x0a\x09 *\x0a\x09 * @returns {boolean}\x0a\x09 */\x0a\x09hasMore: function() {\x0a\x09\x09return this._hasMore;\x0a\x09},\x0a\x09/**\x0a\x09 * Fetch more attachments from the server for the collection.\x0a\x09 *\x0a\x09 * @param   {object}  [options={}]\x0a\x09 * @returns {Promise}\x0a\x09 */\x0a\x09more: function( options ) {\x0a\x09\x09var query = this;\x0a\x0a\x09\x09// If there is already a request pending, return early with the Deferred object.\x0a\x09\x09if ( this._more && \x27pending\x27 === this._more.state() ) {\x0a\x09\x09\x09return this._more;\x0a\x09\x09}\x0a\x0a\x09\x09if ( ! this.hasMore() ) {\x0a\x09\x09\x09return jQuery.Deferred().resolveWith( this ).promise();\x0a\x09\x09}\x0a\x0a\x09\x09options = options || {};\x0a\x09\x09options.remove = false;\x0a\x0a\x09\x09return this._more = this.fetch( options ).done( function( resp ) {\x0a\x09\x09\x09if ( _.isEmpty( resp ) || -1 === this.args.posts_per_page || resp.length \x3c this.args.posts_per_page ) {\x0a\x09\x09\x09\x09query._hasMore = false;\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09},\x0a\x09/**\x0a\x09 * Overrides Backbone.Collection.sync\x0a\x09 * Overrides wp.media.model.Attachments.sync\x0a\x09 *\x0a\x09 * @param {String} method\x0a\x09 * @param {Backbone.Model} model\x0a\x09 * @param {Object} [options={}]\x0a\x09 * @returns {Promise}\x0a\x09 */\x0a\x09sync: function( method, model, options ) {\x0a\x09\x09var args, fallback;\x0a\x0a\x09\x09// Overload the read method so Attachment.fetch() functions correctly.\x0a\x09\x09if ( \x27read\x27 === method ) {\x0a\x09\x09\x09options = options || {};\x0a\x09\x09\x09options.context = this;\x0a\x09\x09\x09options.data = _.extend( options.data || {}, {\x0a\x09\x09\x09\x09action:  \x27query-attachments\x27,\x0a\x09\x09\x09\x09post_id: wp.media.model.settings.post.id\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09// Clone the args so manipulation is non-destructive.\x0a\x09\x09\x09args = _.clone( this.args );\x0a\x0a\x09\x09\x09// Determine which page to query.\x0a\x09\x09\x09if ( -1 !== args.posts_per_page ) {\x0a\x09\x09\x09\x09args.paged = Math.round( this.length / args.posts_per_page ) + 1;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options.data.query = args;\x0a\x09\x09\x09return wp.media.ajax( options );\x0a\x0a\x09\x09// Otherwise, fall back to Backbone.sync()\x0a\x09\x09} else {\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Call wp.media.model.Attachments.sync or Backbone.sync\x0a\x09\x09\x09 */\x0a\x09\x09\x09fallback = Attachments.prototype.sync ? Attachments.prototype : Backbone;\x0a\x09\x09\x09return fallback.sync.apply( this, arguments );\x0a\x09\x09}\x0a\x09}\x0a}, /** @lends wp.media.model.Query */{\x0a\x09/**\x0a\x09 * @readonly\x0a\x09 */\x0a\x09defaultProps: {\x0a\x09\x09orderby: \x27date\x27,\x0a\x09\x09order:   \x27DESC\x27\x0a\x09},\x0a\x09/**\x0a\x09 * @readonly\x0a\x09 */\x0a\x09defaultArgs: {\x0a\x09\x09posts_per_page: 40\x0a\x09},\x0a\x09/**\x0a\x09 * @readonly\x0a\x09 */\x0a\x09orderby: {\x0a\x09\x09allowed:  [ \x27name\x27, \x27author\x27, \x27date\x27, \x27title\x27, \x27modified\x27, \x27uploadedTo\x27, \x27id\x27, \x27post__in\x27, \x27menuOrder\x27 ],\x0a\x09\x09/**\x0a\x09\x09 * A map of JavaScript orderby values to their WP_Query equivalents.\x0a\x09\x09 * @type {Object}\x0a\x09\x09 */\x0a\x09\x09valuemap: {\x0a\x09\x09\x09\x27id\x27:         \x27ID\x27,\x0a\x09\x09\x09\x27uploadedTo\x27: \x27parent\x27,\x0a\x09\x09\x09\x27menuOrder\x27:  \x27menu_order ID\x27\x0a\x09\x09}\x0a\x09},\x0a\x09/**\x0a\x09 * A map of JavaScript query properties to their WP_Query equivalents.\x0a\x09 *\x0a\x09 * @readonly\x0a\x09 */\x0a\x09propmap: {\x0a\x09\x09\x27search\x27:\x09\x09\x27s\x27,\x0a\x09\x09\x27type\x27:\x09\x09\x09\x27post_mime_type\x27,\x0a\x09\x09\x27perPage\x27:\x09\x09\x27posts_per_page\x27,\x0a\x09\x09\x27menuOrder\x27:\x09\x27menu_order\x27,\x0a\x09\x09\x27uploadedTo\x27:\x09\x27post_parent\x27,\x0a\x09\x09\x27status\x27:\x09\x09\x27post_status\x27,\x0a\x09\x09\x27include\x27:\x09\x09\x27post__in\x27,\x0a\x09\x09\x27exclude\x27:\x09\x09\x27post__not_in\x27,\x0a\x09\x09\x27author\x27:\x09\x09\x27author\x27\x0a\x09},\x0a\x09/**\x0a\x09 * Creates and returns an Attachments Query collection given the properties.\x0a\x09 *\x0a\x09 * Caches query objects and reuses where possible.\x0a\x09 *\x0a\x09 * @static\x0a\x09 * @method\x0a\x09 *\x0a\x09 * @param {object} [props]\x0a\x09 * @param {Object} [props.cache=true]   Whether to use the query cache or not.\x0a\x09 * @param {Object} [props.order]\x0a\x09 * @param {Object} [props.orderby]\x0a\x09 * @param {Object} [props.include]\x0a\x09 * @param {Object} [props.exclude]\x0a\x09 * @param {Object} [props.s]\x0a\x09 * @param {Object} [props.post_mime_type]\x0a\x09 * @param {Object} [props.posts_per_page]\x0a\x09 * @param {Object} [props.menu_order]\x0a\x09 * @param {Object} [props.post_parent]\x0a\x09 * @param {Object} [props.post_status]\x0a\x09 * @param {Object} [props.author]\x0a\x09 * @param {Object} [options]\x0a\x09 *\x0a\x09 * @returns {wp.media.model.Query} A new Attachments Query collection.\x0a\x09 */\x0a\x09get: (function(){\x0a\x09\x09/**\x0a\x09\x09 * @static\x0a\x09\x09 * @type Array\x0a\x09\x09 */\x0a\x09\x09var queries = [];\x0a\x0a\x09\x09/**\x0a\x09\x09 * @returns {Query}\x0a\x09\x09 */\x0a\x09\x09return function( props, options ) {\x0a\x09\x09\x09var args     = {},\x0a\x09\x09\x09\x09orderby  = Query.orderby,\x0a\x09\x09\x09\x09defaults = Query.defaultProps,\x0a\x09\x09\x09\x09query,\x0a\x09\x09\x09\x09cache    = !! props.cache || _.isUndefined( props.cache );\x0a\x0a\x09\x09\x09// Remove the `query` property. This isn\x27t linked to a query,\x0a\x09\x09\x09// this *is* the query.\x0a\x09\x09\x09delete props.query;\x0a\x09\x09\x09delete props.cache;\x0a\x0a\x09\x09\x09// Fill default args.\x0a\x09\x09\x09_.defaults( props, defaults );\x0a\x0a\x09\x09\x09// Normalize the order.\x0a\x09\x09\x09props.order = props.order.toUpperCase();\x0a\x09\x09\x09if ( \x27DESC\x27 !== props.order && \x27ASC\x27 !== props.order ) {\x0a\x09\x09\x09\x09props.order = defaults.order.toUpperCase();\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Ensure we have a valid orderby value.\x0a\x09\x09\x09if ( ! _.contains( orderby.allowed, props.orderby ) ) {\x0a\x09\x09\x09\x09props.orderby = defaults.orderby;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09_.each( [ \x27include\x27, \x27exclude\x27 ], function( prop ) {\x0a\x09\x09\x09\x09if ( props[ prop ] && ! _.isArray( props[ prop ] ) ) {\x0a\x09\x09\x09\x09\x09props[ prop ] = [ props[ prop ] ];\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09// Generate the query `args` object.\x0a\x09\x09\x09// Correct any differing property names.\x0a\x09\x09\x09_.each( props, function( value, prop ) {\x0a\x09\x09\x09\x09if ( _.isNull( value ) ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09args[ Query.propmap[ prop ] || prop ] = value;\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09// Fill any other default query args.\x0a\x09\x09\x09_.defaults( args, Query.defaultArgs );\x0a\x0a\x09\x09\x09// `props.orderby` does not always map directly to `args.orderby`.\x0a\x09\x09\x09// Substitute exceptions specified in orderby.keymap.\x0a\x09\x09\x09args.orderby = orderby.valuemap[ props.orderby ] || props.orderby;\x0a\x0a\x09\x09\x09// Search the query cache for a matching query.\x0a\x09\x09\x09if ( cache ) {\x0a\x09\x09\x09\x09query = _.find( queries, function( query ) {\x0a\x09\x09\x09\x09\x09return _.isEqual( query.args, args );\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09queries = [];\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Otherwise, create a new query and add it to the cache.\x0a\x09\x09\x09if ( ! query ) {\x0a\x09\x09\x09\x09query = new Query( [], _.extend( options || {}, {\x0a\x09\x09\x09\x09\x09props: props,\x0a\x09\x09\x09\x09\x09args:  args\x0a\x09\x09\x09\x09} ) );\x0a\x09\x09\x09\x09queries.push( query );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return query;\x0a\x09\x09};\x0a\x09}())\x0a});\x0a\x0amodule.exports = Query;\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 27:\x0a/***/ (function(module, exports) {\x0a\x0a/**\x0a * wp.media.model.PostImage\x0a *\x0a * An instance of an image that\x27s been embedded into a post.\x0a *\x0a * Used in the embedded image attachment display settings modal - @see wp.media.view.MediaFrame.ImageDetails.\x0a *\x0a * @memberOf wp.media.model\x0a *\x0a * @class\x0a * @augments Backbone.Model\x0a *\x0a * @param {int} [attributes]               Initial model attributes.\x0a * @param {int} [attributes.attachment_id] ID of the attachment.\x0a **/\x0avar PostImage = Backbone.Model.extend(/** @lends wp.media.model.PostImage.prototype */{\x0a\x0a\x09initialize: function( attributes ) {\x0a\x09\x09var Attachment = wp.media.model.Attachment;\x0a\x09\x09this.attachment = false;\x0a\x0a\x09\x09if ( attributes.attachment_id ) {\x0a\x09\x09\x09this.attachment = Attachment.get( attributes.attachment_id );\x0a\x09\x09\x09if ( this.attachment.get( \x27url\x27 ) ) {\x0a\x09\x09\x09\x09this.dfd = jQuery.Deferred();\x0a\x09\x09\x09\x09this.dfd.resolve();\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09this.dfd = this.attachment.fetch();\x0a\x09\x09\x09}\x0a\x09\x09\x09this.bindAttachmentListeners();\x0a\x09\x09}\x0a\x0a\x09\x09// keep url in sync with changes to the type of link\x0a\x09\x09this.on( \x27change:link\x27, this.updateLinkUrl, this );\x0a\x09\x09this.on( \x27change:size\x27, this.updateSize, this );\x0a\x0a\x09\x09this.setLinkTypeFromUrl();\x0a\x09\x09this.setAspectRatio();\x0a\x0a\x09\x09this.set( \x27originalUrl\x27, attributes.url );\x0a\x09},\x0a\x0a\x09bindAttachmentListeners: function() {\x0a\x09\x09this.listenTo( this.attachment, \x27sync\x27, this.setLinkTypeFromUrl );\x0a\x09\x09this.listenTo( this.attachment, \x27sync\x27, this.setAspectRatio );\x0a\x09\x09this.listenTo( this.attachment, \x27change\x27, this.updateSize );\x0a\x09},\x0a\x0a\x09changeAttachment: function( attachment, props ) {\x0a\x09\x09this.stopListening( this.attachment );\x0a\x09\x09this.attachment = attachment;\x0a\x09\x09this.bindAttachmentListeners();\x0a\x0a\x09\x09this.set( \x27attachment_id\x27, this.attachment.get( \x27id\x27 ) );\x0a\x09\x09this.set( \x27caption\x27, this.attachment.get( \x27caption\x27 ) );\x0a\x09\x09this.set( \x27alt\x27, this.attachment.get( \x27alt\x27 ) );\x0a\x09\x09this.set( \x27size\x27, props.get( \x27size\x27 ) );\x0a\x09\x09this.set( \x27align\x27, props.get( \x27align\x27 ) );\x0a\x09\x09this.set( \x27link\x27, props.get( \x27link\x27 ) );\x0a\x09\x09this.updateLinkUrl();\x0a\x09\x09this.updateSize();\x0a\x09},\x0a\x0a\x09setLinkTypeFromUrl: function() {\x0a\x09\x09var linkUrl = this.get( \x27linkUrl\x27 ),\x0a\x09\x09\x09type;\x0a\x0a\x09\x09if ( ! linkUrl ) {\x0a\x09\x09\x09this.set( \x27link\x27, \x27none\x27 );\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09// default to custom if there is a linkUrl\x0a\x09\x09type = \x27custom\x27;\x0a\x0a\x09\x09if ( this.attachment ) {\x0a\x09\x09\x09if ( this.attachment.get( \x27url\x27 ) === linkUrl ) {\x0a\x09\x09\x09\x09type = \x27file\x27;\x0a\x09\x09\x09} else if ( this.attachment.get( \x27link\x27 ) === linkUrl ) {\x0a\x09\x09\x09\x09type = \x27post\x27;\x0a\x09\x09\x09}\x0a\x09\x09} else {\x0a\x09\x09\x09if ( this.get( \x27url\x27 ) === linkUrl ) {\x0a\x09\x09\x09\x09type = \x27file\x27;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09this.set( \x27link\x27, type );\x0a\x09},\x0a\x0a\x09updateLinkUrl: function() {\x0a\x09\x09var link = this.get( \x27link\x27 ),\x0a\x09\x09\x09url;\x0a\x0a\x09\x09switch( link ) {\x0a\x09\x09\x09case \x27file\x27:\x0a\x09\x09\x09\x09if ( this.attachment ) {\x0a\x09\x09\x09\x09\x09url = this.attachment.get( \x27url\x27 );\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09url = this.get( \x27url\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09this.set( \x27linkUrl\x27, url );\x0a\x09\x09\x09\x09break;\x0a\x09\x09\x09case \x27post\x27:\x0a\x09\x09\x09\x09this.set( \x27linkUrl\x27, this.attachment.get( \x27link\x27 ) );\x0a\x09\x09\x09\x09break;\x0a\x09\x09\x09case \x27none\x27:\x0a\x09\x09\x09\x09this.set( \x27linkUrl\x27, \x27\x27 );\x0a\x09\x09\x09\x09break;\x0a\x09\x09}\x0a\x09},\x0a\x0a\x09updateSize: function() {\x0a\x09\x09var size;\x0a\x0a\x09\x09if ( ! this.attachment ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09if ( this.get( \x27size\x27 ) === \x27custom\x27 ) {\x0a\x09\x09\x09this.set( \x27width\x27, this.get( \x27customWidth\x27 ) );\x0a\x09\x09\x09this.set( \x27height\x27, this.get( \x27customHeight\x27 ) );\x0a\x09\x09\x09this.set( \x27url\x27, this.get( \x27originalUrl\x27 ) );\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09size = this.attachment.get( \x27sizes\x27 )[ this.get( \x27size\x27 ) ];\x0a\x0a\x09\x09if ( ! size ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09this.set( \x27url\x27, size.url );\x0a\x09\x09this.set( \x27width\x27, size.width );\x0a\x09\x09this.set( \x27height\x27, size.height );\x0a\x09},\x0a\x0a\x09setAspectRatio: function() {\x0a\x09\x09var full;\x0a\x0a\x09\x09if ( this.attachment && this.attachment.get( \x27sizes\x27 ) ) {\x0a\x09\x09\x09full = this.attachment.get( \x27sizes\x27 ).full;\x0a\x0a\x09\x09\x09if ( full ) {\x0a\x09\x09\x09\x09this.set( \x27aspectRatio\x27, full.width / full.height );\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09this.set( \x27aspectRatio\x27, this.get( \x27customWidth\x27 ) / this.get( \x27customHeight\x27 ) );\x0a\x09}\x0a});\x0a\x0amodule.exports = PostImage;\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 28:\x0a/***/ (function(module, exports) {\x0a\x0avar Attachments = wp.media.model.Attachments,\x0a\x09Selection;\x0a\x0a/**\x0a * wp.media.model.Selection\x0a *\x0a * A selection of attachments.\x0a *\x0a * @memberOf wp.media.model\x0a *\x0a * @class\x0a * @augments wp.media.model.Attachments\x0a * @augments Backbone.Collection\x0a */\x0aSelection = Attachments.extend(/** @lends wp.media.model.Selection.prototype */{\x0a\x09/**\x0a\x09 * Refresh the `single` model whenever the selection changes.\x0a\x09 * Binds `single` instead of using the context argument to ensure\x0a\x09 * it receives no parameters.\x0a\x09 *\x0a\x09 * @param {Array} [models=[]] Array of models used to populate the collection.\x0a\x09 * @param {Object} [options={}]\x0a\x09 */\x0a\x09initialize: function( models, options ) {\x0a\x09\x09/**\x0a\x09\x09 * call \x27initialize\x27 directly on the parent class\x0a\x09\x09 */\x0a\x09\x09Attachments.prototype.initialize.apply( this, arguments );\x0a\x09\x09this.multiple = options && options.multiple;\x0a\x0a\x09\x09this.on( \x27add remove reset\x27, _.bind( this.single, this, false ) );\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * If the workflow does not support multi-select, clear out the selection\x0a\x09 * before adding a new attachment to it.\x0a\x09 *\x0a\x09 * @param {Array} models\x0a\x09 * @param {Object} options\x0a\x09 * @returns {wp.media.model.Attachment[]}\x0a\x09 */\x0a\x09add: function( models, options ) {\x0a\x09\x09if ( ! this.multiple ) {\x0a\x09\x09\x09this.remove( this.models );\x0a\x09\x09}\x0a\x09\x09/**\x0a\x09\x09 * call \x27add\x27 directly on the parent class\x0a\x09\x09 */\x0a\x09\x09return Attachments.prototype.add.call( this, models, options );\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Fired when toggling (clicking on) an attachment in the modal.\x0a\x09 *\x0a\x09 * @param {undefined|boolean|wp.media.model.Attachment} model\x0a\x09 *\x0a\x09 * @fires wp.media.model.Selection#selection:single\x0a\x09 * @fires wp.media.model.Selection#selection:unsingle\x0a\x09 *\x0a\x09 * @returns {Backbone.Model}\x0a\x09 */\x0a\x09single: function( model ) {\x0a\x09\x09var previous = this._single;\x0a\x0a\x09\x09// If a `model` is provided, use it as the single model.\x0a\x09\x09if ( model ) {\x0a\x09\x09\x09this._single = model;\x0a\x09\x09}\x0a\x09\x09// If the single model isn\x27t in the selection, remove it.\x0a\x09\x09if ( this._single && ! this.get( this._single.cid ) ) {\x0a\x09\x09\x09delete this._single;\x0a\x09\x09}\x0a\x0a\x09\x09this._single = this._single || this.last();\x0a\x0a\x09\x09// If single has changed, fire an event.\x0a\x09\x09if ( this._single !== previous ) {\x0a\x09\x09\x09if ( previous ) {\x0a\x09\x09\x09\x09previous.trigger( \x27selection:unsingle\x27, previous, this );\x0a\x0a\x09\x09\x09\x09// If the model was already removed, trigger the collection\x0a\x09\x09\x09\x09// event manually.\x0a\x09\x09\x09\x09if ( ! this.get( previous.cid ) ) {\x0a\x09\x09\x09\x09\x09this.trigger( \x27selection:unsingle\x27, previous, this );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09\x09if ( this._single ) {\x0a\x09\x09\x09\x09this._single.trigger( \x27selection:single\x27, this._single, this );\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09// Return the single model, or the last model as a fallback.\x0a\x09\x09return this._single;\x0a\x09}\x0a});\x0a\x0amodule.exports = Selection;\x0a\x0a\x0a/***/ })\x0a\x0a/******/ });'}