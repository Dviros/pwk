var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:04:34 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Sat, 05 Aug 2017 13:00:47 GMT\x0aETag: \x22a03f-5560133c41dc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-12837/12838\x0aContent-Length: 12838\x0aKeep-Alive: timeout=5, max=76\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/*!\x0a * jQuery Form Plugin\x0a * version: 4.2.1\x0a * Requires jQuery v1.7 or later\x0a * Copyright 2017 Kevin Morris\x0a * Copyright 2006 M. Alsup\x0a * Project repository: https://github.com/jquery-form/form\x0a * Dual licensed under the MIT and LGPLv3 licenses.\x0a * https://github.com/jquery-form/form#license\x0a */\x0a/* global ActiveXObject */\x0a\x0a/* eslint-disable */\x0a(function (factory) {\x0a\x09if (typeof define === \x27function\x27 && define.amd) {\x0a\x09\x09// AMD. Register as an anonymous module.\x0a\x09\x09define([\x27jquery\x27], factory);\x0a\x09} else if (typeof module === \x27object\x27 && module.exports) {\x0a\x09\x09// Node/CommonJS\x0a\x09\x09module.exports = function( root, jQuery ) {\x0a\x09\x09\x09if (typeof jQuery === \x27undefined\x27) {\x0a\x09\x09\x09\x09// require(\x27jQuery\x27) returns a factory that requires window to build a jQuery instance, we normalize how we use modules\x0a\x09\x09\x09\x09// that require this pattern but the window provided is a noop if it\x27s defined (how jquery works)\x0a\x09\x09\x09\x09if (typeof window !== \x27undefined\x27) {\x0a\x09\x09\x09\x09\x09jQuery = require(\x27jquery\x27);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09else {\x0a\x09\x09\x09\x09\x09jQuery = require(\x27jquery\x27)(root);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09\x09factory(jQuery);\x0a\x09\x09\x09return jQuery;\x0a\x09\x09};\x0a\x09} else {\x0a\x09\x09// Browser globals\x0a\x09\x09factory(jQuery);\x0a\x09}\x0a\x0a}(function ($) {\x0a/* eslint-enable */\x0a\x09\x27use strict\x27;\x0a\x0a\x09/*\x0a\x09\x09Usage Note:\x0a\x09\x09-----------\x0a\x09\x09Do not use both ajaxSubmit and ajaxForm on the same form. These\x0a\x09\x09functions are mutually exclusive. Use ajaxSubmit if you want\x0a\x09\x09to bind your own submit handler to the form. For example,\x0a\x0a\x09\x09$(document).ready(function() {\x0a\x09\x09\x09$(\x27#myForm\x27).on(\x27submit\x27, function(e) {\x0a\x09\x09\x09\x09e.preventDefault(); // \x3c-- important\x0a\x09\x09\x09\x09$(this).ajaxSubmit({\x0a\x09\x09\x09\x09\x09target: \x27#output\x27\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09});\x0a\x09\x09});\x0a\x0a\x09\x09Use ajaxForm when you want the plugin to manage all the event binding\x0a\x09\x09for you. For example,\x0a\x0a\x09\x09$(document).ready(function() {\x0a\x09\x09\x09$(\x27#myForm\x27).ajaxForm({\x0a\x09\x09\x09\x09target: \x27#output\x27\x0a\x09\x09\x09});\x0a\x09\x09});\x0a\x0a\x09\x09You can also use ajaxForm with delegation (requires jQuery v1.7+), so the\x0a\x09\x09form does not have to exist when you invoke ajaxForm:\x0a\x0a\x09\x09$(\x27#myForm\x27).ajaxForm({\x0a\x09\x09\x09delegation: true,\x0a\x09\x09\x09target: \x27#output\x27\x0a\x09\x09});\x0a\x0a\x09\x09When using ajaxForm, the ajaxSubmit function will be invoked for you\x0a\x09\x09at the appropriate time.\x0a\x09*/\x0a\x0a\x09var rCRLF = /\x5cr?\x5cn/g;\x0a\x0a\x09/**\x0a\x09 * Feature detection\x0a\x09 */\x0a\x09var feature = {};\x0a\x0a\x09feature.fileapi = $(\x27\x3cinput type=\x22file\x22\x3e\x27).get(0).files !== undefined;\x0a\x09feature.formdata = (typeof window.FormData !== \x27undefined\x27);\x0a\x0a\x09var hasProp = !!$.fn.prop;\x0a\x0a\x09// attr2 uses prop when it can but checks the return type for\x0a\x09// an expected string. This accounts for the case where a form\x0a\x09// contains inputs with names like \x22action\x22 or \x22method\x22; in those\x0a\x09// cases \x22prop\x22 returns the element\x0a\x09$.fn.attr2 = function() {\x0a\x09\x09if (!hasProp) {\x0a\x09\x09\x09return this.attr.apply(this, arguments);\x0a\x09\x09}\x0a\x0a\x09\x09var val = this.prop.apply(this, arguments);\x0a\x0a\x09\x09if ((val && val.jquery) || typeof val === \x27string\x27) {\x0a\x09\x09\x09return val;\x0a\x09\x09}\x0a\x0a\x09\x09return this.attr.apply(this, arguments);\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * ajaxSubmit() provides a mechanism for immediately submitting\x0a\x09 * an HTML form using AJAX.\x0a\x09 *\x0a\x09 * @param\x09{object|string}\x09options\x09\x09jquery.form.js parameters or custom url for submission\x0a\x09 * @param\x09{object}\x09\x09data\x09\x09extraData\x0a\x09 * @param\x09{string}\x09\x09dataType\x09ajax dataType\x0a\x09 * @param\x09{function}\x09\x09onSuccess\x09ajax success callback function\x0a\x09 */\x0a\x09$.fn.ajaxSubmit = function(options, data, dataType, onSuccess) {\x0a\x09\x09// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\x0a\x09\x09if (!this.length) {\x0a\x09\x09\x09log(\x27ajaxSubmit: skipping submit process - no element selected\x27);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09/* eslint consistent-this: [\x22error\x22, \x22$form\x22] */\x0a\x09\x09var method, action, url, $form = this;\x0a\x0a\x09\x09if (typeof options === \x27function\x27) {\x0a\x09\x09\x09options = {success: options};\x0a\x0a\x09\x09} else if (typeof options === \x27string\x27 || (options === false && arguments.length \x3e 0)) {\x0a\x09\x09\x09options = {\x0a\x09\x09\x09\x09\x27url\x27      : options,\x0a\x09\x09\x09\x09\x27data\x27     : data,\x0a\x09\x09\x09\x09\x27dataType\x27 : dataType\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if (typeof onSuccess === \x27function\x27) {\x0a\x09\x09\x09\x09options.success = onSuccess;\x0a\x09\x09\x09}\x0a\x0a\x09\x09} else if (typeof options === \x27undefined\x27) {\x0a\x09\x09\x09options = {};\x0a\x09\x09}\x0a\x0a\x09\x09method = options.method || options.type || this.attr2(\x27method\x27);\x0a\x09\x09action = options.url || this.attr2(\x27action\x27);\x0a\x0a\x09\x09url = (typeof action === \x27string\x27) ? $.trim(action) : \x27\x27;\x0a\x09\x09url = url || window.location.href || \x27\x27;\x0a\x09\x09if (url) {\x0a\x09\x09\x09// clean url (don\x27t include hash vaue)\x0a\x09\x09\x09url = (url.match(/^([^#]+)/) || [])[1];\x0a\x09\x09}\x0a\x0a\x09\x09options = $.extend(true, {\x0a\x09\x09\x09url       : url,\x0a\x09\x09\x09success   : $.ajaxSettings.success,\x0a\x09\x09\x09type      : method || $.ajaxSettings.type,\x0a\x09\x09\x09iframeSrc : /^https/i.test(window.location.href || \x27\x27) ? \x27javascript:false\x27 : \x27about:blank\x27\x09\x09// eslint-disable-line no-script-url\x0a\x09\x09}, options);\x0a\x0a\x09\x09// hook for manipulating the form data before it is extracted;\x0a\x09\x09// convenient for use with rich editors like tinyMCE or FCKEditor\x0a\x09\x09var veto = {};\x0a\x0a\x09\x09this.trigger(\x27form-pre-serialize\x27, [this, options, veto]);\x0a\x0a\x09\x09if (veto.veto) {\x0a\x09\x09\x09log(\x27ajaxSubmit: submit vetoed via form-pre-serialize trigger\x27);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09// provide opportunity to alter form data before it is serialized\x0a\x09\x09if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {\x0a\x09\x09\x09log(\x27ajaxSubmit: submit aborted via beforeSerialize callback\x27);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09var traditional = options.traditional;\x0a\x0a\x09\x09if (typeof traditional === \x27undefined\x27) {\x0a\x09\x09\x09traditional = $.ajaxSettings.traditional;\x0a\x09\x09}\x0a\x0a\x09\x09var elements = [];\x0a\x09\x09var qx, a = this.formToArray(options.semantic, elements, options.filtering);\x0a\x0a\x09\x09if (options.data) {\x0a\x09\x09\x09var optionsData = $.isFunction(options.data) ? options.data(a) : options.data;\x0a\x0a\x09\x09\x09options.extraData = optionsData;\x0a\x09\x09\x09qx = $.param(optionsData, traditional);\x0a\x09\x09}\x0a\x0a\x09\x09// give pre-submit callback an opportunity to abort the submit\x0a\x09\x09if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {\x0a\x09\x09\x09log(\x27ajaxSubmit: submit aborted via beforeSubmit callback\x27);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09// fire vetoable \x27validate\x27 event\x0a\x09\x09this.trigger(\x27form-submit-validate\x27, [a, this, options, veto]);\x0a\x09\x09if (veto.veto) {\x0a\x09\x09\x09log(\x27ajaxSubmit: submit vetoed via form-submit-validate trigger\x27);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09var q = $.param(a, traditional);\x0a\x0a\x09\x09if (qx) {\x0a\x09\x09\x09q = (q ? (q + \x27&\x27 + qx) : qx);\x0a\x09\x09}\x0a\x0a\x09\x09if (options.type.toUpperCase() === \x27GET\x27) {\x0a\x09\x09\x09options.url += (options.url.indexOf(\x27?\x27) \x3e= 0 ? \x27&\x27 : \x27?\x27) + q;\x0a\x09\x09\x09options.data = null;\x09// data is null for \x27get\x27\x0a\x09\x09} else {\x0a\x09\x09\x09options.data = q;\x09\x09// data is the query string for \x27post\x27\x0a\x09\x09}\x0a\x0a\x09\x09var callbacks = [];\x0a\x0a\x09\x09if (options.resetForm) {\x0a\x09\x09\x09callbacks.push(function() {\x0a\x09\x09\x09\x09$form.resetForm();\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09if (options.clearForm) {\x0a\x09\x09\x09callbacks.push(function() {\x0a\x09\x09\x09\x09$form.clearForm(options.includeHidden);\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09// perform a load on the target only if dataType is not provided\x0a\x09\x09if (!options.dataType && options.target) {\x0a\x09\x09\x09var oldSuccess = options.success || function(){};\x0a\x0a\x09\x09\x09callbacks.push(function(data, textStatus, jqXHR) {\x0a\x09\x09\x09\x09var successArguments = arguments,\x0a\x09\x09\x09\x09\x09fn = options.replaceTarget ? \x27replaceWith\x27 : \x27html\x27;\x0a\x0a\x09\x09\x09\x09$(options.target)[fn](data).each(function(){\x0a\x09\x09\x09\x09\x09oldSuccess.apply(this, successArguments);\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09});\x0a\x0a\x09\x09} else if (options.success) {\x0a\x09\x09\x09if ($.isArray(options.success)) {\x0a\x09\x09\x09\x09$.merge(callbacks, options.success);\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09callbacks.push(options.success);\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg\x0a\x09\x09\x09var context = options.context || this;\x09\x09// jQuery 1.4+ supports scope context\x0a\x0a\x09\x09\x09for (var i = 0, max = callbacks.length; i \x3c max; i++) {\x0a\x09\x09\x09\x09callbacks[i].apply(context, [data, status, xhr || $form, $form]);\x0a\x09\x09\x09}\x0a\x09\x09};\x0a\x0a\x09\x09if (options.error) {\x0a\x09\x09\x09var oldError = options.error;\x0a\x0a\x09\x09\x09options.error = function(xhr, status, error) {\x0a\x09\x09\x09\x09var context = options.context || this;\x0a\x0a\x09\x09\x09\x09oldError.apply(context, [xhr, status, error, $form]);\x0a\x09\x09\x09};\x0a\x09\x09}\x0a\x0a\x09\x09if (options.complete) {\x0a\x09\x09\x09var oldComplete = options.complete;\x0a\x0a\x09\x09\x09options.complete = function(xhr, status) {\x0a\x09\x09\x09\x09var context = options.context || this;\x0a\x0a\x09\x09\x09\x09oldComplete.apply(context, [xhr, status, $form]);\x0a\x09\x09\x09};\x0a\x09\x09}\x0a\x0a\x09\x09// are there files to upload?\x0a\x0a\x09\x09// [value] (issue #113), also see comment:\x0a\x09\x09// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\x0a\x09\x09var fileInputs = $(\x27input[type=file]:enabled\x27, this).filter(function() {\x0a\x09\x09\x09return $(this).val() !== \x27\x27;\x0a\x09\x09});\x0a\x09\x09var hasFileInputs = fileInputs.length \x3e 0;\x0a\x09\x09var mp = \x27multipart/form-data\x27;\x0a\x09\x09var multipart = ($form.attr(\x27enctype\x27) === mp || $form.attr(\x27encoding\x27) === mp);\x0a\x09\x09var fileAPI = feature.fileapi && feature.formdata;\x0a\x0a\x09\x09log(\x27fileAPI :\x27 + fileAPI);\x0a\x0a\x09\x09var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;\x0a\x09\x09var jqxhr;\x0a\x0a\x09\x09// options.iframe allows user to force iframe mode\x0a\x09\x09// 06-NOV-09: now defaulting to iframe mode if file input is detected\x0a\x09\x09if (options.iframe !== false && (options.iframe || shouldUseFrame)) {\x0a\x09\x09\x09// hack to fix Safari hang (thanks to Tim Molendijk for this)\x0a\x09\x09\x09// see: http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\x0a\x09\x09\x09if (options.closeKeepAlive) {\x0a\x09\x09\x09\x09$.get(options.closeKeepAlive, function() {\x0a\x09\x09\x09\x09\x09jqxhr = fileUploadIframe(a);\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09jqxhr = fileUploadIframe(a);\x0a\x09\x09\x09}\x0a\x0a\x09\x09} else if ((hasFileInputs || multipart) && fileAPI) {\x0a\x09\x09\x09jqxhr = fileUploadXhr(a);\x0a\x0a\x09\x09} else {\x0a\x09\x09\x09jqxhr = $.ajax(options);\x0a\x09\x09}\x0a\x0a\x09\x09$form.removeData(\x27jqxhr\x27).data(\x27jqxhr\x27, jqxhr);\x0a\x0a\x09\x09// clear element array\x0a\x09\x09for (var k = 0; k \x3c elements.length; k++) {\x0a\x09\x09\x09elements[k] = null;\x0a\x09\x09}\x0a\x0a\x09\x09// fire \x27notify\x27 event\x0a\x09\x09this.trigger(\x27form-submit-notify\x27, [this, options]);\x0a\x0a\x09\x09return this;\x0a\x0a\x09\x09// utility fn for deep serialization\x0a\x09\x09function deepSerialize(extraData) {\x0a\x09\x09\x09var serialized = $.param(extraData, options.traditional).split(\x27&\x27);\x0a\x09\x09\x09var len = serialized.length;\x0a\x09\x09\x09var result = [];\x0a\x09\x09\x09var i, part;\x0a\x0a\x09\x09\x09for (i = 0; i \x3c len; i++) {\x0a\x09\x09\x09\x09// #252; undo param space replacement\x0a\x09\x09\x09\x09serialized[i] = serialized[i].replace(/\x5c+/g, \x27 \x27);\x0a\x09\x09\x09\x09part = serialized[i].split(\x27=\x27);\x0a\x09\x09\x09\x09// #278; use array instead of object storage, favoring array serializations\x0a\x09\x09\x09\x09result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return result;\x0a\x09\x09}\x0a\x0a\x09\x09// XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\x0a\x09\x09function fileUploadXhr(a) {\x0a\x09\x09\x09var formdata = new FormData();\x0a\x0a\x09\x09\x09for (var i = 0; i \x3c a.length; i++) {\x0a\x09\x09\x09\x09formdata.append(a[i].name, a[i].value);\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (options.extraData) {\x0a\x09\x09\x09\x09var serializedData = deepSerialize(options.extraData);\x0a\x0a\x09\x09\x09\x09for (i = 0; i \x3c serializedData.length; i++) {\x0a\x09\x09\x09\x09\x09if (serializedData[i]) {\x0a\x09\x09\x09\x09\x09\x09formdata.append(serializedData[i][0], serializedData[i][1]);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options.data = null;\x0a\x0a\x09\x09\x09var s = $.extend(true, {}, $.ajaxSettings, options, {\x0a\x09\x09\x09\x09contentType : false,\x0a\x09\x09\x09\x09processData : false,\x0a\x09\x09\x09\x09cache       : false,\x0a\x09\x09\x09\x09type        : method || \x27POST\x27\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09if (options.uploadProgress) {\x0a\x09\x09\x09\x09// workaround because jqXHR does not expose upload property\x0a\x09\x09\x09\x09s.xhr = function() {\x0a\x09\x09\x09\x09\x09var xhr = $.ajaxSettings.xhr();\x0a\x0a\x09\x09\x09\x09\x09if (xhr.upload) {\x0a\x09\x09\x09\x09\x09\x09xhr.upload.addEventListener(\x27progress\x27, function(event) {\x0a\x09\x09\x09\x09\x09\x09\x09var percent = 0;\x0a\x09\x09\x09\x09\x09\x09\x09var position = event.loaded || event.position;\x09\x09\x09/* event.position is deprecated */\x0a\x09\x09\x09\x09\x09\x09\x09var total = event.total;\x0a\x0a\x09\x09\x09\x09\x09\x09\x09if (event.lengthComputable) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09percent = Math.ceil(position / total * 100);\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09\x09\x09options.uploadProgress(event, position, total, percent);\x0a\x09\x09\x09\x09\x09\x09}, false);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09return xhr;\x0a\x09\x09\x09\x09};\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09s.data = null;\x0a\x0a\x09\x09\x09var beforeSend = s.beforeSend;\x0a\x0a\x09\x09\x09s.beforeSend = function(xhr, o) {\x0a\x09\x09\x09\x09// Send FormData() provided by user\x0a\x09\x09\x09\x09if (options.formData) {\x0a\x09\x09\x09\x09\x09o.data = options.formData;\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09o.data = formdata;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (beforeSend) {\x0a\x09\x09\x09\x09\x09beforeSend.call(this, xhr, o);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09return $.ajax(s);\x0a\x09\x09}\x0a\x0a\x09\x09// private function for handling file uploads (hat tip to YAHOO!)\x0a\x09\x09function fileUploadIframe(a) {\x0a\x09\x09\x09var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;\x0a\x09\x09\x09var deferred = $.Deferred();\x0a\x0a\x09\x09\x09// #341\x0a\x09\x09\x09deferred.abort = function(status) {\x0a\x09\x09\x09\x09xhr.abort(status);\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if (a) {\x0a\x09\x09\x09\x09// ensure that every serialized input is still enabled\x0a\x09\x09\x09\x09for (i = 0; i \x3c elements.length; i++) {\x0a\x09\x09\x09\x09\x09el = $(elements[i]);\x0a\x09\x09\x09\x09\x09if (hasProp) {\x0a\x09\x09\x09\x09\x09\x09el.prop(\x27disabled\x27, false);\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09el.removeAttr(\x27disabled\x27);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09s = $.extend(true, {}, $.ajaxSettings, options);\x0a\x09\x09\x09s.context = s.context || s;\x0a\x09\x09\x09id = \x27jqFormIO\x27 + new Date().getTime();\x0a\x09\x09\x09var ownerDocument = form.ownerDocument;\x0a\x09\x09\x09var $body = $form.closest(\x27body\x27);\x0a\x0a\x09\x09\x09if (s.iframeTarget) {\x0a\x09\x09\x09\x09$io = $(s.iframeTarget, ownerDocument);\x0a\x09\x09\x09\x09n = $io.attr2(\x27name\x27);\x0a\x09\x09\x09\x09if (!n) {\x0a\x09\x09\x09\x09\x09$io.attr2(\x27name\x27, id);\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09id = n;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09$io = $(\x27\x3ciframe name=\x22\x27 + id + \x27\x22 src=\x22\x27 + s.iframeSrc + \x27\x22 /\x3e\x27, ownerDocument);\x0a\x09\x09\x09\x09$io.css({position: \x27absolute\x27, top: \x27-1000px\x27, left: \x27-1000px\x27});\x0a\x09\x09\x09}\x0a\x09\x09\x09io = $io[0];\x0a\x0a\x0a\x09\x09\x09xhr = { // mock object\x0a\x09\x09\x09\x09aborted               : 0,\x0a\x09\x09\x09\x09responseText          : null,\x0a\x09\x09\x09\x09responseXML           : null,\x0a\x09\x09\x09\x09status                : 0,\x0a\x09\x09\x09\x09statusText            : \x27n/a\x27,\x0a\x09\x09\x09\x09getAllResponseHeaders : function() {},\x0a\x09\x09\x09\x09getResponseHeader     : function() {},\x0a\x09\x09\x09\x09setRequestHeader      : function() {},\x0a\x09\x09\x09\x09abort                 : function(status) {\x0a\x09\x09\x09\x09\x09var e = (status === \x27timeout\x27 ? \x27timeout\x27 : \x27aborted\x27);\x0a\x0a\x09\x09\x09\x09\x09log(\x27aborting upload... \x27 + e);\x0a\x09\x09\x09\x09\x09this.aborted = 1;\x0a\x0a\x09\x09\x09\x09\x09try { // #214, #257\x0a\x09\x09\x09\x09\x09\x09if (io.contentWindow.document.execCommand) {\x0a\x09\x09\x09\x09\x09\x09\x09io.contentWindow.document.execCommand(\x27Stop\x27);\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09} catch (ignore) {}\x0a\x0a\x09\x09\x09\x09\x09$io.attr(\x27src\x27, s.iframeSrc); // abort op in progress\x0a\x09\x09\x09\x09\x09xhr.error = e;\x0a\x09\x09\x09\x09\x09if (s.error) {\x0a\x09\x09\x09\x09\x09\x09s.error.call(s.context, xhr, e, status);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if (g) {\x0a\x09\x09\x09\x09\x09\x09$.event.trigger(\x27ajaxError\x27, [xhr, s, e]);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if (s.complete) {\x0a\x09\x09\x09\x09\x09\x09s.complete.call(s.context, xhr, e);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09g = s.global;\x0a\x09\x09\x09// trigger ajax global events so that activity/block indicators work like normal\x0a\x09\x09\x09if (g && $.active++ === 0) {\x0a\x09\x09\x09\x09$.event.trigger(\x27ajaxStart\x27);\x0a\x09\x09\x09}\x0a\x09\x09\x09if (g) {\x0a\x09\x09\x09\x09$.event.trigger(\x27ajaxSend\x27, [xhr, s]);\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {\x0a\x09\x09\x09\x09if (s.global) {\x0a\x09\x09\x09\x09\x09$.active--;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09deferred.reject();\x0a\x0a\x09\x09\x09\x09return deferred;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (xhr.aborted) {\x0a\x09\x09\x09\x09deferred.reject();\x0a\x0a\x09\x09\x09\x09return deferred;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// add submitting element to data if we know it\x0a\x09\x09\x09sub = form.clk;\x0a\x09\x09\x09if (sub) {\x0a\x09\x09\x09\x09n = sub.name;\x0a\x09\x09\x09\x09if (n && !sub.disabled) {\x0a\x09\x09\x09\x09\x09s.extraData = s.extraData || {};\x0a\x09\x09\x09\x09\x09s.extraData[n] = sub.value;\x0a\x09\x09\x09\x09\x09if (sub.type === \x27image\x27) {\x0a\x09\x09\x09\x09\x09\x09s.extraData[n + \x27.x\x27] = form.clk_x;\x0a\x09\x09\x09\x09\x09\x09s.extraData[n + \x27.y\x27] = form.clk_y;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09var CLIENT_TIMEOUT_ABORT = 1;\x0a\x09\x09\x09var SERVER_ABORT = 2;\x0a\x0a\x09\x09\x09function getDoc(frame) {\x0a\x09\x09\x09\x09/* it looks like contentWindow or contentDocument do not\x0a\x09\x09\x09\x09 * carry the protocol property in ie8, when running under ssl\x0a\x09\x09\x09\x09 * frame.document is the only valid response document, since\x0a\x09\x09\x09\x09 * the protocol is know but not on the other two objects. strange?\x0a\x09\x09\x09\x09 * \x22Same origin policy\x22 http://en.wikipedia.org/wiki/Same_origin_policy\x0a\x09\x09\x09\x09 */\x0a\x0a\x09\x09\x09\x09var doc = null;\x0a\x0a\x09\x09\x09\x09// IE8 cascading access check\x0a\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09if (frame.contentWindow) {\x0a\x09\x09\x09\x09\x09\x09doc = frame.contentWindow.document;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} catch (err) {\x0a\x09\x09\x09\x09\x09// IE8 access denied under ssl & missing protocol\x0a\x09\x09\x09\x09\x09log(\x27cannot get iframe.contentWindow document: \x27 + err);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (doc) { // successful getting content\x0a\x09\x09\x09\x09\x09return doc;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09try { // simply checking may throw in ie8 under ssl or mismatched protocol\x0a\x09\x09\x09\x09\x09doc = frame.contentDocument ? frame.contentDocument : frame.document;\x0a\x09\x09\x09\x09} catch (err) {\x0a\x09\x09\x09\x09\x09// last attempt\x0a\x09\x09\x09\x09\x09log(\x27cannot get iframe.contentDocument: \x27 + err);\x0a\x09\x09\x09\x09\x09doc = frame.document;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return doc;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// Rails CSRF hack (thanks to Yvan Barthelemy)\x0a\x09\x09\x09var csrf_token = $(\x27meta[name=csrf-token]\x27).attr(\x27content\x27);\x0a\x09\x09\x09var csrf_param = $(\x27meta[name=csrf-param]\x27).attr(\x27content\x27);\x0a\x0a\x09\x09\x09if (csrf_param && csrf_token) {\x0a\x09\x09\x09\x09s.extraData = s.extraData || {};\x0a\x09\x09\x09\x09s.extraData[csrf_param] = csrf_token;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// take a breath so that pending repaints get some cpu time before the upload starts\x0a\x09\x09\x09function doSubmit() {\x0a\x09\x09\x09\x09// make sure form attrs are set\x0a\x09\x09\x09\x09var t = $form.attr2(\x27target\x27),\x0a\x09\x09\x09\x09\x09a = $form.attr2(\x27action\x27),\x0a\x09\x09\x09\x09\x09mp = \x27multipart/form-data\x27,\x0a\x09\x09\x09\x09\x09et = $form.attr(\x27enctype\x27) || $form.attr(\x27encoding\x27) || mp;\x0a\x0a\x09\x09\x09\x09// update form attrs in IE friendly way\x0a\x09\x09\x09\x09form.setAttribute(\x27target\x27, id);\x0a\x09\x09\x09\x09if (!method || /post/i.test(method)) {\x0a\x09\x09\x09\x09\x09form.setAttribute(\x27method\x27, \x27POST\x27);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if (a !== s.url) {\x0a\x09\x09\x09\x09\x09form.setAttribute(\x27action\x27, s.url);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// ie borks in some cases when setting encoding\x0a\x09\x09\x09\x09if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {\x0a\x09\x09\x09\x09\x09$form.attr({\x0a\x09\x09\x09\x09\x09\x09encoding : \x27multipart/form-data\x27,\x0a\x09\x09\x09\x09\x09\x09enctype  : \x27multipart/form-data\x27\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// support timout\x0a\x09\x09\x09\x09if (s.timeout) {\x0a\x09\x09\x09\x09\x09timeoutHandle = setTimeout(function() {\x0a\x09\x09\x09\x09\x09\x09timedOut = true; cb(CLIENT_TIMEOUT_ABORT);\x0a\x09\x09\x09\x09\x09}, s.timeout);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// look for server aborts\x0a\x09\x09\x09\x09function checkState() {\x0a\x09\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09\x09var state = getDoc(io).readyState;\x0a\x0a\x09\x09\x09\x09\x09\x09log(\x27state = \x27 + state);\x0a\x09\x09\x09\x09\x09\x09if (state && state.toLowerCase() === \x27uninitialized\x27) {\x0a\x09\x09\x09\x09\x09\x09\x09setTimeout(checkState, 50);\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09} catch (e) {\x0a\x09\x09\x09\x09\x09\x09log(\x27Server abort: \x27, e, \x27 (\x27, e.name, \x27)\x27);\x0a\x09\x09\x09\x09\x09\x09cb(SERVER_ABORT);\x09\x09\x09\x09// eslint-disable-line callback-return\x0a\x09\x09\x09\x09\x09\x09if (timeoutHandle) {\x0a\x09\x09\x09\x09\x09\x09\x09clearTimeout(timeoutHandle);\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09timeoutHandle = undefined;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// add \x22extra\x22 data to form if provided in options\x0a\x09\x09\x09\x09var extraInputs = [];\x0a\x0a\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09if (s.extraData) {\x0a\x09\x09\x09\x09\x09\x09for (var n in s.extraData) {\x0a\x09\x09\x09\x09\x09\x09\x09if (s.extraData.hasOwnProperty(n)) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09// if using the $.param format that allows for multiple values with the same name\x0a\x09\x09\x09\x09\x09\x09\x09\x09if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty(\x27name\x27) && s.extraData[n].hasOwnProperty(\x27value\x27)) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09extraInputs.push(\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09$(\x27\x3cinput type=\x22hidden\x22 name=\x22\x27 + s.extraData[n].name + \x27\x22\x3e\x27, ownerDocument).val(s.extraData[n].value)\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09.appendTo(form)[0]);\x0a\x09\x09\x09\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09extraInputs.push(\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09$(\x27\x3cinput type=\x22hidden\x22 name=\x22\x27 + n + \x27\x22\x3e\x27, ownerDocument).val(s.extraData[n])\x0a\x09\x09\x09\x09\x09\x09\x09\x09\x09\x09.appendTo(form)[0]);\x0a\x09\x09\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if (!s.iframeTarget) {\x0a\x09\x09\x09\x09\x09\x09// add iframe to doc and submit the form\x0a\x09\x09\x09\x09\x09\x09$io.appendTo($body);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if (io.attachEvent) {\x0a\x09\x09\x09\x09\x09\x09io.attachEvent(\x27onload\x27, cb);\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09io.addEventListener(\x27load\x27, cb, false);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09setTimeout(checkState, 15);\x0a\x0a\x09\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09\x09form.submit();\x0a\x0a\x09\x09\x09\x09\x09} catch (err) {\x0a\x09\x09\x09\x09\x09\x09// just in case form has element with name/id of \x27submit\x27\x0a\x09\x09\x09\x09\x09\x09var submitFn = document.createElement(\x27form\x27).submit;\x0a\x0a\x09\x09\x09\x09\x09\x09submitFn.apply(form);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09} finally {\x0a\x09\x09\x09\x09\x09// reset attrs and remove \x22extra\x22 input elements\x0a\x09\x09\x09\x09\x09form.setAttribute(\x27action\x27, a);\x0a\x09\x09\x09\x09\x09form.setAttribute(\x27enctype\x27, et); // #380\x0a\x09\x09\x09\x09\x09if (t) {\x0a\x09\x09\x09\x09\x09\x09form.setAttribute(\x27target\x27, t);\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09$form.removeAttr(\x27target\x27);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09$(extraInputs).remove();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (s.forceSync) {\x0a\x09\x09\x09\x09doSubmit();\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09setTimeout(doSubmit, 10); // this lets dom updates render\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09var data, doc, domCheckCount = 50, callbackProcessed;\x0a\x0a\x09\x09\x09function cb(e) {\x0a\x09\x09\x09\x09if (xhr.aborted || callbackProcessed) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09doc = getDoc(io);\x0a\x09\x09\x09\x09if (!doc) {\x0a\x09\x09\x09\x09\x09log(\x27cannot access response document\x27);\x0a\x09\x09\x09\x09\x09e = SERVER_ABORT;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if (e === CLIENT_TIMEOUT_ABORT && xhr) {\x0a\x09\x09\x09\x09\x09xhr.abort(\x27timeout\x27);\x0a\x09\x09\x09\x09\x09deferred.reject(xhr, \x27timeout\x27);\x0a\x0a\x09\x09\x09\x09\x09return;\x0a\x0a\x09\x09\x09\x09} else if (e === SERVER_ABORT && xhr) {\x0a\x09\x09\x09\x09\x09xhr.abort(\x27server abort\x27);\x0a\x09\x09\x09\x09\x09deferred.reject(xhr, \x27error\x27, \x27server abort\x27);\x0a\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (!doc || doc.location.href === s.iframeSrc) {\x0a\x09\x09\x09\x09\x09// response not received yet\x0a\x09\x09\x09\x09\x09if (!timedOut) {\x0a\x09\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (io.detachEvent) {\x0a\x09\x09\x09\x09\x09io.detachEvent(\x27onload\x27, cb);\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09io.removeEventListener(\x27load\x27, cb, false);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09var status = \x27success\x27, errMsg;\x0a\x0a\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09if (timedOut) {\x0a\x09\x09\x09\x09\x09\x09throw \x27timeout\x27;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09var isXml = s.dataType === \x27xml\x27 || doc.XMLDocument || $.isXMLDoc(doc);\x0a\x0a\x09\x09\x09\x09\x09log(\x27isXml=\x27 + isXml);\x0a\x0a\x09\x09\x09\x09\x09if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {\x0a\x09\x09\x09\x09\x09\x09if (--domCheckCount) {\x0a\x09\x09\x09\x09\x09\x09\x09// in some browsers (Opera) the iframe DOM is not always traversable when\x0a\x09\x09\x09\x09\x09\x09\x09// the onload callback fires, so we loop a bit to accommodate\x0a\x09\x09\x09\x09\x09\x09\x09log(\x27requeing onLoad callback, DOM not available\x27);\x0a\x09\x09\x09\x09\x09\x09\x09setTimeout(cb, 250);\x0a\x0a\x09\x09\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09// let this fall through because server response could be an empty document\x0a\x09\x09\x09\x09\x09\x09// log(\x27Could not access iframe DOM after mutiple tries.\x27);\x0a\x09\x09\x09\x09\x09\x09// throw \x27DOMException: not available\x27;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09// log(\x27response detected\x27);\x0a\x09\x09\x09\x09\x09var docRoot = doc.body ? doc.body : doc.documentElement;\x0a\x0a\x09\x09\x09\x09\x09xhr.responseText = docRoot ? docRoot.innerHTML : null;\x0a\x09\x09\x09\x09\x09xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\x0a\x09\x09\x09\x09\x09if (isXml) {\x0a\x09\x09\x09\x09\x09\x09s.dataType = \x27xml\x27;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09xhr.getResponseHeader = function(header){\x0a\x09\x09\x09\x09\x09\x09var headers = {\x27content-type\x27: s.dataType};\x0a\x0a\x09\x09\x09\x09\x09\x09return headers[header.toLowerCase()];\x0a\x09\x09\x09\x09\x09};\x0a\x09\x09\x09\x09\x09// support for XHR \x27status\x27 & \x27statusText\x27 emulation :\x0a\x09\x09\x09\x09\x09if (docRoot) {\x0a\x09\x09\x09\x09\x09\x09xhr.status = Number(docRoot.getAttribute(\x27status\x27)) || xhr.status;\x0a\x09\x09\x09\x09\x09\x09xhr.statusText = docRoot.getAttribute(\x27statusText\x27) || xhr.statusText;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09var dt = (s.dataType || \x27\x27).toLowerCase();\x0a\x09\x09\x09\x09\x09var scr = /(json|script|text)/.test(dt);\x0a\x0a\x09\x09\x09\x09\x09if (scr || s.textarea) {\x0a\x09\x09\x09\x09\x09\x09// see if user embedded response in textarea\x0a\x09\x09\x09\x09\x09\x09var ta = doc.getElementsByTagName(\x27textarea\x27)[0];\x0a\x0a\x09\x09\x09\x09\x09\x09if (ta) {\x0a\x09\x09\x09\x09\x09\x09\x09xhr.responseText = ta.value;\x0a\x09\x09\x09\x09\x09\x09\x09// support for XHR \x27status\x27 & \x27statusText\x27 emulation :\x0a\x09\x09\x09\x09\x09\x09\x09xhr.status = Number(ta.getAttribute(\x27status\x27)) || xhr.status;\x0a\x09\x09\x09\x09\x09\x09\x09xhr.statusText = ta.getAttribute(\x27statusText\x27) || xhr.statusText;\x0a\x0a\x09\x09\x09\x09\x09\x09} else if (scr) {\x0a\x09\x09\x09\x09\x09\x09\x09// account for browsers injecting pre around json response\x0a\x09\x09\x09\x09\x09\x09\x09var pre = doc.getElementsByTagName(\x27pre\x27)[0];\x0a\x09\x09\x09\x09\x09\x09\x09var b = doc.getElementsByTagName(\x27body\x27)[0];\x0a\x0a\x09\x09\x09\x09\x09\x09\x09if (pre) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\x0a\x09\x09\x09\x09\x09\x09\x09} else if (b) {\x0a\x09\x09\x09\x09\x09\x09\x09\x09xhr.responseText = b.textContent ? b.textContent : b.innerText;\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09} else if (dt === \x27xml\x27 && !xhr.responseXML && xhr.responseText) {\x0a\x09\x09\x09\x09\x09\x09xhr.responseXML = toXml(xhr.responseText);\x09\x09\x09// eslint-disable-line no-use-before-define\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09try {\x0a\x09\x09\x09\x09\x09\x09data = httpData(xhr, dt, s);\x09\x09\x09\x09\x09\x09// eslint-disable-line no-use-before-define\x0a\x0a\x09\x09\x09\x09\x09} catch (err) {\x0a\x09\x09\x09\x09\x09\x09status = \x27parsererror\x27;\x0a\x09\x09\x09\x09\x09\x09xhr.error = errMsg = (err || status);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09} catch (err) {\x0a\x09\x09\x09\x09\x09log(\x27error caught: \x27, err);\x0a\x09\x09\x09\x09\x09status = \x27error\x27;\x0a\x09\x09\x09\x09\x09xhr.error = errMsg = (err || status);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (xhr.aborted) {\x0a\x09\x09\x09\x09\x09log(\x27upload aborted\x27);\x0a\x09\x09\x09\x09\x09status = null;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (xhr.status) { // we\x27ve set xhr.status\x0a\x09\x09\x09\x09\x09status = ((xhr.status \x3e= 200 && xhr.status \x3c 300) || xhr.status === 304) ? \x27success\x27 : \x27error\x27;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// ordering of these callbacks/triggers is odd, but that\x27s how $.ajax does it\x0a\x09\x09\x09\x09if (status === \x27success\x27) {\x0a\x09\x09\x09\x09\x09if (s.success) {\x0a\x09\x09\x09\x09\x09\x09s.success.call(s.context, data, \x27success\x27, xhr);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09deferred.resolve(xhr.responseText, \x27success\x27, xhr);\x0a\x0a\x09\x09\x09\x09\x09if (g) {\x0a\x09\x09\x09\x09\x09\x09$.event.trigger(\x27ajaxSuccess\x27, [xhr, s]);\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09} else if (status) {\x0a\x09\x09\x09\x09\x09if (typeof errMsg === \x27undefined\x27) {\x0a\x09\x09\x09\x09\x09\x09errMsg = xhr.statusText;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09if (s.error) {\x0a\x09\x09\x09\x09\x09\x09s.error.call(s.context, xhr, status, errMsg);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09deferred.reject(xhr, \x27error\x27, errMsg);\x0a\x09\x09\x09\x09\x09if (g) {\x0a\x09\x09\x09\x09\x09\x09$.event.trigger(\x27ajaxError\x27, [xhr, s, errMsg]);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (g) {\x0a\x09\x09\x09\x09\x09$.event.trigger(\x27ajaxComplete\x27, [xhr, s]);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (g && !--$.active) {\x0a\x09\x09\x09\x09\x09$.event.trigger(\x27ajaxStop\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if (s.complete) {\x0a\x09\x09\x09\x09\x09s.complete.call(s.context, xhr, status);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09callbackProcessed = true;\x0a\x09\x09\x09\x09if (s.timeout) {\x0a\x09\x09\x09\x09\x09clearTimeout(timeoutHandle);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09// clean up\x0a\x09\x09\x09\x09setTimeout(function() {\x0a\x09\x09\x09\x09\x09if (!s.iframeTarget) {\x0a\x09\x09\x09\x09\x09\x09$io.remove();\x0a\x09\x09\x09\x09\x09} else { // adding else to clean up existing iframe response.\x0a\x09\x09\x09\x09\x09\x09$io.attr(\x27src\x27, s.iframeSrc);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09xhr.responseXML = null;\x0a\x09\x09\x09\x09}, 100);\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)\x0a\x09\x09\x09\x09if (window.ActiveXObject) {\x0a\x09\x09\x09\x09\x09doc = new ActiveXObject(\x27Microsoft.XMLDOM\x27);\x0a\x09\x09\x09\x09\x09doc.async = \x27false\x27;\x0a\x09\x09\x09\x09\x09doc.loadXML(s);\x0a\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09doc = (new DOMParser()).parseFromString(s, \x27text/xml\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return (doc && doc.documentElement && doc.documentElement.nodeName !== \x27parsererror\x27) ? doc : null;\x0a\x09\x09\x09};\x0a\x09\x09\x09var parseJSON = $.parseJSON || function(s) {\x0a\x09\x09\x09\x09/* jslint evil:true */\x0a\x09\x09\x09\x09return window[\x27eval\x27](\x27(\x27 + s + \x27)\x27);\x09\x09\x09// eslint-disable-line dot-notation\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09var httpData = function(xhr, type, s) { // mostly lifted from jq1.4.4\x0a\x0a\x09\x09\x09\x09var ct = xhr.getResponseHeader(\x27content-type\x27) || \x27\x27,\x0a\x09\x09\x09\x09\x09xml = ((type === \x27xml\x27 || !type) && ct.indexOf(\x27xml\x27) \x3e= 0),\x0a\x09\x09\x09\x09\x09data = xml ? xhr.responseXML : xhr.responseText;\x0a\x0a\x09\x09\x09\x09if (xml && data.documentElement.nodeName === \x27parsererror\x27) {\x0a\x09\x09\x09\x09\x09if ($.error) {\x0a\x09\x09\x09\x09\x09\x09$.error(\x27parsererror\x27);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if (s && s.dataFilter) {\x0a\x09\x09\x09\x09\x09data = s.dataFilter(data, type);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if (typeof data === \x27string\x27) {\x0a\x09\x09\x09\x09\x09if ((type === \x27json\x27 || !type) && ct.indexOf(\x27json\x27) \x3e= 0) {\x0a\x09\x09\x09\x09\x09\x09data = parseJSON(data);\x0a\x09\x09\x09\x09\x09} else if ((type === \x27script\x27 || !type) && ct.indexOf(\x27javascript\x27) \x3e= 0) {\x0a\x09\x09\x09\x09\x09\x09$.globalEval(data);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return data;\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09return deferred;\x0a\x09\x09}\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * ajaxForm() provides a mechanism for fully automating form submission.\x0a\x09 *\x0a\x09 * The advantages of using this method instead of ajaxSubmit() are:\x0a\x09 *\x0a\x09 * 1: This method will include coordinates for \x3cinput type=\x22image\x22\x3e elements (if the element\x0a\x09 *\x09is used to submit the form).\x0a\x09 * 2. This method will include the submit element\x27s name/value data (for the element that was\x0a\x09 *\x09used to submit the form).\x0a\x09 * 3. This method binds the submit() method to the form for you.\x0a\x09 *\x0a\x09 * The options argument for ajaxForm works exactly as it does for ajaxSubmit. ajaxForm merely\x0a\x09 * passes the options argument along after properly binding events for submit elements and\x0a\x09 * the form itself.\x0a\x09 */\x0a\x09$.fn.ajaxForm = function(options, data, dataType, onSuccess) {\x0a\x09\x09if (typeof options === \x27string\x27 || (options === false && arguments.length \x3e 0)) {\x0a\x09\x09\x09options = {\x0a\x09\x09\x09\x09\x27url\x27      : options,\x0a\x09\x09\x09\x09\x27data\x27     : data,\x0a\x09\x09\x09\x09\x27dataType\x27 : dataType\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09if (typeof onSuccess === \x27function\x27) {\x0a\x09\x09\x09\x09options.success = onSuccess;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09options = options || {};\x0a\x09\x09options.delegation = options.delegation && $.isFunction($.fn.on);\x0a\x0a\x09\x09// in jQuery 1.3+ we can fix mistakes with the ready state\x0a\x09\x09if (!options.delegation && this.length === 0) {\x0a\x09\x09\x09var o = {s: this.selector, c: this.context};\x0a\x0a\x09\x09\x09if (!$.isReady && o.s) {\x0a\x09\x09\x09\x09log(\x27DOM not ready, queuing ajaxForm\x27);\x0a\x09\x09\x09\x09$(function() {\x0a\x09\x09\x09\x09\x09$(o.s, o.c).ajaxForm(options);\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09return this;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\x0a\x09\x09\x09log(\x27terminating; zero elements found by selector\x27 + ($.isReady ? \x27\x27 : \x27 (DOM not ready)\x27));\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09if (options.delegation) {\x0a\x09\x09\x09$(document)\x0a\x09\x09\x09\x09.off(\x27submit.form-plugin\x27, this.selector, doAjaxSubmit)\x0a\x09\x09\x09\x09.off(\x27click.form-plugin\x27, this.selector, captureSubmittingElement)\x0a\x09\x09\x09\x09.on(\x27submit.form-plugin\x27, this.selector, options, doAjaxSubmit)\x0a\x09\x09\x09\x09.on(\x27click.form-plugin\x27, this.selector, options, captureSubmittingElement);\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09}\x0a\x0a\x09\x09return this.ajaxFormUnbind()\x0a\x09\x09\x09.on(\x27submit.form-plugin\x27, options, doAjaxSubmit)\x0a\x09\x09\x09.on(\x27click.form-plugin\x27, options, captureSubmittingElement);\x0a\x09};\x0a\x0a\x09// private event handlers\x0a\x09function doAjaxSubmit(e) {\x0a\x09\x09/* jshint validthis:true */\x0a\x09\x09var options = e.data;\x0a\x0a\x09\x09if (!e.isDefaultPrevented()) { // if event has been canceled, don\x27t proceed\x0a\x09\x09\x09e.preventDefault();\x0a\x09\x09\x09$(e.target).closest(\x27form\x27).ajaxSubmit(options); // #365\x0a\x09\x09}\x0a\x09}\x0a\x0a\x09function captureSubmittingElement(e) {\x0a\x09\x09/* jshint validthis:true */\x0a\x09\x09var target = e.target;\x0a\x09\x09var $el = $(target);\x0a\x0a\x09\x09if (!$el.is(\x27[type=submit],[type=image]\x27)) {\x0a\x09\x09\x09// is this a child element of the submit el?  (ex: a span within a button)\x0a\x09\x09\x09var t = $el.closest(\x27[type=submit]\x27);\x0a\x0a\x09\x09\x09if (t.length === 0) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x09\x09\x09target = t[0];\x0a\x09\x09}\x0a\x0a\x09\x09var form = target.form;\x0a\x0a\x09\x09form.clk = target;\x0a\x0a\x09\x09if (target.type === \x27image\x27) {\x0a\x09\x09\x09if (typeof e.offsetX !== \x27undefined\x27) {\x0a\x09\x09\x09\x09form.clk_x = e.offsetX;\x0a\x09\x09\x09\x09form.clk_y = e.offsetY;\x0a\x0a\x09\x09\x09} else if (typeof $.fn.offset === \x27function\x27) {\x0a\x09\x09\x09\x09var offset = $el.offset();\x0a\x0a\x09\x09\x09\x09form.clk_x = e.pageX - offset.left;\x0a\x09\x09\x09\x09form.clk_y = e.pageY - offset.top;\x0a\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09form.clk_x = e.pageX - target.offsetLeft;\x0a\x09\x09\x09\x09form.clk_y = e.pageY - target.offsetTop;\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x09\x09// clear form vars\x0a\x09\x09setTimeout(function() {\x0a\x09\x09\x09form.clk = form.clk_x = form.clk_y = null;\x0a\x09\x09}, 100);\x0a\x09}\x0a\x0a\x0a\x09// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\x0a\x09$.fn.ajaxFormUnbind = function() {\x0a\x09\x09return this.off(\x27submit.form-plugin click.form-plugin\x27);\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * formToArray() gathers form element data into an array of objects that can\x0a\x09 * be passed to any of the following ajax functions: $.get, $.post, or load.\x0a\x09 * Each object in the array has both a \x27name\x27 and \x27value\x27 property. An example of\x0a\x09 * an array for a simple login form might be:\x0a\x09 *\x0a\x09 * [ { name: \x27username\x27, value: \x27jresig\x27 }, { name: \x27password\x27, value: \x27secret\x27 } ]\x0a\x09 *\x0a\x09 * It is this array that is passed to pre-submit callback functions provided to the\x0a\x09 * ajaxSubmit() and ajaxForm() methods.\x0a\x09 */\x0a\x09$.fn.formToArray = function(semantic, elements, filtering) {\x0a\x09\x09var a = [];\x0a\x0a\x09\x09if (this.length === 0) {\x0a\x09\x09\x09return a;\x0a\x09\x09}\x0a\x0a\x09\x09var form = this[0];\x0a\x09\x09var formId = this.attr(\x27id\x27);\x0a\x09\x09var els = (semantic || typeof form.elements === \x27undefined\x27) ? form.getElementsByTagName(\x27*\x27) : form.elements;\x0a\x09\x09var els2;\x0a\x0a\x09\x09if (els) {\x0a\x09\x09\x09els = $.makeArray(els); // convert to standard array\x0a\x09\x09}\x0a\x0a\x09\x09// #386; account for inputs outside the form which use the \x27form\x27 attribute\x0a\x09\x09// FinesseRus: in non-IE browsers outside fields are already included in form.elements.\x0a\x09\x09if (formId && (semantic || /(Edge|Trident)\x5c//.test(navigator.userAgent))) {\x0a\x09\x09\x09els2 = $(\x27:input[form=\x22\x27 + formId + \x27\x22]\x27).get(); // hat tip @thet\x0a\x09\x09\x09if (els2.length) {\x0a\x09\x09\x09\x09els = (els || []).concat(els2);\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09if (!els || !els.length) {\x0a\x09\x09\x09return a;\x0a\x09\x09}\x0a\x0a\x09\x09if ($.isFunction(filtering)) {\x0a\x09\x09\x09els = $.map(els, filtering);\x0a\x09\x09}\x0a\x0a\x09\x09var i, j, n, v, el, max, jmax;\x0a\x0a\x09\x09for (i = 0, max = els.length; i \x3c max; i++) {\x0a\x09\x09\x09el = els[i];\x0a\x09\x09\x09n = el.name;\x0a\x09\x09\x09if (!n || el.disabled) {\x0a\x09\x09\x09\x09continue;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (semantic && form.clk && el.type === \x27image\x27) {\x0a\x09\x09\x09\x09// handle image inputs on the fly when semantic == true\x0a\x09\x09\x09\x09if (form.clk === el) {\x0a\x09\x09\x09\x09\x09a.push({name: n, value: $(el).val(), type: el.type});\x0a\x09\x09\x09\x09\x09a.push({name: n + \x27.x\x27, value: form.clk_x}, {name: n + \x27.y\x27, value: form.clk_y});\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09continue;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09v = $.fieldValue(el, true);\x0a\x09\x09\x09if (v && v.constructor === Array) {\x0a\x09\x09\x09\x09if (elements) {\x0a\x09\x09\x09\x09\x09elements.push(el);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09for (j = 0, jmax = v.length; j \x3c jmax; j++) {\x0a\x09\x09\x09\x09\x09a.push({name: n, value: v[j]});\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09} else if (feature.fileapi && el.type === \x27file\x27) {\x0a\x09\x09\x09\x09if (elements) {\x0a\x09\x09\x09\x09\x09elements.push(el);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09var files = el.files;\x0a\x0a\x09\x09\x09\x09if (files.length) {\x0a\x09\x09\x09\x09\x09for (j = 0; j \x3c files.length; j++) {\x0a\x09\x09\x09\x09\x09\x09a.push({name: n, value: files[j], type: el.type});\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09// #180\x0a\x09\x09\x09\x09\x09a.push({name: n, value: \x27\x27, type: el.type});\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09} else if (v !== null && typeof v !== \x27undefined\x27) {\x0a\x09\x09\x09\x09if (elements) {\x0a\x09\x09\x09\x09\x09elements.push(el);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09a.push({name: n, value: v, type: el.type, required: el.required});\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09if (!semantic && form.clk) {\x0a\x09\x09\x09// input type==\x27image\x27 are not found in elements array! handle it here\x0a\x09\x09\x09var $input = $(form.clk), input = $input[0];\x0a\x0a\x09\x09\x09n = input.name;\x0a\x0a\x09\x09\x09if (n && !input.disabled && input.type === \x27image\x27) {\x0a\x09\x09\x09\x09a.push({name: n, value: $input.val()});\x0a\x09\x09\x09\x09a.push({name: n + \x27.x\x27, value: form.clk_x}, {name: n + \x27.y\x27, value: form.clk_y});\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09return a;\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Serializes form data into a \x27submittable\x27 string. This method will return a string\x0a\x09 * in the format: name1=value1&amp;name2=value2\x0a\x09 */\x0a\x09$.fn.formSerialize = function(semantic) {\x0a\x09\x09// hand off to jQuery.param for proper encoding\x0a\x09\x09return $.param(this.formToArray(semantic));\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Serializes all field elements in the jQuery object into a query string.\x0a\x09 * This method will return a string in the format: name1=value1&amp;name2=value2\x0a\x09 */\x0a\x09$.fn.fieldSerialize = function(successful) {\x0a\x09\x09var a = [];\x0a\x0a\x09\x09this.each(function() {\x0a\x09\x09\x09var n = this.name;\x0a\x0a\x09\x09\x09if (!n) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09var v = $.fieldValue(this, successful);\x0a\x0a\x09\x09\x09if (v && v.constructor === Array) {\x0a\x09\x09\x09\x09for (var i = 0, max = v.length; i \x3c max; i++) {\x0a\x09\x09\x09\x09\x09a.push({name: n, value: v[i]});\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09} else if (v !== null && typeof v !== \x27undefined\x27) {\x0a\x09\x09\x09\x09a.push({name: this.name, value: v});\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x0a\x09\x09// hand off to jQuery.param for proper encoding\x0a\x09\x09return $.param(a);\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Returns the value(s) of the element in the matched set. For example, consider the following form:\x0a\x09 *\x0a\x09 *\x09\x3cform\x3e\x3cfieldset\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22A\x22 type=\x22text\x22\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22A\x22 type=\x22text\x22\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22B\x22 type=\x22checkbox\x22 value=\x22B1\x22\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22B\x22 type=\x22checkbox\x22 value=\x22B2\x22\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22C\x22 type=\x22radio\x22 value=\x22C1\x22\x3e\x0a\x09 *\x09\x09\x3cinput name=\x22C\x22 type=\x22radio\x22 value=\x22C2\x22\x3e\x0a\x09 *\x09\x3c/fieldset\x3e\x3c/form\x3e\x0a\x09 *\x0a\x09 *\x09var v = $(\x27input[type=text]\x27).fieldValue();\x0a\x09 *\x09// if no values are entered into the text inputs\x0a\x09 *\x09v === [\x27\x27,\x27\x27]\x0a\x09 *\x09// if values entered into the text inputs are \x27foo\x27 and \x27bar\x27\x0a\x09 *\x09v === [\x27foo\x27,\x27bar\x27]\x0a\x09 *\x0a\x09 *\x09var v = $(\x27input[type=checkbox]\x27).fieldValue();\x0a\x09 *\x09// if neither checkbox is checked\x0a\x09 *\x09v === undefined\x0a\x09 *\x09// if both checkboxes are checked\x0a\x09 *\x09v === [\x27B1\x27, \x27B2\x27]\x0a\x09 *\x0a\x09 *\x09var v = $(\x27input[type=radio]\x27).fieldValue();\x0a\x09 *\x09// if neither radio is checked\x0a\x09 *\x09v === undefined\x0a\x09 *\x09// if first radio is checked\x0a\x09 *\x09v === [\x27C1\x27]\x0a\x09 *\x0a\x09 * The successful argument controls whether or not the field element must be \x27successful\x27\x0a\x09 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\x0a\x09 * The default value of the successful argument is true. If this value is false the value(s)\x0a\x09 * for each element is returned.\x0a\x09 *\x0a\x09 * Note: This method *always* returns an array. If no valid value can be determined the\x0a\x09 *\x09array will be empty, otherwise it will contain one or more values.\x0a\x09 */\x0a\x09$.fn.fieldValue = function(successful) {\x0a\x09\x09for (var val = [], i = 0, max = this.length; i \x3c max; i++) {\x0a\x09\x09\x09var el = this[i];\x0a\x09\x09\x09var v = $.fieldValue(el, successful);\x0a\x0a\x09\x09\x09if (v === null || typeof v === \x27undefined\x27 || (v.constructor === Array && !v.length)) {\x0a\x09\x09\x09\x09continue;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if (v.constructor === Array) {\x0a\x09\x09\x09\x09$.merge(val, v);\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09val.push(v);\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x0a\x09\x09return val;\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Returns the value of the field element.\x0a\x09 */\x0a\x09$.fieldValue = function(el, successful) {\x0a\x09\x09var n = el.name, t = el.type, tag = el.tagName.toLowerCase();\x0a\x0a\x09\x09if (typeof successful === \x27undefined\x27) {\x0a\x09\x09\x09successful = true;\x0a\x09\x09}\x0a\x0a\x09\x09/* eslint-disable no-mixed-operators */\x0a\x09\x09if (successful && (!n || el.disabled || t === \x27reset\x27 || t === \x27button\x27 ||\x0a\x09\x09\x09(t === \x27checkbox\x27 || t === \x27radio\x27) && !el.checked ||\x0a\x09\x09\x09(t === \x27submit\x27 || t === \x27image\x27) && el.form && el.form.clk !== el ||\x0a\x09\x09\x09tag === \x27select\x27 && el.selectedIndex === -1)) {\x0a\x09\x09/* eslint-enable no-mixed-operators */\x0a\x09\x09\x09return null;\x0a\x09\x09}\x0a\x0a\x09\x09if (tag === \x27select\x27) {\x0a\x09\x09\x09var index = el.selectedIndex;\x0a\x0a\x09\x09\x09if (index \x3c 0) {\x0a\x09\x09\x09\x09return null;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09var a = [], ops = el.options;\x0a\x09\x09\x09var one = (t === \x27select-one\x27);\x0a\x09\x09\x09var max = (one ? index + 1 : ops.length);\x0a\x0a\x09\x09\x09for (var i = (one ? index : 0); i \x3c max; i++) {\x0a\x09\x09\x09\x09var op = ops[i];\x0a\x0a\x09\x09\x09\x09if (op.selected && !op.disabled) {\x0a\x09\x09\x09\x09\x09var v = op.value;\x0a\x0a\x09\x09\x09\x09\x09if (!v) { // extra pain for IE...\x0a\x09\x09\x09\x09\x09\x09v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if (one) {\x0a\x09\x09\x09\x09\x09\x09return v;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09a.push(v);\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return a;\x0a\x09\x09}\x0a\x0a\x09\x09return $(el).val().replace(rCRLF, \x27\x5cr\x5cn\x27);\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Clears the form data. Takes the following actions on the form\x27s input fields:\x0a\x09 *  - input text fields will have their \x27value\x27 property set to the empty string\x0a\x09 *  - select elements will have their \x27selectedIndex\x27 property set to -1\x0a\x09 *  - checkbox and radio inputs will have their \x27checked\x27 property set to false\x0a\x09 *  - inputs of type submit, button, reset, and hidden will *not* be effected\x0a\x09 *  - button elements will *not* be effected\x0a\x09 */\x0a\x09$.fn.clearForm = function(includeHidden) {\x0a\x09\x09return this.each(function() {\x0a\x09\x09\x09$(\x27input,select,textarea\x27, this).clearFields(includeHidden);\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Clears the selected form elements.\x0a\x09 */\x0a\x09$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {\x0a\x09\x09var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // \x27hidden\x27 is not in this list\x0a\x0a\x09\x09return this.each(function() {\x0a\x09\x09\x09var t = this.type, tag = this.tagName.toLowerCase();\x0a\x0a\x09\x09\x09if (re.test(t) || tag === \x27textarea\x27) {\x0a\x09\x09\x09\x09this.value = \x27\x27;\x0a\x0a\x09\x09\x09} else if (t === \x27checkbox\x27 || t === \x27radio\x27) {\x0a\x09\x09\x09\x09this.checked = false;\x0a\x0a\x09\x09\x09} else if (tag === \x27select\x27) {\x0a\x09\x09\x09\x09this.selectedIndex = -1;\x0a\x0a\x09\x09\x09} else if (t === \x27file\x27) {\x0a\x09\x09\x09\x09if (/MSIE/.test(navigator.userAgent)) {\x0a\x09\x09\x09\x09\x09$(this).replaceWith($(this).clone(true));\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09$(this).val(\x27\x27);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09} else if (includeHidden) {\x0a\x09\x09\x09\x09// includeHidden can be the value true, or it can be a selector string\x0a\x09\x09\x09\x09// indicating a special test; for example:\x0a\x09\x09\x09\x09// $(\x27#myForm\x27).clearForm(\x27.special:hidden\x27)\x0a\x09\x09\x09\x09// the above would clean hidden inputs that have the class of \x27special\x27\x0a\x09\x09\x09\x09if ((includeHidden === true && /hidden/.test(t)) ||\x0a\x09\x09\x09\x09\x09(typeof includeHidden === \x27string\x27 && $(this).is(includeHidden))) {\x0a\x09\x09\x09\x09\x09this.value = \x27\x27;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09};\x0a\x0a\x0a\x09/**\x0a\x09 * Resets the form data or individual elements. Takes the following actions\x0a\x09 * on the selected tags:\x0a\x09 * - all fields within form elements will be reset to their original value\x0a\x09 * - input / textarea / select fields will be reset to their original value\x0a\x09 * - option / optgroup fields (for multi-selects) will defaulted individually\x0a\x09 * - non-multiple options will find the right select to default\x0a\x09 * - label elements will be searched against its \x27for\x27 attribute\x0a\x09 * - all others will be searched for appropriate children to default\x0a\x09 */\x0a\x09$.fn.resetForm = function() {\x0a\x09\x09return this.each(function() {\x0a\x09\x09\x09var el = $(this);\x0a\x09\x09\x09var tag = this.tagName.toLowerCase();\x0a\x0a\x09\x09\x09switch (tag) {\x0a\x09\x09\x09case \x27input\x27:\x0a\x09\x09\x09\x09this.checked = this.defaultChecked;\x0a\x09\x09\x09\x09\x09// fall through\x0a\x0a\x09\x09\x09case \x27textarea\x27:\x0a\x09\x09\x09\x09this.value = this.defaultValue;\x0a\x0a\x09\x09\x09\x09return true;\x0a\x0a\x09\x09\x09case \x27option\x27:\x0a\x09\x09\x09case \x27optgroup\x27:\x0a\x09\x09\x09\x09var select = el.parents(\x27select\x27);\x0a\x0a\x09\x09\x09\x09if (select.length && select[0].multiple) {\x0a\x09\x09\x09\x09\x09if (tag === \x27option\x27) {\x0a\x09\x09\x09\x09\x09\x09this.selected = this.defaultSelected;\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09el.find(\x27option\x27).resetForm();\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09select.resetForm();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return true;\x0a\x0a\x09\x09\x09case \x27select\x27:\x0a\x09\x09\x09\x09el.find(\x27option\x27).each(function(i) {\x09\x09\x09\x09// eslint-disable-line consistent-return\x0a\x09\x09\x09\x09\x09this.selected = this.defaultSelected;\x0a\x09\x09\x09\x09\x09if (this.defaultSelected && !el[0].multiple) {\x0a\x09\x09\x09\x09\x09\x09el[0].selectedIndex = i;\x0a\x0a\x09\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09return true;\x0a\x0a\x09\x09\x09case \x27label\x27:\x0a\x09\x09\x09\x09var forEl = $(el.attr(\x27for\x27));\x0a\x09\x09\x09\x09var list = el.find(\x27input,select,textarea\x27);\x0a\x0a\x09\x09\x09\x09if (forEl[0]) {\x0a\x09\x09\x09\x09\x09list.unshift(forEl[0]);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09list.resetForm();\x0a\x0a\x09\x09\x09\x09return true;\x0a\x0a\x09\x09\x09case \x27form\x27:\x0a\x09\x09\x09\x09\x09// guard against an input with the name of \x27reset\x27\x0a\x09\x09\x09\x09\x09// note that IE reports the reset function as an \x27object\x27\x0a\x09\x09\x09\x09if (typeof this.reset === \x27function\x27 || (typeof this.reset === \x27object\x27 && !this.reset.nodeType)) {\x0a\x09\x09\x09\x09\x09this.reset();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return true;\x0a\x0a\x09\x09\x09default:\x0a\x09\x09\x09\x09el.find(\x27form,input,label,select,textarea\x27).resetForm();\x0a\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Enables or disables any matching elements.\x0a\x09 */\x0a\x09$.fn.enable = function(b) {\x0a\x09\x09if (typeof b === \x27undefined\x27) {\x0a\x09\x09\x09b = true;\x0a\x09\x09}\x0a\x0a\x09\x09return this.each(function() {\x0a\x09\x09\x09this.disabled = !b;\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09/**\x0a\x09 * Checks/unchecks any matching checkboxes or radio buttons and\x0a\x09 * selects/deselects and matching option elements.\x0a\x09 */\x0a\x09$.fn.selected = function(select) {\x0a\x09\x09if (typeof select === \x27undefined\x27) {\x0a\x09\x09\x09select = true;\x0a\x09\x09}\x0a\x0a\x09\x09return this.each(function() {\x0a\x09\x09\x09var t = this.type;\x0a\x0a\x09\x09\x09if (t === \x27checkbox\x27 || t === \x27radio\x27) {\x0a\x09\x09\x09\x09this.checked = select;\x0a\x0a\x09\x09\x09} else if (this.tagName.toLowerCase() === \x27option\x27) {\x0a\x09\x09\x09\x09var $sel = $(this).parent(\x27select\x27);\x0a\x0a\x09\x09\x09\x09if (select && $sel[0] && $sel[0].type === \x27select-one\x27) {\x0a\x09\x09\x09\x09\x09// deselect all other options\x0a\x09\x09\x09\x09\x09$sel.find(\x27option\x27).selected(false);\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09this.selected = select;\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09// expose debug var\x0a\x09$.fn.ajaxSubmit.debug = false;\x0a\x0a\x09// helper fn for console logging\x0a\x09function log() {\x0a\x09\x09if (!$.fn.ajaxSubmit.debug) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09var msg = \x27[jquery.form] \x27 + Array.prototype.join.call(arguments, \x27\x27);\x0a\x0a\x09\x09if (window.console && window.console.log) {\x0a\x09\x09\x09window.console.log(msg);\x0a\x0a\x09\x09} else if (window.opera && window.opera.postError) {\x0a\x09\x09\x09window.opera.postError(msg);\x0a\x09\x09}\x0a\x09}\x0a}));\x0aeep!'}