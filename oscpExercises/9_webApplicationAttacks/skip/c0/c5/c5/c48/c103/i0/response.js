var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:10 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Mon, 08 Apr 2019 05:22:51 GMT\x0aETag: \x2217de-585fe071bc0c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-2116/2117\x0aContent-Length: 2117\x0aKeep-Alive: timeout=5, max=76\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/wp-emoji-loader.js\x0a */\x0a\x0a( function( window, document, settings ) {\x0a\x09var src, ready, ii, tests;\x0a\x0a\x09// Create a canvas element for testing native browser support of emoji.\x0a\x09var canvas = document.createElement( \x27canvas\x27 );\x0a\x09var context = canvas.getContext && canvas.getContext( \x272d\x27 );\x0a\x0a\x09/**\x0a\x09 * Checks if two sets of Emoji characters render the same visually.\x0a\x09 *\x0a\x09 * @since 4.9.0\x0a\x09 *\x0a\x09 * @private\x0a\x09 *\x0a\x09 * @param {number[]} set1 Set of Emoji character codes.\x0a\x09 * @param {number[]} set2 Set of Emoji character codes.\x0a\x09 *\x0a\x09 * @return {boolean} True if the two sets render the same.\x0a\x09 */\x0a\x09function emojiSetsRenderIdentically( set1, set2 ) {\x0a\x09\x09var stringFromCharCode = String.fromCharCode;\x0a\x0a\x09\x09// Cleanup from previous test.\x0a\x09\x09context.clearRect( 0, 0, canvas.width, canvas.height );\x0a\x09\x09context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );\x0a\x09\x09var rendered1 = canvas.toDataURL();\x0a\x0a\x09\x09// Cleanup from previous test.\x0a\x09\x09context.clearRect( 0, 0, canvas.width, canvas.height );\x0a\x09\x09context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );\x0a\x09\x09var rendered2 = canvas.toDataURL();\x0a\x0a\x09\x09return rendered1 === rendered2;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Detects if the browser supports rendering emoji or flag emoji.\x0a\x09 *\x0a\x09 * Flag emoji are a single glyph made of two characters, so some browsers\x0a\x09 * (notably, Firefox OS X) don\x27t support them.\x0a\x09 *\x0a\x09 * @since 4.2.0\x0a\x09 *\x0a\x09 * @private\x0a\x09 *\x0a\x09 * @param {string} type Whether to test for support of \x22flag\x22 or \x22emoji\x22.\x0a\x09 *\x0a\x09 * @return {boolean} True if the browser can render emoji, false if it cannot.\x0a\x09 */\x0a\x09function browserSupportsEmoji( type ) {\x0a\x09\x09var isIdentical;\x0a\x0a\x09\x09if ( ! context || ! context.fillText ) {\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x0a\x09\x09/*\x0a\x09\x09 * Chrome on OS X added native emoji rendering in M41. Unfortunately,\x0a\x09\x09 * it doesn\x27t work when the font is bolder than 500 weight. So, we\x0a\x09\x09 * check for bold rendering support to avoid invisible emoji in Chrome.\x0a\x09\x09 */\x0a\x09\x09context.textBaseline = \x27top\x27;\x0a\x09\x09context.font = \x27600 32px Arial\x27;\x0a\x0a\x09\x09switch ( type ) {\x0a\x09\x09\x09case \x27flag\x27:\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Test for UN flag compatibility. This is the least supported of the letter locale flags,\x0a\x09\x09\x09\x09 * so gives us an easy test for full support.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * To test for support, we try to render it, and compare the rendering to how it would look if\x0a\x09\x09\x09\x09 * the browser doesn\x27t render it correctly ([U] + [N]).\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09isIdentical = emojiSetsRenderIdentically(\x0a\x09\x09\x09\x09\x09[ 0xD83C, 0xDDFA, 0xD83C, 0xDDF3 ],\x0a\x09\x09\x09\x09\x09[ 0xD83C, 0xDDFA, 0x200B, 0xD83C, 0xDDF3 ]\x0a\x09\x09\x09\x09);\x0a\x0a\x09\x09\x09\x09if ( isIdentical ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Test for English flag compatibility. England is a country in the United Kingdom, it\x0a\x09\x09\x09\x09 * does not have a two letter locale code but rather an five letter sub-division code.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * To test for support, we try to render it, and compare the rendering to how it would look if\x0a\x09\x09\x09\x09 * the browser doesn\x27t render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09isIdentical = emojiSetsRenderIdentically(\x0a\x09\x09\x09\x09\x09[ 0xD83C, 0xDFF4, 0xDB40, 0xDC67, 0xDB40, 0xDC62, 0xDB40, 0xDC65, 0xDB40, 0xDC6E, 0xDB40, 0xDC67, 0xDB40, 0xDC7F ],\x0a\x09\x09\x09\x09\x09[ 0xD83C, 0xDFF4, 0x200B, 0xDB40, 0xDC67, 0x200B, 0xDB40, 0xDC62, 0x200B, 0xDB40, 0xDC65, 0x200B, 0xDB40, 0xDC6E, 0x200B, 0xDB40, 0xDC67, 0x200B, 0xDB40, 0xDC7F ]\x0a\x09\x09\x09\x09);\x0a\x0a\x09\x09\x09\x09return ! isIdentical;\x0a\x09\x09\x09case \x27emoji\x27:\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Love is love.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * To test for Emoji 12 support, try to render a new emoji: men holding hands, with different skin\x0a\x09\x09\x09\x09 * tone modifiers.\x0a\x09\x09\x09\x09 *\x0a\x09\x09\x09\x09 * When updating this test for future Emoji releases, ensure that individual emoji that make up the\x0a\x09\x09\x09\x09 * sequence come from older emoji standards.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09isIdentical = emojiSetsRenderIdentically(\x0a\x09\x09\x09\x09\x09[0xD83D, 0xDC68, 0xD83C, 0xDFFE, 0x200D, 0xD83E, 0xDD1D, 0x200D, 0xD83D, 0xDC68, 0xD83C, 0xDFFC],\x0a\x09\x09\x09\x09\x09[0xD83D, 0xDC68, 0xD83C, 0xDFFE, 0x200B, 0xD83E, 0xDD1D, 0x200B, 0xD83D, 0xDC68, 0xD83C, 0xDFFC]\x0a\x09\x09\x09\x09);\x0a\x0a\x09\x09\x09\x09return ! isIdentical;\x0a\x09\x09}\x0a\x0a\x09\x09return false;\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Adds a script to the head of the document.\x0a\x09 *\x0a\x09 * @ignore\x0a\x09 *\x0a\x09 * @since 4.2.0\x0a\x09 *\x0a\x09 * @param {Object} src The url where the script is located.\x0a\x09 * @return {void}\x0a\x09 */\x0a\x09function addScript( src ) {\x0a\x09\x09var script = document.createElement( \x27script\x27 );\x0a\x0a\x09\x09script.src = src;\x0a\x09\x09script.defer = script.type = \x27text/javascript\x27;\x0a\x09\x09document.getElementsByTagName( \x27head\x27 )[0].appendChild( script );\x0a\x09}\x0a\x0a\x09tests = Array( \x27flag\x27, \x27emoji\x27 );\x0a\x0a\x09settings.supports = {\x0a\x09\x09everything: true,\x0a\x09\x09everythingExceptFlag: true\x0a\x09};\x0a\x0a\x09/*\x0a\x09 * Tests the browser support for flag emojis and other emojis, and adjusts the\x0a\x09 * support settings accordingly.\x0a\x09 */\x0a\x09for( ii = 0; ii \x3c tests.length; ii++ ) {\x0a\x09\x09settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );\x0a\x0a\x09\x09settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];\x0a\x0a\x09\x09if ( \x27flag\x27 !== tests[ ii ] ) {\x0a\x09\x09\x09settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];\x0a\x09\x09}\x0a\x09}\x0a\x0a\x09settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;\x0a\x0a\x09// Sets DOMReady to false and assigns a ready function to settings.\x0a\x09settings.DOMReady = false;\x0a\x09settings.readyCallback = function() {\x0a\x09\x09settings.DOMReady = true;\x0a\x09};\x0a\x0a\x09// When the browser can not render everything we need to load a polyfill.\x0a\x09if ( ! settings.supports.everything ) {\x0a\x09\x09ready = function() {\x0a\x09\x09\x09settings.readyCallback();\x0a\x09\x09};\x0a\x0a\x09\x09/*\x0a\x09\x09 * Cross-browser version of adding a dom ready event.\x0a\x09\x09 */\x0a\x09\x09if ( document.addEventListener ) {\x0a\x09\x09\x09document.addEventListener( \x27DOMContentLoaded\x27, ready, false );\x0a\x09\x09\x09window.addEventListener( \x27load\x27, ready, false );\x0a\x09\x09} else {\x0a\x09\x09\x09window.attachEvent( \x27onload\x27, ready );\x0a\x09\x09\x09document.attachEvent( \x27onreadystatechange\x27, function() {\x0a\x09\x09\x09\x09if ( \x27complete\x27 === document.readyState ) {\x0a\x09\x09\x09\x09\x09settings.readyCallback();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09}\x0a\x0a\x09\x09src = settings.source || {};\x0a\x0a\x09\x09if ( src.concatemoji ) {\x0a\x09\x09\x09addScript( src.concatemoji );\x0a\x09\x09} else if ( src.wpemoji && src.twemoji ) {\x0a\x09\x09\x09addScript( src.twemoji );\x0a\x09\x09\x09addScript( src.wpemoji );\x0a\x09\x09}\x0a\x09}\x0a\x0a} )( window, document, window._wpemojiSettings );\x0a\xb5:_\x861'}