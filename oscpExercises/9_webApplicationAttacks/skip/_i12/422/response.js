var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:09 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:30:15 GMT\x0aETag: \x22f80-56faa82e93bc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1522/1523\x0aContent-Length: 1523\x0aKeep-Alive: timeout=5, max=96\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/wp-util.js\x0a */\x0a\x0a/* global _wpUtilSettings */\x0a\x0a/** @namespace wp */\x0awindow.wp = window.wp || {};\x0a\x0a(function ($) {\x0a\x09// Check for the utility settings.\x0a\x09var settings = typeof _wpUtilSettings === \x27undefined\x27 ? {} : _wpUtilSettings;\x0a\x0a\x09/**\x0a\x09 * wp.template( id )\x0a\x09 *\x0a\x09 * Fetch a JavaScript template for an id, and return a templating function for it.\x0a\x09 *\x0a\x09 * @param  {string} id   A string that corresponds to a DOM element with an id prefixed with \x22tmpl-\x22.\x0a\x09 *                       For example, \x22attachment\x22 maps to \x22tmpl-attachment\x22.\x0a\x09 * @return {function}    A function that lazily-compiles the template requested.\x0a\x09 */\x0a\x09wp.template = _.memoize(function ( id ) {\x0a\x09\x09var compiled,\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * Underscore\x27s default ERB-style templates are incompatible with PHP\x0a\x09\x09\x09 * when asp_tags is enabled, so WordPress uses Mustache-inspired templating syntax.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @see trac ticket #22344.\x0a\x09\x09\x09 */\x0a\x09\x09\x09options = {\x0a\x09\x09\x09\x09evaluate:    /\x3c#([\x5cs\x5cS]+?)#\x3e/g,\x0a\x09\x09\x09\x09interpolate: /\x5c{\x5c{\x5c{([\x5cs\x5cS]+?)\x5c}\x5c}\x5c}/g,\x0a\x09\x09\x09\x09escape:      /\x5c{\x5c{([^\x5c}]+?)\x5c}\x5c}(?!\x5c})/g,\x0a\x09\x09\x09\x09variable:    \x27data\x27\x0a\x09\x09\x09};\x0a\x0a\x09\x09return function ( data ) {\x0a\x09\x09\x09compiled = compiled || _.template( $( \x27#tmpl-\x27 + id ).html(),  options );\x0a\x09\x09\x09return compiled( data );\x0a\x09\x09};\x0a\x09});\x0a\x0a\x09// wp.ajax\x0a\x09// ------\x0a\x09//\x0a\x09// Tools for sending ajax requests with JSON responses and built in error handling.\x0a\x09// Mirrors and wraps jQuery\x27s ajax APIs.\x0a\x09wp.ajax = {\x0a\x09\x09settings: settings.ajax || {},\x0a\x0a\x09\x09/**\x0a\x09\x09 * wp.ajax.post( [action], [data] )\x0a\x09\x09 *\x0a\x09\x09 * Sends a POST request to WordPress.\x0a\x09\x09 *\x0a\x09\x09 * @param  {(string|object)} action  The slug of the action to fire in WordPress or options passed\x0a\x09\x09 *                                   to jQuery.ajax.\x0a\x09\x09 * @param  {object=}         data    Optional. The data to populate $_POST with.\x0a\x09\x09 * @return {$.promise}     A jQuery promise that represents the request,\x0a\x09\x09 *                         decorated with an abort() method.\x0a\x09\x09 */\x0a\x09\x09post: function( action, data ) {\x0a\x09\x09\x09return wp.ajax.send({\x0a\x09\x09\x09\x09data: _.isObject( action ) ? action : _.extend( data || {}, { action: action })\x0a\x09\x09\x09});\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * wp.ajax.send( [action], [options] )\x0a\x09\x09 *\x0a\x09\x09 * Sends a POST request to WordPress.\x0a\x09\x09 *\x0a\x09\x09 * @param  {(string|object)} action  The slug of the action to fire in WordPress or options passed\x0a\x09\x09 *                                   to jQuery.ajax.\x0a\x09\x09 * @param  {object=}         options Optional. The options passed to jQuery.ajax.\x0a\x09\x09 * @return {$.promise}      A jQuery promise that represents the request,\x0a\x09\x09 *                          decorated with an abort() method.\x0a\x09\x09 */\x0a\x09\x09send: function( action, options ) {\x0a\x09\x09\x09var promise, deferred;\x0a\x09\x09\x09if ( _.isObject( action ) ) {\x0a\x09\x09\x09\x09options = action;\x0a\x09\x09\x09} else {\x0a\x09\x09\x09\x09options = options || {};\x0a\x09\x09\x09\x09options.data = _.extend( options.data || {}, { action: action });\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options = _.defaults( options || {}, {\x0a\x09\x09\x09\x09type:    \x27POST\x27,\x0a\x09\x09\x09\x09url:     wp.ajax.settings.url,\x0a\x09\x09\x09\x09context: this\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09deferred = $.Deferred( function( deferred ) {\x0a\x09\x09\x09\x09// Transfer success/error callbacks.\x0a\x09\x09\x09\x09if ( options.success )\x0a\x09\x09\x09\x09\x09deferred.done( options.success );\x0a\x09\x09\x09\x09if ( options.error )\x0a\x09\x09\x09\x09\x09deferred.fail( options.error );\x0a\x0a\x09\x09\x09\x09delete options.success;\x0a\x09\x09\x09\x09delete options.error;\x0a\x0a\x09\x09\x09\x09// Use with PHP\x27s wp_send_json_success() and wp_send_json_error()\x0a\x09\x09\x09\x09deferred.jqXHR = $.ajax( options ).done( function( response ) {\x0a\x09\x09\x09\x09\x09// Treat a response of 1 as successful for backward compatibility with existing handlers.\x0a\x09\x09\x09\x09\x09if ( response === \x271\x27 || response === 1 )\x0a\x09\x09\x09\x09\x09\x09response = { success: true };\x0a\x0a\x09\x09\x09\x09\x09if ( _.isObject( response ) && ! _.isUndefined( response.success ) )\x0a\x09\x09\x09\x09\x09\x09deferred[ response.success ? \x27resolveWith\x27 : \x27rejectWith\x27 ]( this, [response.data] );\x0a\x09\x09\x09\x09\x09else\x0a\x09\x09\x09\x09\x09\x09deferred.rejectWith( this, [response] );\x0a\x09\x09\x09\x09}).fail( function() {\x0a\x09\x09\x09\x09\x09deferred.rejectWith( this, arguments );\x0a\x09\x09\x09\x09});\x0a\x09\x09\x09});\x0a\x0a\x09\x09\x09promise = deferred.promise();\x0a\x09\x09\x09promise.abort = function() {\x0a\x09\x09\x09\x09deferred.jqXHR.abort();\x0a\x09\x09\x09\x09return this;\x0a\x09\x09\x09};\x0a\x0a\x09\x09\x09return promise;\x0a\x09\x09}\x0a\x09};\x0a\x0a}(jQuery));\x0a'}