var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:58:10 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Fri, 17 May 2019 04:49:54 GMT\x0aETag: \x22e8a-5890e1d14c080-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1149/1150\x0aContent-Length: 1150\x0aKeep-Alive: timeout=5, max=51\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar tabfocus = (function (domGlobals) {\x0a    \x27use strict\x27;\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.EditorManager\x27);\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.Env\x27);\x0a\x0a    var global$4 = tinymce.util.Tools.resolve(\x27tinymce.util.Delay\x27);\x0a\x0a    var global$5 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var global$6 = tinymce.util.Tools.resolve(\x27tinymce.util.VK\x27);\x0a\x0a    var getTabFocusElements = function (editor) {\x0a      return editor.getParam(\x27tabfocus_elements\x27, \x27:prev,:next\x27);\x0a    };\x0a    var getTabFocus = function (editor) {\x0a      return editor.getParam(\x27tab_focus\x27, getTabFocusElements(editor));\x0a    };\x0a    var Settings = { getTabFocus: getTabFocus };\x0a\x0a    var DOM = global$1.DOM;\x0a    var tabCancel = function (e) {\x0a      if (e.keyCode === global$6.TAB && !e.ctrlKey && !e.altKey && !e.metaKey) {\x0a        e.preventDefault();\x0a      }\x0a    };\x0a    var setup = function (editor) {\x0a      function tabHandler(e) {\x0a        var x, el, v, i;\x0a        if (e.keyCode !== global$6.TAB || e.ctrlKey || e.altKey || e.metaKey || e.isDefaultPrevented()) {\x0a          return;\x0a        }\x0a        function find(direction) {\x0a          el = DOM.select(\x27:input:enabled,*[tabindex]:not(iframe)\x27);\x0a          function canSelectRecursive(e) {\x0a            return e.nodeName === \x27BODY\x27 || e.type !== \x27hidden\x27 && e.style.display !== \x27none\x27 && e.style.visibility !== \x27hidden\x27 && canSelectRecursive(e.parentNode);\x0a          }\x0a          function canSelect(el) {\x0a            return /INPUT|TEXTAREA|BUTTON/.test(el.tagName) && global$2.get(e.id) && el.tabIndex !== -1 && canSelectRecursive(el);\x0a          }\x0a          global$5.each(el, function (e, i) {\x0a            if (e.id === editor.id) {\x0a              x = i;\x0a              return false;\x0a            }\x0a          });\x0a          if (direction \x3e 0) {\x0a            for (i = x + 1; i \x3c el.length; i++) {\x0a              if (canSelect(el[i])) {\x0a                return el[i];\x0a              }\x0a            }\x0a          } else {\x0a            for (i = x - 1; i \x3e= 0; i--) {\x0a              if (canSelect(el[i])) {\x0a                return el[i];\x0a              }\x0a            }\x0a          }\x0a          return null;\x0a        }\x0a        v = global$5.explode(Settings.getTabFocus(editor));\x0a        if (v.length === 1) {\x0a          v[1] = v[0];\x0a          v[0] = \x27:prev\x27;\x0a        }\x0a        if (e.shiftKey) {\x0a          if (v[0] === \x27:prev\x27) {\x0a            el = find(-1);\x0a          } else {\x0a            el = DOM.get(v[0]);\x0a          }\x0a        } else {\x0a          if (v[1] === \x27:next\x27) {\x0a            el = find(1);\x0a          } else {\x0a            el = DOM.get(v[1]);\x0a          }\x0a        }\x0a        if (el) {\x0a          var focusEditor = global$2.get(el.id || el.name);\x0a          if (el.id && focusEditor) {\x0a            focusEditor.focus();\x0a          } else {\x0a            global$4.setTimeout(function () {\x0a              if (!global$3.webkit) {\x0a                domGlobals.window.focus();\x0a              }\x0a              el.focus();\x0a            }, 10);\x0a          }\x0a          e.preventDefault();\x0a        }\x0a      }\x0a      editor.on(\x27init\x27, function () {\x0a        if (editor.inline) {\x0a          DOM.setAttrib(editor.getBody(), \x27tabIndex\x27, null);\x0a        }\x0a        editor.on(\x27keyup\x27, tabCancel);\x0a        if (global$3.gecko) {\x0a          editor.on(\x27keypress keydown\x27, tabHandler);\x0a        } else {\x0a          editor.on(\x27keydown\x27, tabHandler);\x0a        }\x0a      });\x0a    };\x0a    var Keyboard = { setup: setup };\x0a\x0a    global.add(\x27tabfocus\x27, function (editor) {\x0a      Keyboard.setup(editor);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}(window));\x0a})();\x0a'}