var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:23 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Sun, 19 Aug 2018 13:33:24 GMT\x0aETag: \x221231-573c9d644b100-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1680/1681\x0aContent-Length: 1681\x0aKeep-Alive: timeout=5, max=61\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * Cookie functions.\x0a *\x0a * @output wp-includes/js/utils.js\x0a */\x0a\x0a/* global userSettings, getAllUserSettings, wpCookies, setUserSetting */\x0a/* exported getUserSetting, setUserSetting, deleteUserSetting */\x0a\x0awindow.wpCookies = {\x0a// The following functions are from Cookie.js class in TinyMCE 3, Moxiecode, used under LGPL.\x0a\x0a\x09each: function( obj, cb, scope ) {\x0a\x09\x09var n, l;\x0a\x0a\x09\x09if ( ! obj ) {\x0a\x09\x09\x09return 0;\x0a\x09\x09}\x0a\x0a\x09\x09scope = scope || obj;\x0a\x0a\x09\x09if ( typeof( obj.length ) !== \x27undefined\x27 ) {\x0a\x09\x09\x09for ( n = 0, l = obj.length; n \x3c l; n++ ) {\x0a\x09\x09\x09\x09if ( cb.call( scope, obj[n], n, obj ) === false ) {\x0a\x09\x09\x09\x09\x09return 0;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09} else {\x0a\x09\x09\x09for ( n in obj ) {\x0a\x09\x09\x09\x09if ( obj.hasOwnProperty(n) ) {\x0a\x09\x09\x09\x09\x09if ( cb.call( scope, obj[n], n, obj ) === false ) {\x0a\x09\x09\x09\x09\x09\x09return 0;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09}\x0a\x09\x09return 1;\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Get a multi-values cookie.\x0a\x09 * Returns a JS object with the name: \x27value\x27 pairs.\x0a\x09 */\x0a\x09getHash: function( name ) {\x0a\x09\x09var cookie = this.get( name ), values;\x0a\x0a\x09\x09if ( cookie ) {\x0a\x09\x09\x09this.each( cookie.split(\x27&\x27), function( pair ) {\x0a\x09\x09\x09\x09pair = pair.split(\x27=\x27);\x0a\x09\x09\x09\x09values = values || {};\x0a\x09\x09\x09\x09values[pair[0]] = pair[1];\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09return values;\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Set a multi-values cookie.\x0a\x09 *\x0a\x09 * \x27values_obj\x27 is the JS object that is stored. It is encoded as URI in wpCookies.set().\x0a\x09 */\x0a\x09setHash: function( name, values_obj, expires, path, domain, secure ) {\x0a\x09\x09var str = \x27\x27;\x0a\x0a\x09\x09this.each( values_obj, function( val, key ) {\x0a\x09\x09\x09str += ( ! str ? \x27\x27 : \x27&\x27 ) + key + \x27=\x27 + val;\x0a\x09\x09});\x0a\x0a\x09\x09this.set( name, str, expires, path, domain, secure );\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Get a cookie.\x0a\x09 */\x0a\x09get: function( name ) {\x0a\x09\x09var e, b,\x0a\x09\x09\x09cookie = document.cookie,\x0a\x09\x09\x09p = name + \x27=\x27;\x0a\x0a\x09\x09if ( ! cookie ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09b = cookie.indexOf( \x27; \x27 + p );\x0a\x0a\x09\x09if ( b === -1 ) {\x0a\x09\x09\x09b = cookie.indexOf(p);\x0a\x0a\x09\x09\x09if ( b !== 0 ) {\x0a\x09\x09\x09\x09return null;\x0a\x09\x09\x09}\x0a\x09\x09} else {\x0a\x09\x09\x09b += 2;\x0a\x09\x09}\x0a\x0a\x09\x09e = cookie.indexOf( \x27;\x27, b );\x0a\x0a\x09\x09if ( e === -1 ) {\x0a\x09\x09\x09e = cookie.length;\x0a\x09\x09}\x0a\x0a\x09\x09return decodeURIComponent( cookie.substring( b + p.length, e ) );\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Set a cookie.\x0a\x09 *\x0a\x09 * The \x27expires\x27 arg can be either a JS Date() object set to the expiration date (back-compat)\x0a\x09 * or the number of seconds until expiration\x0a\x09 */\x0a\x09set: function( name, value, expires, path, domain, secure ) {\x0a\x09\x09var d = new Date();\x0a\x0a\x09\x09if ( typeof( expires ) === \x27object\x27 && expires.toGMTString ) {\x0a\x09\x09\x09expires = expires.toGMTString();\x0a\x09\x09} else if ( parseInt( expires, 10 ) ) {\x0a\x09\x09\x09d.setTime( d.getTime() + ( parseInt( expires, 10 ) * 1000 ) ); // time must be in milliseconds\x0a\x09\x09\x09expires = d.toGMTString();\x0a\x09\x09} else {\x0a\x09\x09\x09expires = \x27\x27;\x0a\x09\x09}\x0a\x0a\x09\x09document.cookie = name + \x27=\x27 + encodeURIComponent( value ) +\x0a\x09\x09\x09( expires ? \x27; expires=\x27 + expires : \x27\x27 ) +\x0a\x09\x09\x09( path    ? \x27; path=\x27 + path       : \x27\x27 ) +\x0a\x09\x09\x09( domain  ? \x27; domain=\x27 + domain   : \x27\x27 ) +\x0a\x09\x09\x09( secure  ? \x27; secure\x27             : \x27\x27 );\x0a\x09},\x0a\x0a\x09/**\x0a\x09 * Remove a cookie.\x0a\x09 *\x0a\x09 * This is done by setting it to an empty value and setting the expiration time in the past.\x0a\x09 */\x0a\x09remove: function( name, path, domain, secure ) {\x0a\x09\x09this.set( name, \x27\x27, -1000, path, domain, secure );\x0a\x09}\x0a};\x0a\x0a// Returns the value as string. Second arg or empty string is returned when value is not set.\x0awindow.getUserSetting = function( name, def ) {\x0a\x09var settings = getAllUserSettings();\x0a\x0a\x09if ( settings.hasOwnProperty( name ) ) {\x0a\x09\x09return settings[name];\x0a\x09}\x0a\x0a\x09if ( typeof def !== \x27undefined\x27 ) {\x0a\x09\x09return def;\x0a\x09}\x0a\x0a\x09return \x27\x27;\x0a};\x0a\x0a// Both name and value must be only ASCII letters, numbers or underscore\x0a// and the shorter, the better (cookies can store maximum 4KB). Not suitable to store text.\x0a// The value is converted and stored as string.\x0awindow.setUserSetting = function( name, value, _del ) {\x0a\x09if ( \x27object\x27 !== typeof userSettings ) {\x0a\x09\x09return false;\x0a\x09}\x0a\x0a\x09var uid = userSettings.uid,\x0a\x09\x09settings = wpCookies.getHash( \x27wp-settings-\x27 + uid ),\x0a\x09\x09path = userSettings.url,\x0a\x09\x09secure = !! userSettings.secure;\x0a\x0a\x09name = name.toString().replace( /[^A-Za-z0-9_-]/g, \x27\x27 );\x0a\x0a\x09if ( typeof value === \x27number\x27 ) {\x0a\x09\x09value = parseInt( value, 10 );\x0a\x09} else {\x0a\x09\x09value = value.toString().replace( /[^A-Za-z0-9_-]/g, \x27\x27 );\x0a\x09}\x0a\x0a\x09settings = settings || {};\x0a\x0a\x09if ( _del ) {\x0a\x09\x09delete settings[name];\x0a\x09} else {\x0a\x09\x09settings[name] = value;\x0a\x09}\x0a\x0a\x09wpCookies.setHash( \x27wp-settings-\x27 + uid, settings, 31536000, path, \x27\x27, secure );\x0a\x09wpCookies.set( \x27wp-settings-time-\x27 + uid, userSettings.time, 31536000, path, \x27\x27, secure );\x0a\x0a\x09return name;\x0a};\x0a\x0awindow.deleteUserSetting = function( name ) {\x0a\x09return setUserSetting( name, \x27\x27, 1 );\x0a};\x0a\x0a// Returns all settings as js object.\x0awindow.getAllUserSettings = function() {\x0a\x09if ( \x27object\x27 !== typeof userSettings ) {\x0a\x09\x09return {};\x0a\x09}\x0a\x0a\x09return wpCookies.getHash( \x27wp-settings-\x27 + userSettings.uid ) || {};\x0a};\x0a'}