var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:53:12 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:30:15 GMT\x0aETag: \x223b8a-56faa82e93bc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-3661/3662\x0aContent-Length: 3662\x0aKeep-Alive: timeout=5, max=85\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/wp-backbone.js\x0a */\x0a\x0a/** @namespace wp */\x0awindow.wp = window.wp || {};\x0a\x0a(function ($) {\x0a\x09/**\x0a\x09 * Create the WordPress Backbone namespace.\x0a\x09 *\x0a\x09 * @namespace wp.Backbone\x0a\x09 */\x0a\x09wp.Backbone = {};\x0a\x0a\x09/**\x0a\x09 * A backbone subview manager.\x0a\x09 *\x0a\x09 * @since 3.5.0\x0a\x09 * @since 3.6.0 Moved wp.media.Views to wp.Backbone.Subviews.\x0a\x09 *\x0a\x09 * @memberOf wp.Backbone\x0a\x09 *\x0a\x09 * @class\x0a\x09 *\x0a\x09 * @param  {wp.Backbone.View} view  The main view.\x0a\x09 * @param  {Array|Object}     views The subviews for the main view.\x0a\x09 */\x0a\x09wp.Backbone.Subviews = function( view, views ) {\x0a\x09\x09this.view = view;\x0a\x09\x09this._views = _.isArray( views ) ? { \x27\x27: views } : views || {};\x0a\x09};\x0a\x0a\x09wp.Backbone.Subviews.extend = Backbone.Model.extend;\x0a\x0a\x09_.extend( wp.Backbone.Subviews.prototype, {\x0a\x09\x09/**\x0a\x09\x09 * Fetches all of the subviews.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {Array} All the subviews.\x0a\x09\x09 */\x0a\x09\x09all: function() {\x0a\x09\x09\x09return _.flatten( _.values( this._views ) );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Fetches all subviews that match a given `selector`.\x0a\x09\x09 *\x0a\x09\x09 * If no `selector` is provided, it will grab all subviews attached\x0a\x09\x09 * to the view\x27s root.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} selector A jQuery selector.\x0a\x09\x09 *\x0a\x09\x09 * @return {Array} All the subviews that match the selector.\x0a\x09\x09 */\x0a\x09\x09get: function( selector ) {\x0a\x09\x09\x09selector = selector || \x27\x27;\x0a\x09\x09\x09return this._views[ selector ];\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Fetches the first subview that matches a given `selector`.\x0a\x09\x09 *\x0a\x09\x09 * If no `selector` is provided, it will grab the first subview attached to the\x0a\x09\x09 * view\x27s root.\x0a\x09\x09 *\x0a\x09\x09 * Useful when a selector only has one subview at a time.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} selector A jQuery selector.\x0a\x09\x09 *\x0a\x09\x09 * @return {Backbone.View} The view.\x0a\x09\x09 */\x0a\x09\x09first: function( selector ) {\x0a\x09\x09\x09var views = this.get( selector );\x0a\x09\x09\x09return views && views.length ? views[0] : null;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Registers subview(s).\x0a\x09\x09 *\x0a\x09\x09 * Registers any number of `views` to a `selector`.\x0a\x09\x09 *\x0a\x09\x09 * When no `selector` is provided, the root selector (the empty string)\x0a\x09\x09 * is used. `views` accepts a `Backbone.View` instance or an array of\x0a\x09\x09 * `Backbone.View` instances.\x0a\x09\x09 *\x0a\x09\x09 * ---\x0a\x09\x09 *\x0a\x09\x09 * Accepts an `options` object, which has a significant effect on the\x0a\x09\x09 * resulting behavior.\x0a\x09\x09 *\x0a\x09\x09 * `options.silent` - *boolean, `false`*\x0a\x09\x09 * If `options.silent` is true, no DOM modifications will be made.\x0a\x09\x09 *\x0a\x09\x09 * `options.add` - *boolean, `false`*\x0a\x09\x09 * Use `Views.add()` as a shortcut for setting `options.add` to true.\x0a\x09\x09 *\x0a\x09\x09 * By default, the provided `views` will replace any existing views\x0a\x09\x09 * associated with the selector. If `options.add` is true, the provided\x0a\x09\x09 * `views` will be added to the existing views.\x0a\x09\x09 *\x0a\x09\x09 * `options.at` - *integer, `undefined`*\x0a\x09\x09 * When adding, to insert `views` at a specific index, use `options.at`.\x0a\x09\x09 * By default, `views` are added to the end of the array.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string}       selector A jQuery selector.\x0a\x09\x09 * @param {Array|Object} views    The subviews for the main view.\x0a\x09\x09 * @param {Object}       options  Options for call. If `options.silent` is true,\x0a\x09\x09 *                                no DOM  modifications will be made. Use\x0a\x09\x09 *                                `Views.add()` as a shortcut for setting\x0a\x09\x09 *                                `options.add` to true. If `options.add` is\x0a\x09\x09 *                                true, the provided `views` will be added to\x0a\x09\x09 *                                the existing views. When adding, to insert\x0a\x09\x09 *                                `views` at a specific index, use `options.at`.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09set: function( selector, views, options ) {\x0a\x09\x09\x09var existing, next;\x0a\x0a\x09\x09\x09if ( ! _.isString( selector ) ) {\x0a\x09\x09\x09\x09options  = views;\x0a\x09\x09\x09\x09views    = selector;\x0a\x09\x09\x09\x09selector = \x27\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09options  = options || {};\x0a\x09\x09\x09views    = _.isArray( views ) ? views : [ views ];\x0a\x09\x09\x09existing = this.get( selector );\x0a\x09\x09\x09next     = views;\x0a\x0a\x09\x09\x09if ( existing ) {\x0a\x09\x09\x09\x09if ( options.add ) {\x0a\x09\x09\x09\x09\x09if ( _.isUndefined( options.at ) ) {\x0a\x09\x09\x09\x09\x09\x09next = existing.concat( views );\x0a\x09\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09\x09next = existing;\x0a\x09\x09\x09\x09\x09\x09next.splice.apply( next, [ options.at, 0 ].concat( views ) );\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09} else {\x0a\x09\x09\x09\x09\x09_.each( next, function( view ) {\x0a\x09\x09\x09\x09\x09\x09view.__detach = true;\x0a\x09\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09\x09_.each( existing, function( view ) {\x0a\x09\x09\x09\x09\x09\x09if ( view.__detach )\x0a\x09\x09\x09\x09\x09\x09\x09view.$el.detach();\x0a\x09\x09\x09\x09\x09\x09else\x0a\x09\x09\x09\x09\x09\x09\x09view.remove();\x0a\x09\x09\x09\x09\x09});\x0a\x0a\x09\x09\x09\x09\x09_.each( next, function( view ) {\x0a\x09\x09\x09\x09\x09\x09delete view.__detach;\x0a\x09\x09\x09\x09\x09});\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09this._views[ selector ] = next;\x0a\x0a\x09\x09\x09_.each( views, function( subview ) {\x0a\x09\x09\x09\x09var constructor = subview.Views || wp.Backbone.Subviews,\x0a\x09\x09\x09\x09\x09subviews = subview.views = subview.views || new constructor( subview );\x0a\x09\x09\x09\x09subviews.parent   = this.view;\x0a\x09\x09\x09\x09subviews.selector = selector;\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09if ( ! options.silent )\x0a\x09\x09\x09\x09this._attach( selector, views, _.extend({ ready: this._isReady() }, options ) );\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Add subview(s) to existing subviews.\x0a\x09\x09 *\x0a\x09\x09 * An alias to `Views.set()`, which defaults `options.add` to true.\x0a\x09\x09 *\x0a\x09\x09 * Adds any number of `views` to a `selector`.\x0a\x09\x09 *\x0a\x09\x09 * When no `selector` is provided, the root selector (the empty string)\x0a\x09\x09 * is used. `views` accepts a `Backbone.View` instance or an array of\x0a\x09\x09 * `Backbone.View` instances.\x0a\x09\x09 *\x0a\x09\x09 * Uses `Views.set()` when setting `options.add` to `false`.\x0a\x09\x09 *\x0a\x09\x09 * Accepts an `options` object. By default, provided `views` will be\x0a\x09\x09 * inserted at the end of the array of existing views. To insert\x0a\x09\x09 * `views` at a specific index, use `options.at`. If `options.silent`\x0a\x09\x09 * is true, no DOM modifications will be made.\x0a\x09\x09 *\x0a\x09\x09 * For more information on the `options` object, see `Views.set()`.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string}       selector A jQuery selector.\x0a\x09\x09 * @param {Array|Object} views    The subviews for the main view.\x0a\x09\x09 * @param {Object}       options  Options for call.  To insert `views` at a\x0a\x09\x09 *                                specific index, use `options.at`. If\x0a\x09\x09 *                                `options.silent` is true, no DOM modifications\x0a\x09\x09 *                                will be made.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current subviews instance.\x0a\x09\x09 */\x0a\x09\x09add: function( selector, views, options ) {\x0a\x09\x09\x09if ( ! _.isString( selector ) ) {\x0a\x09\x09\x09\x09options  = views;\x0a\x09\x09\x09\x09views    = selector;\x0a\x09\x09\x09\x09selector = \x27\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return this.set( selector, views, _.extend({ add: true }, options ) );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Removes an added subview.\x0a\x09\x09 *\x0a\x09\x09 * Stops tracking `views` registered to a `selector`. If no `views` are\x0a\x09\x09 * set, then all of the `selector`\x27s subviews will be unregistered and\x0a\x09\x09 * removed.\x0a\x09\x09 *\x0a\x09\x09 * Accepts an `options` object. If `options.silent` is set, `remove`\x0a\x09\x09 * will *not* be triggered on the unregistered views.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string}       selector A jQuery selector.\x0a\x09\x09 * @param {Array|Object} views    The subviews for the main view.\x0a\x09\x09 * @param {Object}       options  Options for call. If `options.silent` is set,\x0a\x09\x09 *                                `remove` will *not* be triggered on the\x0a\x09\x09 *                                unregistered views.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09unset: function( selector, views, options ) {\x0a\x09\x09\x09var existing;\x0a\x0a\x09\x09\x09if ( ! _.isString( selector ) ) {\x0a\x09\x09\x09\x09options = views;\x0a\x09\x09\x09\x09views = selector;\x0a\x09\x09\x09\x09selector = \x27\x27;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09views = views || [];\x0a\x0a\x09\x09\x09if ( existing = this.get( selector ) ) {\x0a\x09\x09\x09\x09views = _.isArray( views ) ? views : [ views ];\x0a\x09\x09\x09\x09this._views[ selector ] = views.length ? _.difference( existing, views ) : [];\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09if ( ! options || ! options.silent )\x0a\x09\x09\x09\x09_.invoke( views, \x27remove\x27 );\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Detaches all subviews.\x0a\x09\x09 *\x0a\x09\x09 * Helps to preserve all subview events when re-rendering the master\x0a\x09\x09 * view. Used in conjunction with `Views.render()`.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09detach: function() {\x0a\x09\x09\x09$( _.pluck( this.all(), \x27el\x27 ) ).detach();\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Renders all subviews.\x0a\x09\x09 *\x0a\x09\x09 * Used in conjunction with `Views.detach()`.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09*/\x0a\x09\x09render: function() {\x0a\x09\x09\x09var options = {\x0a\x09\x09\x09\x09\x09ready: this._isReady()\x0a\x09\x09\x09\x09};\x0a\x0a\x09\x09\x09_.each( this._views, function( views, selector ) {\x0a\x09\x09\x09\x09this._attach( selector, views, options );\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09this.rendered = true;\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Removes all subviews.\x0a\x09\x09 *\x0a\x09\x09 * Triggers the `remove()` method on all subviews. Detaches the master\x0a\x09\x09 * view from its parent. Resets the internals of the views manager.\x0a\x09\x09 *\x0a\x09\x09 * Accepts an `options` object. If `options.silent` is set, `unset`\x0a\x09\x09 * will *not* be triggered on the master view\x27s parent.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.6.0\x0a\x09\x09 *\x0a\x09\x09 * @param {Object}  options        Options for call.\x0a\x09\x09 * @param {boolean} options.silent If true, `unset` wil *not* be triggered on\x0a\x09\x09 *                                 the master views\x27 parent.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09*/\x0a\x09\x09remove: function( options ) {\x0a\x09\x09\x09if ( ! options || ! options.silent ) {\x0a\x09\x09\x09\x09if ( this.parent && this.parent.views )\x0a\x09\x09\x09\x09\x09this.parent.views.unset( this.selector, this.view, { silent: true });\x0a\x09\x09\x09\x09delete this.parent;\x0a\x09\x09\x09\x09delete this.selector;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09_.invoke( this.all(), \x27remove\x27 );\x0a\x09\x09\x09this._views = [];\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Replaces a selector\x27s subviews\x0a\x09\x09 *\x0a\x09\x09 * By default, sets the `$target` selector\x27s html to the subview `els`.\x0a\x09\x09 *\x0a\x09\x09 * Can be overridden in subclasses.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string} $target Selector where to put the elements.\x0a\x09\x09 * @param {*} els HTML or elements to put into the selector\x27s HTML.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09replace: function( $target, els ) {\x0a\x09\x09\x09$target.html( els );\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Insert subviews into a selector.\x0a\x09\x09 *\x0a\x09\x09 * By default, appends the subview `els` to the end of the `$target`\x0a\x09\x09 * selector. If `options.at` is set, inserts the subview `els` at the\x0a\x09\x09 * provided index.\x0a\x09\x09 *\x0a\x09\x09 * Can be overridden in subclasses.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {string}  $target    Selector where to put the elements.\x0a\x09\x09 * @param {*}       els        HTML or elements to put at the end of the\x0a\x09\x09 *                             $target.\x0a\x09\x09 * @param {?Object} options    Options for call.\x0a\x09\x09 * @param {?number} options.at At which index to put the elements.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09insert: function( $target, els, options ) {\x0a\x09\x09\x09var at = options && options.at,\x0a\x09\x09\x09\x09$children;\x0a\x0a\x09\x09\x09if ( _.isNumber( at ) && ($children = $target.children()).length \x3e at )\x0a\x09\x09\x09\x09$children.eq( at ).before( els );\x0a\x09\x09\x09else\x0a\x09\x09\x09\x09$target.append( els );\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Triggers the ready event.\x0a\x09\x09 *\x0a\x09\x09 * Only use this method if you know what you\x27re doing. For performance reasons,\x0a\x09\x09 * this method does not check if the view is actually attached to the DOM. It\x27s\x0a\x09\x09 * taking your word for it.\x0a\x09\x09 *\x0a\x09\x09 * Fires the ready event on the current view and all attached subviews.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 */\x0a\x09\x09ready: function() {\x0a\x09\x09\x09this.view.trigger(\x27ready\x27);\x0a\x0a\x09\x09\x09// Find all attached subviews, and call ready on them.\x0a\x09\x09\x09_.chain( this.all() ).map( function( view ) {\x0a\x09\x09\x09\x09return view.views;\x0a\x09\x09\x09}).flatten().where({ attached: true }).invoke(\x27ready\x27);\x0a\x09\x09},\x0a\x09\x09/**\x0a\x09\x09 * Attaches a series of views to a selector. Internal.\x0a\x09\x09 *\x0a\x09\x09 * Checks to see if a matching selector exists, renders the views,\x0a\x09\x09 * performs the proper DOM operation, and then checks if the view is\x0a\x09\x09 * attached to the document.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @private\x0a\x09\x09 *\x0a\x09\x09 * @param {string}       selector    A jQuery selector.\x0a\x09\x09 * @param {Array|Object} views       The subviews for the main view.\x0a\x09\x09 * @param {Object}       options     Options for call.\x0a\x09\x09 * @param {boolean}      options.add If true the provided views will be added.\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09_attach: function( selector, views, options ) {\x0a\x09\x09\x09var $selector = selector ? this.view.$( selector ) : this.view.$el,\x0a\x09\x09\x09\x09managers;\x0a\x0a\x09\x09\x09// Check if we found a location to attach the views.\x0a\x09\x09\x09if ( ! $selector.length )\x0a\x09\x09\x09\x09return this;\x0a\x0a\x09\x09\x09managers = _.chain( views ).pluck(\x27views\x27).flatten().value();\x0a\x0a\x09\x09\x09// Render the views if necessary.\x0a\x09\x09\x09_.each( managers, function( manager ) {\x0a\x09\x09\x09\x09if ( manager.rendered )\x0a\x09\x09\x09\x09\x09return;\x0a\x0a\x09\x09\x09\x09manager.view.render();\x0a\x09\x09\x09\x09manager.rendered = true;\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09// Insert or replace the views.\x0a\x09\x09\x09this[ options.add ? \x27insert\x27 : \x27replace\x27 ]( $selector, _.pluck( views, \x27el\x27 ), options );\x0a\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * Set attached and trigger ready if the current view is already\x0a\x09\x09\x09 * attached to the DOM.\x0a\x09\x09\x09 */\x0a\x09\x09\x09_.each( managers, function( manager ) {\x0a\x09\x09\x09\x09manager.attached = true;\x0a\x0a\x09\x09\x09\x09if ( options.ready )\x0a\x09\x09\x09\x09\x09manager.ready();\x0a\x09\x09\x09}, this );\x0a\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Determines whether or not the current view is in the DOM.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @private\x0a\x09\x09 *\x0a\x09\x09 * @return {boolean} Whether or not the current view is in the DOM.\x0a\x09\x09 */\x0a\x09\x09_isReady: function() {\x0a\x09\x09\x09var node = this.view.el;\x0a\x09\x09\x09while ( node ) {\x0a\x09\x09\x09\x09if ( node === document.body )\x0a\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09node = node.parentNode;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return false;\x0a\x09\x09}\x0a\x09});\x0a\x0a\x09wp.Backbone.View = Backbone.View.extend({\x0a\x0a\x09\x09// The constructor for the `Views` manager.\x0a\x09\x09Subviews: wp.Backbone.Subviews,\x0a\x0a\x09\x09/**\x0a\x09\x09 * The base view class.\x0a\x09\x09 *\x0a\x09\x09 * This extends the backbone view to have a build-in way to use subviews. This\x0a\x09\x09 * makes it easier to have nested views.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 * @since 3.6.0 Moved wp.media.View to wp.Backbone.View\x0a\x09\x09 *\x0a\x09\x09 * @constructs\x0a\x09\x09 * @augments Backbone.View\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.Backbone\x0a\x09\x09 *\x0a\x09\x09 *\x0a\x09\x09 * @param {Object} options The options for this view.\x0a\x09\x09 */\x0a\x09\x09constructor: function( options ) {\x0a\x09\x09\x09this.views = new this.Subviews( this, this.views );\x0a\x09\x09\x09this.on( \x27ready\x27, this.ready, this );\x0a\x0a\x09\x09\x09this.options = options || {};\x0a\x0a\x09\x09\x09Backbone.View.apply( this, arguments );\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Removes this view and all subviews.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.Subviews} The current Subviews instance.\x0a\x09\x09 */\x0a\x09\x09remove: function() {\x0a\x09\x09\x09var result = Backbone.View.prototype.remove.apply( this, arguments );\x0a\x0a\x09\x09\x09// Recursively remove child views.\x0a\x09\x09\x09if ( this.views )\x0a\x09\x09\x09\x09this.views.remove();\x0a\x0a\x09\x09\x09return result;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Renders this view and all subviews.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {wp.Backbone.View} The current instance of the view.\x0a\x09\x09 */\x0a\x09\x09render: function() {\x0a\x09\x09\x09var options;\x0a\x0a\x09\x09\x09if ( this.prepare )\x0a\x09\x09\x09\x09options = this.prepare();\x0a\x0a\x09\x09\x09this.views.detach();\x0a\x0a\x09\x09\x09if ( this.template ) {\x0a\x09\x09\x09\x09options = options || {};\x0a\x09\x09\x09\x09this.trigger( \x27prepare\x27, options );\x0a\x09\x09\x09\x09this.$el.html( this.template( options ) );\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09this.views.render();\x0a\x09\x09\x09return this;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Returns the options for this view.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 *\x0a\x09\x09 * @return {Object} The options for this view.\x0a\x09\x09 */\x0a\x09\x09prepare: function() {\x0a\x09\x09\x09return this.options;\x0a\x09\x09},\x0a\x0a\x09\x09/**\x0a\x09\x09 * Method that is called when the ready event is triggered.\x0a\x09\x09 *\x0a\x09\x09 * @since 3.5.0\x0a\x09\x09 */\x0a\x09\x09ready: function() {}\x0a\x09});\x0a}(jQuery));\x0a        1'}