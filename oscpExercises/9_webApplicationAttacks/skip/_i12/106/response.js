var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:11:19 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 21 Mar 2019 12:48:00 GMT\x0aETag: \x224f60-5849a25f20000-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-5996/5997\x0aContent-Length: 5997\x0aKeep-Alive: timeout=5, max=47\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0athis[\x22wp\x22] = this[\x22wp\x22] || {}; this[\x22wp\x22][\x22autop\x22] =\x0a/******/ (function(modules) { // webpackBootstrap\x0a/******/ \x09// The module cache\x0a/******/ \x09var installedModules = {};\x0a/******/\x0a/******/ \x09// The require function\x0a/******/ \x09function __webpack_require__(moduleId) {\x0a/******/\x0a/******/ \x09\x09// Check if module is in cache\x0a/******/ \x09\x09if(installedModules[moduleId]) {\x0a/******/ \x09\x09\x09return installedModules[moduleId].exports;\x0a/******/ \x09\x09}\x0a/******/ \x09\x09// Create a new module (and put it into the cache)\x0a/******/ \x09\x09var module = installedModules[moduleId] = {\x0a/******/ \x09\x09\x09i: moduleId,\x0a/******/ \x09\x09\x09l: false,\x0a/******/ \x09\x09\x09exports: {}\x0a/******/ \x09\x09};\x0a/******/\x0a/******/ \x09\x09// Execute the module function\x0a/******/ \x09\x09modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\x0a/******/\x0a/******/ \x09\x09// Flag the module as loaded\x0a/******/ \x09\x09module.l = true;\x0a/******/\x0a/******/ \x09\x09// Return the exports of the module\x0a/******/ \x09\x09return module.exports;\x0a/******/ \x09}\x0a/******/\x0a/******/\x0a/******/ \x09// expose the modules object (__webpack_modules__)\x0a/******/ \x09__webpack_require__.m = modules;\x0a/******/\x0a/******/ \x09// expose the module cache\x0a/******/ \x09__webpack_require__.c = installedModules;\x0a/******/\x0a/******/ \x09// define getter function for harmony exports\x0a/******/ \x09__webpack_require__.d = function(exports, name, getter) {\x0a/******/ \x09\x09if(!__webpack_require__.o(exports, name)) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, name, { enumerable: true, get: getter });\x0a/******/ \x09\x09}\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// define __esModule on exports\x0a/******/ \x09__webpack_require__.r = function(exports) {\x0a/******/ \x09\x09if(typeof Symbol !== \x27undefined\x27 && Symbol.toStringTag) {\x0a/******/ \x09\x09\x09Object.defineProperty(exports, Symbol.toStringTag, { value: \x27Module\x27 });\x0a/******/ \x09\x09}\x0a/******/ \x09\x09Object.defineProperty(exports, \x27__esModule\x27, { value: true });\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// create a fake namespace object\x0a/******/ \x09// mode & 1: value is a module id, require it\x0a/******/ \x09// mode & 2: merge all properties of value into the ns\x0a/******/ \x09// mode & 4: return value when already ns object\x0a/******/ \x09// mode & 8|1: behave like require\x0a/******/ \x09__webpack_require__.t = function(value, mode) {\x0a/******/ \x09\x09if(mode & 1) value = __webpack_require__(value);\x0a/******/ \x09\x09if(mode & 8) return value;\x0a/******/ \x09\x09if((mode & 4) && typeof value === \x27object\x27 && value && value.__esModule) return value;\x0a/******/ \x09\x09var ns = Object.create(null);\x0a/******/ \x09\x09__webpack_require__.r(ns);\x0a/******/ \x09\x09Object.defineProperty(ns, \x27default\x27, { enumerable: true, value: value });\x0a/******/ \x09\x09if(mode & 2 && typeof value != \x27string\x27) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\x0a/******/ \x09\x09return ns;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// getDefaultExport function for compatibility with non-harmony modules\x0a/******/ \x09__webpack_require__.n = function(module) {\x0a/******/ \x09\x09var getter = module && module.__esModule ?\x0a/******/ \x09\x09\x09function getDefault() { return module[\x27default\x27]; } :\x0a/******/ \x09\x09\x09function getModuleExports() { return module; };\x0a/******/ \x09\x09__webpack_require__.d(getter, \x27a\x27, getter);\x0a/******/ \x09\x09return getter;\x0a/******/ \x09};\x0a/******/\x0a/******/ \x09// Object.prototype.hasOwnProperty.call\x0a/******/ \x09__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\x0a/******/\x0a/******/ \x09// __webpack_public_path__\x0a/******/ \x09__webpack_require__.p = \x22\x22;\x0a/******/\x0a/******/\x0a/******/ \x09// Load entry module and return exports\x0a/******/ \x09return __webpack_require__(__webpack_require__.s = 254);\x0a/******/ })\x0a/************************************************************************/\x0a/******/ ({\x0a\x0a/***/ 254:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a__webpack_require__.r(__webpack_exports__);\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22autop\x22, function() { return autop; });\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22removep\x22, function() { return removep; });\x0a/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);\x0a\x0a\x0a/**\x0a * The regular expression for an HTML element.\x0a *\x0a * @type {String}\x0a */\x0avar htmlSplitRegex = function () {\x0a  /* eslint-disable no-multi-spaces */\x0a  var comments = \x27!\x27 + // Start of comment, after the \x3c.\x0a  \x27(?:\x27 + // Unroll the loop: Consume everything until --\x3e is found.\x0a  \x27-(?!-\x3e)\x27 + // Dash not followed by end of comment.\x0a  \x27[^\x5c\x5c-]*\x27 + // Consume non-dashes.\x0a  \x27)*\x27 + // Loop possessively.\x0a  \x27(?:--\x3e)?\x27; // End of comment. If not found, match all input.\x0a\x0a  var cdata = \x27!\x5c\x5c[CDATA\x5c\x5c[\x27 + // Start of comment, after the \x3c.\x0a  \x27[^\x5c\x5c]]*\x27 + // Consume non-].\x0a  \x27(?:\x27 + // Unroll the loop: Consume everything until ]]\x3e is found.\x0a  \x27](?!]\x3e)\x27 + // One ] not followed by end of comment.\x0a  \x27[^\x5c\x5c]]*\x27 + // Consume non-].\x0a  \x27)*?\x27 + // Loop possessively.\x0a  \x27(?:]]\x3e)?\x27; // End of comment. If not found, match all input.\x0a\x0a  var escaped = \x27(?=\x27 + // Is the element escaped?\x0a  \x27!--\x27 + \x27|\x27 + \x27!\x5c\x5c[CDATA\x5c\x5c[\x27 + \x27)\x27 + \x27((?=!-)\x27 + // If yes, which type?\x0a  comments + \x27|\x27 + cdata + \x27)\x27;\x0a  var regex = \x27(\x27 + // Capture the entire match.\x0a  \x27\x3c\x27 + // Find start of element.\x0a  \x27(\x27 + // Conditional expression follows.\x0a  escaped + // Find end of escaped element.\x0a  \x27|\x27 + // ... else ...\x0a  \x27[^\x3e]*\x3e?\x27 + // Find end of normal element.\x0a  \x27)\x27 + \x27)\x27;\x0a  return new RegExp(regex);\x0a  /* eslint-enable no-multi-spaces */\x0a}();\x0a/**\x0a * Separate HTML elements and comments from the text.\x0a *\x0a * @param  {string} input The text which has to be formatted.\x0a * @return {Array}        The formatted text.\x0a */\x0a\x0a\x0afunction htmlSplit(input) {\x0a  var parts = [];\x0a  var workingInput = input;\x0a  var match;\x0a\x0a  while (match = workingInput.match(htmlSplitRegex)) {\x0a    parts.push(workingInput.slice(0, match.index));\x0a    parts.push(match[0]);\x0a    workingInput = workingInput.slice(match.index + match[0].length);\x0a  }\x0a\x0a  if (workingInput.length) {\x0a    parts.push(workingInput);\x0a  }\x0a\x0a  return parts;\x0a}\x0a/**\x0a * Replace characters or phrases within HTML elements only.\x0a *\x0a * @param  {string} haystack     The text which has to be formatted.\x0a * @param  {Object} replacePairs In the form {from: \x27to\x27, ...}.\x0a * @return {string}              The formatted text.\x0a */\x0a\x0a\x0afunction replaceInHtmlTags(haystack, replacePairs) {\x0a  // Find all elements.\x0a  var textArr = htmlSplit(haystack);\x0a  var changed = false; // Extract all needles.\x0a\x0a  var needles = Object.keys(replacePairs); // Loop through delimiters (elements) only.\x0a\x0a  for (var i = 1; i \x3c textArr.length; i += 2) {\x0a    for (var j = 0; j \x3c needles.length; j++) {\x0a      var needle = needles[j];\x0a\x0a      if (-1 !== textArr[i].indexOf(needle)) {\x0a        textArr[i] = textArr[i].replace(new RegExp(needle, \x27g\x27), replacePairs[needle]);\x0a        changed = true; // After one strtr() break out of the foreach loop and look at next element.\x0a\x0a        break;\x0a      }\x0a    }\x0a  }\x0a\x0a  if (changed) {\x0a    haystack = textArr.join(\x27\x27);\x0a  }\x0a\x0a  return haystack;\x0a}\x0a/**\x0a * Replaces double line-breaks with paragraph elements.\x0a *\x0a * A group of regex replaces used to identify text formatted with newlines and\x0a * replace double line-breaks with HTML paragraph tags. The remaining line-\x0a * breaks after conversion become `\x3cbr /\x3e` tags, unless br is set to \x27false\x27.\x0a *\x0a * @param  {string}    text The text which has to be formatted.\x0a * @param  {boolean}   br   Optional. If set, will convert all remaining line-\x0a *                          breaks after paragraphing. Default true.\x0a *\x0a * @example\x0a *```js\x0a * import { autop } from \x27@wordpress/autop\x27;\x0a * autop( \x27my text\x27 ); // \x22\x3cp\x3emy text\x3c/p\x3e\x22\x0a * ```\x0a *\x0a * @return {string}         Text which has been converted into paragraph tags.\x0a */\x0a\x0a\x0afunction autop(text) {\x0a  var br = arguments.length \x3e 1 && arguments[1] !== undefined ? arguments[1] : true;\x0a  var preTags = [];\x0a\x0a  if (text.trim() === \x27\x27) {\x0a    return \x27\x27;\x0a  } // Just to make things a little easier, pad the end.\x0a\x0a\x0a  text = text + \x27\x5cn\x27;\x0a  /*\x0a   * Pre tags shouldn\x27t be touched by autop.\x0a   * Replace pre tags with placeholders and bring them back after autop.\x0a   */\x0a\x0a  if (text.indexOf(\x27\x3cpre\x27) !== -1) {\x0a    var textParts = text.split(\x27\x3c/pre\x3e\x27);\x0a    var lastText = textParts.pop();\x0a    text = \x27\x27;\x0a\x0a    for (var i = 0; i \x3c textParts.length; i++) {\x0a      var textPart = textParts[i];\x0a      var start = textPart.indexOf(\x27\x3cpre\x27); // Malformed html?\x0a\x0a      if (start === -1) {\x0a        text += textPart;\x0a        continue;\x0a      }\x0a\x0a      var name = \x27\x3cpre wp-pre-tag-\x27 + i + \x27\x3e\x3c/pre\x3e\x27;\x0a      preTags.push([name, textPart.substr(start) + \x27\x3c/pre\x3e\x27]);\x0a      text += textPart.substr(0, start) + name;\x0a    }\x0a\x0a    text += lastText;\x0a  } // Change multiple \x3cbr\x3es into two line breaks, which will turn into paragraphs.\x0a\x0a\x0a  text = text.replace(/\x3cbr\x5cs*\x5c/?\x3e\x5cs*\x3cbr\x5cs*\x5c/?\x3e/g, \x27\x5cn\x5cn\x27);\x0a  var allBlocks = \x27(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)\x27; // Add a double line break above block-level opening tags.\x0a\x0a  text = text.replace(new RegExp(\x27(\x3c\x27 + allBlocks + \x27[\x5c\x5cs\x5c/\x3e])\x27, \x27g\x27), \x27\x5cn\x5cn$1\x27); // Add a double line break below block-level closing tags.\x0a\x0a  text = text.replace(new RegExp(\x27(\x3c\x5c/\x27 + allBlocks + \x27\x3e)\x27, \x27g\x27), \x27$1\x5cn\x5cn\x27); // Standardize newline characters to \x22\x5cn\x22.\x0a\x0a  text = text.replace(/\x5cr\x5cn|\x5cr/g, \x27\x5cn\x27); // Find newlines in all elements and add placeholders.\x0a\x0a  text = replaceInHtmlTags(text, {\x0a    \x27\x5cn\x27: \x27 \x3c!-- wpnl --\x3e \x27\x0a  }); // Collapse line breaks before and after \x3coption\x3e elements so they don\x27t get autop\x27d.\x0a\x0a  if (text.indexOf(\x27\x3coption\x27) !== -1) {\x0a    text = text.replace(/\x5cs*\x3coption/g, \x27\x3coption\x27);\x0a    text = text.replace(/\x3c\x5c/option\x3e\x5cs*/g, \x27\x3c/option\x3e\x27);\x0a  }\x0a  /*\x0a   * Collapse line breaks inside \x3cobject\x3e elements, before \x3cparam\x3e and \x3cembed\x3e elements\x0a   * so they don\x27t get autop\x27d.\x0a   */\x0a\x0a\x0a  if (text.indexOf(\x27\x3c/object\x3e\x27) !== -1) {\x0a    text = text.replace(/(\x3cobject[^\x3e]*\x3e)\x5cs*/g, \x27$1\x27);\x0a    text = text.replace(/\x5cs*\x3c\x5c/object\x3e/g, \x27\x3c/object\x3e\x27);\x0a    text = text.replace(/\x5cs*(\x3c\x5c/?(?:param|embed)[^\x3e]*\x3e)\x5cs*/g, \x27$1\x27);\x0a  }\x0a  /*\x0a   * Collapse line breaks inside \x3caudio\x3e and \x3cvideo\x3e elements,\x0a   * before and after \x3csource\x3e and \x3ctrack\x3e elements.\x0a   */\x0a\x0a\x0a  if (text.indexOf(\x27\x3csource\x27) !== -1 || text.indexOf(\x27\x3ctrack\x27) !== -1) {\x0a    text = text.replace(/([\x3c\x5c[](?:audio|video)[^\x3e\x5c]]*[\x3e\x5c]])\x5cs*/g, \x27$1\x27);\x0a    text = text.replace(/\x5cs*([\x3c\x5c[]\x5c/(?:audio|video)[\x3e\x5c]])/g, \x27$1\x27);\x0a    text = text.replace(/\x5cs*(\x3c(?:source|track)[^\x3e]*\x3e)\x5cs*/g, \x27$1\x27);\x0a  } // Collapse line breaks before and after \x3cfigcaption\x3e elements.\x0a\x0a\x0a  if (text.indexOf(\x27\x3cfigcaption\x27) !== -1) {\x0a    text = text.replace(/\x5cs*(\x3cfigcaption[^\x3e]*\x3e)/, \x27$1\x27);\x0a    text = text.replace(/\x3c\x5c/figcaption\x3e\x5cs*/, \x27\x3c/figcaption\x3e\x27);\x0a  } // Remove more than two contiguous line breaks.\x0a\x0a\x0a  text = text.replace(/\x5cn\x5cn+/g, \x27\x5cn\x5cn\x27); // Split up the contents into an array of strings, separated by double line breaks.\x0a\x0a  var texts = text.split(/\x5cn\x5cs*\x5cn/).filter(Boolean); // Reset text prior to rebuilding.\x0a\x0a  text = \x27\x27; // Rebuild the content as a string, wrapping every bit with a \x3cp\x3e.\x0a\x0a  texts.forEach(function (textPiece) {\x0a    text += \x27\x3cp\x3e\x27 + textPiece.replace(/^\x5cn*|\x5cn*$/g, \x27\x27) + \x27\x3c/p\x3e\x5cn\x27;\x0a  }); // Under certain strange conditions it could create a P of entirely whitespace.\x0a\x0a  text = text.replace(/\x3cp\x3e\x5cs*\x3c\x5c/p\x3e/g, \x27\x27); // Add a closing \x3cp\x3e inside \x3cdiv\x3e, \x3caddress\x3e, or \x3cform\x3e tag if missing.\x0a\x0a  text = text.replace(/\x3cp\x3e([^\x3c]+)\x3c\x5c/(div|address|form)\x3e/g, \x27\x3cp\x3e$1\x3c/p\x3e\x3c/$2\x3e\x27); // If an opening or closing block element tag is wrapped in a \x3cp\x3e, unwrap it.\x0a\x0a  text = text.replace(new RegExp(\x27\x3cp\x3e\x5c\x5cs*(\x3c\x5c/?\x27 + allBlocks + \x27[^\x3e]*\x3e)\x5c\x5cs*\x3c\x5c/p\x3e\x27, \x27g\x27), \x27$1\x27); // In some cases \x3cli\x3e may get wrapped in \x3cp\x3e, fix them.\x0a\x0a  text = text.replace(/\x3cp\x3e(\x3cli.+?)\x3c\x5c/p\x3e/g, \x27$1\x27); // If a \x3cblockquote\x3e is wrapped with a \x3cp\x3e, move it inside the \x3cblockquote\x3e.\x0a\x0a  text = text.replace(/\x3cp\x3e\x3cblockquote([^\x3e]*)\x3e/gi, \x27\x3cblockquote$1\x3e\x3cp\x3e\x27);\x0a  text = text.replace(/\x3c\x5c/blockquote\x3e\x3c\x5c/p\x3e/g, \x27\x3c/p\x3e\x3c/blockquote\x3e\x27); // If an opening or closing block element tag is preceded by an opening \x3cp\x3e tag, remove it.\x0a\x0a  text = text.replace(new RegExp(\x27\x3cp\x3e\x5c\x5cs*(\x3c\x5c/?\x27 + allBlocks + \x27[^\x3e]*\x3e)\x27, \x27g\x27), \x27$1\x27); // If an opening or closing block element tag is followed by a closing \x3cp\x3e tag, remove it.\x0a\x0a  text = text.replace(new RegExp(\x27(\x3c\x5c/?\x27 + allBlocks + \x27[^\x3e]*\x3e)\x5c\x5cs*\x3c\x5c/p\x3e\x27, \x27g\x27), \x27$1\x27); // Optionally insert line breaks.\x0a\x0a  if (br) {\x0a    // Replace newlines that shouldn\x27t be touched with a placeholder.\x0a    text = text.replace(/\x3c(script|style).*?\x3c\x5c/\x5c\x5c1\x3e/g, function (match) {\x0a      return match[0].replace(/\x5cn/g, \x27\x3cWPPreserveNewline /\x3e\x27);\x0a    }); // Normalize \x3cbr\x3e\x0a\x0a    text = text.replace(/\x3cbr\x3e|\x3cbr\x5c/\x3e/g, \x27\x3cbr /\x3e\x27); // Replace any new line characters that aren\x27t preceded by a \x3cbr /\x3e with a \x3cbr /\x3e.\x0a\x0a    text = text.replace(/(\x3cbr \x5c/\x3e)?\x5cs*\x5cn/g, function (a, b) {\x0a      return b ? a : \x27\x3cbr /\x3e\x5cn\x27;\x0a    }); // Replace newline placeholders with newlines.\x0a\x0a    text = text.replace(/\x3cWPPreserveNewline \x5c/\x3e/g, \x27\x5cn\x27);\x0a  } // If a \x3cbr /\x3e tag is after an opening or closing block tag, remove it.\x0a\x0a\x0a  text = text.replace(new RegExp(\x27(\x3c\x5c/?\x27 + allBlocks + \x27[^\x3e]*\x3e)\x5c\x5cs*\x3cbr \x5c/\x3e\x27, \x27g\x27), \x27$1\x27); // If a \x3cbr /\x3e tag is before a subset of opening or closing block tags, remove it.\x0a\x0a  text = text.replace(/\x3cbr \x5c/\x3e(\x5cs*\x3c\x5c/?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^\x3e]*\x3e)/g, \x27$1\x27);\x0a  text = text.replace(/\x5cn\x3c\x5c/p\x3e$/g, \x27\x3c/p\x3e\x27); // Replace placeholder \x3cpre\x3e tags with their original content.\x0a\x0a  preTags.forEach(function (preTag) {\x0a    var _preTag = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[/* default */ \x22a\x22])(preTag, 2),\x0a        name = _preTag[0],\x0a        original = _preTag[1];\x0a\x0a    text = text.replace(name, original);\x0a  }); // Restore newlines in all elements.\x0a\x0a  if (-1 !== text.indexOf(\x27\x3c!-- wpnl --\x3e\x27)) {\x0a    text = text.replace(/\x5cs?\x3c!-- wpnl --\x3e\x5cs?/g, \x27\x5cn\x27);\x0a  }\x0a\x0a  return text;\x0a}\x0a/**\x0a * Replaces `\x3cp\x3e` tags with two line breaks. \x22Opposite\x22 of autop().\x0a *\x0a * Replaces `\x3cp\x3e` tags with two line breaks except where the `\x3cp\x3e` has attributes.\x0a * Unifies whitespace. Indents `\x3cli\x3e`, `\x3cdt\x3e` and `\x3cdd\x3e` for better readability.\x0a *\x0a * @param  {string} html The content from the editor.\x0a *\x0a * @example\x0a * ```js\x0a * import { removep } from \x27@wordpress/autop\x27;\x0a * removep( \x27\x3cp\x3emy text\x3c/p\x3e\x27 ); // \x22my text\x22\x0a * ```\x0a *\x0a * @return {string}      The content with stripped paragraph tags.\x0a */\x0a\x0afunction removep(html) {\x0a  var blocklist = \x27blockquote|ul|ol|li|dl|dt|dd|table|thead|tbody|tfoot|tr|th|td|h[1-6]|fieldset|figure\x27;\x0a  var blocklist1 = blocklist + \x27|div|p\x27;\x0a  var blocklist2 = blocklist + \x27|pre\x27;\x0a  var preserve = [];\x0a  var preserveLinebreaks = false;\x0a  var preserveBr = false;\x0a\x0a  if (!html) {\x0a    return \x27\x27;\x0a  } // Protect script and style tags.\x0a\x0a\x0a  if (html.indexOf(\x27\x3cscript\x27) !== -1 || html.indexOf(\x27\x3cstyle\x27) !== -1) {\x0a    html = html.replace(/\x3c(script|style)[^\x3e]*\x3e[\x5cs\x5cS]*?\x3c\x5c/\x5c1\x3e/g, function (match) {\x0a      preserve.push(match);\x0a      return \x27\x3cwp-preserve\x3e\x27;\x0a    });\x0a  } // Protect pre tags.\x0a\x0a\x0a  if (html.indexOf(\x27\x3cpre\x27) !== -1) {\x0a    preserveLinebreaks = true;\x0a    html = html.replace(/\x3cpre[^\x3e]*\x3e[\x5cs\x5cS]+?\x3c\x5c/pre\x3e/g, function (a) {\x0a      a = a.replace(/\x3cbr ?\x5c/?\x3e(\x5cr\x5cn|\x5cn)?/g, \x27\x3cwp-line-break\x3e\x27);\x0a      a = a.replace(/\x3c\x5c/?p( [^\x3e]*)?\x3e(\x5cr\x5cn|\x5cn)?/g, \x27\x3cwp-line-break\x3e\x27);\x0a      return a.replace(/\x5cr?\x5cn/g, \x27\x3cwp-line-break\x3e\x27);\x0a    });\x0a  } // Remove line breaks but keep \x3cbr\x3e tags inside image captions.\x0a\x0a\x0a  if (html.indexOf(\x27[caption\x27) !== -1) {\x0a    preserveBr = true;\x0a    html = html.replace(/\x5c[caption[\x5cs\x5cS]+?\x5c[\x5c/caption\x5c]/g, function (a) {\x0a      return a.replace(/\x3cbr([^\x3e]*)\x3e/g, \x27\x3cwp-temp-br$1\x3e\x27).replace(/[\x5cr\x5cn\x5ct]+/, \x27\x27);\x0a    });\x0a  } // Normalize white space characters before and after block tags.\x0a\x0a\x0a  html = html.replace(new RegExp(\x27\x5c\x5cs*\x3c/(\x27 + blocklist1 + \x27)\x3e\x5c\x5cs*\x27, \x27g\x27), \x27\x3c/$1\x3e\x5cn\x27);\x0a  html = html.replace(new RegExp(\x27\x5c\x5cs*\x3c((?:\x27 + blocklist1 + \x27)(?: [^\x3e]*)?)\x3e\x27, \x27g\x27), \x27\x5cn\x3c$1\x3e\x27); // Mark \x3c/p\x3e if it has any attributes.\x0a\x0a  html = html.replace(/(\x3cp [^\x3e]+\x3e.*?)\x3c\x5c/p\x3e/g, \x27$1\x3c/p#\x3e\x27); // Preserve the first \x3cp\x3e inside a \x3cdiv\x3e.\x0a\x0a  html = html.replace(/\x3cdiv( [^\x3e]*)?\x3e\x5cs*\x3cp\x3e/gi, \x27\x3cdiv$1\x3e\x5cn\x5cn\x27); // Remove paragraph tags.\x0a\x0a  html = html.replace(/\x5cs*\x3cp\x3e/gi, \x27\x27);\x0a  html = html.replace(/\x5cs*\x3c\x5c/p\x3e\x5cs*/gi, \x27\x5cn\x5cn\x27); // Normalize white space chars and remove multiple line breaks.\x0a\x0a  html = html.replace(/\x5cn[\x5cs\x5cu00a0]+\x5cn/g, \x27\x5cn\x5cn\x27); // Replace \x3cbr\x3e tags with line breaks.\x0a\x0a  html = html.replace(/(\x5cs*)\x3cbr ?\x5c/?\x3e\x5cs*/gi, function (match, space) {\x0a    if (space && space.indexOf(\x27\x5cn\x27) !== -1) {\x0a      return \x27\x5cn\x5cn\x27;\x0a    }\x0a\x0a    return \x27\x5cn\x27;\x0a  }); // Fix line breaks around \x3cdiv\x3e.\x0a\x0a  html = html.replace(/\x5cs*\x3cdiv/g, \x27\x5cn\x3cdiv\x27);\x0a  html = html.replace(/\x3c\x5c/div\x3e\x5cs*/g, \x27\x3c/div\x3e\x5cn\x27); // Fix line breaks around caption shortcodes.\x0a\x0a  html = html.replace(/\x5cs*\x5c[caption([^\x5c[]+)\x5c[\x5c/caption\x5c]\x5cs*/gi, \x27\x5cn\x5cn[caption$1[/caption]\x5cn\x5cn\x27);\x0a  html = html.replace(/caption\x5c]\x5cn\x5cn+\x5c[caption/g, \x27caption]\x5cn\x5cn[caption\x27); // Pad block elements tags with a line break.\x0a\x0a  html = html.replace(new RegExp(\x27\x5c\x5cs*\x3c((?:\x27 + blocklist2 + \x27)(?: [^\x3e]*)?)\x5c\x5cs*\x3e\x27, \x27g\x27), \x27\x5cn\x3c$1\x3e\x27);\x0a  html = html.replace(new RegExp(\x27\x5c\x5cs*\x3c/(\x27 + blocklist2 + \x27)\x3e\x5c\x5cs*\x27, \x27g\x27), \x27\x3c/$1\x3e\x5cn\x27); // Indent \x3cli\x3e, \x3cdt\x3e and \x3cdd\x3e tags.\x0a\x0a  html = html.replace(/\x3c((li|dt|dd)[^\x3e]*)\x3e/g, \x27 \x5ct\x3c$1\x3e\x27); // Fix line breaks around \x3cselect\x3e and \x3coption\x3e.\x0a\x0a  if (html.indexOf(\x27\x3coption\x27) !== -1) {\x0a    html = html.replace(/\x5cs*\x3coption/g, \x27\x5cn\x3coption\x27);\x0a    html = html.replace(/\x5cs*\x3c\x5c/select\x3e/g, \x27\x5cn\x3c/select\x3e\x27);\x0a  } // Pad \x3chr\x3e with two line breaks.\x0a\x0a\x0a  if (html.indexOf(\x27\x3chr\x27) !== -1) {\x0a    html = html.replace(/\x5cs*\x3chr( [^\x3e]*)?\x3e\x5cs*/g, \x27\x5cn\x5cn\x3chr$1\x3e\x5cn\x5cn\x27);\x0a  } // Remove line breaks in \x3cobject\x3e tags.\x0a\x0a\x0a  if (html.indexOf(\x27\x3cobject\x27) !== -1) {\x0a    html = html.replace(/\x3cobject[\x5cs\x5cS]+?\x3c\x5c/object\x3e/g, function (a) {\x0a      return a.replace(/[\x5cr\x5cn]+/g, \x27\x27);\x0a    });\x0a  } // Unmark special paragraph closing tags.\x0a\x0a\x0a  html = html.replace(/\x3c\x5c/p#\x3e/g, \x27\x3c/p\x3e\x5cn\x27); // Pad remaining \x3cp\x3e tags whit a line break.\x0a\x0a  html = html.replace(/\x5cs*(\x3cp [^\x3e]+\x3e[\x5cs\x5cS]*?\x3c\x5c/p\x3e)/g, \x27\x5cn$1\x27); // Trim.\x0a\x0a  html = html.replace(/^\x5cs+/, \x27\x27);\x0a  html = html.replace(/[\x5cs\x5cu00a0]+$/, \x27\x27);\x0a\x0a  if (preserveLinebreaks) {\x0a    html = html.replace(/\x3cwp-line-break\x3e/g, \x27\x5cn\x27);\x0a  }\x0a\x0a  if (preserveBr) {\x0a    html = html.replace(/\x3cwp-temp-br([^\x3e]*)\x3e/g, \x27\x3cbr$1\x3e\x27);\x0a  } // Restore preserved tags.\x0a\x0a\x0a  if (preserve.length) {\x0a    html = html.replace(/\x3cwp-preserve\x3e/g, function () {\x0a      return preserve.shift();\x0a    });\x0a  }\x0a\x0a  return html;\x0a}\x0a\x0a\x0a/***/ }),\x0a\x0a/***/ 28:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\x0avar arrayWithHoles = __webpack_require__(37);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\x0afunction _iterableToArrayLimit(arr, i) {\x0a  var _arr = [];\x0a  var _n = true;\x0a  var _d = false;\x0a  var _e = undefined;\x0a\x0a  try {\x0a    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\x0a      _arr.push(_s.value);\x0a\x0a      if (i && _arr.length === i) break;\x0a    }\x0a  } catch (err) {\x0a    _d = true;\x0a    _e = err;\x0a  } finally {\x0a    try {\x0a      if (!_n && _i[\x22return\x22] != null) _i[\x22return\x22]();\x0a    } finally {\x0a      if (_d) throw _e;\x0a    }\x0a  }\x0a\x0a  return _arr;\x0a}\x0a// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\x0avar nonIterableRest = __webpack_require__(38);\x0a\x0a// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _slicedToArray; });\x0a\x0a\x0a\x0afunction _slicedToArray(arr, i) {\x0a  return Object(arrayWithHoles[\x22a\x22 /* default */])(arr) || _iterableToArrayLimit(arr, i) || Object(nonIterableRest[\x22a\x22 /* default */])();\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 37:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _arrayWithHoles; });\x0afunction _arrayWithHoles(arr) {\x0a  if (Array.isArray(arr)) return arr;\x0a}\x0a\x0a/***/ }),\x0a\x0a/***/ 38:\x0a/***/ (function(module, __webpack_exports__, __webpack_require__) {\x0a\x0a\x22use strict\x22;\x0a/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \x22a\x22, function() { return _nonIterableRest; });\x0afunction _nonIterableRest() {\x0a  throw new TypeError(\x22Invalid attempt to destructure non-iterable instance\x22);\x0a}\x0a\x0a/***/ })\x0a\x0a/******/ });g\xe1!'}