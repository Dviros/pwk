var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:55:53 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Tue, 08 Apr 2014 08:29:14 GMT\x0aETag: \x22984-4f683c7700a80-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1018/1019\x0aContent-Length: 1019\x0aKeep-Alive: timeout=5, max=69\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/* global tinymce */\x0a/**\x0a * Included for back-compat.\x0a * The default WindowManager in TinyMCE 4.0 supports three types of dialogs:\x0a *\x09- With HTML created from JS.\x0a *\x09- With inline HTML (like WPWindowManager).\x0a *\x09- Old type iframe based dialogs.\x0a * For examples see the default plugins: https://github.com/tinymce/tinymce/tree/master/js/tinymce/plugins\x0a */\x0atinymce.WPWindowManager = tinymce.InlineWindowManager = function( editor ) {\x0a\x09if ( this.wp ) {\x0a\x09\x09return this;\x0a\x09}\x0a\x0a\x09this.wp = {};\x0a\x09this.parent = editor.windowManager;\x0a\x09this.editor = editor;\x0a\x0a\x09tinymce.extend( this, this.parent );\x0a\x0a\x09this.open = function( args, params ) {\x0a\x09\x09var $element,\x0a\x09\x09\x09self = this,\x0a\x09\x09\x09wp = this.wp;\x0a\x0a\x09\x09if ( ! args.wpDialog ) {\x0a\x09\x09\x09return this.parent.open.apply( this, arguments );\x0a\x09\x09} else if ( ! args.id ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09if ( typeof jQuery === \x27undefined\x27 || ! jQuery.wp || ! jQuery.wp.wpdialog ) {\x0a\x09\x09\x09// wpdialog.js is not loaded\x0a\x09\x09\x09if ( window.console && window.console.error ) {\x0a\x09\x09\x09\x09window.console.error(\x27wpdialog.js is not loaded. Please set \x22wpdialogs\x22 as dependency for your script when calling wp_enqueue_script(). You may also want to enqueue the \x22wp-jquery-ui-dialog\x22 stylesheet.\x27);\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09wp.$element = $element = jQuery( \x27#\x27 + args.id );\x0a\x0a\x09\x09if ( ! $element.length ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09if ( window.console && window.console.log ) {\x0a\x09\x09\x09window.console.log(\x27tinymce.WPWindowManager is deprecated. Use the default editor.windowManager to open dialogs with inline HTML.\x27);\x0a\x09\x09}\x0a\x0a\x09\x09wp.features = args;\x0a\x09\x09wp.params = params;\x0a\x0a\x09\x09// Store selection. Takes a snapshot in the FocusManager of the selection before focus is moved to the dialog.\x0a\x09\x09editor.nodeChanged();\x0a\x0a\x09\x09// Create the dialog if necessary\x0a\x09\x09if ( ! $element.data(\x27wpdialog\x27) ) {\x0a\x09\x09\x09$element.wpdialog({\x0a\x09\x09\x09\x09title: args.title,\x0a\x09\x09\x09\x09width: args.width,\x0a\x09\x09\x09\x09height: args.height,\x0a\x09\x09\x09\x09modal: true,\x0a\x09\x09\x09\x09dialogClass: \x27wp-dialog\x27,\x0a\x09\x09\x09\x09zIndex: 300000\x0a\x09\x09\x09});\x0a\x09\x09}\x0a\x0a\x09\x09$element.wpdialog(\x27open\x27);\x0a\x0a\x09\x09$element.on( \x27wpdialogclose\x27, function() {\x0a\x09\x09\x09if ( self.wp.$element ) {\x0a\x09\x09\x09\x09self.wp = {};\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09this.close = function() {\x0a\x09\x09if ( ! this.wp.features || ! this.wp.features.wpDialog ) {\x0a\x09\x09\x09return this.parent.close.apply( this, arguments );\x0a\x09\x09}\x0a\x0a\x09\x09this.wp.$element.wpdialog(\x27close\x27);\x0a\x09};\x0a};\x0a\x0atinymce.PluginManager.add( \x27wpdialogs\x27, function( editor ) {\x0a\x09// Replace window manager\x0a\x09editor.on( \x27init\x27, function() {\x0a\x09\x09editor.windowManager = new tinymce.WPWindowManager( editor );\x0a\x09});\x0a});\x0a'}