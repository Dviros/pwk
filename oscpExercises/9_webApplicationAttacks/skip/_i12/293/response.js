var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:56:53 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Fri, 17 May 2019 04:49:54 GMT\x0aETag: \x22f243-5890e1d14c080-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-13949/13950\x0aContent-Length: 13950\x0aKeep-Alive: timeout=5, max=55\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar paste = (function (domGlobals) {\x0a    \x27use strict\x27;\x0a\x0a    var Cell = function (initial) {\x0a      var value = initial;\x0a      var get = function () {\x0a        return value;\x0a      };\x0a      var set = function (v) {\x0a        value = v;\x0a      };\x0a      var clone = function () {\x0a        return Cell(get());\x0a      };\x0a      return {\x0a        get: get,\x0a        set: set,\x0a        clone: clone\x0a      };\x0a    };\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var hasProPlugin = function (editor) {\x0a      if (/(^|[ ,])powerpaste([, ]|$)/.test(editor.settings.plugins) && global.get(\x27powerpaste\x27)) {\x0a        if (typeof domGlobals.window.console !== \x27undefined\x27 && domGlobals.window.console.log) {\x0a          domGlobals.window.console.log(\x27PowerPaste is incompatible with Paste plugin! Remove \x5c\x27paste\x5c\x27 from the \x5c\x27plugins\x5c\x27 option.\x27);\x0a        }\x0a        return true;\x0a      } else {\x0a        return false;\x0a      }\x0a    };\x0a    var DetectProPlugin = { hasProPlugin: hasProPlugin };\x0a\x0a    var get = function (clipboard, quirks) {\x0a      return {\x0a        clipboard: clipboard,\x0a        quirks: quirks\x0a      };\x0a    };\x0a    var Api = { get: get };\x0a\x0a    var firePastePreProcess = function (editor, html, internal, isWordHtml) {\x0a      return editor.fire(\x27PastePreProcess\x27, {\x0a        content: html,\x0a        internal: internal,\x0a        wordContent: isWordHtml\x0a      });\x0a    };\x0a    var firePastePostProcess = function (editor, node, internal, isWordHtml) {\x0a      return editor.fire(\x27PastePostProcess\x27, {\x0a        node: node,\x0a        internal: internal,\x0a        wordContent: isWordHtml\x0a      });\x0a    };\x0a    var firePastePlainTextToggle = function (editor, state) {\x0a      return editor.fire(\x27PastePlainTextToggle\x27, { state: state });\x0a    };\x0a    var firePaste = function (editor, ieFake) {\x0a      return editor.fire(\x27paste\x27, { ieFake: ieFake });\x0a    };\x0a    var Events = {\x0a      firePastePreProcess: firePastePreProcess,\x0a      firePastePostProcess: firePastePostProcess,\x0a      firePastePlainTextToggle: firePastePlainTextToggle,\x0a      firePaste: firePaste\x0a    };\x0a\x0a    var shouldPlainTextInform = function (editor) {\x0a      return editor.getParam(\x27paste_plaintext_inform\x27, true);\x0a    };\x0a    var shouldBlockDrop = function (editor) {\x0a      return editor.getParam(\x27paste_block_drop\x27, false);\x0a    };\x0a    var shouldPasteDataImages = function (editor) {\x0a      return editor.getParam(\x27paste_data_images\x27, false);\x0a    };\x0a    var shouldFilterDrop = function (editor) {\x0a      return editor.getParam(\x27paste_filter_drop\x27, true);\x0a    };\x0a    var getPreProcess = function (editor) {\x0a      return editor.getParam(\x27paste_preprocess\x27);\x0a    };\x0a    var getPostProcess = function (editor) {\x0a      return editor.getParam(\x27paste_postprocess\x27);\x0a    };\x0a    var getWebkitStyles = function (editor) {\x0a      return editor.getParam(\x27paste_webkit_styles\x27);\x0a    };\x0a    var shouldRemoveWebKitStyles = function (editor) {\x0a      return editor.getParam(\x27paste_remove_styles_if_webkit\x27, true);\x0a    };\x0a    var shouldMergeFormats = function (editor) {\x0a      return editor.getParam(\x27paste_merge_formats\x27, true);\x0a    };\x0a    var isSmartPasteEnabled = function (editor) {\x0a      return editor.getParam(\x27smart_paste\x27, true);\x0a    };\x0a    var isPasteAsTextEnabled = function (editor) {\x0a      return editor.getParam(\x27paste_as_text\x27, false);\x0a    };\x0a    var getRetainStyleProps = function (editor) {\x0a      return editor.getParam(\x27paste_retain_style_properties\x27);\x0a    };\x0a    var getWordValidElements = function (editor) {\x0a      var defaultValidElements = \x27-strong/b,-em/i,-u,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,\x27 + \x27-p/div,-a[href|name],sub,sup,strike,br,del,table[width],tr,\x27 + \x27td[colspan|rowspan|width],th[colspan|rowspan|width],thead,tfoot,tbody\x27;\x0a      return editor.getParam(\x27paste_word_valid_elements\x27, defaultValidElements);\x0a    };\x0a    var shouldConvertWordFakeLists = function (editor) {\x0a      return editor.getParam(\x27paste_convert_word_fake_lists\x27, true);\x0a    };\x0a    var shouldUseDefaultFilters = function (editor) {\x0a      return editor.getParam(\x27paste_enable_default_filters\x27, true);\x0a    };\x0a    var Settings = {\x0a      shouldPlainTextInform: shouldPlainTextInform,\x0a      shouldBlockDrop: shouldBlockDrop,\x0a      shouldPasteDataImages: shouldPasteDataImages,\x0a      shouldFilterDrop: shouldFilterDrop,\x0a      getPreProcess: getPreProcess,\x0a      getPostProcess: getPostProcess,\x0a      getWebkitStyles: getWebkitStyles,\x0a      shouldRemoveWebKitStyles: shouldRemoveWebKitStyles,\x0a      shouldMergeFormats: shouldMergeFormats,\x0a      isSmartPasteEnabled: isSmartPasteEnabled,\x0a      isPasteAsTextEnabled: isPasteAsTextEnabled,\x0a      getRetainStyleProps: getRetainStyleProps,\x0a      getWordValidElements: getWordValidElements,\x0a      shouldConvertWordFakeLists: shouldConvertWordFakeLists,\x0a      shouldUseDefaultFilters: shouldUseDefaultFilters\x0a    };\x0a\x0a    var shouldInformUserAboutPlainText = function (editor, userIsInformedState) {\x0a      return userIsInformedState.get() === false && Settings.shouldPlainTextInform(editor);\x0a    };\x0a    var displayNotification = function (editor, message) {\x0a      editor.notificationManager.open({\x0a        text: editor.translate(message),\x0a        type: \x27info\x27\x0a      });\x0a    };\x0a    var togglePlainTextPaste = function (editor, clipboard, userIsInformedState) {\x0a      if (clipboard.pasteFormat.get() === \x27text\x27) {\x0a        clipboard.pasteFormat.set(\x27html\x27);\x0a        Events.firePastePlainTextToggle(editor, false);\x0a      } else {\x0a        clipboard.pasteFormat.set(\x27text\x27);\x0a        Events.firePastePlainTextToggle(editor, true);\x0a        if (shouldInformUserAboutPlainText(editor, userIsInformedState)) {\x0a          displayNotification(editor, \x27Paste is now in plain text mode. Contents will now be pasted as plain text until you toggle this option off.\x27);\x0a          userIsInformedState.set(true);\x0a        }\x0a      }\x0a      editor.focus();\x0a    };\x0a    var Actions = { togglePlainTextPaste: togglePlainTextPaste };\x0a\x0a    var register = function (editor, clipboard, userIsInformedState) {\x0a      editor.addCommand(\x27mceTogglePlainTextPaste\x27, function () {\x0a        Actions.togglePlainTextPaste(editor, clipboard, userIsInformedState);\x0a      });\x0a      editor.addCommand(\x27mceInsertClipboardContent\x27, function (ui, value) {\x0a        if (value.content) {\x0a          clipboard.pasteHtml(value.content, value.internal);\x0a        }\x0a        if (value.text) {\x0a          clipboard.pasteText(value.text);\x0a        }\x0a      });\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.Env\x27);\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.util.Delay\x27);\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var global$4 = tinymce.util.Tools.resolve(\x27tinymce.util.VK\x27);\x0a\x0a    var internalMimeType = \x27x-tinymce/html\x27;\x0a    var internalMark = \x27\x3c!-- \x27 + internalMimeType + \x27 --\x3e\x27;\x0a    var mark = function (html) {\x0a      return internalMark + html;\x0a    };\x0a    var unmark = function (html) {\x0a      return html.replace(internalMark, \x27\x27);\x0a    };\x0a    var isMarked = function (html) {\x0a      return html.indexOf(internalMark) !== -1;\x0a    };\x0a    var InternalHtml = {\x0a      mark: mark,\x0a      unmark: unmark,\x0a      isMarked: isMarked,\x0a      internalHtmlMime: function () {\x0a        return internalMimeType;\x0a      }\x0a    };\x0a\x0a    var global$5 = tinymce.util.Tools.resolve(\x27tinymce.html.Entities\x27);\x0a\x0a    var isPlainText = function (text) {\x0a      return !/\x3c(?:\x5c/?(?!(?:div|p|br|span)\x3e)\x5cw+|(?:(?!(?:span style=\x22white-space:\x5cs?pre;?\x22\x3e)|br\x5cs?\x5c/\x3e))\x5cw+\x5cs[^\x3e]+)\x3e/i.test(text);\x0a    };\x0a    var toBRs = function (text) {\x0a      return text.replace(/\x5cr?\x5cn/g, \x27\x3cbr\x3e\x27);\x0a    };\x0a    var openContainer = function (rootTag, rootAttrs) {\x0a      var key;\x0a      var attrs = [];\x0a      var tag = \x27\x3c\x27 + rootTag;\x0a      if (typeof rootAttrs === \x27object\x27) {\x0a        for (key in rootAttrs) {\x0a          if (rootAttrs.hasOwnProperty(key)) {\x0a            attrs.push(key + \x27=\x22\x27 + global$5.encodeAllRaw(rootAttrs[key]) + \x27\x22\x27);\x0a          }\x0a        }\x0a        if (attrs.length) {\x0a          tag += \x27 \x27 + attrs.join(\x27 \x27);\x0a        }\x0a      }\x0a      return tag + \x27\x3e\x27;\x0a    };\x0a    var toBlockElements = function (text, rootTag, rootAttrs) {\x0a      var blocks = text.split(/\x5cn\x5cn/);\x0a      var tagOpen = openContainer(rootTag, rootAttrs);\x0a      var tagClose = \x27\x3c/\x27 + rootTag + \x27\x3e\x27;\x0a      var paragraphs = global$3.map(blocks, function (p) {\x0a        return p.split(/\x5cn/).join(\x27\x3cbr /\x3e\x27);\x0a      });\x0a      var stitch = function (p) {\x0a        return tagOpen + p + tagClose;\x0a      };\x0a      return paragraphs.length === 1 ? paragraphs[0] : global$3.map(paragraphs, stitch).join(\x27\x27);\x0a    };\x0a    var convert = function (text, rootTag, rootAttrs) {\x0a      return rootTag ? toBlockElements(text, rootTag, rootAttrs) : toBRs(text);\x0a    };\x0a    var Newlines = {\x0a      isPlainText: isPlainText,\x0a      convert: convert,\x0a      toBRs: toBRs,\x0a      toBlockElements: toBlockElements\x0a    };\x0a\x0a    var global$6 = tinymce.util.Tools.resolve(\x27tinymce.html.DomParser\x27);\x0a\x0a    var global$7 = tinymce.util.Tools.resolve(\x27tinymce.html.Node\x27);\x0a\x0a    var global$8 = tinymce.util.Tools.resolve(\x27tinymce.html.Schema\x27);\x0a\x0a    var global$9 = tinymce.util.Tools.resolve(\x27tinymce.html.Serializer\x27);\x0a\x0a    function filter(content, items) {\x0a      global$3.each(items, function (v) {\x0a        if (v.constructor === RegExp) {\x0a          content = content.replace(v, \x27\x27);\x0a        } else {\x0a          content = content.replace(v[0], v[1]);\x0a        }\x0a      });\x0a      return content;\x0a    }\x0a    function innerText(html) {\x0a      var schema = global$8();\x0a      var domParser = global$6({}, schema);\x0a      var text = \x27\x27;\x0a      var shortEndedElements = schema.getShortEndedElements();\x0a      var ignoreElements = global$3.makeMap(\x27script noscript style textarea video audio iframe object\x27, \x27 \x27);\x0a      var blockElements = schema.getBlockElements();\x0a      function walk(node) {\x0a        var name = node.name, currentNode = node;\x0a        if (name === \x27br\x27) {\x0a          text += \x27\x5cn\x27;\x0a          return;\x0a        }\x0a        if (name === \x27wbr\x27) {\x0a          return;\x0a        }\x0a        if (shortEndedElements[name]) {\x0a          text += \x27 \x27;\x0a        }\x0a        if (ignoreElements[name]) {\x0a          text += \x27 \x27;\x0a          return;\x0a        }\x0a        if (node.type === 3) {\x0a          text += node.value;\x0a        }\x0a        if (!node.shortEnded) {\x0a          if (node = node.firstChild) {\x0a            do {\x0a              walk(node);\x0a            } while (node = node.next);\x0a          }\x0a        }\x0a        if (blockElements[name] && currentNode.next) {\x0a          text += \x27\x5cn\x27;\x0a          if (name === \x27p\x27) {\x0a            text += \x27\x5cn\x27;\x0a          }\x0a        }\x0a      }\x0a      html = filter(html, [/\x3c!\x5c[[^\x5c]]+\x5c]\x3e/g]);\x0a      walk(domParser.parse(html));\x0a      return text;\x0a    }\x0a    function trimHtml(html) {\x0a      function trimSpaces(all, s1, s2) {\x0a        if (!s1 && !s2) {\x0a          return \x27 \x27;\x0a        }\x0a        return \x27\x5cxA0\x27;\x0a      }\x0a      html = filter(html, [\x0a        /^[\x5cs\x5cS]*\x3cbody[^\x3e]*\x3e\x5cs*|\x5cs*\x3c\x5c/body[^\x3e]*\x3e[\x5cs\x5cS]*$/ig,\x0a        /\x3c!--StartFragment--\x3e|\x3c!--EndFragment--\x3e/g,\x0a        [\x0a          /( ?)\x3cspan class=\x22Apple-converted-space\x22\x3e\x5cu00a0\x3c\x5c/span\x3e( ?)/g,\x0a          trimSpaces\x0a        ],\x0a        /\x3cbr class=\x22Apple-interchange-newline\x22\x3e/g,\x0a        /\x3cbr\x3e$/i\x0a      ]);\x0a      return html;\x0a    }\x0a    function createIdGenerator(prefix) {\x0a      var count = 0;\x0a      return function () {\x0a        return prefix + count++;\x0a      };\x0a    }\x0a    var isMsEdge = function () {\x0a      return domGlobals.navigator.userAgent.indexOf(\x27 Edge/\x27) !== -1;\x0a    };\x0a    var Utils = {\x0a      filter: filter,\x0a      innerText: innerText,\x0a      trimHtml: trimHtml,\x0a      createIdGenerator: createIdGenerator,\x0a      isMsEdge: isMsEdge\x0a    };\x0a\x0a    function isWordContent(content) {\x0a      return /\x3cfont face=\x22Times New Roman\x22|class=\x22?Mso|style=\x22[^\x22]*\x5cbmso-|style=\x27[^\x27\x27]*\x5cbmso-|w:WordDocument/i.test(content) || /class=\x22OutlineElement/.test(content) || /id=\x22?docs\x5c-internal\x5c-guid\x5c-/.test(content);\x0a    }\x0a    function isNumericList(text) {\x0a      var found, patterns;\x0a      patterns = [\x0a        /^[IVXLMCD]{1,2}\x5c.[ \x5cu00a0]/,\x0a        /^[ivxlmcd]{1,2}\x5c.[ \x5cu00a0]/,\x0a        /^[a-z]{1,2}[\x5c.\x5c)][ \x5cu00a0]/,\x0a        /^[A-Z]{1,2}[\x5c.\x5c)][ \x5cu00a0]/,\x0a        /^[0-9]+\x5c.[ \x5cu00a0]/,\x0a        /^[\x5cu3007\x5cu4e00\x5cu4e8c\x5cu4e09\x5cu56db\x5cu4e94\x5cu516d\x5cu4e03\x5cu516b\x5cu4e5d]+\x5c.[ \x5cu00a0]/,\x0a        /^[\x5cu58f1\x5cu5f10\x5cu53c2\x5cu56db\x5cu4f0d\x5cu516d\x5cu4e03\x5cu516b\x5cu4e5d\x5cu62fe]+\x5c.[ \x5cu00a0]/\x0a      ];\x0a      text = text.replace(/^[\x5cu00a0 ]+/, \x27\x27);\x0a      global$3.each(patterns, function (pattern) {\x0a        if (pattern.test(text)) {\x0a          found = true;\x0a          return false;\x0a        }\x0a      });\x0a      return found;\x0a    }\x0a    function isBulletList(text) {\x0a      return /^[\x5cs\x5cu00a0]*[\x5cu2022\x5cu00b7\x5cu00a7\x5cu25CF]\x5cs*/.test(text);\x0a    }\x0a    function convertFakeListsToProperLists(node) {\x0a      var currentListNode, prevListNode, lastLevel = 1;\x0a      function getText(node) {\x0a        var txt = \x27\x27;\x0a        if (node.type === 3) {\x0a          return node.value;\x0a        }\x0a        if (node = node.firstChild) {\x0a          do {\x0a            txt += getText(node);\x0a          } while (node = node.next);\x0a        }\x0a        return txt;\x0a      }\x0a      function trimListStart(node, regExp) {\x0a        if (node.type === 3) {\x0a          if (regExp.test(node.value)) {\x0a            node.value = node.value.replace(regExp, \x27\x27);\x0a            return false;\x0a          }\x0a        }\x0a        if (node = node.firstChild) {\x0a          do {\x0a            if (!trimListStart(node, regExp)) {\x0a              return false;\x0a            }\x0a          } while (node = node.next);\x0a        }\x0a        return true;\x0a      }\x0a      function removeIgnoredNodes(node) {\x0a        if (node._listIgnore) {\x0a          node.remove();\x0a          return;\x0a        }\x0a        if (node = node.firstChild) {\x0a          do {\x0a            removeIgnoredNodes(node);\x0a          } while (node = node.next);\x0a        }\x0a      }\x0a      function convertParagraphToLi(paragraphNode, listName, start) {\x0a        var level = paragraphNode._listLevel || lastLevel;\x0a        if (level !== lastLevel) {\x0a          if (level \x3c lastLevel) {\x0a            if (currentListNode) {\x0a              currentListNode = currentListNode.parent.parent;\x0a            }\x0a          } else {\x0a            prevListNode = currentListNode;\x0a            currentListNode = null;\x0a          }\x0a        }\x0a        if (!currentListNode || currentListNode.name !== listName) {\x0a          prevListNode = prevListNode || currentListNode;\x0a          currentListNode = new global$7(listName, 1);\x0a          if (start \x3e 1) {\x0a            currentListNode.attr(\x27start\x27, \x27\x27 + start);\x0a          }\x0a          paragraphNode.wrap(currentListNode);\x0a        } else {\x0a          currentListNode.append(paragraphNode);\x0a        }\x0a        paragraphNode.name = \x27li\x27;\x0a        if (level \x3e lastLevel && prevListNode) {\x0a          prevListNode.lastChild.append(currentListNode);\x0a        }\x0a        lastLevel = level;\x0a        removeIgnoredNodes(paragraphNode);\x0a        trimListStart(paragraphNode, /^\x5cu00a0+/);\x0a        trimListStart(paragraphNode, /^\x5cs*([\x5cu2022\x5cu00b7\x5cu00a7\x5cu25CF]|\x5cw+\x5c.)/);\x0a        trimListStart(paragraphNode, /^\x5cu00a0+/);\x0a      }\x0a      var elements = [];\x0a      var child = node.firstChild;\x0a      while (typeof child !== \x27undefined\x27 && child !== null) {\x0a        elements.push(child);\x0a        child = child.walk();\x0a        if (child !== null) {\x0a          while (typeof child !== \x27undefined\x27 && child.parent !== node) {\x0a            child = child.walk();\x0a          }\x0a        }\x0a      }\x0a      for (var i = 0; i \x3c elements.length; i++) {\x0a        node = elements[i];\x0a        if (node.name === \x27p\x27 && node.firstChild) {\x0a          var nodeText = getText(node);\x0a          if (isBulletList(nodeText)) {\x0a            convertParagraphToLi(node, \x27ul\x27);\x0a            continue;\x0a          }\x0a          if (isNumericList(nodeText)) {\x0a            var matches = /([0-9]+)\x5c./.exec(nodeText);\x0a            var start = 1;\x0a            if (matches) {\x0a              start = parseInt(matches[1], 10);\x0a            }\x0a            convertParagraphToLi(node, \x27ol\x27, start);\x0a            continue;\x0a          }\x0a          if (node._listLevel) {\x0a            convertParagraphToLi(node, \x27ul\x27, 1);\x0a            continue;\x0a          }\x0a          currentListNode = null;\x0a        } else {\x0a          prevListNode = currentListNode;\x0a          currentListNode = null;\x0a        }\x0a      }\x0a    }\x0a    function filterStyles(editor, validStyles, node, styleValue) {\x0a      var outputStyles = {}, matches;\x0a      var styles = editor.dom.parseStyle(styleValue);\x0a      global$3.each(styles, function (value, name) {\x0a        switch (name) {\x0a        case \x27mso-list\x27:\x0a          matches = /\x5cw+ \x5cw+([0-9]+)/i.exec(styleValue);\x0a          if (matches) {\x0a            node._listLevel = parseInt(matches[1], 10);\x0a          }\x0a          if (/Ignore/i.test(value) && node.firstChild) {\x0a            node._listIgnore = true;\x0a            node.firstChild._listIgnore = true;\x0a          }\x0a          break;\x0a        case \x27horiz-align\x27:\x0a          name = \x27text-align\x27;\x0a          break;\x0a        case \x27vert-align\x27:\x0a          name = \x27vertical-align\x27;\x0a          break;\x0a        case \x27font-color\x27:\x0a        case \x27mso-foreground\x27:\x0a          name = \x27color\x27;\x0a          break;\x0a        case \x27mso-background\x27:\x0a        case \x27mso-highlight\x27:\x0a          name = \x27background\x27;\x0a          break;\x0a        case \x27font-weight\x27:\x0a        case \x27font-style\x27:\x0a          if (value !== \x27normal\x27) {\x0a            outputStyles[name] = value;\x0a          }\x0a          return;\x0a        case \x27mso-element\x27:\x0a          if (/^(comment|comment-list)$/i.test(value)) {\x0a            node.remove();\x0a            return;\x0a          }\x0a          break;\x0a        }\x0a        if (name.indexOf(\x27mso-comment\x27) === 0) {\x0a          node.remove();\x0a          return;\x0a        }\x0a        if (name.indexOf(\x27mso-\x27) === 0) {\x0a          return;\x0a        }\x0a        if (Settings.getRetainStyleProps(editor) === \x27all\x27 || validStyles && validStyles[name]) {\x0a          outputStyles[name] = value;\x0a        }\x0a      });\x0a      if (/(bold)/i.test(outputStyles[\x27font-weight\x27])) {\x0a        delete outputStyles[\x27font-weight\x27];\x0a        node.wrap(new global$7(\x27b\x27, 1));\x0a      }\x0a      if (/(italic)/i.test(outputStyles[\x27font-style\x27])) {\x0a        delete outputStyles[\x27font-style\x27];\x0a        node.wrap(new global$7(\x27i\x27, 1));\x0a      }\x0a      outputStyles = editor.dom.serializeStyle(outputStyles, node.name);\x0a      if (outputStyles) {\x0a        return outputStyles;\x0a      }\x0a      return null;\x0a    }\x0a    var filterWordContent = function (editor, content) {\x0a      var retainStyleProperties, validStyles;\x0a      retainStyleProperties = Settings.getRetainStyleProps(editor);\x0a      if (retainStyleProperties) {\x0a        validStyles = global$3.makeMap(retainStyleProperties.split(/[, ]/));\x0a      }\x0a      content = Utils.filter(content, [\x0a        /\x3cbr class=\x22?Apple-interchange-newline\x22?\x3e/gi,\x0a        /\x3cb[^\x3e]+id=\x22?docs-internal-[^\x3e]*\x3e/gi,\x0a        /\x3c!--[\x5cs\x5cS]+?--\x3e/gi,\x0a        /\x3c(!|script[^\x3e]*\x3e.*?\x3c\x5c/script(?=[\x3e\x5cs])|\x5c/?(\x5c?xml(:\x5cw+)?|img|meta|link|style|\x5cw:\x5cw+)(?=[\x5cs\x5c/\x3e]))[^\x3e]*\x3e/gi,\x0a        [\x0a          /\x3c(\x5c/?)s\x3e/gi,\x0a          \x27\x3c$1strike\x3e\x27\x0a        ],\x0a        [\x0a          /&nbsp;/gi,\x0a          \x27\x5cxA0\x27\x0a        ],\x0a        [\x0a          /\x3cspan\x5cs+style\x5cs*=\x5cs*\x22\x5cs*mso-spacerun\x5cs*:\x5cs*yes\x5cs*;?\x5cs*\x22\x5cs*\x3e([\x5cs\x5cu00a0]*)\x3c\x5c/span\x3e/gi,\x0a          function (str, spaces) {\x0a            return spaces.length \x3e 0 ? spaces.replace(/./, \x27 \x27).slice(Math.floor(spaces.length / 2)).split(\x27\x27).join(\x27\x5cxA0\x27) : \x27\x27;\x0a          }\x0a        ]\x0a      ]);\x0a      var validElements = Settings.getWordValidElements(editor);\x0a      var schema = global$8({\x0a        valid_elements: validElements,\x0a        valid_children: \x27-li[p]\x27\x0a      });\x0a      global$3.each(schema.elements, function (rule) {\x0a        if (!rule.attributes.class) {\x0a          rule.attributes.class = {};\x0a          rule.attributesOrder.push(\x27class\x27);\x0a        }\x0a        if (!rule.attributes.style) {\x0a          rule.attributes.style = {};\x0a          rule.attributesOrder.push(\x27style\x27);\x0a        }\x0a      });\x0a      var domParser = global$6({}, schema);\x0a      domParser.addAttributeFilter(\x27style\x27, function (nodes) {\x0a        var i = nodes.length, node;\x0a        while (i--) {\x0a          node = nodes[i];\x0a          node.attr(\x27style\x27, filterStyles(editor, validStyles, node, node.attr(\x27style\x27)));\x0a          if (node.name === \x27span\x27 && node.parent && !node.attributes.length) {\x0a            node.unwrap();\x0a          }\x0a        }\x0a      });\x0a      domParser.addAttributeFilter(\x27class\x27, function (nodes) {\x0a        var i = nodes.length, node, className;\x0a        while (i--) {\x0a          node = nodes[i];\x0a          className = node.attr(\x27class\x27);\x0a          if (/^(MsoCommentReference|MsoCommentText|msoDel)$/i.test(className)) {\x0a            node.remove();\x0a          }\x0a          node.attr(\x27class\x27, null);\x0a        }\x0a      });\x0a      domParser.addNodeFilter(\x27del\x27, function (nodes) {\x0a        var i = nodes.length;\x0a        while (i--) {\x0a          nodes[i].remove();\x0a        }\x0a      });\x0a      domParser.addNodeFilter(\x27a\x27, function (nodes) {\x0a        var i = nodes.length, node, href, name;\x0a        while (i--) {\x0a          node = nodes[i];\x0a          href = node.attr(\x27href\x27);\x0a          name = node.attr(\x27name\x27);\x0a          if (href && href.indexOf(\x27#_msocom_\x27) !== -1) {\x0a            node.remove();\x0a            continue;\x0a          }\x0a          if (href && href.indexOf(\x27file://\x27) === 0) {\x0a            href = href.split(\x27#\x27)[1];\x0a            if (href) {\x0a              href = \x27#\x27 + href;\x0a            }\x0a          }\x0a          if (!href && !name) {\x0a            node.unwrap();\x0a          } else {\x0a            if (name && !/^_?(?:toc|edn|ftn)/i.test(name)) {\x0a              node.unwrap();\x0a              continue;\x0a            }\x0a            node.attr({\x0a              href: href,\x0a              name: name\x0a            });\x0a          }\x0a        }\x0a      });\x0a      var rootNode = domParser.parse(content);\x0a      if (Settings.shouldConvertWordFakeLists(editor)) {\x0a        convertFakeListsToProperLists(rootNode);\x0a      }\x0a      content = global$9({ validate: editor.settings.validate }, schema).serialize(rootNode);\x0a      return content;\x0a    };\x0a    var preProcess = function (editor, content) {\x0a      return Settings.shouldUseDefaultFilters(editor) ? filterWordContent(editor, content) : content;\x0a    };\x0a    var WordFilter = {\x0a      preProcess: preProcess,\x0a      isWordContent: isWordContent\x0a    };\x0a\x0a    var processResult = function (content, cancelled) {\x0a      return {\x0a        content: content,\x0a        cancelled: cancelled\x0a      };\x0a    };\x0a    var postProcessFilter = function (editor, html, internal, isWordHtml) {\x0a      var tempBody = editor.dom.create(\x27div\x27, { style: \x27display:none\x27 }, html);\x0a      var postProcessArgs = Events.firePastePostProcess(editor, tempBody, internal, isWordHtml);\x0a      return processResult(postProcessArgs.node.innerHTML, postProcessArgs.isDefaultPrevented());\x0a    };\x0a    var filterContent = function (editor, content, internal, isWordHtml) {\x0a      var preProcessArgs = Events.firePastePreProcess(editor, content, internal, isWordHtml);\x0a      if (editor.hasEventListeners(\x27PastePostProcess\x27) && !preProcessArgs.isDefaultPrevented()) {\x0a        return postProcessFilter(editor, preProcessArgs.content, internal, isWordHtml);\x0a      } else {\x0a        return processResult(preProcessArgs.content, preProcessArgs.isDefaultPrevented());\x0a      }\x0a    };\x0a    var process = function (editor, html, internal) {\x0a      var isWordHtml = WordFilter.isWordContent(html);\x0a      var content = isWordHtml ? WordFilter.preProcess(editor, html) : html;\x0a      return filterContent(editor, content, internal, isWordHtml);\x0a    };\x0a    var ProcessFilters = { process: process };\x0a\x0a    var removeMeta = function (editor, html) {\x0a      var body = editor.dom.create(\x27body\x27, {}, html);\x0a      global$3.each(body.querySelectorAll(\x27meta\x27), function (elm) {\x0a        return elm.parentNode.removeChild(elm);\x0a      });\x0a      return body.innerHTML;\x0a    };\x0a    var pasteHtml = function (editor, html) {\x0a      editor.insertContent(removeMeta(editor, html), {\x0a        merge: Settings.shouldMergeFormats(editor),\x0a        paste: true\x0a      });\x0a      return true;\x0a    };\x0a    var isAbsoluteUrl = function (url) {\x0a      return /^https?:\x5c/\x5c/[\x5cw\x5c?\x5c-\x5c/+=.&%@~#]+$/i.test(url);\x0a    };\x0a    var isImageUrl = function (url) {\x0a      return isAbsoluteUrl(url) && /.(gif|jpe?g|png)$/.test(url);\x0a    };\x0a    var createImage = function (editor, url, pasteHtmlFn) {\x0a      editor.undoManager.extra(function () {\x0a        pasteHtmlFn(editor, url);\x0a      }, function () {\x0a        editor.insertContent(\x27\x3cimg src=\x22\x27 + url + \x27\x22\x3e\x27);\x0a      });\x0a      return true;\x0a    };\x0a    var createLink = function (editor, url, pasteHtmlFn) {\x0a      editor.undoManager.extra(function () {\x0a        pasteHtmlFn(editor, url);\x0a      }, function () {\x0a        editor.execCommand(\x27mceInsertLink\x27, false, url);\x0a      });\x0a      return true;\x0a    };\x0a    var linkSelection = function (editor, html, pasteHtmlFn) {\x0a      return editor.selection.isCollapsed() === false && isAbsoluteUrl(html) ? createLink(editor, html, pasteHtmlFn) : false;\x0a    };\x0a    var insertImage = function (editor, html, pasteHtmlFn) {\x0a      return isImageUrl(html) ? createImage(editor, html, pasteHtmlFn) : false;\x0a    };\x0a    var smartInsertContent = function (editor, html) {\x0a      global$3.each([\x0a        linkSelection,\x0a        insertImage,\x0a        pasteHtml\x0a      ], function (action) {\x0a        return action(editor, html, pasteHtml) !== true;\x0a      });\x0a    };\x0a    var insertContent = function (editor, html) {\x0a      if (Settings.isSmartPasteEnabled(editor) === false) {\x0a        pasteHtml(editor, html);\x0a      } else {\x0a        smartInsertContent(editor, html);\x0a      }\x0a    };\x0a    var SmartPaste = {\x0a      isImageUrl: isImageUrl,\x0a      isAbsoluteUrl: isAbsoluteUrl,\x0a      insertContent: insertContent\x0a    };\x0a\x0a    var constant = function (value) {\x0a      return function () {\x0a        return value;\x0a      };\x0a    };\x0a    function curry(fn) {\x0a      var initialArgs = [];\x0a      for (var _i = 1; _i \x3c arguments.length; _i++) {\x0a        initialArgs[_i - 1] = arguments[_i];\x0a      }\x0a      return function () {\x0a        var restArgs = [];\x0a        for (var _i = 0; _i \x3c arguments.length; _i++) {\x0a          restArgs[_i] = arguments[_i];\x0a        }\x0a        var all = initialArgs.concat(restArgs);\x0a        return fn.apply(null, all);\x0a      };\x0a    }\x0a    var never = constant(false);\x0a    var always = constant(true);\x0a\x0a    var never$1 = never;\x0a    var always$1 = always;\x0a    var none = function () {\x0a      return NONE;\x0a    };\x0a    var NONE = function () {\x0a      var eq = function (o) {\x0a        return o.isNone();\x0a      };\x0a      var call = function (thunk) {\x0a        return thunk();\x0a      };\x0a      var id = function (n) {\x0a        return n;\x0a      };\x0a      var noop = function () {\x0a      };\x0a      var nul = function () {\x0a        return null;\x0a      };\x0a      var undef = function () {\x0a        return undefined;\x0a      };\x0a      var me = {\x0a        fold: function (n, s) {\x0a          return n();\x0a        },\x0a        is: never$1,\x0a        isSome: never$1,\x0a        isNone: always$1,\x0a        getOr: id,\x0a        getOrThunk: call,\x0a        getOrDie: function (msg) {\x0a          throw new Error(msg || \x27error: getOrDie called on none.\x27);\x0a        },\x0a        getOrNull: nul,\x0a        getOrUndefined: undef,\x0a        or: id,\x0a        orThunk: call,\x0a        map: none,\x0a        ap: none,\x0a        each: noop,\x0a        bind: none,\x0a        flatten: none,\x0a        exists: never$1,\x0a        forall: always$1,\x0a        filter: none,\x0a        equals: eq,\x0a        equals_: eq,\x0a        toArray: function () {\x0a          return [];\x0a        },\x0a        toString: constant(\x27none()\x27)\x0a      };\x0a      if (Object.freeze)\x0a        Object.freeze(me);\x0a      return me;\x0a    }();\x0a    var some = function (a) {\x0a      var constant_a = function () {\x0a        return a;\x0a      };\x0a      var self = function () {\x0a        return me;\x0a      };\x0a      var map = function (f) {\x0a        return some(f(a));\x0a      };\x0a      var bind = function (f) {\x0a        return f(a);\x0a      };\x0a      var me = {\x0a        fold: function (n, s) {\x0a          return s(a);\x0a        },\x0a        is: function (v) {\x0a          return a === v;\x0a        },\x0a        isSome: always$1,\x0a        isNone: never$1,\x0a        getOr: constant_a,\x0a        getOrThunk: constant_a,\x0a        getOrDie: constant_a,\x0a        getOrNull: constant_a,\x0a        getOrUndefined: constant_a,\x0a        or: self,\x0a        orThunk: self,\x0a        map: map,\x0a        ap: function (optfab) {\x0a          return optfab.fold(none, function (fab) {\x0a            return some(fab(a));\x0a          });\x0a        },\x0a        each: function (f) {\x0a          f(a);\x0a        },\x0a        bind: bind,\x0a        flatten: constant_a,\x0a        exists: bind,\x0a        forall: bind,\x0a        filter: function (f) {\x0a          return f(a) ? me : NONE;\x0a        },\x0a        equals: function (o) {\x0a          return o.is(a);\x0a        },\x0a        equals_: function (o, elementEq) {\x0a          return o.fold(never$1, function (b) {\x0a            return elementEq(a, b);\x0a          });\x0a        },\x0a        toArray: function () {\x0a          return [a];\x0a        },\x0a        toString: function () {\x0a          return \x27some(\x27 + a + \x27)\x27;\x0a        }\x0a      };\x0a      return me;\x0a    };\x0a    var from = function (value) {\x0a      return value === null || value === undefined ? NONE : some(value);\x0a    };\x0a    var Option = {\x0a      some: some,\x0a      none: none,\x0a      from: from\x0a    };\x0a\x0a    var typeOf = function (x) {\x0a      if (x === null)\x0a        return \x27null\x27;\x0a      var t = typeof x;\x0a      if (t === \x27object\x27 && Array.prototype.isPrototypeOf(x))\x0a        return \x27array\x27;\x0a      if (t === \x27object\x27 && String.prototype.isPrototypeOf(x))\x0a        return \x27string\x27;\x0a      return t;\x0a    };\x0a    var isType = function (type) {\x0a      return function (value) {\x0a        return typeOf(value) === type;\x0a      };\x0a    };\x0a    var isFunction = isType(\x27function\x27);\x0a\x0a    var map = function (xs, f) {\x0a      var len = xs.length;\x0a      var r = new Array(len);\x0a      for (var i = 0; i \x3c len; i++) {\x0a        var x = xs[i];\x0a        r[i] = f(x, i, xs);\x0a      }\x0a      return r;\x0a    };\x0a    var each = function (xs, f) {\x0a      for (var i = 0, len = xs.length; i \x3c len; i++) {\x0a        var x = xs[i];\x0a        f(x, i, xs);\x0a      }\x0a    };\x0a    var filter$1 = function (xs, pred) {\x0a      var r = [];\x0a      for (var i = 0, len = xs.length; i \x3c len; i++) {\x0a        var x = xs[i];\x0a        if (pred(x, i, xs)) {\x0a          r.push(x);\x0a        }\x0a      }\x0a      return r;\x0a    };\x0a    var slice = Array.prototype.slice;\x0a    var from$1 = isFunction(Array.from) ? Array.from : function (x) {\x0a      return slice.call(x);\x0a    };\x0a\x0a    var nu = function (baseFn) {\x0a      var data = Option.none();\x0a      var callbacks = [];\x0a      var map = function (f) {\x0a        return nu(function (nCallback) {\x0a          get(function (data) {\x0a            nCallback(f(data));\x0a          });\x0a        });\x0a      };\x0a      var get = function (nCallback) {\x0a        if (isReady())\x0a          call(nCallback);\x0a        else\x0a          callbacks.push(nCallback);\x0a      };\x0a      var set = function (x) {\x0a        data = Option.some(x);\x0a        run(callbacks);\x0a        callbacks = [];\x0a      };\x0a      var isReady = function () {\x0a        return data.isSome();\x0a      };\x0a      var run = function (cbs) {\x0a        each(cbs, call);\x0a      };\x0a      var call = function (cb) {\x0a        data.each(function (x) {\x0a          domGlobals.setTimeout(function () {\x0a            cb(x);\x0a          }, 0);\x0a        });\x0a      };\x0a      baseFn(set);\x0a      return {\x0a        get: get,\x0a        map: map,\x0a        isReady: isReady\x0a      };\x0a    };\x0a    var pure = function (a) {\x0a      return nu(function (callback) {\x0a        callback(a);\x0a      });\x0a    };\x0a    var LazyValue = {\x0a      nu: nu,\x0a      pure: pure\x0a    };\x0a\x0a    var bounce = function (f) {\x0a      return function () {\x0a        var args = [];\x0a        for (var _i = 0; _i \x3c arguments.length; _i++) {\x0a          args[_i] = arguments[_i];\x0a        }\x0a        var me = this;\x0a        domGlobals.setTimeout(function () {\x0a          f.apply(me, args);\x0a        }, 0);\x0a      };\x0a    };\x0a\x0a    var nu$1 = function (baseFn) {\x0a      var get = function (callback) {\x0a        baseFn(bounce(callback));\x0a      };\x0a      var map = function (fab) {\x0a        return nu$1(function (callback) {\x0a          get(function (a) {\x0a            var value = fab(a);\x0a            callback(value);\x0a          });\x0a        });\x0a      };\x0a      var bind = function (aFutureB) {\x0a        return nu$1(function (callback) {\x0a          get(function (a) {\x0a            aFutureB(a).get(callback);\x0a          });\x0a        });\x0a      };\x0a      var anonBind = function (futureB) {\x0a        return nu$1(function (callback) {\x0a          get(function (a) {\x0a            futureB.get(callback);\x0a          });\x0a        });\x0a      };\x0a      var toLazy = function () {\x0a        return LazyValue.nu(get);\x0a      };\x0a      var toCached = function () {\x0a        var cache = null;\x0a        return nu$1(function (callback) {\x0a          if (cache === null) {\x0a            cache = toLazy();\x0a          }\x0a          cache.get(callback);\x0a        });\x0a      };\x0a      return {\x0a        map: map,\x0a        bind: bind,\x0a        anonBind: anonBind,\x0a        toLazy: toLazy,\x0a        toCached: toCached,\x0a        get: get\x0a      };\x0a    };\x0a    var pure$1 = function (a) {\x0a      return nu$1(function (callback) {\x0a        callback(a);\x0a      });\x0a    };\x0a    var Future = {\x0a      nu: nu$1,\x0a      pure: pure$1\x0a    };\x0a\x0a    var par = function (asyncValues, nu) {\x0a      return nu(function (callback) {\x0a        var r = [];\x0a        var count = 0;\x0a        var cb = function (i) {\x0a          return function (value) {\x0a            r[i] = value;\x0a            count++;\x0a            if (count \x3e= asyncValues.length) {\x0a              callback(r);\x0a            }\x0a          };\x0a        };\x0a        if (asyncValues.length === 0) {\x0a          callback([]);\x0a        } else {\x0a          each(asyncValues, function (asyncValue, i) {\x0a            asyncValue.get(cb(i));\x0a          });\x0a        }\x0a      });\x0a    };\x0a\x0a    var par$1 = function (futures) {\x0a      return par(futures, Future.nu);\x0a    };\x0a    var mapM = function (array, fn) {\x0a      var futures = map(array, fn);\x0a      return par$1(futures);\x0a    };\x0a\x0a    var pasteHtml$1 = function (editor, html, internalFlag) {\x0a      var internal = internalFlag ? internalFlag : InternalHtml.isMarked(html);\x0a      var args = ProcessFilters.process(editor, InternalHtml.unmark(html), internal);\x0a      if (args.cancelled === false) {\x0a        SmartPaste.insertContent(editor, args.content);\x0a      }\x0a    };\x0a    var pasteText = function (editor, text) {\x0a      text = editor.dom.encode(text).replace(/\x5cr\x5cn/g, \x27\x5cn\x27);\x0a      text = Newlines.convert(text, editor.settings.forced_root_block, editor.settings.forced_root_block_attrs);\x0a      pasteHtml$1(editor, text, false);\x0a    };\x0a    var getDataTransferItems = function (dataTransfer) {\x0a      var items = {};\x0a      var mceInternalUrlPrefix = \x27data:text/mce-internal,\x27;\x0a      if (dataTransfer) {\x0a        if (dataTransfer.getData) {\x0a          var legacyText = dataTransfer.getData(\x27Text\x27);\x0a          if (legacyText && legacyText.length \x3e 0) {\x0a            if (legacyText.indexOf(mceInternalUrlPrefix) === -1) {\x0a              items[\x27text/plain\x27] = legacyText;\x0a            }\x0a          }\x0a        }\x0a        if (dataTransfer.types) {\x0a          for (var i = 0; i \x3c dataTransfer.types.length; i++) {\x0a            var contentType = dataTransfer.types[i];\x0a            try {\x0a              items[contentType] = dataTransfer.getData(contentType);\x0a            } catch (ex) {\x0a              items[contentType] = \x27\x27;\x0a            }\x0a          }\x0a        }\x0a      }\x0a      return items;\x0a    };\x0a    var getClipboardContent = function (editor, clipboardEvent) {\x0a      var content = getDataTransferItems(clipboardEvent.clipboardData || editor.getDoc().dataTransfer);\x0a      return Utils.isMsEdge() ? global$3.extend(content, { \x27text/html\x27: \x27\x27 }) : content;\x0a    };\x0a    var hasContentType = function (clipboardContent, mimeType) {\x0a      return mimeType in clipboardContent && clipboardContent[mimeType].length \x3e 0;\x0a    };\x0a    var hasHtmlOrText = function (content) {\x0a      return hasContentType(content, \x27text/html\x27) || hasContentType(content, \x27text/plain\x27);\x0a    };\x0a    var getBase64FromUri = function (uri) {\x0a      var idx;\x0a      idx = uri.indexOf(\x27,\x27);\x0a      if (idx !== -1) {\x0a        return uri.substr(idx + 1);\x0a      }\x0a      return null;\x0a    };\x0a    var isValidDataUriImage = function (settings, imgElm) {\x0a      return settings.images_dataimg_filter ? settings.images_dataimg_filter(imgElm) : true;\x0a    };\x0a    var extractFilename = function (editor, str) {\x0a      var m = str.match(/([\x5cs\x5cS]+?)\x5c.(?:jpeg|jpg|png|gif)$/i);\x0a      return m ? editor.dom.encode(m[1]) : null;\x0a    };\x0a    var uniqueId = Utils.createIdGenerator(\x27mceclip\x27);\x0a    var pasteImage = function (editor, imageItem) {\x0a      var base64 = getBase64FromUri(imageItem.uri);\x0a      var id = uniqueId();\x0a      var name = editor.settings.images_reuse_filename && imageItem.blob.name ? extractFilename(editor, imageItem.blob.name) : id;\x0a      var img = new domGlobals.Image();\x0a      img.src = imageItem.uri;\x0a      if (isValidDataUriImage(editor.settings, img)) {\x0a        var blobCache = editor.editorUpload.blobCache;\x0a        var blobInfo = void 0, existingBlobInfo = void 0;\x0a        existingBlobInfo = blobCache.findFirst(function (cachedBlobInfo) {\x0a          return cachedBlobInfo.base64() === base64;\x0a        });\x0a        if (!existingBlobInfo) {\x0a          blobInfo = blobCache.create(id, imageItem.blob, base64, name);\x0a          blobCache.add(blobInfo);\x0a        } else {\x0a          blobInfo = existingBlobInfo;\x0a        }\x0a        pasteHtml$1(editor, \x27\x3cimg src=\x22\x27 + blobInfo.blobUri() + \x27\x22\x3e\x27, false);\x0a      } else {\x0a        pasteHtml$1(editor, \x27\x3cimg src=\x22\x27 + imageItem.uri + \x27\x22\x3e\x27, false);\x0a      }\x0a    };\x0a    var isClipboardEvent = function (event) {\x0a      return event.type === \x27paste\x27;\x0a    };\x0a    var readBlobsAsDataUris = function (items) {\x0a      return mapM(items, function (item) {\x0a        return Future.nu(function (resolve) {\x0a          var blob = item.getAsFile ? item.getAsFile() : item;\x0a          var reader = new window.FileReader();\x0a          reader.onload = function () {\x0a            resolve({\x0a              blob: blob,\x0a              uri: reader.result\x0a            });\x0a          };\x0a          reader.readAsDataURL(blob);\x0a        });\x0a      });\x0a    };\x0a    var getImagesFromDataTransfer = function (dataTransfer) {\x0a      var items = dataTransfer.items ? map(from$1(dataTransfer.items), function (item) {\x0a        return item.getAsFile();\x0a      }) : [];\x0a      var files = dataTransfer.files ? from$1(dataTransfer.files) : [];\x0a      var images = filter$1(items.length \x3e 0 ? items : files, function (file) {\x0a        return /^image\x5c/(jpeg|png|gif|bmp)$/.test(file.type);\x0a      });\x0a      return images;\x0a    };\x0a    var pasteImageData = function (editor, e, rng) {\x0a      var dataTransfer = isClipboardEvent(e) ? e.clipboardData : e.dataTransfer;\x0a      if (editor.settings.paste_data_images && dataTransfer) {\x0a        var images = getImagesFromDataTransfer(dataTransfer);\x0a        if (images.length \x3e 0) {\x0a          e.preventDefault();\x0a          readBlobsAsDataUris(images).get(function (blobResults) {\x0a            if (rng) {\x0a              editor.selection.setRng(rng);\x0a            }\x0a            each(blobResults, function (result) {\x0a              pasteImage(editor, result);\x0a            });\x0a          });\x0a          return true;\x0a        }\x0a      }\x0a      return false;\x0a    };\x0a    var isBrokenAndroidClipboardEvent = function (e) {\x0a      var clipboardData = e.clipboardData;\x0a      return domGlobals.navigator.userAgent.indexOf(\x27Android\x27) !== -1 && clipboardData && clipboardData.items && clipboardData.items.length === 0;\x0a    };\x0a    var isKeyboardPasteEvent = function (e) {\x0a      return global$4.metaKeyPressed(e) && e.keyCode === 86 || e.shiftKey && e.keyCode === 45;\x0a    };\x0a    var registerEventHandlers = function (editor, pasteBin, pasteFormat) {\x0a      var keyboardPasteTimeStamp = 0;\x0a      var keyboardPastePlainTextState;\x0a      editor.on(\x27keydown\x27, function (e) {\x0a        function removePasteBinOnKeyUp(e) {\x0a          if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\x0a            pasteBin.remove();\x0a          }\x0a        }\x0a        if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\x0a          keyboardPastePlainTextState = e.shiftKey && e.keyCode === 86;\x0a          if (keyboardPastePlainTextState && global$1.webkit && domGlobals.navigator.userAgent.indexOf(\x27Version/\x27) !== -1) {\x0a            return;\x0a          }\x0a          e.stopImmediatePropagation();\x0a          keyboardPasteTimeStamp = new Date().getTime();\x0a          if (global$1.ie && keyboardPastePlainTextState) {\x0a            e.preventDefault();\x0a            Events.firePaste(editor, true);\x0a            return;\x0a          }\x0a          pasteBin.remove();\x0a          pasteBin.create();\x0a          editor.once(\x27keyup\x27, removePasteBinOnKeyUp);\x0a          editor.once(\x27paste\x27, function () {\x0a            editor.off(\x27keyup\x27, removePasteBinOnKeyUp);\x0a          });\x0a        }\x0a      });\x0a      function insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal) {\x0a        var content, isPlainTextHtml;\x0a        if (hasContentType(clipboardContent, \x27text/html\x27)) {\x0a          content = clipboardContent[\x27text/html\x27];\x0a        } else {\x0a          content = pasteBin.getHtml();\x0a          internal = internal ? internal : InternalHtml.isMarked(content);\x0a          if (pasteBin.isDefaultContent(content)) {\x0a            plainTextMode = true;\x0a          }\x0a        }\x0a        content = Utils.trimHtml(content);\x0a        pasteBin.remove();\x0a        isPlainTextHtml = internal === false && Newlines.isPlainText(content);\x0a        if (!content.length || isPlainTextHtml) {\x0a          plainTextMode = true;\x0a        }\x0a        if (plainTextMode) {\x0a          if (hasContentType(clipboardContent, \x27text/plain\x27) && isPlainTextHtml) {\x0a            content = clipboardContent[\x27text/plain\x27];\x0a          } else {\x0a            content = Utils.innerText(content);\x0a          }\x0a        }\x0a        if (pasteBin.isDefaultContent(content)) {\x0a          if (!isKeyBoardPaste) {\x0a            editor.windowManager.alert(\x27Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents.\x27);\x0a          }\x0a          return;\x0a        }\x0a        if (plainTextMode) {\x0a          pasteText(editor, content);\x0a        } else {\x0a          pasteHtml$1(editor, content, internal);\x0a        }\x0a      }\x0a      var getLastRng = function () {\x0a        return pasteBin.getLastRng() || editor.selection.getRng();\x0a      };\x0a      editor.on(\x27paste\x27, function (e) {\x0a        var clipboardTimer = new Date().getTime();\x0a        var clipboardContent = getClipboardContent(editor, e);\x0a        var clipboardDelay = new Date().getTime() - clipboardTimer;\x0a        var isKeyBoardPaste = new Date().getTime() - keyboardPasteTimeStamp - clipboardDelay \x3c 1000;\x0a        var plainTextMode = pasteFormat.get() === \x27text\x27 || keyboardPastePlainTextState;\x0a        var internal = hasContentType(clipboardContent, InternalHtml.internalHtmlMime());\x0a        keyboardPastePlainTextState = false;\x0a        if (e.isDefaultPrevented() || isBrokenAndroidClipboardEvent(e)) {\x0a          pasteBin.remove();\x0a          return;\x0a        }\x0a        if (!hasHtmlOrText(clipboardContent) && pasteImageData(editor, e, getLastRng())) {\x0a          pasteBin.remove();\x0a          return;\x0a        }\x0a        if (!isKeyBoardPaste) {\x0a          e.preventDefault();\x0a        }\x0a        if (global$1.ie && (!isKeyBoardPaste || e.ieFake) && !hasContentType(clipboardContent, \x27text/html\x27)) {\x0a          pasteBin.create();\x0a          editor.dom.bind(pasteBin.getEl(), \x27paste\x27, function (e) {\x0a            e.stopPropagation();\x0a          });\x0a          editor.getDoc().execCommand(\x27Paste\x27, false, null);\x0a          clipboardContent[\x27text/html\x27] = pasteBin.getHtml();\x0a        }\x0a        if (hasContentType(clipboardContent, \x27text/html\x27)) {\x0a          e.preventDefault();\x0a          if (!internal) {\x0a            internal = InternalHtml.isMarked(clipboardContent[\x27text/html\x27]);\x0a          }\x0a          insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal);\x0a        } else {\x0a          global$2.setEditorTimeout(editor, function () {\x0a            insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal);\x0a          }, 0);\x0a        }\x0a      });\x0a    };\x0a    var registerEventsAndFilters = function (editor, pasteBin, pasteFormat) {\x0a      registerEventHandlers(editor, pasteBin, pasteFormat);\x0a      var src;\x0a      editor.parser.addNodeFilter(\x27img\x27, function (nodes, name, args) {\x0a        var isPasteInsert = function (args) {\x0a          return args.data && args.data.paste === true;\x0a        };\x0a        var remove = function (node) {\x0a          if (!node.attr(\x27data-mce-object\x27) && src !== global$1.transparentSrc) {\x0a            node.remove();\x0a          }\x0a        };\x0a        var isWebKitFakeUrl = function (src) {\x0a          return src.indexOf(\x27webkit-fake-url\x27) === 0;\x0a        };\x0a        var isDataUri = function (src) {\x0a          return src.indexOf(\x27data:\x27) === 0;\x0a        };\x0a        if (!editor.settings.paste_data_images && isPasteInsert(args)) {\x0a          var i = nodes.length;\x0a          while (i--) {\x0a            src = nodes[i].attributes.map.src;\x0a            if (!src) {\x0a              continue;\x0a            }\x0a            if (isWebKitFakeUrl(src)) {\x0a              remove(nodes[i]);\x0a            } else if (!editor.settings.allow_html_data_urls && isDataUri(src)) {\x0a              remove(nodes[i]);\x0a            }\x0a          }\x0a        }\x0a      });\x0a    };\x0a\x0a    var getPasteBinParent = function (editor) {\x0a      return global$1.ie && editor.inline ? domGlobals.document.body : editor.getBody();\x0a    };\x0a    var isExternalPasteBin = function (editor) {\x0a      return getPasteBinParent(editor) !== editor.getBody();\x0a    };\x0a    var delegatePasteEvents = function (editor, pasteBinElm, pasteBinDefaultContent) {\x0a      if (isExternalPasteBin(editor)) {\x0a        editor.dom.bind(pasteBinElm, \x27paste keyup\x27, function (e) {\x0a          if (!isDefault(editor, pasteBinDefaultContent)) {\x0a            editor.fire(\x27paste\x27);\x0a          }\x0a        });\x0a      }\x0a    };\x0a    var create = function (editor, lastRngCell, pasteBinDefaultContent) {\x0a      var dom = editor.dom, body = editor.getBody();\x0a      var pasteBinElm;\x0a      lastRngCell.set(editor.selection.getRng());\x0a      pasteBinElm = editor.dom.add(getPasteBinParent(editor), \x27div\x27, {\x0a        \x27id\x27: \x27mcepastebin\x27,\x0a        \x27class\x27: \x27mce-pastebin\x27,\x0a        \x27contentEditable\x27: true,\x0a        \x27data-mce-bogus\x27: \x27all\x27,\x0a        \x27style\x27: \x27position: fixed; top: 50%; width: 10px; height: 10px; overflow: hidden; opacity: 0\x27\x0a      }, pasteBinDefaultContent);\x0a      if (global$1.ie || global$1.gecko) {\x0a        dom.setStyle(pasteBinElm, \x27left\x27, dom.getStyle(body, \x27direction\x27, true) === \x27rtl\x27 ? 65535 : -65535);\x0a      }\x0a      dom.bind(pasteBinElm, \x27beforedeactivate focusin focusout\x27, function (e) {\x0a        e.stopPropagation();\x0a      });\x0a      delegatePasteEvents(editor, pasteBinElm, pasteBinDefaultContent);\x0a      pasteBinElm.focus();\x0a      editor.selection.select(pasteBinElm, true);\x0a    };\x0a    var remove = function (editor, lastRngCell) {\x0a      if (getEl(editor)) {\x0a        var pasteBinClone = void 0;\x0a        var lastRng = lastRngCell.get();\x0a        while (pasteBinClone = editor.dom.get(\x27mcepastebin\x27)) {\x0a          editor.dom.remove(pasteBinClone);\x0a          editor.dom.unbind(pasteBinClone);\x0a        }\x0a        if (lastRng) {\x0a          editor.selection.setRng(lastRng);\x0a        }\x0a      }\x0a      lastRngCell.set(null);\x0a    };\x0a    var getEl = function (editor) {\x0a      return editor.dom.get(\x27mcepastebin\x27);\x0a    };\x0a    var getHtml = function (editor) {\x0a      var pasteBinElm, pasteBinClones, i, dirtyWrappers, cleanWrapper;\x0a      var copyAndRemove = function (toElm, fromElm) {\x0a        toElm.appendChild(fromElm);\x0a        editor.dom.remove(fromElm, true);\x0a      };\x0a      pasteBinClones = global$3.grep(getPasteBinParent(editor).childNodes, function (elm) {\x0a        return elm.id === \x27mcepastebin\x27;\x0a      });\x0a      pasteBinElm = pasteBinClones.shift();\x0a      global$3.each(pasteBinClones, function (pasteBinClone) {\x0a        copyAndRemove(pasteBinElm, pasteBinClone);\x0a      });\x0a      dirtyWrappers = editor.dom.select(\x27div[id=mcepastebin]\x27, pasteBinElm);\x0a      for (i = dirtyWrappers.length - 1; i \x3e= 0; i--) {\x0a        cleanWrapper = editor.dom.create(\x27div\x27);\x0a        pasteBinElm.insertBefore(cleanWrapper, dirtyWrappers[i]);\x0a        copyAndRemove(cleanWrapper, dirtyWrappers[i]);\x0a      }\x0a      return pasteBinElm ? pasteBinElm.innerHTML : \x27\x27;\x0a    };\x0a    var getLastRng = function (lastRng) {\x0a      return lastRng.get();\x0a    };\x0a    var isDefaultContent = function (pasteBinDefaultContent, content) {\x0a      return content === pasteBinDefaultContent;\x0a    };\x0a    var isPasteBin = function (elm) {\x0a      return elm && elm.id === \x27mcepastebin\x27;\x0a    };\x0a    var isDefault = function (editor, pasteBinDefaultContent) {\x0a      var pasteBinElm = getEl(editor);\x0a      return isPasteBin(pasteBinElm) && isDefaultContent(pasteBinDefaultContent, pasteBinElm.innerHTML);\x0a    };\x0a    var PasteBin = function (editor) {\x0a      var lastRng = Cell(null);\x0a      var pasteBinDefaultContent = \x27%MCEPASTEBIN%\x27;\x0a      return {\x0a        create: function () {\x0a          return create(editor, lastRng, pasteBinDefaultContent);\x0a        },\x0a        remove: function () {\x0a          return remove(editor, lastRng);\x0a        },\x0a        getEl: function () {\x0a          return getEl(editor);\x0a        },\x0a        getHtml: function () {\x0a          return getHtml(editor);\x0a        },\x0a        getLastRng: function () {\x0a          return getLastRng(lastRng);\x0a        },\x0a        isDefault: function () {\x0a          return isDefault(editor, pasteBinDefaultContent);\x0a        },\x0a        isDefaultContent: function (content) {\x0a          return isDefaultContent(pasteBinDefaultContent, content);\x0a        }\x0a      };\x0a    };\x0a\x0a    var Clipboard = function (editor, pasteFormat) {\x0a      var pasteBin = PasteBin(editor);\x0a      editor.on(\x27preInit\x27, function () {\x0a        return registerEventsAndFilters(editor, pasteBin, pasteFormat);\x0a      });\x0a      return {\x0a        pasteFormat: pasteFormat,\x0a        pasteHtml: function (html, internalFlag) {\x0a          return pasteHtml$1(editor, html, internalFlag);\x0a        },\x0a        pasteText: function (text) {\x0a          return pasteText(editor, text);\x0a        },\x0a        pasteImageData: function (e, rng) {\x0a          return pasteImageData(editor, e, rng);\x0a        },\x0a        getDataTransferItems: getDataTransferItems,\x0a        hasHtmlOrText: hasHtmlOrText,\x0a        hasContentType: hasContentType\x0a      };\x0a    };\x0a\x0a    var noop = function () {\x0a    };\x0a    var hasWorkingClipboardApi = function (clipboardData) {\x0a      return global$1.iOS === false && clipboardData !== undefined && typeof clipboardData.setData === \x27function\x27 && Utils.isMsEdge() !== true;\x0a    };\x0a    var setHtml5Clipboard = function (clipboardData, html, text) {\x0a      if (hasWorkingClipboardApi(clipboardData)) {\x0a        try {\x0a          clipboardData.clearData();\x0a          clipboardData.setData(\x27text/html\x27, html);\x0a          clipboardData.setData(\x27text/plain\x27, text);\x0a          clipboardData.setData(InternalHtml.internalHtmlMime(), html);\x0a          return true;\x0a        } catch (e) {\x0a          return false;\x0a        }\x0a      } else {\x0a        return false;\x0a      }\x0a    };\x0a    var setClipboardData = function (evt, data, fallback, done) {\x0a      if (setHtml5Clipboard(evt.clipboardData, data.html, data.text)) {\x0a        evt.preventDefault();\x0a        done();\x0a      } else {\x0a        fallback(data.html, done);\x0a      }\x0a    };\x0a    var fallback = function (editor) {\x0a      return function (html, done) {\x0a        var markedHtml = InternalHtml.mark(html);\x0a        var outer = editor.dom.create(\x27div\x27, {\x0a          \x27contenteditable\x27: \x27false\x27,\x0a          \x27data-mce-bogus\x27: \x27all\x27\x0a        });\x0a        var inner = editor.dom.create(\x27div\x27, { contenteditable: \x27true\x27 }, markedHtml);\x0a        editor.dom.setStyles(outer, {\x0a          position: \x27fixed\x27,\x0a          top: \x270\x27,\x0a          left: \x27-3000px\x27,\x0a          width: \x271000px\x27,\x0a          overflow: \x27hidden\x27\x0a        });\x0a        outer.appendChild(inner);\x0a        editor.dom.add(editor.getBody(), outer);\x0a        var range = editor.selection.getRng();\x0a        inner.focus();\x0a        var offscreenRange = editor.dom.createRng();\x0a        offscreenRange.selectNodeContents(inner);\x0a        editor.selection.setRng(offscreenRange);\x0a        setTimeout(function () {\x0a          editor.selection.setRng(range);\x0a          outer.parentNode.removeChild(outer);\x0a          done();\x0a        }, 0);\x0a      };\x0a    };\x0a    var getData = function (editor) {\x0a      return {\x0a        html: editor.selection.getContent({ contextual: true }),\x0a        text: editor.selection.getContent({ format: \x27text\x27 })\x0a      };\x0a    };\x0a    var isTableSelection = function (editor) {\x0a      return !!editor.dom.getParent(editor.selection.getStart(), \x27td[data-mce-selected],th[data-mce-selected]\x27, editor.getBody());\x0a    };\x0a    var hasSelectedContent = function (editor) {\x0a      return !editor.selection.isCollapsed() || isTableSelection(editor);\x0a    };\x0a    var cut = function (editor) {\x0a      return function (evt) {\x0a        if (hasSelectedContent(editor)) {\x0a          setClipboardData(evt, getData(editor), fallback(editor), function () {\x0a            setTimeout(function () {\x0a              editor.execCommand(\x27Delete\x27);\x0a            }, 0);\x0a          });\x0a        }\x0a      };\x0a    };\x0a    var copy = function (editor) {\x0a      return function (evt) {\x0a        if (hasSelectedContent(editor)) {\x0a          setClipboardData(evt, getData(editor), fallback(editor), noop);\x0a        }\x0a      };\x0a    };\x0a    var register$1 = function (editor) {\x0a      editor.on(\x27cut\x27, cut(editor));\x0a      editor.on(\x27copy\x27, copy(editor));\x0a    };\x0a    var CutCopy = { register: register$1 };\x0a\x0a    var global$a = tinymce.util.Tools.resolve(\x27tinymce.dom.RangeUtils\x27);\x0a\x0a    var getCaretRangeFromEvent = function (editor, e) {\x0a      return global$a.getCaretRangeFromPoint(e.clientX, e.clientY, editor.getDoc());\x0a    };\x0a    var isPlainTextFileUrl = function (content) {\x0a      var plainTextContent = content[\x27text/plain\x27];\x0a      return plainTextContent ? plainTextContent.indexOf(\x27file://\x27) === 0 : false;\x0a    };\x0a    var setFocusedRange = function (editor, rng) {\x0a      editor.focus();\x0a      editor.selection.setRng(rng);\x0a    };\x0a    var setup = function (editor, clipboard, draggingInternallyState) {\x0a      if (Settings.shouldBlockDrop(editor)) {\x0a        editor.on(\x27dragend dragover draggesture dragdrop drop drag\x27, function (e) {\x0a          e.preventDefault();\x0a          e.stopPropagation();\x0a        });\x0a      }\x0a      if (!Settings.shouldPasteDataImages(editor)) {\x0a        editor.on(\x27drop\x27, function (e) {\x0a          var dataTransfer = e.dataTransfer;\x0a          if (dataTransfer && dataTransfer.files && dataTransfer.files.length \x3e 0) {\x0a            e.preventDefault();\x0a          }\x0a        });\x0a      }\x0a      editor.on(\x27drop\x27, function (e) {\x0a        var dropContent, rng;\x0a        rng = getCaretRangeFromEvent(editor, e);\x0a        if (e.isDefaultPrevented() || draggingInternallyState.get()) {\x0a          return;\x0a        }\x0a        dropContent = clipboard.getDataTransferItems(e.dataTransfer);\x0a        var internal = clipboard.hasContentType(dropContent, InternalHtml.internalHtmlMime());\x0a        if ((!clipboard.hasHtmlOrText(dropContent) || isPlainTextFileUrl(dropContent)) && clipboard.pasteImageData(e, rng)) {\x0a          return;\x0a        }\x0a        if (rng && Settings.shouldFilterDrop(editor)) {\x0a          var content_1 = dropContent[\x27mce-internal\x27] || dropContent[\x27text/html\x27] || dropContent[\x27text/plain\x27];\x0a          if (content_1) {\x0a            e.preventDefault();\x0a            global$2.setEditorTimeout(editor, function () {\x0a              editor.undoManager.transact(function () {\x0a                if (dropContent[\x27mce-internal\x27]) {\x0a                  editor.execCommand(\x27Delete\x27);\x0a                }\x0a                setFocusedRange(editor, rng);\x0a                content_1 = Utils.trimHtml(content_1);\x0a                if (!dropContent[\x27text/html\x27]) {\x0a                  clipboard.pasteText(content_1);\x0a                } else {\x0a                  clipboard.pasteHtml(content_1, internal);\x0a                }\x0a              });\x0a            });\x0a          }\x0a        }\x0a      });\x0a      editor.on(\x27dragstart\x27, function (e) {\x0a        draggingInternallyState.set(true);\x0a      });\x0a      editor.on(\x27dragover dragend\x27, function (e) {\x0a        if (Settings.shouldPasteDataImages(editor) && draggingInternallyState.get() === false) {\x0a          e.preventDefault();\x0a          setFocusedRange(editor, getCaretRangeFromEvent(editor, e));\x0a        }\x0a        if (e.type === \x27dragend\x27) {\x0a          draggingInternallyState.set(false);\x0a        }\x0a      });\x0a    };\x0a    var DragDrop = { setup: setup };\x0a\x0a    var setup$1 = function (editor) {\x0a      var plugin = editor.plugins.paste;\x0a      var preProcess = Settings.getPreProcess(editor);\x0a      if (preProcess) {\x0a        editor.on(\x27PastePreProcess\x27, function (e) {\x0a          preProcess.call(plugin, plugin, e);\x0a        });\x0a      }\x0a      var postProcess = Settings.getPostProcess(editor);\x0a      if (postProcess) {\x0a        editor.on(\x27PastePostProcess\x27, function (e) {\x0a          postProcess.call(plugin, plugin, e);\x0a        });\x0a      }\x0a    };\x0a    var PrePostProcess = { setup: setup$1 };\x0a\x0a    function addPreProcessFilter(editor, filterFunc) {\x0a      editor.on(\x27PastePreProcess\x27, function (e) {\x0a        e.content = filterFunc(editor, e.content, e.internal, e.wordContent);\x0a      });\x0a    }\x0a    function addPostProcessFilter(editor, filterFunc) {\x0a      editor.on(\x27PastePostProcess\x27, function (e) {\x0a        filterFunc(editor, e.node);\x0a      });\x0a    }\x0a    function removeExplorerBrElementsAfterBlocks(editor, html) {\x0a      if (!WordFilter.isWordContent(html)) {\x0a        return html;\x0a      }\x0a      var blockElements = [];\x0a      global$3.each(editor.schema.getBlockElements(), function (block, blockName) {\x0a        blockElements.push(blockName);\x0a      });\x0a      var explorerBlocksRegExp = new RegExp(\x27(?:\x3cbr\x3e&nbsp;[\x5c\x5cs\x5c\x5cr\x5c\x5cn]+|\x3cbr\x3e)*(\x3c\x5c\x5c/?(\x27 + blockElements.join(\x27|\x27) + \x27)[^\x3e]*\x3e)(?:\x3cbr\x3e&nbsp;[\x5c\x5cs\x5c\x5cr\x5c\x5cn]+|\x3cbr\x3e)*\x27, \x27g\x27);\x0a      html = Utils.filter(html, [[\x0a          explorerBlocksRegExp,\x0a          \x27$1\x27\x0a        ]]);\x0a      html = Utils.filter(html, [\x0a        [\x0a          /\x3cbr\x3e\x3cbr\x3e/g,\x0a          \x27\x3cBR\x3e\x3cBR\x3e\x27\x0a        ],\x0a        [\x0a          /\x3cbr\x3e/g,\x0a          \x27 \x27\x0a        ],\x0a        [\x0a          /\x3cBR\x3e\x3cBR\x3e/g,\x0a          \x27\x3cbr\x3e\x27\x0a        ]\x0a      ]);\x0a      return html;\x0a    }\x0a    function removeWebKitStyles(editor, content, internal, isWordHtml) {\x0a      if (isWordHtml || internal) {\x0a        return content;\x0a      }\x0a      var webKitStylesSetting = Settings.getWebkitStyles(editor);\x0a      var webKitStyles;\x0a      if (Settings.shouldRemoveWebKitStyles(editor) === false || webKitStylesSetting === \x27all\x27) {\x0a        return content;\x0a      }\x0a      if (webKitStylesSetting) {\x0a        webKitStyles = webKitStylesSetting.split(/[, ]/);\x0a      }\x0a      if (webKitStyles) {\x0a        var dom_1 = editor.dom, node_1 = editor.selection.getNode();\x0a        content = content.replace(/(\x3c[^\x3e]+) style=\x22([^\x22]*)\x22([^\x3e]*\x3e)/gi, function (all, before, value, after) {\x0a          var inputStyles = dom_1.parseStyle(dom_1.decode(value));\x0a          var outputStyles = {};\x0a          if (webKitStyles === \x27none\x27) {\x0a            return before + after;\x0a          }\x0a          for (var i = 0; i \x3c webKitStyles.length; i++) {\x0a            var inputValue = inputStyles[webKitStyles[i]], currentValue = dom_1.getStyle(node_1, webKitStyles[i], true);\x0a            if (/color/.test(webKitStyles[i])) {\x0a              inputValue = dom_1.toHex(inputValue);\x0a              currentValue = dom_1.toHex(currentValue);\x0a            }\x0a            if (currentValue !== inputValue) {\x0a              outputStyles[webKitStyles[i]] = inputValue;\x0a            }\x0a          }\x0a          outputStyles = dom_1.serializeStyle(outputStyles, \x27span\x27);\x0a          if (outputStyles) {\x0a            return before + \x27 style=\x22\x27 + outputStyles + \x27\x22\x27 + after;\x0a          }\x0a          return before + after;\x0a        });\x0a      } else {\x0a        content = content.replace(/(\x3c[^\x3e]+) style=\x22([^\x22]*)\x22([^\x3e]*\x3e)/gi, \x27$1$3\x27);\x0a      }\x0a      content = content.replace(/(\x3c[^\x3e]+) data-mce-style=\x22([^\x22]+)\x22([^\x3e]*\x3e)/gi, function (all, before, value, after) {\x0a        return before + \x27 style=\x22\x27 + value + \x27\x22\x27 + after;\x0a      });\x0a      return content;\x0a    }\x0a    function removeUnderlineAndFontInAnchor(editor, root) {\x0a      editor.$(\x27a\x27, root).find(\x27font,u\x27).each(function (i, node) {\x0a        editor.dom.remove(node, true);\x0a      });\x0a    }\x0a    var setup$2 = function (editor) {\x0a      if (global$1.webkit) {\x0a        addPreProcessFilter(editor, removeWebKitStyles);\x0a      }\x0a      if (global$1.ie) {\x0a        addPreProcessFilter(editor, removeExplorerBrElementsAfterBlocks);\x0a        addPostProcessFilter(editor, removeUnderlineAndFontInAnchor);\x0a      }\x0a    };\x0a    var Quirks = { setup: setup$2 };\x0a\x0a    var stateChange = function (editor, clipboard, e) {\x0a      var ctrl = e.control;\x0a      ctrl.active(clipboard.pasteFormat.get() === \x27text\x27);\x0a      editor.on(\x27PastePlainTextToggle\x27, function (e) {\x0a        ctrl.active(e.state);\x0a      });\x0a    };\x0a    var register$2 = function (editor, clipboard) {\x0a      var postRender = curry(stateChange, editor, clipboard);\x0a      editor.addButton(\x27pastetext\x27, {\x0a        active: false,\x0a        icon: \x27pastetext\x27,\x0a        tooltip: \x27Paste as text\x27,\x0a        cmd: \x27mceTogglePlainTextPaste\x27,\x0a        onPostRender: postRender\x0a      });\x0a      editor.addMenuItem(\x27pastetext\x27, {\x0a        text: \x27Paste as text\x27,\x0a        selectable: true,\x0a        active: clipboard.pasteFormat,\x0a        cmd: \x27mceTogglePlainTextPaste\x27,\x0a        onPostRender: postRender\x0a      });\x0a    };\x0a    var Buttons = { register: register$2 };\x0a\x0a    global.add(\x27paste\x27, function (editor) {\x0a      if (DetectProPlugin.hasProPlugin(editor) === false) {\x0a        var userIsInformedState = Cell(false);\x0a        var draggingInternallyState = Cell(false);\x0a        var pasteFormat = Cell(Settings.isPasteAsTextEnabled(editor) ? \x27text\x27 : \x27html\x27);\x0a        var clipboard = Clipboard(editor, pasteFormat);\x0a        var quirks = Quirks.setup(editor);\x0a        Buttons.register(editor, clipboard);\x0a        Commands.register(editor, clipboard, userIsInformedState);\x0a        PrePostProcess.setup(editor);\x0a        CutCopy.register(editor);\x0a        DragDrop.setup(editor, clipboard, draggingInternallyState);\x0a        return Api.get(clipboard, quirks);\x0a      }\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}(window));\x0a})();\x0a'}