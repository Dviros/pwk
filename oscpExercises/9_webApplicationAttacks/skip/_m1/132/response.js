var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:58:02 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Fri, 17 May 2019 04:49:54 GMT\x0aETag: \x2215db-5890e1d14c080-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-1379/1380\x0aContent-Length: 1380\x0aKeep-Alive: timeout=5, max=59\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar fullscreen = (function (domGlobals) {\x0a    \x27use strict\x27;\x0a\x0a    var Cell = function (initial) {\x0a      var value = initial;\x0a      var get = function () {\x0a        return value;\x0a      };\x0a      var set = function (v) {\x0a        value = v;\x0a      };\x0a      var clone = function () {\x0a        return Cell(get());\x0a      };\x0a      return {\x0a        get: get,\x0a        set: set,\x0a        clone: clone\x0a      };\x0a    };\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var get = function (fullscreenState) {\x0a      return {\x0a        isFullscreen: function () {\x0a          return fullscreenState.get() !== null;\x0a        }\x0a      };\x0a    };\x0a    var Api = { get: get };\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var fireFullscreenStateChanged = function (editor, state) {\x0a      editor.fire(\x27FullscreenStateChanged\x27, { state: state });\x0a    };\x0a    var Events = { fireFullscreenStateChanged: fireFullscreenStateChanged };\x0a\x0a    var DOM = global$1.DOM;\x0a    var getWindowSize = function () {\x0a      var w;\x0a      var h;\x0a      var win = domGlobals.window;\x0a      var doc = domGlobals.document;\x0a      var body = doc.body;\x0a      if (body.offsetWidth) {\x0a        w = body.offsetWidth;\x0a        h = body.offsetHeight;\x0a      }\x0a      if (win.innerWidth && win.innerHeight) {\x0a        w = win.innerWidth;\x0a        h = win.innerHeight;\x0a      }\x0a      return {\x0a        w: w,\x0a        h: h\x0a      };\x0a    };\x0a    var getScrollPos = function () {\x0a      var vp = DOM.getViewPort();\x0a      return {\x0a        x: vp.x,\x0a        y: vp.y\x0a      };\x0a    };\x0a    var setScrollPos = function (pos) {\x0a      domGlobals.window.scrollTo(pos.x, pos.y);\x0a    };\x0a    var toggleFullscreen = function (editor, fullscreenState) {\x0a      var body = domGlobals.document.body;\x0a      var documentElement = domGlobals.document.documentElement;\x0a      var editorContainerStyle;\x0a      var editorContainer, iframe, iframeStyle;\x0a      var fullscreenInfo = fullscreenState.get();\x0a      var resize = function () {\x0a        DOM.setStyle(iframe, \x27height\x27, getWindowSize().h - (editorContainer.clientHeight - iframe.clientHeight));\x0a      };\x0a      var removeResize = function () {\x0a        DOM.unbind(domGlobals.window, \x27resize\x27, resize);\x0a      };\x0a      editorContainer = editor.getContainer();\x0a      editorContainerStyle = editorContainer.style;\x0a      iframe = editor.getContentAreaContainer().firstChild;\x0a      iframeStyle = iframe.style;\x0a      if (!fullscreenInfo) {\x0a        var newFullScreenInfo = {\x0a          scrollPos: getScrollPos(),\x0a          containerWidth: editorContainerStyle.width,\x0a          containerHeight: editorContainerStyle.height,\x0a          iframeWidth: iframeStyle.width,\x0a          iframeHeight: iframeStyle.height,\x0a          resizeHandler: resize,\x0a          removeHandler: removeResize\x0a        };\x0a        iframeStyle.width = iframeStyle.height = \x27100%\x27;\x0a        editorContainerStyle.width = editorContainerStyle.height = \x27\x27;\x0a        DOM.addClass(body, \x27mce-fullscreen\x27);\x0a        DOM.addClass(documentElement, \x27mce-fullscreen\x27);\x0a        DOM.addClass(editorContainer, \x27mce-fullscreen\x27);\x0a        DOM.bind(domGlobals.window, \x27resize\x27, resize);\x0a        editor.on(\x27remove\x27, removeResize);\x0a        resize();\x0a        fullscreenState.set(newFullScreenInfo);\x0a        Events.fireFullscreenStateChanged(editor, true);\x0a      } else {\x0a        iframeStyle.width = fullscreenInfo.iframeWidth;\x0a        iframeStyle.height = fullscreenInfo.iframeHeight;\x0a        if (fullscreenInfo.containerWidth) {\x0a          editorContainerStyle.width = fullscreenInfo.containerWidth;\x0a        }\x0a        if (fullscreenInfo.containerHeight) {\x0a          editorContainerStyle.height = fullscreenInfo.containerHeight;\x0a        }\x0a        DOM.removeClass(body, \x27mce-fullscreen\x27);\x0a        DOM.removeClass(documentElement, \x27mce-fullscreen\x27);\x0a        DOM.removeClass(editorContainer, \x27mce-fullscreen\x27);\x0a        setScrollPos(fullscreenInfo.scrollPos);\x0a        DOM.unbind(domGlobals.window, \x27resize\x27, fullscreenInfo.resizeHandler);\x0a        editor.off(\x27remove\x27, fullscreenInfo.removeHandler);\x0a        fullscreenState.set(null);\x0a        Events.fireFullscreenStateChanged(editor, false);\x0a      }\x0a    };\x0a    var Actions = { toggleFullscreen: toggleFullscreen };\x0a\x0a    var register = function (editor, fullscreenState) {\x0a      editor.addCommand(\x27mceFullScreen\x27, function () {\x0a        Actions.toggleFullscreen(editor, fullscreenState);\x0a      });\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var postRender = function (editor) {\x0a      return function (e) {\x0a        var ctrl = e.control;\x0a        editor.on(\x27FullscreenStateChanged\x27, function (e) {\x0a          ctrl.active(e.state);\x0a        });\x0a      };\x0a    };\x0a    var register$1 = function (editor) {\x0a      editor.addMenuItem(\x27fullscreen\x27, {\x0a        text: \x27Fullscreen\x27,\x0a        shortcut: \x27Ctrl+Shift+F\x27,\x0a        selectable: true,\x0a        cmd: \x27mceFullScreen\x27,\x0a        onPostRender: postRender(editor),\x0a        context: \x27view\x27\x0a      });\x0a      editor.addButton(\x27fullscreen\x27, {\x0a        active: false,\x0a        tooltip: \x27Fullscreen\x27,\x0a        cmd: \x27mceFullScreen\x27,\x0a        onPostRender: postRender(editor)\x0a      });\x0a    };\x0a    var Buttons = { register: register$1 };\x0a\x0a    global.add(\x27fullscreen\x27, function (editor) {\x0a      var fullscreenState = Cell(null);\x0a      if (editor.settings.inline) {\x0a        return Api.get(fullscreenState);\x0a      }\x0a      Commands.register(editor, fullscreenState);\x0a      Buttons.register(editor);\x0a      editor.addShortcut(\x27Ctrl+Shift+F\x27, \x27\x27, \x27mceFullScreen\x27);\x0a      return Api.get(fullscreenState);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}(window));\x0a})();\x0a'}