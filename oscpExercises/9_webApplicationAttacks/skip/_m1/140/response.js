var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:57:01 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Tue, 29 Jan 2019 20:19:51 GMT\x0aETag: \x222c2e-5809e83fae7c0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-2782/2783\x0aContent-Length: 2783\x0aKeep-Alive: timeout=5, max=88\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar textcolor = (function () {\x0a    \x27use strict\x27;\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var getCurrentColor = function (editor, format) {\x0a      var color;\x0a      editor.dom.getParents(editor.selection.getStart(), function (elm) {\x0a        var value;\x0a        if (value = elm.style[format === \x27forecolor\x27 ? \x27color\x27 : \x27background-color\x27]) {\x0a          color = color ? color : value;\x0a        }\x0a      });\x0a      return color;\x0a    };\x0a    var mapColors = function (colorMap) {\x0a      var i;\x0a      var colors = [];\x0a      for (i = 0; i \x3c colorMap.length; i += 2) {\x0a        colors.push({\x0a          text: colorMap[i + 1],\x0a          color: \x27#\x27 + colorMap[i]\x0a        });\x0a      }\x0a      return colors;\x0a    };\x0a    var applyFormat = function (editor, format, value) {\x0a      editor.undoManager.transact(function () {\x0a        editor.focus();\x0a        editor.formatter.apply(format, { value: value });\x0a        editor.nodeChanged();\x0a      });\x0a    };\x0a    var removeFormat = function (editor, format) {\x0a      editor.undoManager.transact(function () {\x0a        editor.focus();\x0a        editor.formatter.remove(format, { value: null }, null, true);\x0a        editor.nodeChanged();\x0a      });\x0a    };\x0a    var TextColor = {\x0a      getCurrentColor: getCurrentColor,\x0a      mapColors: mapColors,\x0a      applyFormat: applyFormat,\x0a      removeFormat: removeFormat\x0a    };\x0a\x0a    var register = function (editor) {\x0a      editor.addCommand(\x27mceApplyTextcolor\x27, function (format, value) {\x0a        TextColor.applyFormat(editor, format, value);\x0a      });\x0a      editor.addCommand(\x27mceRemoveTextcolor\x27, function (format) {\x0a        TextColor.removeFormat(editor, format);\x0a      });\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var defaultColorMap = [\x0a      \x27000000\x27,\x0a      \x27Black\x27,\x0a      \x27993300\x27,\x0a      \x27Burnt orange\x27,\x0a      \x27333300\x27,\x0a      \x27Dark olive\x27,\x0a      \x27003300\x27,\x0a      \x27Dark green\x27,\x0a      \x27003366\x27,\x0a      \x27Dark azure\x27,\x0a      \x27000080\x27,\x0a      \x27Navy Blue\x27,\x0a      \x27333399\x27,\x0a      \x27Indigo\x27,\x0a      \x27333333\x27,\x0a      \x27Very dark gray\x27,\x0a      \x27800000\x27,\x0a      \x27Maroon\x27,\x0a      \x27FF6600\x27,\x0a      \x27Orange\x27,\x0a      \x27808000\x27,\x0a      \x27Olive\x27,\x0a      \x27008000\x27,\x0a      \x27Green\x27,\x0a      \x27008080\x27,\x0a      \x27Teal\x27,\x0a      \x270000FF\x27,\x0a      \x27Blue\x27,\x0a      \x27666699\x27,\x0a      \x27Grayish blue\x27,\x0a      \x27808080\x27,\x0a      \x27Gray\x27,\x0a      \x27FF0000\x27,\x0a      \x27Red\x27,\x0a      \x27FF9900\x27,\x0a      \x27Amber\x27,\x0a      \x2799CC00\x27,\x0a      \x27Yellow green\x27,\x0a      \x27339966\x27,\x0a      \x27Sea green\x27,\x0a      \x2733CCCC\x27,\x0a      \x27Turquoise\x27,\x0a      \x273366FF\x27,\x0a      \x27Royal blue\x27,\x0a      \x27800080\x27,\x0a      \x27Purple\x27,\x0a      \x27999999\x27,\x0a      \x27Medium gray\x27,\x0a      \x27FF00FF\x27,\x0a      \x27Magenta\x27,\x0a      \x27FFCC00\x27,\x0a      \x27Gold\x27,\x0a      \x27FFFF00\x27,\x0a      \x27Yellow\x27,\x0a      \x2700FF00\x27,\x0a      \x27Lime\x27,\x0a      \x2700FFFF\x27,\x0a      \x27Aqua\x27,\x0a      \x2700CCFF\x27,\x0a      \x27Sky blue\x27,\x0a      \x27993366\x27,\x0a      \x27Red violet\x27,\x0a      \x27FFFFFF\x27,\x0a      \x27White\x27,\x0a      \x27FF99CC\x27,\x0a      \x27Pink\x27,\x0a      \x27FFCC99\x27,\x0a      \x27Peach\x27,\x0a      \x27FFFF99\x27,\x0a      \x27Light yellow\x27,\x0a      \x27CCFFCC\x27,\x0a      \x27Pale green\x27,\x0a      \x27CCFFFF\x27,\x0a      \x27Pale cyan\x27,\x0a      \x2799CCFF\x27,\x0a      \x27Light sky blue\x27,\x0a      \x27CC99FF\x27,\x0a      \x27Plum\x27\x0a    ];\x0a    var getTextColorMap = function (editor) {\x0a      return editor.getParam(\x27textcolor_map\x27, defaultColorMap);\x0a    };\x0a    var getForeColorMap = function (editor) {\x0a      return editor.getParam(\x27forecolor_map\x27, getTextColorMap(editor));\x0a    };\x0a    var getBackColorMap = function (editor) {\x0a      return editor.getParam(\x27backcolor_map\x27, getTextColorMap(editor));\x0a    };\x0a    var getTextColorRows = function (editor) {\x0a      return editor.getParam(\x27textcolor_rows\x27, 5);\x0a    };\x0a    var getTextColorCols = function (editor) {\x0a      return editor.getParam(\x27textcolor_cols\x27, 8);\x0a    };\x0a    var getForeColorRows = function (editor) {\x0a      return editor.getParam(\x27forecolor_rows\x27, getTextColorRows(editor));\x0a    };\x0a    var getBackColorRows = function (editor) {\x0a      return editor.getParam(\x27backcolor_rows\x27, getTextColorRows(editor));\x0a    };\x0a    var getForeColorCols = function (editor) {\x0a      return editor.getParam(\x27forecolor_cols\x27, getTextColorCols(editor));\x0a    };\x0a    var getBackColorCols = function (editor) {\x0a      return editor.getParam(\x27backcolor_cols\x27, getTextColorCols(editor));\x0a    };\x0a    var getColorPickerCallback = function (editor) {\x0a      return editor.getParam(\x27color_picker_callback\x27, null);\x0a    };\x0a    var hasColorPicker = function (editor) {\x0a      return typeof getColorPickerCallback(editor) === \x27function\x27;\x0a    };\x0a    var Settings = {\x0a      getForeColorMap: getForeColorMap,\x0a      getBackColorMap: getBackColorMap,\x0a      getForeColorRows: getForeColorRows,\x0a      getBackColorRows: getBackColorRows,\x0a      getForeColorCols: getForeColorCols,\x0a      getBackColorCols: getBackColorCols,\x0a      getColorPickerCallback: getColorPickerCallback,\x0a      hasColorPicker: hasColorPicker\x0a    };\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.util.I18n\x27);\x0a\x0a    var getHtml = function (cols, rows, colorMap, hasColorPicker) {\x0a      var colors, color, html, last, x, y, i, count = 0;\x0a      var id = global$1.DOM.uniqueId(\x27mcearia\x27);\x0a      var getColorCellHtml = function (color, title) {\x0a        var isNoColor = color === \x27transparent\x27;\x0a        return \x27\x3ctd class=\x22mce-grid-cell\x27 + (isNoColor ? \x27 mce-colorbtn-trans\x27 : \x27\x27) + \x27\x22\x3e\x27 + \x27\x3cdiv id=\x22\x27 + id + \x27-\x27 + count++ + \x27\x22\x27 + \x27 data-mce-color=\x22\x27 + (color ? color : \x27\x27) + \x27\x22\x27 + \x27 role=\x22option\x22\x27 + \x27 tabIndex=\x22-1\x22\x27 + \x27 style=\x22\x27 + (color ? \x27background-color: \x27 + color : \x27\x27) + \x27\x22\x27 + \x27 title=\x22\x27 + global$3.translate(title) + \x27\x22\x3e\x27 + (isNoColor ? \x27&#215;\x27 : \x27\x27) + \x27\x3c/div\x3e\x27 + \x27\x3c/td\x3e\x27;\x0a      };\x0a      colors = TextColor.mapColors(colorMap);\x0a      colors.push({\x0a        text: global$3.translate(\x27No color\x27),\x0a        color: \x27transparent\x27\x0a      });\x0a      html = \x27\x3ctable class=\x22mce-grid mce-grid-border mce-colorbutton-grid\x22 role=\x22list\x22 cellspacing=\x220\x22\x3e\x3ctbody\x3e\x27;\x0a      last = colors.length - 1;\x0a      for (y = 0; y \x3c rows; y++) {\x0a        html += \x27\x3ctr\x3e\x27;\x0a        for (x = 0; x \x3c cols; x++) {\x0a          i = y * cols + x;\x0a          if (i \x3e last) {\x0a            html += \x27\x3ctd\x3e\x3c/td\x3e\x27;\x0a          } else {\x0a            color = colors[i];\x0a            html += getColorCellHtml(color.color, color.text);\x0a          }\x0a        }\x0a        html += \x27\x3c/tr\x3e\x27;\x0a      }\x0a      if (hasColorPicker) {\x0a        html += \x27\x3ctr\x3e\x27 + \x27\x3ctd colspan=\x22\x27 + cols + \x27\x22 class=\x22mce-custom-color-btn\x22\x3e\x27 + \x27\x3cdiv id=\x22\x27 + id + \x27-c\x22 class=\x22mce-widget mce-btn mce-btn-small mce-btn-flat\x22 \x27 + \x27role=\x22button\x22 tabindex=\x22-1\x22 aria-labelledby=\x22\x27 + id + \x27-c\x22 style=\x22width: 100%\x22\x3e\x27 + \x27\x3cbutton type=\x22button\x22 role=\x22presentation\x22 tabindex=\x22-1\x22\x3e\x27 + global$3.translate(\x27Custom...\x27) + \x27\x3c/button\x3e\x27 + \x27\x3c/div\x3e\x27 + \x27\x3c/td\x3e\x27 + \x27\x3c/tr\x3e\x27;\x0a        html += \x27\x3ctr\x3e\x27;\x0a        for (x = 0; x \x3c cols; x++) {\x0a          html += getColorCellHtml(\x27\x27, \x27Custom color\x27);\x0a        }\x0a        html += \x27\x3c/tr\x3e\x27;\x0a      }\x0a      html += \x27\x3c/tbody\x3e\x3c/table\x3e\x27;\x0a      return html;\x0a    };\x0a    var ColorPickerHtml = { getHtml: getHtml };\x0a\x0a    var setDivColor = function setDivColor(div, value) {\x0a      div.style.background = value;\x0a      div.setAttribute(\x27data-mce-color\x27, value);\x0a    };\x0a    var onButtonClick = function (editor) {\x0a      return function (e) {\x0a        var ctrl = e.control;\x0a        if (ctrl._color) {\x0a          editor.execCommand(\x27mceApplyTextcolor\x27, ctrl.settings.format, ctrl._color);\x0a        } else {\x0a          editor.execCommand(\x27mceRemoveTextcolor\x27, ctrl.settings.format);\x0a        }\x0a      };\x0a    };\x0a    var onPanelClick = function (editor, cols) {\x0a      return function (e) {\x0a        var buttonCtrl = this.parent();\x0a        var value;\x0a        var currentColor = TextColor.getCurrentColor(editor, buttonCtrl.settings.format);\x0a        var selectColor = function (value) {\x0a          editor.execCommand(\x27mceApplyTextcolor\x27, buttonCtrl.settings.format, value);\x0a          buttonCtrl.hidePanel();\x0a          buttonCtrl.color(value);\x0a        };\x0a        var resetColor = function () {\x0a          editor.execCommand(\x27mceRemoveTextcolor\x27, buttonCtrl.settings.format);\x0a          buttonCtrl.hidePanel();\x0a          buttonCtrl.resetColor();\x0a        };\x0a        if (global$1.DOM.getParent(e.target, \x27.mce-custom-color-btn\x27)) {\x0a          buttonCtrl.hidePanel();\x0a          var colorPickerCallback = Settings.getColorPickerCallback(editor);\x0a          colorPickerCallback.call(editor, function (value) {\x0a            var tableElm = buttonCtrl.panel.getEl().getElementsByTagName(\x27table\x27)[0];\x0a            var customColorCells, div, i;\x0a            customColorCells = global$2.map(tableElm.rows[tableElm.rows.length - 1].childNodes, function (elm) {\x0a              return elm.firstChild;\x0a            });\x0a            for (i = 0; i \x3c customColorCells.length; i++) {\x0a              div = customColorCells[i];\x0a              if (!div.getAttribute(\x27data-mce-color\x27)) {\x0a                break;\x0a              }\x0a            }\x0a            if (i === cols) {\x0a              for (i = 0; i \x3c cols - 1; i++) {\x0a                setDivColor(customColorCells[i], customColorCells[i + 1].getAttribute(\x27data-mce-color\x27));\x0a              }\x0a            }\x0a            setDivColor(div, value);\x0a            selectColor(value);\x0a          }, currentColor);\x0a        }\x0a        value = e.target.getAttribute(\x27data-mce-color\x27);\x0a        if (value) {\x0a          if (this.lastId) {\x0a            global$1.DOM.get(this.lastId).setAttribute(\x27aria-selected\x27, \x27false\x27);\x0a          }\x0a          e.target.setAttribute(\x27aria-selected\x27, true);\x0a          this.lastId = e.target.id;\x0a          if (value === \x27transparent\x27) {\x0a            resetColor();\x0a          } else {\x0a            selectColor(value);\x0a          }\x0a        } else if (value !== null) {\x0a          buttonCtrl.hidePanel();\x0a        }\x0a      };\x0a    };\x0a    var renderColorPicker = function (editor, foreColor) {\x0a      return function () {\x0a        var cols = foreColor ? Settings.getForeColorCols(editor) : Settings.getBackColorCols(editor);\x0a        var rows = foreColor ? Settings.getForeColorRows(editor) : Settings.getBackColorRows(editor);\x0a        var colorMap = foreColor ? Settings.getForeColorMap(editor) : Settings.getBackColorMap(editor);\x0a        var hasColorPicker = Settings.hasColorPicker(editor);\x0a        return ColorPickerHtml.getHtml(cols, rows, colorMap, hasColorPicker);\x0a      };\x0a    };\x0a    var register$1 = function (editor) {\x0a      editor.addButton(\x27forecolor\x27, {\x0a        type: \x27colorbutton\x27,\x0a        tooltip: \x27Text color\x27,\x0a        format: \x27forecolor\x27,\x0a        panel: {\x0a          role: \x27application\x27,\x0a          ariaRemember: true,\x0a          html: renderColorPicker(editor, true),\x0a          onclick: onPanelClick(editor, Settings.getForeColorCols(editor))\x0a        },\x0a        onclick: onButtonClick(editor)\x0a      });\x0a      editor.addButton(\x27backcolor\x27, {\x0a        type: \x27colorbutton\x27,\x0a        tooltip: \x27Background color\x27,\x0a        format: \x27hilitecolor\x27,\x0a        panel: {\x0a          role: \x27application\x27,\x0a          ariaRemember: true,\x0a          html: renderColorPicker(editor, false),\x0a          onclick: onPanelClick(editor, Settings.getBackColorCols(editor))\x0a        },\x0a        onclick: onButtonClick(editor)\x0a      });\x0a    };\x0a    var Buttons = { register: register$1 };\x0a\x0a    global.add(\x27textcolor\x27, function (editor) {\x0a      Commands.register(editor);\x0a      Buttons.register(editor);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}());\x0a})();\x0a'}