var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 14:56:46 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Fri, 17 May 2019 04:49:54 GMT\x0aETag: \x225dc9-5890e1d14c080-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-5334/5335\x0aContent-Length: 5335\x0aKeep-Alive: timeout=5, max=69\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a(function () {\x0avar link = (function (domGlobals) {\x0a    \x27use strict\x27;\x0a\x0a    var global = tinymce.util.Tools.resolve(\x27tinymce.PluginManager\x27);\x0a\x0a    var global$1 = tinymce.util.Tools.resolve(\x27tinymce.util.VK\x27);\x0a\x0a    var assumeExternalTargets = function (editorSettings) {\x0a      return typeof editorSettings.link_assume_external_targets === \x27boolean\x27 ? editorSettings.link_assume_external_targets : false;\x0a    };\x0a    var hasContextToolbar = function (editorSettings) {\x0a      return typeof editorSettings.link_context_toolbar === \x27boolean\x27 ? editorSettings.link_context_toolbar : false;\x0a    };\x0a    var getLinkList = function (editorSettings) {\x0a      return editorSettings.link_list;\x0a    };\x0a    var hasDefaultLinkTarget = function (editorSettings) {\x0a      return typeof editorSettings.default_link_target === \x27string\x27;\x0a    };\x0a    var getDefaultLinkTarget = function (editorSettings) {\x0a      return editorSettings.default_link_target;\x0a    };\x0a    var getTargetList = function (editorSettings) {\x0a      return editorSettings.target_list;\x0a    };\x0a    var setTargetList = function (editor, list) {\x0a      editor.settings.target_list = list;\x0a    };\x0a    var shouldShowTargetList = function (editorSettings) {\x0a      return getTargetList(editorSettings) !== false;\x0a    };\x0a    var getRelList = function (editorSettings) {\x0a      return editorSettings.rel_list;\x0a    };\x0a    var hasRelList = function (editorSettings) {\x0a      return getRelList(editorSettings) !== undefined;\x0a    };\x0a    var getLinkClassList = function (editorSettings) {\x0a      return editorSettings.link_class_list;\x0a    };\x0a    var hasLinkClassList = function (editorSettings) {\x0a      return getLinkClassList(editorSettings) !== undefined;\x0a    };\x0a    var shouldShowLinkTitle = function (editorSettings) {\x0a      return editorSettings.link_title !== false;\x0a    };\x0a    var allowUnsafeLinkTarget = function (editorSettings) {\x0a      return typeof editorSettings.allow_unsafe_link_target === \x27boolean\x27 ? editorSettings.allow_unsafe_link_target : false;\x0a    };\x0a    var Settings = {\x0a      assumeExternalTargets: assumeExternalTargets,\x0a      hasContextToolbar: hasContextToolbar,\x0a      getLinkList: getLinkList,\x0a      hasDefaultLinkTarget: hasDefaultLinkTarget,\x0a      getDefaultLinkTarget: getDefaultLinkTarget,\x0a      getTargetList: getTargetList,\x0a      setTargetList: setTargetList,\x0a      shouldShowTargetList: shouldShowTargetList,\x0a      getRelList: getRelList,\x0a      hasRelList: hasRelList,\x0a      getLinkClassList: getLinkClassList,\x0a      hasLinkClassList: hasLinkClassList,\x0a      shouldShowLinkTitle: shouldShowLinkTitle,\x0a      allowUnsafeLinkTarget: allowUnsafeLinkTarget\x0a    };\x0a\x0a    var global$2 = tinymce.util.Tools.resolve(\x27tinymce.dom.DOMUtils\x27);\x0a\x0a    var global$3 = tinymce.util.Tools.resolve(\x27tinymce.Env\x27);\x0a\x0a    var appendClickRemove = function (link, evt) {\x0a      domGlobals.document.body.appendChild(link);\x0a      link.dispatchEvent(evt);\x0a      domGlobals.document.body.removeChild(link);\x0a    };\x0a    var open = function (url) {\x0a      if (!global$3.ie || global$3.ie \x3e 10) {\x0a        var link = domGlobals.document.createElement(\x27a\x27);\x0a        link.target = \x27_blank\x27;\x0a        link.href = url;\x0a        link.rel = \x27noreferrer noopener\x27;\x0a        var evt = domGlobals.document.createEvent(\x27MouseEvents\x27);\x0a        evt.initMouseEvent(\x27click\x27, true, true, domGlobals.window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\x0a        appendClickRemove(link, evt);\x0a      } else {\x0a        var win = domGlobals.window.open(\x27\x27, \x27_blank\x27);\x0a        if (win) {\x0a          win.opener = null;\x0a          var doc = win.document;\x0a          doc.open();\x0a          doc.write(\x27\x3cmeta http-equiv=\x22refresh\x22 content=\x220; url=\x27 + global$2.DOM.encode(url) + \x27\x22\x3e\x27);\x0a          doc.close();\x0a        }\x0a      }\x0a    };\x0a    var OpenUrl = { open: open };\x0a\x0a    var global$4 = tinymce.util.Tools.resolve(\x27tinymce.util.Tools\x27);\x0a\x0a    var toggleTargetRules = function (rel, isUnsafe) {\x0a      var rules = [\x27noopener\x27];\x0a      var newRel = rel ? rel.split(/\x5cs+/) : [];\x0a      var toString = function (rel) {\x0a        return global$4.trim(rel.sort().join(\x27 \x27));\x0a      };\x0a      var addTargetRules = function (rel) {\x0a        rel = removeTargetRules(rel);\x0a        return rel.length ? rel.concat(rules) : rules;\x0a      };\x0a      var removeTargetRules = function (rel) {\x0a        return rel.filter(function (val) {\x0a          return global$4.inArray(rules, val) === -1;\x0a        });\x0a      };\x0a      newRel = isUnsafe ? addTargetRules(newRel) : removeTargetRules(newRel);\x0a      return newRel.length ? toString(newRel) : null;\x0a    };\x0a    var trimCaretContainers = function (text) {\x0a      return text.replace(/\x5cuFEFF/g, \x27\x27);\x0a    };\x0a    var getAnchorElement = function (editor, selectedElm) {\x0a      selectedElm = selectedElm || editor.selection.getNode();\x0a      if (isImageFigure(selectedElm)) {\x0a        return editor.dom.select(\x27a[href]\x27, selectedElm)[0];\x0a      } else {\x0a        return editor.dom.getParent(selectedElm, \x27a[href]\x27);\x0a      }\x0a    };\x0a    var getAnchorText = function (selection, anchorElm) {\x0a      var text = anchorElm ? anchorElm.innerText || anchorElm.textContent : selection.getContent({ format: \x27text\x27 });\x0a      return trimCaretContainers(text);\x0a    };\x0a    var isLink = function (elm) {\x0a      return elm && elm.nodeName === \x27A\x27 && elm.href;\x0a    };\x0a    var hasLinks = function (elements) {\x0a      return global$4.grep(elements, isLink).length \x3e 0;\x0a    };\x0a    var isOnlyTextSelected = function (html) {\x0a      if (/\x3c/.test(html) && (!/^\x3ca [^\x3e]+\x3e[^\x3c]+\x3c\x5c/a\x3e$/.test(html) || html.indexOf(\x27href=\x27) === -1)) {\x0a        return false;\x0a      }\x0a      return true;\x0a    };\x0a    var isImageFigure = function (node) {\x0a      return node && node.nodeName === \x27FIGURE\x27 && /\x5cbimage\x5cb/i.test(node.className);\x0a    };\x0a    var link = function (editor, attachState) {\x0a      return function (data) {\x0a        editor.undoManager.transact(function () {\x0a          var selectedElm = editor.selection.getNode();\x0a          var anchorElm = getAnchorElement(editor, selectedElm);\x0a          var linkAttrs = {\x0a            href: data.href,\x0a            target: data.target ? data.target : null,\x0a            rel: data.rel ? data.rel : null,\x0a            class: data.class ? data.class : null,\x0a            title: data.title ? data.title : null\x0a          };\x0a          if (!Settings.hasRelList(editor.settings) && Settings.allowUnsafeLinkTarget(editor.settings) === false) {\x0a            linkAttrs.rel = toggleTargetRules(linkAttrs.rel, linkAttrs.target === \x27_blank\x27);\x0a          }\x0a          if (data.href === attachState.href) {\x0a            attachState.attach();\x0a            attachState = {};\x0a          }\x0a          if (anchorElm) {\x0a            editor.focus();\x0a            if (data.hasOwnProperty(\x27text\x27)) {\x0a              if (\x27innerText\x27 in anchorElm) {\x0a                anchorElm.innerText = data.text;\x0a              } else {\x0a                anchorElm.textContent = data.text;\x0a              }\x0a            }\x0a            editor.dom.setAttribs(anchorElm, linkAttrs);\x0a            editor.selection.select(anchorElm);\x0a            editor.undoManager.add();\x0a          } else {\x0a            if (isImageFigure(selectedElm)) {\x0a              linkImageFigure(editor, selectedElm, linkAttrs);\x0a            } else if (data.hasOwnProperty(\x27text\x27)) {\x0a              editor.insertContent(editor.dom.createHTML(\x27a\x27, linkAttrs, editor.dom.encode(data.text)));\x0a            } else {\x0a              editor.execCommand(\x27mceInsertLink\x27, false, linkAttrs);\x0a            }\x0a          }\x0a        });\x0a      };\x0a    };\x0a    var unlink = function (editor) {\x0a      return function () {\x0a        editor.undoManager.transact(function () {\x0a          var node = editor.selection.getNode();\x0a          if (isImageFigure(node)) {\x0a            unlinkImageFigure(editor, node);\x0a          } else {\x0a            editor.execCommand(\x27unlink\x27);\x0a          }\x0a        });\x0a      };\x0a    };\x0a    var unlinkImageFigure = function (editor, fig) {\x0a      var a, img;\x0a      img = editor.dom.select(\x27img\x27, fig)[0];\x0a      if (img) {\x0a        a = editor.dom.getParents(img, \x27a[href]\x27, fig)[0];\x0a        if (a) {\x0a          a.parentNode.insertBefore(img, a);\x0a          editor.dom.remove(a);\x0a        }\x0a      }\x0a    };\x0a    var linkImageFigure = function (editor, fig, attrs) {\x0a      var a, img;\x0a      img = editor.dom.select(\x27img\x27, fig)[0];\x0a      if (img) {\x0a        a = editor.dom.create(\x27a\x27, attrs);\x0a        img.parentNode.insertBefore(a, img);\x0a        a.appendChild(img);\x0a      }\x0a    };\x0a    var Utils = {\x0a      link: link,\x0a      unlink: unlink,\x0a      isLink: isLink,\x0a      hasLinks: hasLinks,\x0a      isOnlyTextSelected: isOnlyTextSelected,\x0a      getAnchorElement: getAnchorElement,\x0a      getAnchorText: getAnchorText,\x0a      toggleTargetRules: toggleTargetRules\x0a    };\x0a\x0a    var global$5 = tinymce.util.Tools.resolve(\x27tinymce.util.Delay\x27);\x0a\x0a    var global$6 = tinymce.util.Tools.resolve(\x27tinymce.util.XHR\x27);\x0a\x0a    var attachState = {};\x0a    var createLinkList = function (editor, callback) {\x0a      var linkList = Settings.getLinkList(editor.settings);\x0a      if (typeof linkList === \x27string\x27) {\x0a        global$6.send({\x0a          url: linkList,\x0a          success: function (text) {\x0a            callback(editor, JSON.parse(text));\x0a          }\x0a        });\x0a      } else if (typeof linkList === \x27function\x27) {\x0a        linkList(function (list) {\x0a          callback(editor, list);\x0a        });\x0a      } else {\x0a        callback(editor, linkList);\x0a      }\x0a    };\x0a    var buildListItems = function (inputList, itemCallback, startItems) {\x0a      var appendItems = function (values, output) {\x0a        output = output || [];\x0a        global$4.each(values, function (item) {\x0a          var menuItem = { text: item.text || item.title };\x0a          if (item.menu) {\x0a            menuItem.menu = appendItems(item.menu);\x0a          } else {\x0a            menuItem.value = item.value;\x0a            if (itemCallback) {\x0a              itemCallback(menuItem);\x0a            }\x0a          }\x0a          output.push(menuItem);\x0a        });\x0a        return output;\x0a      };\x0a      return appendItems(inputList, startItems || []);\x0a    };\x0a    var delayedConfirm = function (editor, message, callback) {\x0a      var rng = editor.selection.getRng();\x0a      global$5.setEditorTimeout(editor, function () {\x0a        editor.windowManager.confirm(message, function (state) {\x0a          editor.selection.setRng(rng);\x0a          callback(state);\x0a        });\x0a      });\x0a    };\x0a    var showDialog = function (editor, linkList) {\x0a      var data = {};\x0a      var selection = editor.selection;\x0a      var dom = editor.dom;\x0a      var anchorElm, initialText;\x0a      var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, linkTitleCtrl, value;\x0a      var linkListChangeHandler = function (e) {\x0a        var textCtrl = win.find(\x27#text\x27);\x0a        if (!textCtrl.value() || e.lastControl && textCtrl.value() === e.lastControl.text()) {\x0a          textCtrl.value(e.control.text());\x0a        }\x0a        win.find(\x27#href\x27).value(e.control.value());\x0a      };\x0a      var buildAnchorListControl = function (url) {\x0a        var anchorList = [];\x0a        global$4.each(editor.dom.select(\x27a:not([href])\x27), function (anchor) {\x0a          var id = anchor.name || anchor.id;\x0a          if (id) {\x0a            anchorList.push({\x0a              text: id,\x0a              value: \x27#\x27 + id,\x0a              selected: url.indexOf(\x27#\x27 + id) !== -1\x0a            });\x0a          }\x0a        });\x0a        if (anchorList.length) {\x0a          anchorList.unshift({\x0a            text: \x27None\x27,\x0a            value: \x27\x27\x0a          });\x0a          return {\x0a            name: \x27anchor\x27,\x0a            type: \x27listbox\x27,\x0a            label: \x27Anchors\x27,\x0a            values: anchorList,\x0a            onselect: linkListChangeHandler\x0a          };\x0a        }\x0a      };\x0a      var updateText = function () {\x0a        if (!initialText && onlyText && !data.text) {\x0a          this.parent().parent().find(\x27#text\x27)[0].value(this.value());\x0a        }\x0a      };\x0a      var urlChange = function (e) {\x0a        var meta = e.meta || {};\x0a        if (linkListCtrl) {\x0a          linkListCtrl.value(editor.convertURL(this.value(), \x27href\x27));\x0a        }\x0a        global$4.each(e.meta, function (value, key) {\x0a          var inp = win.find(\x27#\x27 + key);\x0a          if (key === \x27text\x27) {\x0a            if (initialText.length === 0) {\x0a              inp.value(value);\x0a              data.text = value;\x0a            }\x0a          } else {\x0a            inp.value(value);\x0a          }\x0a        });\x0a        if (meta.attach) {\x0a          attachState = {\x0a            href: this.value(),\x0a            attach: meta.attach\x0a          };\x0a        }\x0a        if (!meta.text) {\x0a          updateText.call(this);\x0a        }\x0a      };\x0a      var onBeforeCall = function (e) {\x0a        e.meta = win.toJSON();\x0a      };\x0a      onlyText = Utils.isOnlyTextSelected(selection.getContent());\x0a      anchorElm = Utils.getAnchorElement(editor);\x0a      data.text = initialText = Utils.getAnchorText(editor.selection, anchorElm);\x0a      data.href = anchorElm ? dom.getAttrib(anchorElm, \x27href\x27) : \x27\x27;\x0a      if (anchorElm) {\x0a        data.target = dom.getAttrib(anchorElm, \x27target\x27);\x0a      } else if (Settings.hasDefaultLinkTarget(editor.settings)) {\x0a        data.target = Settings.getDefaultLinkTarget(editor.settings);\x0a      }\x0a      if (value = dom.getAttrib(anchorElm, \x27rel\x27)) {\x0a        data.rel = value;\x0a      }\x0a      if (value = dom.getAttrib(anchorElm, \x27class\x27)) {\x0a        data.class = value;\x0a      }\x0a      if (value = dom.getAttrib(anchorElm, \x27title\x27)) {\x0a        data.title = value;\x0a      }\x0a      if (onlyText) {\x0a        textListCtrl = {\x0a          name: \x27text\x27,\x0a          type: \x27textbox\x27,\x0a          size: 40,\x0a          label: \x27Text to display\x27,\x0a          onchange: function () {\x0a            data.text = this.value();\x0a          }\x0a        };\x0a      }\x0a      if (linkList) {\x0a        linkListCtrl = {\x0a          type: \x27listbox\x27,\x0a          label: \x27Link list\x27,\x0a          values: buildListItems(linkList, function (item) {\x0a            item.value = editor.convertURL(item.value || item.url, \x27href\x27);\x0a          }, [{\x0a              text: \x27None\x27,\x0a              value: \x27\x27\x0a            }]),\x0a          onselect: linkListChangeHandler,\x0a          value: editor.convertURL(data.href, \x27href\x27),\x0a          onPostRender: function () {\x0a            linkListCtrl = this;\x0a          }\x0a        };\x0a      }\x0a      if (Settings.shouldShowTargetList(editor.settings)) {\x0a        if (Settings.getTargetList(editor.settings) === undefined) {\x0a          Settings.setTargetList(editor, [\x0a            {\x0a              text: \x27None\x27,\x0a              value: \x27\x27\x0a            },\x0a            {\x0a              text: \x27New window\x27,\x0a              value: \x27_blank\x27\x0a            }\x0a          ]);\x0a        }\x0a        targetListCtrl = {\x0a          name: \x27target\x27,\x0a          type: \x27listbox\x27,\x0a          label: \x27Target\x27,\x0a          values: buildListItems(Settings.getTargetList(editor.settings))\x0a        };\x0a      }\x0a      if (Settings.hasRelList(editor.settings)) {\x0a        relListCtrl = {\x0a          name: \x27rel\x27,\x0a          type: \x27listbox\x27,\x0a          label: \x27Rel\x27,\x0a          values: buildListItems(Settings.getRelList(editor.settings), function (item) {\x0a            if (Settings.allowUnsafeLinkTarget(editor.settings) === false) {\x0a              item.value = Utils.toggleTargetRules(item.value, data.target === \x27_blank\x27);\x0a            }\x0a          })\x0a        };\x0a      }\x0a      if (Settings.hasLinkClassList(editor.settings)) {\x0a        classListCtrl = {\x0a          name: \x27class\x27,\x0a          type: \x27listbox\x27,\x0a          label: \x27Class\x27,\x0a          values: buildListItems(Settings.getLinkClassList(editor.settings), function (item) {\x0a            if (item.value) {\x0a              item.textStyle = function () {\x0a                return editor.formatter.getCssText({\x0a                  inline: \x27a\x27,\x0a                  classes: [item.value]\x0a                });\x0a              };\x0a            }\x0a          })\x0a        };\x0a      }\x0a      if (Settings.shouldShowLinkTitle(editor.settings)) {\x0a        linkTitleCtrl = {\x0a          name: \x27title\x27,\x0a          type: \x27textbox\x27,\x0a          label: \x27Title\x27,\x0a          value: data.title\x0a        };\x0a      }\x0a      win = editor.windowManager.open({\x0a        title: \x27Insert link\x27,\x0a        data: data,\x0a        body: [\x0a          {\x0a            name: \x27href\x27,\x0a            type: \x27filepicker\x27,\x0a            filetype: \x27file\x27,\x0a            size: 40,\x0a            autofocus: true,\x0a            label: \x27Url\x27,\x0a            onchange: urlChange,\x0a            onkeyup: updateText,\x0a            onpaste: updateText,\x0a            onbeforecall: onBeforeCall\x0a          },\x0a          textListCtrl,\x0a          linkTitleCtrl,\x0a          buildAnchorListControl(data.href),\x0a          linkListCtrl,\x0a          relListCtrl,\x0a          targetListCtrl,\x0a          classListCtrl\x0a        ],\x0a        onSubmit: function (e) {\x0a          var assumeExternalTargets = Settings.assumeExternalTargets(editor.settings);\x0a          var insertLink = Utils.link(editor, attachState);\x0a          var removeLink = Utils.unlink(editor);\x0a          var resultData = global$4.extend({}, data, e.data);\x0a          var href = resultData.href;\x0a          if (!href) {\x0a            removeLink();\x0a            return;\x0a          }\x0a          if (!onlyText || resultData.text === initialText) {\x0a            delete resultData.text;\x0a          }\x0a          if (href.indexOf(\x27@\x27) \x3e 0 && href.indexOf(\x27//\x27) === -1 && href.indexOf(\x27mailto:\x27) === -1) {\x0a            delayedConfirm(editor, \x27The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?\x27, function (state) {\x0a              if (state) {\x0a                resultData.href = \x27mailto:\x27 + href;\x0a              }\x0a              insertLink(resultData);\x0a            });\x0a            return;\x0a          }\x0a          if (assumeExternalTargets === true && !/^\x5cw+:/i.test(href) || assumeExternalTargets === false && /^\x5cs*www[\x5c.|\x5cd\x5c.]/i.test(href)) {\x0a            delayedConfirm(editor, \x27The URL you entered seems to be an external link. Do you want to add the required http:// prefix?\x27, function (state) {\x0a              if (state) {\x0a                resultData.href = \x27http://\x27 + href;\x0a              }\x0a              insertLink(resultData);\x0a            });\x0a            return;\x0a          }\x0a          insertLink(resultData);\x0a        }\x0a      });\x0a    };\x0a    var open$1 = function (editor) {\x0a      createLinkList(editor, showDialog);\x0a    };\x0a    var Dialog = { open: open$1 };\x0a\x0a    var getLink = function (editor, elm) {\x0a      return editor.dom.getParent(elm, \x27a[href]\x27);\x0a    };\x0a    var getSelectedLink = function (editor) {\x0a      return getLink(editor, editor.selection.getStart());\x0a    };\x0a    var getHref = function (elm) {\x0a      var href = elm.getAttribute(\x27data-mce-href\x27);\x0a      return href ? href : elm.getAttribute(\x27href\x27);\x0a    };\x0a    var isContextMenuVisible = function (editor) {\x0a      var contextmenu = editor.plugins.contextmenu;\x0a      return contextmenu ? contextmenu.isContextMenuVisible() : false;\x0a    };\x0a    var hasOnlyAltModifier = function (e) {\x0a      return e.altKey === true && e.shiftKey === false && e.ctrlKey === false && e.metaKey === false;\x0a    };\x0a    var gotoLink = function (editor, a) {\x0a      if (a) {\x0a        var href = getHref(a);\x0a        if (/^#/.test(href)) {\x0a          var targetEl = editor.$(href);\x0a          if (targetEl.length) {\x0a            editor.selection.scrollIntoView(targetEl[0], true);\x0a          }\x0a        } else {\x0a          OpenUrl.open(a.href);\x0a        }\x0a      }\x0a    };\x0a    var openDialog = function (editor) {\x0a      return function () {\x0a        Dialog.open(editor);\x0a      };\x0a    };\x0a    var gotoSelectedLink = function (editor) {\x0a      return function () {\x0a        gotoLink(editor, getSelectedLink(editor));\x0a      };\x0a    };\x0a    var leftClickedOnAHref = function (editor) {\x0a      return function (elm) {\x0a        var sel, rng, node;\x0a        if (Settings.hasContextToolbar(editor.settings) && !isContextMenuVisible(editor) && Utils.isLink(elm)) {\x0a          sel = editor.selection;\x0a          rng = sel.getRng();\x0a          node = rng.startContainer;\x0a          if (node.nodeType === 3 && sel.isCollapsed() && rng.startOffset \x3e 0 && rng.startOffset \x3c node.data.length) {\x0a            return true;\x0a          }\x0a        }\x0a        return false;\x0a      };\x0a    };\x0a    var setupGotoLinks = function (editor) {\x0a      editor.on(\x27click\x27, function (e) {\x0a        var link = getLink(editor, e.target);\x0a        if (link && global$1.metaKeyPressed(e)) {\x0a          e.preventDefault();\x0a          gotoLink(editor, link);\x0a        }\x0a      });\x0a      editor.on(\x27keydown\x27, function (e) {\x0a        var link = getSelectedLink(editor);\x0a        if (link && e.keyCode === 13 && hasOnlyAltModifier(e)) {\x0a          e.preventDefault();\x0a          gotoLink(editor, link);\x0a        }\x0a      });\x0a    };\x0a    var toggleActiveState = function (editor) {\x0a      return function () {\x0a        var self = this;\x0a        editor.on(\x27nodechange\x27, function (e) {\x0a          self.active(!editor.readonly && !!Utils.getAnchorElement(editor, e.element));\x0a        });\x0a      };\x0a    };\x0a    var toggleViewLinkState = function (editor) {\x0a      return function () {\x0a        var self = this;\x0a        var toggleVisibility = function (e) {\x0a          if (Utils.hasLinks(e.parents)) {\x0a            self.show();\x0a          } else {\x0a            self.hide();\x0a          }\x0a        };\x0a        if (!Utils.hasLinks(editor.dom.getParents(editor.selection.getStart()))) {\x0a          self.hide();\x0a        }\x0a        editor.on(\x27nodechange\x27, toggleVisibility);\x0a        self.on(\x27remove\x27, function () {\x0a          editor.off(\x27nodechange\x27, toggleVisibility);\x0a        });\x0a      };\x0a    };\x0a    var Actions = {\x0a      openDialog: openDialog,\x0a      gotoSelectedLink: gotoSelectedLink,\x0a      leftClickedOnAHref: leftClickedOnAHref,\x0a      setupGotoLinks: setupGotoLinks,\x0a      toggleActiveState: toggleActiveState,\x0a      toggleViewLinkState: toggleViewLinkState\x0a    };\x0a\x0a    var register = function (editor) {\x0a      editor.addCommand(\x27mceLink\x27, Actions.openDialog(editor));\x0a    };\x0a    var Commands = { register: register };\x0a\x0a    var setup = function (editor) {\x0a      editor.addShortcut(\x27Meta+K\x27, \x27\x27, Actions.openDialog(editor));\x0a    };\x0a    var Keyboard = { setup: setup };\x0a\x0a    var setupButtons = function (editor) {\x0a      editor.addButton(\x27link\x27, {\x0a        active: false,\x0a        icon: \x27link\x27,\x0a        tooltip: \x27Insert/edit link\x27,\x0a        onclick: Actions.openDialog(editor),\x0a        onpostrender: Actions.toggleActiveState(editor)\x0a      });\x0a      editor.addButton(\x27unlink\x27, {\x0a        active: false,\x0a        icon: \x27unlink\x27,\x0a        tooltip: \x27Remove link\x27,\x0a        onclick: Utils.unlink(editor),\x0a        onpostrender: Actions.toggleActiveState(editor)\x0a      });\x0a      if (editor.addContextToolbar) {\x0a        editor.addButton(\x27openlink\x27, {\x0a          icon: \x27newtab\x27,\x0a          tooltip: \x27Open link\x27,\x0a          onclick: Actions.gotoSelectedLink(editor)\x0a        });\x0a      }\x0a    };\x0a    var setupMenuItems = function (editor) {\x0a      editor.addMenuItem(\x27openlink\x27, {\x0a        text: \x27Open link\x27,\x0a        icon: \x27newtab\x27,\x0a        onclick: Actions.gotoSelectedLink(editor),\x0a        onPostRender: Actions.toggleViewLinkState(editor),\x0a        prependToContext: true\x0a      });\x0a      editor.addMenuItem(\x27link\x27, {\x0a        icon: \x27link\x27,\x0a        text: \x27Link\x27,\x0a        shortcut: \x27Meta+K\x27,\x0a        onclick: Actions.openDialog(editor),\x0a        stateSelector: \x27a[href]\x27,\x0a        context: \x27insert\x27,\x0a        prependToContext: true\x0a      });\x0a      editor.addMenuItem(\x27unlink\x27, {\x0a        icon: \x27unlink\x27,\x0a        text: \x27Remove link\x27,\x0a        onclick: Utils.unlink(editor),\x0a        stateSelector: \x27a[href]\x27\x0a      });\x0a    };\x0a    var setupContextToolbars = function (editor) {\x0a      if (editor.addContextToolbar) {\x0a        editor.addContextToolbar(Actions.leftClickedOnAHref(editor), \x27openlink | link unlink\x27);\x0a      }\x0a    };\x0a    var Controls = {\x0a      setupButtons: setupButtons,\x0a      setupMenuItems: setupMenuItems,\x0a      setupContextToolbars: setupContextToolbars\x0a    };\x0a\x0a    global.add(\x27link\x27, function (editor) {\x0a      Controls.setupButtons(editor);\x0a      Controls.setupMenuItems(editor);\x0a      Controls.setupContextToolbars(editor);\x0a      Actions.setupGotoLinks(editor);\x0a      Commands.register(editor);\x0a      Keyboard.setup(editor);\x0a    });\x0a    function Plugin () {\x0a    }\x0a\x0a    return Plugin;\x0a\x0a}(window));\x0a})();\x0a'}