var res = {'data':'HTTP/1.1 200 Partial Content\x0aDate: Sun, 20 Sep 2020 15:11:59 GMT\x0aServer: Apache/2.4.29 (Ubuntu)\x0aLast-Modified: Thu, 28 Jun 2018 02:30:15 GMT\x0aETag: \x223ab2-56faa82e93bc0-gzip\x22\x0aAccept-Ranges: bytes\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aContent-Range: bytes 0-4159/4160\x0aContent-Length: 4160\x0aKeep-Alive: timeout=5, max=52\x0aConnection: Keep-Alive\x0aContent-Type: application/javascript\x0a\x0a/**\x0a * @output wp-includes/js/customize-preview-nav-menus.js\x0a */\x0a\x0a/* global _wpCustomizePreviewNavMenusExports */\x0a\x0a/** @namespace wp.customize.navMenusPreview */\x0awp.customize.navMenusPreview = wp.customize.MenusCustomizerPreview = ( function( $, _, wp, api ) {\x0a\x09\x27use strict\x27;\x0a\x0a\x09var self = {\x0a\x09\x09data: {\x0a\x09\x09\x09navMenuInstanceArgs: {}\x0a\x09\x09}\x0a\x09};\x0a\x09if ( \x27undefined\x27 !== typeof _wpCustomizePreviewNavMenusExports ) {\x0a\x09\x09_.extend( self.data, _wpCustomizePreviewNavMenusExports );\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Initialize nav menus preview.\x0a\x09 */\x0a\x09self.init = function() {\x0a\x09\x09var self = this, synced = false;\x0a\x0a\x09\x09/*\x0a\x09\x09 * Keep track of whether we synced to determine whether or not bindSettingListener\x0a\x09\x09 * should also initially fire the listener. This initial firing needs to wait until\x0a\x09\x09 * after all of the settings have been synced from the pane in order to prevent\x0a\x09\x09 * an infinite selective fallback-refresh. Note that this sync handler will be\x0a\x09\x09 * added after the sync handler in customize-preview.js, so it will be triggered\x0a\x09\x09 * after all of the settings are added.\x0a\x09\x09 */\x0a\x09\x09api.preview.bind( \x27sync\x27, function() {\x0a\x09\x09\x09synced = true;\x0a\x09\x09} );\x0a\x0a\x09\x09if ( api.selectiveRefresh ) {\x0a\x09\x09\x09// Listen for changes to settings related to nav menus.\x0a\x09\x09\x09api.each( function( setting ) {\x0a\x09\x09\x09\x09self.bindSettingListener( setting );\x0a\x09\x09\x09} );\x0a\x09\x09\x09api.bind( \x27add\x27, function( setting ) {\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Handle case where an invalid nav menu item (one for which its associated object has been deleted)\x0a\x09\x09\x09\x09 * is synced from the controls into the preview. Since invalid nav menu items are filtered out from\x0a\x09\x09\x09\x09 * being exported to the frontend by the _is_valid_nav_menu_item filter in wp_get_nav_menu_items(),\x0a\x09\x09\x09\x09 * the customizer controls will have a nav_menu_item setting where the preview will have none, and\x0a\x09\x09\x09\x09 * this can trigger an infinite fallback refresh when the nav menu item lacks any valid items.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09if ( setting.get() && ! setting.get()._invalid ) {\x0a\x09\x09\x09\x09\x09self.bindSettingListener( setting, { fire: synced } );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09\x09api.bind( \x27remove\x27, function( setting ) {\x0a\x09\x09\x09\x09self.unbindSettingListener( setting );\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09/*\x0a\x09\x09\x09 * Ensure that wp_nav_menu() instances nested inside of other partials\x0a\x09\x09\x09 * will be recognized as being present on the page.\x0a\x09\x09\x09 */\x0a\x09\x09\x09api.selectiveRefresh.bind( \x27render-partials-response\x27, function( response ) {\x0a\x09\x09\x09\x09if ( response.nav_menu_instance_args ) {\x0a\x09\x09\x09\x09\x09_.extend( self.data.navMenuInstanceArgs, response.nav_menu_instance_args );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09}\x0a\x0a\x09\x09api.preview.bind( \x27active\x27, function() {\x0a\x09\x09\x09self.highlightControls();\x0a\x09\x09} );\x0a\x09};\x0a\x0a\x09if ( api.selectiveRefresh ) {\x0a\x0a\x09\x09/**\x0a\x09\x09 * Partial representing an invocation of wp_nav_menu().\x0a\x09\x09 *\x0a\x09\x09 * @memberOf wp.customize.navMenusPreview\x0a\x09\x09 * @alias wp.customize.navMenusPreview.NavMenuInstancePartial\x0a\x09\x09 *\x0a\x09\x09 * @class\x0a\x09\x09 * @augments wp.customize.selectiveRefresh.Partial\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 */\x0a\x09\x09self.NavMenuInstancePartial = api.selectiveRefresh.Partial.extend(/** @lends wp.customize.navMenusPreview.NavMenuInstancePartial.prototype */{\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Constructor.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 4.5.0\x0a\x09\x09\x09 * @param {string} id - Partial ID.\x0a\x09\x09\x09 * @param {Object} options\x0a\x09\x09\x09 * @param {Object} options.params\x0a\x09\x09\x09 * @param {Object} options.params.navMenuArgs\x0a\x09\x09\x09 * @param {string} options.params.navMenuArgs.args_hmac\x0a\x09\x09\x09 * @param {string} [options.params.navMenuArgs.theme_location]\x0a\x09\x09\x09 * @param {number} [options.params.navMenuArgs.menu]\x0a\x09\x09\x09 * @param {object} [options.constructingContainerContext]\x0a\x09\x09\x09 */\x0a\x09\x09\x09initialize: function( id, options ) {\x0a\x09\x09\x09\x09var partial = this, matches, argsHmac;\x0a\x09\x09\x09\x09matches = id.match( /^nav_menu_instance\x5c[([0-9a-f]{32})]$/ );\x0a\x09\x09\x09\x09if ( ! matches ) {\x0a\x09\x09\x09\x09\x09throw new Error( \x27Illegal id for nav_menu_instance partial. The key corresponds with the args HMAC.\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09argsHmac = matches[1];\x0a\x0a\x09\x09\x09\x09options = options || {};\x0a\x09\x09\x09\x09options.params = _.extend(\x0a\x09\x09\x09\x09\x09{\x0a\x09\x09\x09\x09\x09\x09selector: \x27[data-customize-partial-id=\x22\x27 + id + \x27\x22]\x27,\x0a\x09\x09\x09\x09\x09\x09navMenuArgs: options.constructingContainerContext || {},\x0a\x09\x09\x09\x09\x09\x09containerInclusive: true\x0a\x09\x09\x09\x09\x09},\x0a\x09\x09\x09\x09\x09options.params || {}\x0a\x09\x09\x09\x09);\x0a\x09\x09\x09\x09api.selectiveRefresh.Partial.prototype.initialize.call( partial, id, options );\x0a\x0a\x09\x09\x09\x09if ( ! _.isObject( partial.params.navMenuArgs ) ) {\x0a\x09\x09\x09\x09\x09throw new Error( \x27Missing navMenuArgs\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if ( partial.params.navMenuArgs.args_hmac !== argsHmac ) {\x0a\x09\x09\x09\x09\x09throw new Error( \x27args_hmac mismatch with id\x27 );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09},\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Return whether the setting is related to this partial.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 4.5.0\x0a\x09\x09\x09 * @param {wp.customize.Value|string} setting  - Object or ID.\x0a\x09\x09\x09 * @param {number|object|false|null}  newValue - New value, or null if the setting was just removed.\x0a\x09\x09\x09 * @param {number|object|false|null}  oldValue - Old value, or null if the setting was just added.\x0a\x09\x09\x09 * @returns {boolean}\x0a\x09\x09\x09 */\x0a\x09\x09\x09isRelatedSetting: function( setting, newValue, oldValue ) {\x0a\x09\x09\x09\x09var partial = this, navMenuLocationSetting, navMenuId, isNavMenuItemSetting, _newValue, _oldValue, urlParser;\x0a\x09\x09\x09\x09if ( _.isString( setting ) ) {\x0a\x09\x09\x09\x09\x09setting = api( setting );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09/*\x0a\x09\x09\x09\x09 * Prevent nav_menu_item changes only containing type_label differences triggering a refresh.\x0a\x09\x09\x09\x09 * These settings in the preview do not include type_label property, and so if one of these\x0a\x09\x09\x09\x09 * nav_menu_item settings is dirty, after a refresh the nav menu instance would do a selective\x0a\x09\x09\x09\x09 * refresh immediately because the setting from the pane would have the type_label whereas\x0a\x09\x09\x09\x09 * the setting in the preview would not, thus triggering a change event. The following\x0a\x09\x09\x09\x09 * condition short-circuits this unnecessary selective refresh and also prevents an infinite\x0a\x09\x09\x09\x09 * loop in the case where a nav_menu_instance partial had done a fallback refresh.\x0a\x09\x09\x09\x09 * @todo Nav menu item settings should not include a type_label property to begin with.\x0a\x09\x09\x09\x09 */\x0a\x09\x09\x09\x09isNavMenuItemSetting = /^nav_menu_item\x5c[/.test( setting.id );\x0a\x09\x09\x09\x09if ( isNavMenuItemSetting && _.isObject( newValue ) && _.isObject( oldValue ) ) {\x0a\x09\x09\x09\x09\x09_newValue = _.clone( newValue );\x0a\x09\x09\x09\x09\x09_oldValue = _.clone( oldValue );\x0a\x09\x09\x09\x09\x09delete _newValue.type_label;\x0a\x09\x09\x09\x09\x09delete _oldValue.type_label;\x0a\x0a\x09\x09\x09\x09\x09// Normalize URL scheme when parent frame is HTTPS to prevent selective refresh upon initial page load.\x0a\x09\x09\x09\x09\x09if ( \x27https\x27 === api.preview.scheme.get() ) {\x0a\x09\x09\x09\x09\x09\x09urlParser = document.createElement( \x27a\x27 );\x0a\x09\x09\x09\x09\x09\x09urlParser.href = _newValue.url;\x0a\x09\x09\x09\x09\x09\x09urlParser.protocol = \x27https:\x27;\x0a\x09\x09\x09\x09\x09\x09_newValue.url = urlParser.href;\x0a\x09\x09\x09\x09\x09\x09urlParser.href = _oldValue.url;\x0a\x09\x09\x09\x09\x09\x09urlParser.protocol = \x27https:\x27;\x0a\x09\x09\x09\x09\x09\x09_oldValue.url = urlParser.href;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09// Prevent original_title differences from causing refreshes if title is present.\x0a\x09\x09\x09\x09\x09if ( newValue.title ) {\x0a\x09\x09\x09\x09\x09\x09delete _oldValue.original_title;\x0a\x09\x09\x09\x09\x09\x09delete _newValue.original_title;\x0a\x09\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09\x09if ( _.isEqual( _oldValue, _newValue ) ) {\x0a\x09\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( partial.params.navMenuArgs.theme_location ) {\x0a\x09\x09\x09\x09\x09if ( \x27nav_menu_locations[\x27 + partial.params.navMenuArgs.theme_location + \x27]\x27 === setting.id ) {\x0a\x09\x09\x09\x09\x09\x09return true;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09navMenuLocationSetting = api( \x27nav_menu_locations[\x27 + partial.params.navMenuArgs.theme_location + \x27]\x27 );\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09navMenuId = partial.params.navMenuArgs.menu;\x0a\x09\x09\x09\x09if ( ! navMenuId && navMenuLocationSetting ) {\x0a\x09\x09\x09\x09\x09navMenuId = navMenuLocationSetting();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( ! navMenuId ) {\x0a\x09\x09\x09\x09\x09return false;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09return (\x0a\x09\x09\x09\x09\x09( \x27nav_menu[\x27 + navMenuId + \x27]\x27 === setting.id ) ||\x0a\x09\x09\x09\x09\x09( isNavMenuItemSetting && (\x0a\x09\x09\x09\x09\x09\x09( newValue && newValue.nav_menu_term_id === navMenuId ) ||\x0a\x09\x09\x09\x09\x09\x09( oldValue && oldValue.nav_menu_term_id === navMenuId )\x0a\x09\x09\x09\x09\x09) )\x0a\x09\x09\x09\x09);\x0a\x09\x09\x09},\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Make sure that partial fallback behavior is invoked if there is no associated menu.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @since 4.5.0\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @returns {Promise}\x0a\x09\x09\x09 */\x0a\x09\x09\x09refresh: function() {\x0a\x09\x09\x09\x09var partial = this, menuId, deferred = $.Deferred();\x0a\x0a\x09\x09\x09\x09// Make sure the fallback behavior is invoked when the partial is no longer associated with a menu.\x0a\x09\x09\x09\x09if ( _.isNumber( partial.params.navMenuArgs.menu ) ) {\x0a\x09\x09\x09\x09\x09menuId = partial.params.navMenuArgs.menu;\x0a\x09\x09\x09\x09} else if ( partial.params.navMenuArgs.theme_location && api.has( \x27nav_menu_locations[\x27 + partial.params.navMenuArgs.theme_location + \x27]\x27 ) ) {\x0a\x09\x09\x09\x09\x09menuId = api( \x27nav_menu_locations[\x27 + partial.params.navMenuArgs.theme_location + \x27]\x27 ).get();\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if ( ! menuId ) {\x0a\x09\x09\x09\x09\x09partial.fallback();\x0a\x09\x09\x09\x09\x09deferred.reject();\x0a\x09\x09\x09\x09\x09return deferred.promise();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09return api.selectiveRefresh.Partial.prototype.refresh.call( partial );\x0a\x09\x09\x09},\x0a\x0a\x09\x09\x09/**\x0a\x09\x09\x09 * Render content.\x0a\x09\x09\x09 *\x0a\x09\x09\x09 * @inheritdoc\x0a\x09\x09\x09 * @param {wp.customize.selectiveRefresh.Placement} placement\x0a\x09\x09\x09 */\x0a\x09\x09\x09renderContent: function( placement ) {\x0a\x09\x09\x09\x09var partial = this, previousContainer = placement.container;\x0a\x0a\x09\x09\x09\x09// Do fallback behavior to refresh preview if menu is now empty.\x0a\x09\x09\x09\x09if ( \x27\x27 === placement.addedContent ) {\x0a\x09\x09\x09\x09\x09placement.partial.fallback();\x0a\x09\x09\x09\x09}\x0a\x0a\x09\x09\x09\x09if ( api.selectiveRefresh.Partial.prototype.renderContent.call( partial, placement ) ) {\x0a\x0a\x09\x09\x09\x09\x09// Trigger deprecated event.\x0a\x09\x09\x09\x09\x09$( document ).trigger( \x27customize-preview-menu-refreshed\x27, [ {\x0a\x09\x09\x09\x09\x09\x09instanceNumber: null, // @deprecated\x0a\x09\x09\x09\x09\x09\x09wpNavArgs: placement.context, // @deprecated\x0a\x09\x09\x09\x09\x09\x09wpNavMenuArgs: placement.context,\x0a\x09\x09\x09\x09\x09\x09oldContainer: previousContainer,\x0a\x09\x09\x09\x09\x09\x09newContainer: placement.container\x0a\x09\x09\x09\x09\x09} ] );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x0a\x09\x09api.selectiveRefresh.partialConstructor.nav_menu_instance = self.NavMenuInstancePartial;\x0a\x0a\x09\x09/**\x0a\x09\x09 * Request full refresh if there are nav menu instances that lack partials which also match the supplied args.\x0a\x09\x09 *\x0a\x09\x09 * @param {object} navMenuInstanceArgs\x0a\x09\x09 */\x0a\x09\x09self.handleUnplacedNavMenuInstances = function( navMenuInstanceArgs ) {\x0a\x09\x09\x09var unplacedNavMenuInstances;\x0a\x09\x09\x09unplacedNavMenuInstances = _.filter( _.values( self.data.navMenuInstanceArgs ), function( args ) {\x0a\x09\x09\x09\x09return ! api.selectiveRefresh.partial.has( \x27nav_menu_instance[\x27 + args.args_hmac + \x27]\x27 );\x0a\x09\x09\x09} );\x0a\x09\x09\x09if ( _.findWhere( unplacedNavMenuInstances, navMenuInstanceArgs ) ) {\x0a\x09\x09\x09\x09api.selectiveRefresh.requestFullRefresh();\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x09\x09\x09return false;\x0a\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Add change listener for a nav_menu[], nav_menu_item[], or nav_menu_locations[] setting.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {wp.customize.Value} setting\x0a\x09\x09 * @param {object}             [options]\x0a\x09\x09 * @param {boolean}            options.fire Whether to invoke the callback after binding.\x0a\x09\x09 *                                          This is used when a dynamic setting is added.\x0a\x09\x09 * @return {boolean} Whether the setting was bound.\x0a\x09\x09 */\x0a\x09\x09self.bindSettingListener = function( setting, options ) {\x0a\x09\x09\x09var matches;\x0a\x09\x09\x09options = options || {};\x0a\x0a\x09\x09\x09matches = setting.id.match( /^nav_menu\x5c[(-?\x5cd+)]$/ );\x0a\x09\x09\x09if ( matches ) {\x0a\x09\x09\x09\x09setting._navMenuId = parseInt( matches[1], 10 );\x0a\x09\x09\x09\x09setting.bind( this.onChangeNavMenuSetting );\x0a\x09\x09\x09\x09if ( options.fire ) {\x0a\x09\x09\x09\x09\x09this.onChangeNavMenuSetting.call( setting, setting(), false );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09matches = setting.id.match( /^nav_menu_item\x5c[(-?\x5cd+)]$/ );\x0a\x09\x09\x09if ( matches ) {\x0a\x09\x09\x09\x09setting._navMenuItemId = parseInt( matches[1], 10 );\x0a\x09\x09\x09\x09setting.bind( this.onChangeNavMenuItemSetting );\x0a\x09\x09\x09\x09if ( options.fire ) {\x0a\x09\x09\x09\x09\x09this.onChangeNavMenuItemSetting.call( setting, setting(), false );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09matches = setting.id.match( /^nav_menu_locations\x5c[(.+?)]/ );\x0a\x09\x09\x09if ( matches ) {\x0a\x09\x09\x09\x09setting._navMenuThemeLocation = matches[1];\x0a\x09\x09\x09\x09setting.bind( this.onChangeNavMenuLocationsSetting );\x0a\x09\x09\x09\x09if ( options.fire ) {\x0a\x09\x09\x09\x09\x09this.onChangeNavMenuLocationsSetting.call( setting, setting(), false );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09return true;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09return false;\x0a\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Remove change listeners for nav_menu[], nav_menu_item[], or nav_menu_locations[] setting.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {wp.customize.Value} setting\x0a\x09\x09 */\x0a\x09\x09self.unbindSettingListener = function( setting ) {\x0a\x09\x09\x09setting.unbind( this.onChangeNavMenuSetting );\x0a\x09\x09\x09setting.unbind( this.onChangeNavMenuItemSetting );\x0a\x09\x09\x09setting.unbind( this.onChangeNavMenuLocationsSetting );\x0a\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Handle change for nav_menu[] setting for nav menu instances lacking partials.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 *\x0a\x09\x09 * @this {wp.customize.Value}\x0a\x09\x09 */\x0a\x09\x09self.onChangeNavMenuSetting = function() {\x0a\x09\x09\x09var setting = this;\x0a\x0a\x09\x09\x09self.handleUnplacedNavMenuInstances( {\x0a\x09\x09\x09\x09menu: setting._navMenuId\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09// Ensure all nav menu instances with a theme_location assigned to this menu are handled.\x0a\x09\x09\x09api.each( function( otherSetting ) {\x0a\x09\x09\x09\x09if ( ! otherSetting._navMenuThemeLocation ) {\x0a\x09\x09\x09\x09\x09return;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if ( setting._navMenuId === otherSetting() ) {\x0a\x09\x09\x09\x09\x09self.handleUnplacedNavMenuInstances( {\x0a\x09\x09\x09\x09\x09\x09theme_location: otherSetting._navMenuThemeLocation\x0a\x09\x09\x09\x09\x09} );\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09} );\x0a\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Handle change for nav_menu_item[] setting for nav menu instances lacking partials.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 *\x0a\x09\x09 * @param {object} newItem New value for nav_menu_item[] setting.\x0a\x09\x09 * @param {object} oldItem Old value for nav_menu_item[] setting.\x0a\x09\x09 * @this {wp.customize.Value}\x0a\x09\x09 */\x0a\x09\x09self.onChangeNavMenuItemSetting = function( newItem, oldItem ) {\x0a\x09\x09\x09var item = newItem || oldItem, navMenuSetting;\x0a\x09\x09\x09navMenuSetting = api( \x27nav_menu[\x27 + String( item.nav_menu_term_id ) + \x27]\x27 );\x0a\x09\x09\x09if ( navMenuSetting ) {\x0a\x09\x09\x09\x09self.onChangeNavMenuSetting.call( navMenuSetting );\x0a\x09\x09\x09}\x0a\x09\x09};\x0a\x0a\x09\x09/**\x0a\x09\x09 * Handle change for nav_menu_locations[] setting for nav menu instances lacking partials.\x0a\x09\x09 *\x0a\x09\x09 * @since 4.5.0\x0a\x09\x09 *\x0a\x09\x09 * @this {wp.customize.Value}\x0a\x09\x09 */\x0a\x09\x09self.onChangeNavMenuLocationsSetting = function() {\x0a\x09\x09\x09var setting = this, hasNavMenuInstance;\x0a\x09\x09\x09self.handleUnplacedNavMenuInstances( {\x0a\x09\x09\x09\x09theme_location: setting._navMenuThemeLocation\x0a\x09\x09\x09} );\x0a\x0a\x09\x09\x09// If there are no wp_nav_menu() instances that refer to the theme location, do full refresh.\x0a\x09\x09\x09hasNavMenuInstance = !! _.findWhere( _.values( self.data.navMenuInstanceArgs ), {\x0a\x09\x09\x09\x09theme_location: setting._navMenuThemeLocation\x0a\x09\x09\x09} );\x0a\x09\x09\x09if ( ! hasNavMenuInstance ) {\x0a\x09\x09\x09\x09api.selectiveRefresh.requestFullRefresh();\x0a\x09\x09\x09}\x0a\x09\x09};\x0a\x09}\x0a\x0a\x09/**\x0a\x09 * Connect nav menu items with their corresponding controls in the pane.\x0a\x09 *\x0a\x09 * Setup shift-click on nav menu items which are more granular than the nav menu partial itself.\x0a\x09 * Also this applies even if a nav menu is not partial-refreshable.\x0a\x09 *\x0a\x09 * @since 4.5.0\x0a\x09 */\x0a\x09self.highlightControls = function() {\x0a\x09\x09var selector = \x27.menu-item\x27;\x0a\x0a\x09\x09// Skip adding highlights if not in the customizer preview iframe.\x0a\x09\x09if ( ! api.settings.channel ) {\x0a\x09\x09\x09return;\x0a\x09\x09}\x0a\x0a\x09\x09// Focus on the menu item control when shift+clicking the menu item.\x0a\x09\x09$( document ).on( \x27click\x27, selector, function( e ) {\x0a\x09\x09\x09var navMenuItemParts;\x0a\x09\x09\x09if ( ! e.shiftKey ) {\x0a\x09\x09\x09\x09return;\x0a\x09\x09\x09}\x0a\x0a\x09\x09\x09navMenuItemParts = $( this ).attr( \x27class\x27 ).match( /(?:^|\x5cs)menu-item-(-?\x5cd+)(?:\x5cs|$)/ );\x0a\x09\x09\x09if ( navMenuItemParts ) {\x0a\x09\x09\x09\x09e.preventDefault();\x0a\x09\x09\x09\x09e.stopPropagation(); // Make sure a sub-nav menu item will get focused instead of parent items.\x0a\x09\x09\x09\x09api.preview.send( \x27focus-nav-menu-item-control\x27, parseInt( navMenuItemParts[1], 10 ) );\x0a\x09\x09\x09}\x0a\x09\x09});\x0a\x09};\x0a\x0a\x09api.bind( \x27preview-ready\x27, function() {\x0a\x09\x09self.init();\x0a\x09} );\x0a\x0a\x09return self;\x0a\x0a}( jQuery, _, wp, wp.customize ) );\x0a'}